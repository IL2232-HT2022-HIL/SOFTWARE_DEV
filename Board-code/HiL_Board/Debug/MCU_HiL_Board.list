
MCU_HiL_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011dbc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08011fbc  08011fbc  00021fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801214c  0801214c  00030334  2**0
                  CONTENTS
  4 .ARM          00000008  0801214c  0801214c  0002214c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012154  08012154  00030334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012154  08012154  00022154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012158  08012158  00022158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0801215c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001f4  08012350  000301f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000294  080123f0  00030294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00006f48  20000334  08012490  00030334  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000727c  08012490  0003727c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY
 14 .debug_info   00037055  00000000  00000000  00030362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006a48  00000000  00000000  000673b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002790  00000000  00000000  0006de00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000024c8  00000000  00000000  00070590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000a301  00000000  00000000  00072a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00033689  00000000  00000000  0007cd59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001191f7  00000000  00000000  000b03e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001c95d9  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000aa58  00000000  00000000  001c962c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000334 	.word	0x20000334
 800021c:	00000000 	.word	0x00000000
 8000220:	08011fa4 	.word	0x08011fa4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000338 	.word	0x20000338
 800023c:	08011fa4 	.word	0x08011fa4

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000548:	f3bf 8f4f 	dsb	sy
}
 800054c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800054e:	f3bf 8f6f 	isb	sy
}
 8000552:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000554:	4b0d      	ldr	r3, [pc, #52]	; (800058c <SCB_EnableICache+0x48>)
 8000556:	2200      	movs	r2, #0
 8000558:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800055c:	f3bf 8f4f 	dsb	sy
}
 8000560:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000562:	f3bf 8f6f 	isb	sy
}
 8000566:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <SCB_EnableICache+0x48>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	4a07      	ldr	r2, [pc, #28]	; (800058c <SCB_EnableICache+0x48>)
 800056e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000572:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000574:	f3bf 8f4f 	dsb	sy
}
 8000578:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800057a:	f3bf 8f6f 	isb	sy
}
 800057e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	e000ed00 	.word	0xe000ed00

08000590 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000596:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <SCB_EnableDCache+0x84>)
 8000598:	2200      	movs	r2, #0
 800059a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800059e:	f3bf 8f4f 	dsb	sy
}
 80005a2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005a4:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <SCB_EnableDCache+0x84>)
 80005a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005aa:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	0b5b      	lsrs	r3, r3, #13
 80005b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005b4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	08db      	lsrs	r3, r3, #3
 80005ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005be:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	015a      	lsls	r2, r3, #5
 80005c4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005c8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005ca:	68ba      	ldr	r2, [r7, #8]
 80005cc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005ce:	4911      	ldr	r1, [pc, #68]	; (8000614 <SCB_EnableDCache+0x84>)
 80005d0:	4313      	orrs	r3, r2
 80005d2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	1e5a      	subs	r2, r3, #1
 80005da:	60ba      	str	r2, [r7, #8]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d1ef      	bne.n	80005c0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	1e5a      	subs	r2, r3, #1
 80005e4:	60fa      	str	r2, [r7, #12]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d1e5      	bne.n	80005b6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005ea:	f3bf 8f4f 	dsb	sy
}
 80005ee:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <SCB_EnableDCache+0x84>)
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	4a07      	ldr	r2, [pc, #28]	; (8000614 <SCB_EnableDCache+0x84>)
 80005f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005fa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005fc:	f3bf 8f4f 	dsb	sy
}
 8000600:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000602:	f3bf 8f6f 	isb	sy
}
 8000606:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800061c:	f7ff ff92 	bl	8000544 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000620:	f7ff ffb6 	bl	8000590 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f001 fa10 	bl	8001a48 <HAL_Init>

  /* USER CODE BEGIN Init */
  memset(temp_light_state, 0, sizeof(temp_light_state));		// Set all to 0.
 8000628:	2203      	movs	r2, #3
 800062a:	2100      	movs	r1, #0
 800062c:	4824      	ldr	r0, [pc, #144]	; (80006c0 <main+0xa8>)
 800062e:	f011 fb4b 	bl	8011cc8 <memset>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000632:	f000 f863 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000636:	f000 fb37 	bl	8000ca8 <MX_GPIO_Init>

  MX_DMA_Init();
 800063a:	f000 fb03 	bl	8000c44 <MX_DMA_Init>

  MX_CAN1_Init();
 800063e:	f000 f8cd 	bl	80007dc <MX_CAN1_Init>
  MX_DAC_Init();
 8000642:	f000 f8ff 	bl	8000844 <MX_DAC_Init>
  MX_ETH_Init();
 8000646:	f000 f927 	bl	8000898 <MX_ETH_Init>
  MX_I2C1_Init();
 800064a:	f000 f973 	bl	8000934 <MX_I2C1_Init>
  MX_SPI1_Init();
 800064e:	f000 f9b1 	bl	80009b4 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000652:	f000 f9e9 	bl	8000a28 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000656:	f000 fa21 	bl	8000a9c <MX_TIM1_Init>
  MX_UART7_Init();
 800065a:	f000 fac3 	bl	8000be4 <MX_UART7_Init>
  //	So whenever a change has been done the .ioc-file and code has been generated,
  //    the MX_DMA_Init();  n e e d s  t o  b e  m o v e d !
  //
  // ************************************************

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800065e:	2100      	movs	r1, #0
 8000660:	4818      	ldr	r0, [pc, #96]	; (80006c4 <main+0xac>)
 8000662:	f001 fc4b 	bl	8001efc <HAL_DAC_Start>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart7, uart_rx_buffer, HIL_UART_BUFFER_SIZE);
 8000666:	2280      	movs	r2, #128	; 0x80
 8000668:	4917      	ldr	r1, [pc, #92]	; (80006c8 <main+0xb0>)
 800066a:	4818      	ldr	r0, [pc, #96]	; (80006cc <main+0xb4>)
 800066c:	f009 f828 	bl	80096c0 <HAL_UARTEx_ReceiveToIdle_DMA>
//  initialise_monitor_handles();		//Enables the use of printf-statements. Use for debug.

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000670:	f00d f832 	bl	800d6d8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of LightOnSem */
  LightOnSemHandle = osSemaphoreNew(1, 1, &LightOnSem_attributes);
 8000674:	4a16      	ldr	r2, [pc, #88]	; (80006d0 <main+0xb8>)
 8000676:	2101      	movs	r1, #1
 8000678:	2001      	movs	r0, #1
 800067a:	f00d f96b 	bl	800d954 <osSemaphoreNew>
 800067e:	4603      	mov	r3, r0
 8000680:	4a14      	ldr	r2, [pc, #80]	; (80006d4 <main+0xbc>)
 8000682:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  //Initialize the user defined message queues. E.g. USB RX.
  HiL_Init_MSGQ();
 8000684:	f00a fcbc 	bl	800b000 <HiL_Init_MSGQ>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_controller */
  Task_controllerHandle = osThreadNew(StartTask_controller, NULL, &Task_controller_attributes);
 8000688:	4a13      	ldr	r2, [pc, #76]	; (80006d8 <main+0xc0>)
 800068a:	2100      	movs	r1, #0
 800068c:	4813      	ldr	r0, [pc, #76]	; (80006dc <main+0xc4>)
 800068e:	f00d f88d 	bl	800d7ac <osThreadNew>
 8000692:	4603      	mov	r3, r0
 8000694:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <main+0xc8>)
 8000696:	6013      	str	r3, [r2, #0]

  /* creation of Task_SHT20 */
  Task_SHT20Handle = osThreadNew(StartTask_SHT20, NULL, &Task_SHT20_attributes);
 8000698:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <main+0xcc>)
 800069a:	2100      	movs	r1, #0
 800069c:	4812      	ldr	r0, [pc, #72]	; (80006e8 <main+0xd0>)
 800069e:	f00d f885 	bl	800d7ac <osThreadNew>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a11      	ldr	r2, [pc, #68]	; (80006ec <main+0xd4>)
 80006a6:	6013      	str	r3, [r2, #0]

  /* creation of Task_74HC595D */
  Task_74HC595DHandle = osThreadNew(StartTask_74HC595D, NULL, &Task_74HC595D_attributes);
 80006a8:	4a11      	ldr	r2, [pc, #68]	; (80006f0 <main+0xd8>)
 80006aa:	2100      	movs	r1, #0
 80006ac:	4811      	ldr	r0, [pc, #68]	; (80006f4 <main+0xdc>)
 80006ae:	f00d f87d 	bl	800d7ac <osThreadNew>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4a10      	ldr	r2, [pc, #64]	; (80006f8 <main+0xe0>)
 80006b6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006b8:	f00d f842 	bl	800d740 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <main+0xa4>
 80006be:	bf00      	nop
 80006c0:	2000078c 	.word	0x2000078c
 80006c4:	200003b0 	.word	0x200003b0
 80006c8:	20000790 	.word	0x20000790
 80006cc:	2000063c 	.word	0x2000063c
 80006d0:	080120bc 	.word	0x080120bc
 80006d4:	20000730 	.word	0x20000730
 80006d8:	08012050 	.word	0x08012050
 80006dc:	08000f71 	.word	0x08000f71
 80006e0:	20000724 	.word	0x20000724
 80006e4:	08012074 	.word	0x08012074
 80006e8:	08000fdd 	.word	0x08000fdd
 80006ec:	20000728 	.word	0x20000728
 80006f0:	08012098 	.word	0x08012098
 80006f4:	08000ff1 	.word	0x08000ff1
 80006f8:	2000072c 	.word	0x2000072c

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	; 0x50
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	2234      	movs	r2, #52	; 0x34
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f011 fadc 	bl	8011cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000720:	4b2c      	ldr	r3, [pc, #176]	; (80007d4 <SystemClock_Config+0xd8>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	4a2b      	ldr	r2, [pc, #172]	; (80007d4 <SystemClock_Config+0xd8>)
 8000726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072a:	6413      	str	r3, [r2, #64]	; 0x40
 800072c:	4b29      	ldr	r3, [pc, #164]	; (80007d4 <SystemClock_Config+0xd8>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000738:	4b27      	ldr	r3, [pc, #156]	; (80007d8 <SystemClock_Config+0xdc>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000740:	4a25      	ldr	r2, [pc, #148]	; (80007d8 <SystemClock_Config+0xdc>)
 8000742:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <SystemClock_Config+0xdc>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000754:	2301      	movs	r3, #1
 8000756:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000758:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800075c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075e:	2302      	movs	r3, #2
 8000760:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000762:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000766:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000768:	2304      	movs	r3, #4
 800076a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800076c:	2360      	movs	r3, #96	; 0x60
 800076e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000770:	2302      	movs	r3, #2
 8000772:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000774:	2304      	movs	r3, #4
 8000776:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000778:	2302      	movs	r3, #2
 800077a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077c:	f107 031c 	add.w	r3, r7, #28
 8000780:	4618      	mov	r0, r3
 8000782:	f004 fa45 	bl	8004c10 <HAL_RCC_OscConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800078c:	f000 fc72 	bl	8001074 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000790:	f004 f9ee 	bl	8004b70 <HAL_PWREx_EnableOverDrive>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800079a:	f000 fc6b 	bl	8001074 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079e:	230f      	movs	r3, #15
 80007a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a2:	2302      	movs	r3, #2
 80007a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	2103      	movs	r1, #3
 80007ba:	4618      	mov	r0, r3
 80007bc:	f004 fcd6 	bl	800516c <HAL_RCC_ClockConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0xce>
  {
    Error_Handler();
 80007c6:	f000 fc55 	bl	8001074 <Error_Handler>
  }
}
 80007ca:	bf00      	nop
 80007cc:	3750      	adds	r7, #80	; 0x50
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007e0:	4b16      	ldr	r3, [pc, #88]	; (800083c <MX_CAN1_Init+0x60>)
 80007e2:	4a17      	ldr	r2, [pc, #92]	; (8000840 <MX_CAN1_Init+0x64>)
 80007e4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <MX_CAN1_Init+0x60>)
 80007e8:	2210      	movs	r2, #16
 80007ea:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_CAN1_Init+0x60>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007f2:	4b12      	ldr	r3, [pc, #72]	; (800083c <MX_CAN1_Init+0x60>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80007f8:	4b10      	ldr	r3, [pc, #64]	; (800083c <MX_CAN1_Init+0x60>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_CAN1_Init+0x60>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000804:	4b0d      	ldr	r3, [pc, #52]	; (800083c <MX_CAN1_Init+0x60>)
 8000806:	2200      	movs	r2, #0
 8000808:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_CAN1_Init+0x60>)
 800080c:	2200      	movs	r2, #0
 800080e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000810:	4b0a      	ldr	r3, [pc, #40]	; (800083c <MX_CAN1_Init+0x60>)
 8000812:	2200      	movs	r2, #0
 8000814:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_CAN1_Init+0x60>)
 8000818:	2200      	movs	r2, #0
 800081a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800081c:	4b07      	ldr	r3, [pc, #28]	; (800083c <MX_CAN1_Init+0x60>)
 800081e:	2200      	movs	r2, #0
 8000820:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_CAN1_Init+0x60>)
 8000824:	2200      	movs	r2, #0
 8000826:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000828:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_CAN1_Init+0x60>)
 800082a:	f001 f967 	bl	8001afc <HAL_CAN_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000834:	f000 fc1e 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000388 	.word	0x20000388
 8000840:	40006400 	.word	0x40006400

08000844 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800084a:	463b      	mov	r3, r7
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_DAC_Init+0x4c>)
 8000854:	4a0f      	ldr	r2, [pc, #60]	; (8000894 <MX_DAC_Init+0x50>)
 8000856:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000858:	480d      	ldr	r0, [pc, #52]	; (8000890 <MX_DAC_Init+0x4c>)
 800085a:	f001 fb2d 	bl	8001eb8 <HAL_DAC_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000864:	f000 fc06 	bl	8001074 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000868:	2300      	movs	r3, #0
 800086a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800086c:	2300      	movs	r3, #0
 800086e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000870:	463b      	mov	r3, r7
 8000872:	2200      	movs	r2, #0
 8000874:	4619      	mov	r1, r3
 8000876:	4806      	ldr	r0, [pc, #24]	; (8000890 <MX_DAC_Init+0x4c>)
 8000878:	f001 fc1b 	bl	80020b2 <HAL_DAC_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000882:	f000 fbf7 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200003b0 	.word	0x200003b0
 8000894:	40007400 	.word	0x40007400

08000898 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800089c:	4b1f      	ldr	r3, [pc, #124]	; (800091c <MX_ETH_Init+0x84>)
 800089e:	4a20      	ldr	r2, [pc, #128]	; (8000920 <MX_ETH_Init+0x88>)
 80008a0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008a2:	4b20      	ldr	r3, [pc, #128]	; (8000924 <MX_ETH_Init+0x8c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008a8:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <MX_ETH_Init+0x8c>)
 80008aa:	2280      	movs	r2, #128	; 0x80
 80008ac:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008ae:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <MX_ETH_Init+0x8c>)
 80008b0:	22e1      	movs	r2, #225	; 0xe1
 80008b2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008b4:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <MX_ETH_Init+0x8c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008ba:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <MX_ETH_Init+0x8c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008c0:	4b18      	ldr	r3, [pc, #96]	; (8000924 <MX_ETH_Init+0x8c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <MX_ETH_Init+0x84>)
 80008c8:	4a16      	ldr	r2, [pc, #88]	; (8000924 <MX_ETH_Init+0x8c>)
 80008ca:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008cc:	4b13      	ldr	r3, [pc, #76]	; (800091c <MX_ETH_Init+0x84>)
 80008ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008d2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_ETH_Init+0x84>)
 80008d6:	4a14      	ldr	r2, [pc, #80]	; (8000928 <MX_ETH_Init+0x90>)
 80008d8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <MX_ETH_Init+0x84>)
 80008dc:	4a13      	ldr	r2, [pc, #76]	; (800092c <MX_ETH_Init+0x94>)
 80008de:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_ETH_Init+0x84>)
 80008e2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008e6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008e8:	480c      	ldr	r0, [pc, #48]	; (800091c <MX_ETH_Init+0x84>)
 80008ea:	f002 f845 	bl	8002978 <HAL_ETH_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80008f4:	f000 fbbe 	bl	8001074 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008f8:	2238      	movs	r2, #56	; 0x38
 80008fa:	2100      	movs	r1, #0
 80008fc:	480c      	ldr	r0, [pc, #48]	; (8000930 <MX_ETH_Init+0x98>)
 80008fe:	f011 f9e3 	bl	8011cc8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <MX_ETH_Init+0x98>)
 8000904:	2221      	movs	r2, #33	; 0x21
 8000906:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_ETH_Init+0x98>)
 800090a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800090e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000910:	4b07      	ldr	r3, [pc, #28]	; (8000930 <MX_ETH_Init+0x98>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200003c4 	.word	0x200003c4
 8000920:	40028000 	.word	0x40028000
 8000924:	20000810 	.word	0x20000810
 8000928:	20000294 	.word	0x20000294
 800092c:	200001f4 	.word	0x200001f4
 8000930:	20000350 	.word	0x20000350

08000934 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000938:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <MX_I2C1_Init+0x74>)
 800093a:	4a1c      	ldr	r2, [pc, #112]	; (80009ac <MX_I2C1_Init+0x78>)
 800093c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800093e:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <MX_I2C1_Init+0x74>)
 8000940:	4a1b      	ldr	r2, [pc, #108]	; (80009b0 <MX_I2C1_Init+0x7c>)
 8000942:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000944:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <MX_I2C1_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800094a:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <MX_I2C1_Init+0x74>)
 800094c:	2201      	movs	r2, #1
 800094e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000950:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <MX_I2C1_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000956:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_I2C1_Init+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <MX_I2C1_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_I2C1_Init+0x74>)
 8000964:	2200      	movs	r2, #0
 8000966:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_I2C1_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800096e:	480e      	ldr	r0, [pc, #56]	; (80009a8 <MX_I2C1_Init+0x74>)
 8000970:	f002 fd1e 	bl	80033b0 <HAL_I2C_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800097a:	f000 fb7b 	bl	8001074 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800097e:	2100      	movs	r1, #0
 8000980:	4809      	ldr	r0, [pc, #36]	; (80009a8 <MX_I2C1_Init+0x74>)
 8000982:	f002 fda5 	bl	80034d0 <HAL_I2CEx_ConfigAnalogFilter>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800098c:	f000 fb72 	bl	8001074 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000990:	2100      	movs	r1, #0
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_I2C1_Init+0x74>)
 8000994:	f002 fde7 	bl	8003566 <HAL_I2CEx_ConfigDigitalFilter>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800099e:	f000 fb69 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000474 	.word	0x20000474
 80009ac:	40005400 	.word	0x40005400
 80009b0:	20303e5d 	.word	0x20303e5d

080009b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009b8:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <MX_SPI1_Init+0x6c>)
 80009ba:	4a1a      	ldr	r2, [pc, #104]	; (8000a24 <MX_SPI1_Init+0x70>)
 80009bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_SPI1_Init+0x6c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80009c4:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <MX_SPI1_Init+0x6c>)
 80009c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009cc:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_SPI1_Init+0x6c>)
 80009ce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80009d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_SPI1_Init+0x6c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_SPI1_Init+0x6c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_SPI1_Init+0x6c>)
 80009e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009e8:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <MX_SPI1_Init+0x6c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_SPI1_Init+0x6c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <MX_SPI1_Init+0x6c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_SPI1_Init+0x6c>)
 80009fc:	2207      	movs	r2, #7
 80009fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a00:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <MX_SPI1_Init+0x6c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_SPI1_Init+0x6c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <MX_SPI1_Init+0x6c>)
 8000a0e:	f005 fa2d 	bl	8005e6c <HAL_SPI_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_SPI1_Init+0x68>
  {
    Error_Handler();
 8000a18:	f000 fb2c 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	200004c8 	.word	0x200004c8
 8000a24:	40013000 	.word	0x40013000

08000a28 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a2c:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <MX_SPI3_Init+0x6c>)
 8000a2e:	4a1a      	ldr	r2, [pc, #104]	; (8000a98 <MX_SPI3_Init+0x70>)
 8000a30:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000a32:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <MX_SPI3_Init+0x6c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000a38:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <MX_SPI3_Init+0x6c>)
 8000a3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a3e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_SPI3_Init+0x6c>)
 8000a42:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a46:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <MX_SPI3_Init+0x6c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_SPI3_Init+0x6c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_SPI3_Init+0x6c>)
 8000a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a5a:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a5c:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <MX_SPI3_Init+0x6c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_SPI3_Init+0x6c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a68:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <MX_SPI3_Init+0x6c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_SPI3_Init+0x6c>)
 8000a70:	2207      	movs	r2, #7
 8000a72:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <MX_SPI3_Init+0x6c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_SPI3_Init+0x6c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_SPI3_Init+0x6c>)
 8000a82:	f005 f9f3 	bl	8005e6c <HAL_SPI_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_SPI3_Init+0x68>
  {
    Error_Handler();
 8000a8c:	f000 faf2 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	2000052c 	.word	0x2000052c
 8000a98:	40003c00 	.word	0x40003c00

08000a9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b090      	sub	sp, #64	; 0x40
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aa2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ace:	463b      	mov	r3, r7
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ad8:	4b40      	ldr	r3, [pc, #256]	; (8000bdc <MX_TIM1_Init+0x140>)
 8000ada:	4a41      	ldr	r2, [pc, #260]	; (8000be0 <MX_TIM1_Init+0x144>)
 8000adc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ade:	4b3f      	ldr	r3, [pc, #252]	; (8000bdc <MX_TIM1_Init+0x140>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae4:	4b3d      	ldr	r3, [pc, #244]	; (8000bdc <MX_TIM1_Init+0x140>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000aea:	4b3c      	ldr	r3, [pc, #240]	; (8000bdc <MX_TIM1_Init+0x140>)
 8000aec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000af0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af2:	4b3a      	ldr	r3, [pc, #232]	; (8000bdc <MX_TIM1_Init+0x140>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000af8:	4b38      	ldr	r3, [pc, #224]	; (8000bdc <MX_TIM1_Init+0x140>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afe:	4b37      	ldr	r3, [pc, #220]	; (8000bdc <MX_TIM1_Init+0x140>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b04:	4835      	ldr	r0, [pc, #212]	; (8000bdc <MX_TIM1_Init+0x140>)
 8000b06:	f006 f853 	bl	8006bb0 <HAL_TIM_Base_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000b10:	f000 fab0 	bl	8001074 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b18:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b1e:	4619      	mov	r1, r3
 8000b20:	482e      	ldr	r0, [pc, #184]	; (8000bdc <MX_TIM1_Init+0x140>)
 8000b22:	f006 feb7 	bl	8007894 <HAL_TIM_ConfigClockSource>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000b2c:	f000 faa2 	bl	8001074 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000b30:	482a      	ldr	r0, [pc, #168]	; (8000bdc <MX_TIM1_Init+0x140>)
 8000b32:	f006 f90d 	bl	8006d50 <HAL_TIM_IC_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000b3c:	f000 fa9a 	bl	8001074 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000b40:	2304      	movs	r3, #4
 8000b42:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000b44:	2350      	movs	r3, #80	; 0x50
 8000b46:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4820      	ldr	r0, [pc, #128]	; (8000bdc <MX_TIM1_Init+0x140>)
 8000b5c:	f006 ff64 	bl	8007a28 <HAL_TIM_SlaveConfigSynchro>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000b66:	f000 fa85 	bl	8001074 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	2200      	movs	r2, #0
 8000b80:	4619      	mov	r1, r3
 8000b82:	4816      	ldr	r0, [pc, #88]	; (8000bdc <MX_TIM1_Init+0x140>)
 8000b84:	f006 fde9 	bl	800775a <HAL_TIM_IC_ConfigChannel>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000b8e:	f000 fa71 	bl	8001074 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000b92:	2302      	movs	r3, #2
 8000b94:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000b96:	2302      	movs	r3, #2
 8000b98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	2204      	movs	r2, #4
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	480e      	ldr	r0, [pc, #56]	; (8000bdc <MX_TIM1_Init+0x140>)
 8000ba4:	f006 fdd9 	bl	800775a <HAL_TIM_IC_ConfigChannel>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000bae:	f000 fa61 	bl	8001074 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bbe:	463b      	mov	r3, r7
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_TIM1_Init+0x140>)
 8000bc4:	f007 faf2 	bl	80081ac <HAL_TIMEx_MasterConfigSynchronization>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8000bce:	f000 fa51 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3740      	adds	r7, #64	; 0x40
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200005f0 	.word	0x200005f0
 8000be0:	40010000 	.word	0x40010000

08000be4 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <MX_UART7_Init+0x58>)
 8000bea:	4a15      	ldr	r2, [pc, #84]	; (8000c40 <MX_UART7_Init+0x5c>)
 8000bec:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <MX_UART7_Init+0x58>)
 8000bf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bf4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <MX_UART7_Init+0x58>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <MX_UART7_Init+0x58>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <MX_UART7_Init+0x58>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <MX_UART7_Init+0x58>)
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <MX_UART7_Init+0x58>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c14:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <MX_UART7_Init+0x58>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <MX_UART7_Init+0x58>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <MX_UART7_Init+0x58>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000c26:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_UART7_Init+0x58>)
 8000c28:	f007 fb6c 	bl	8008304 <HAL_UART_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000c32:	f000 fa1f 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2000063c 	.word	0x2000063c
 8000c40:	40007800 	.word	0x40007800

08000c44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <MX_DMA_Init+0x60>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a15      	ldr	r2, [pc, #84]	; (8000ca4 <MX_DMA_Init+0x60>)
 8000c50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <MX_DMA_Init+0x60>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <MX_DMA_Init+0x60>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a0f      	ldr	r2, [pc, #60]	; (8000ca4 <MX_DMA_Init+0x60>)
 8000c68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <MX_DMA_Init+0x60>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2105      	movs	r1, #5
 8000c7e:	200e      	movs	r0, #14
 8000c80:	f001 f8f0 	bl	8001e64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000c84:	200e      	movs	r0, #14
 8000c86:	f001 f909 	bl	8001e9c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2105      	movs	r1, #5
 8000c8e:	2038      	movs	r0, #56	; 0x38
 8000c90:	f001 f8e8 	bl	8001e64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c94:	2038      	movs	r0, #56	; 0x38
 8000c96:	f001 f901 	bl	8001e9c <HAL_NVIC_EnableIRQ>

}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40023800 	.word	0x40023800

08000ca8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08e      	sub	sp, #56	; 0x38
 8000cac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cbe:	4ba4      	ldr	r3, [pc, #656]	; (8000f50 <MX_GPIO_Init+0x2a8>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4aa3      	ldr	r2, [pc, #652]	; (8000f50 <MX_GPIO_Init+0x2a8>)
 8000cc4:	f043 0310 	orr.w	r3, r3, #16
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4ba1      	ldr	r3, [pc, #644]	; (8000f50 <MX_GPIO_Init+0x2a8>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0310 	and.w	r3, r3, #16
 8000cd2:	623b      	str	r3, [r7, #32]
 8000cd4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd6:	4b9e      	ldr	r3, [pc, #632]	; (8000f50 <MX_GPIO_Init+0x2a8>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a9d      	ldr	r2, [pc, #628]	; (8000f50 <MX_GPIO_Init+0x2a8>)
 8000cdc:	f043 0304 	orr.w	r3, r3, #4
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b9b      	ldr	r3, [pc, #620]	; (8000f50 <MX_GPIO_Init+0x2a8>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0304 	and.w	r3, r3, #4
 8000cea:	61fb      	str	r3, [r7, #28]
 8000cec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cee:	4b98      	ldr	r3, [pc, #608]	; (8000f50 <MX_GPIO_Init+0x2a8>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a97      	ldr	r2, [pc, #604]	; (8000f50 <MX_GPIO_Init+0x2a8>)
 8000cf4:	f043 0320 	orr.w	r3, r3, #32
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b95      	ldr	r3, [pc, #596]	; (8000f50 <MX_GPIO_Init+0x2a8>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0320 	and.w	r3, r3, #32
 8000d02:	61bb      	str	r3, [r7, #24]
 8000d04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d06:	4b92      	ldr	r3, [pc, #584]	; (8000f50 <MX_GPIO_Init+0x2a8>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a91      	ldr	r2, [pc, #580]	; (8000f50 <MX_GPIO_Init+0x2a8>)
 8000d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b8f      	ldr	r3, [pc, #572]	; (8000f50 <MX_GPIO_Init+0x2a8>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d1a:	617b      	str	r3, [r7, #20]
 8000d1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b8c      	ldr	r3, [pc, #560]	; (8000f50 <MX_GPIO_Init+0x2a8>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a8b      	ldr	r2, [pc, #556]	; (8000f50 <MX_GPIO_Init+0x2a8>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b89      	ldr	r3, [pc, #548]	; (8000f50 <MX_GPIO_Init+0x2a8>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d36:	4b86      	ldr	r3, [pc, #536]	; (8000f50 <MX_GPIO_Init+0x2a8>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a85      	ldr	r2, [pc, #532]	; (8000f50 <MX_GPIO_Init+0x2a8>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b83      	ldr	r3, [pc, #524]	; (8000f50 <MX_GPIO_Init+0x2a8>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d4e:	4b80      	ldr	r3, [pc, #512]	; (8000f50 <MX_GPIO_Init+0x2a8>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a7f      	ldr	r2, [pc, #508]	; (8000f50 <MX_GPIO_Init+0x2a8>)
 8000d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b7d      	ldr	r3, [pc, #500]	; (8000f50 <MX_GPIO_Init+0x2a8>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d66:	4b7a      	ldr	r3, [pc, #488]	; (8000f50 <MX_GPIO_Init+0x2a8>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a79      	ldr	r2, [pc, #484]	; (8000f50 <MX_GPIO_Init+0x2a8>)
 8000d6c:	f043 0308 	orr.w	r3, r3, #8
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b77      	ldr	r3, [pc, #476]	; (8000f50 <MX_GPIO_Init+0x2a8>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0308 	and.w	r3, r3, #8
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HiL_TL2_Car_GPIO_Port, HiL_TL2_Car_Pin, GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2180      	movs	r1, #128	; 0x80
 8000d82:	4874      	ldr	r0, [pc, #464]	; (8000f54 <MX_GPIO_Init+0x2ac>)
 8000d84:	f002 fae2 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|HiL_LIS2DW12TR_Int1_Pin|HiL_TL3_Car_Pin, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f248 4120 	movw	r1, #33824	; 0x8420
 8000d8e:	4872      	ldr	r0, [pc, #456]	; (8000f58 <MX_GPIO_Init+0x2b0>)
 8000d90:	f002 fadc 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HiL_SW5_Pin|HiL_SW8_Pin|HiL_SW6_Pin|HiL_SW7_Pin, GPIO_PIN_SET);
 8000d94:	2201      	movs	r2, #1
 8000d96:	f24c 4110 	movw	r1, #50192	; 0xc410
 8000d9a:	4870      	ldr	r0, [pc, #448]	; (8000f5c <MX_GPIO_Init+0x2b4>)
 8000d9c:	f002 fad6 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HiL_button3_B_Pin|HiL_button3_A_Pin, GPIO_PIN_SET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	210c      	movs	r1, #12
 8000da4:	486e      	ldr	r0, [pc, #440]	; (8000f60 <MX_GPIO_Init+0x2b8>)
 8000da6:	f002 fad1 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HiL_TL1_Car_GPIO_Port, HiL_TL1_Car_Pin, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000db0:	486c      	ldr	r0, [pc, #432]	; (8000f64 <MX_GPIO_Init+0x2bc>)
 8000db2:	f002 facb 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HiL_TL4_Car_GPIO_Port, HiL_TL4_Car_Pin, GPIO_PIN_RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2104      	movs	r1, #4
 8000dba:	486b      	ldr	r0, [pc, #428]	; (8000f68 <MX_GPIO_Init+0x2c0>)
 8000dbc:	f002 fac6 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, HiL_button3_C_Pin|HiL_button3_D_Pin|HiL_button3_center_Pin, GPIO_PIN_SET);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2170      	movs	r1, #112	; 0x70
 8000dc4:	4868      	ldr	r0, [pc, #416]	; (8000f68 <MX_GPIO_Init+0x2c0>)
 8000dc6:	f002 fac1 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HiL_LIS2DW12TR_Int2_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	21a0      	movs	r1, #160	; 0xa0
 8000dce:	4863      	ldr	r0, [pc, #396]	; (8000f5c <MX_GPIO_Init+0x2b4>)
 8000dd0:	f002 fabc 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HiL_Disp_Data_Instr_Pin HiL_Disp_CS_Pin */
  GPIO_InitStruct.Pin = HiL_Disp_Data_Instr_Pin|HiL_Disp_CS_Pin;
 8000dd4:	f241 0308 	movw	r3, #4104	; 0x1008
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de6:	4619      	mov	r1, r3
 8000de8:	4860      	ldr	r0, [pc, #384]	; (8000f6c <MX_GPIO_Init+0x2c4>)
 8000dea:	f002 f8eb 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_595_Reset_Pin */
  GPIO_InitStruct.Pin = HiL_595_Reset_Pin;
 8000dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000df8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HiL_595_Reset_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e02:	4619      	mov	r1, r3
 8000e04:	4857      	ldr	r0, [pc, #348]	; (8000f64 <MX_GPIO_Init+0x2bc>)
 8000e06:	f002 f8dd 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL2_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL2_Car_Pin;
 8000e0a:	2380      	movs	r3, #128	; 0x80
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HiL_TL2_Car_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1e:	4619      	mov	r1, r3
 8000e20:	484c      	ldr	r0, [pc, #304]	; (8000f54 <MX_GPIO_Init+0x2ac>)
 8000e22:	f002 f8cf 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_Disp_Reset_Pin HiL_595_STCP_Pin */
  GPIO_InitStruct.Pin = HiL_Disp_Reset_Pin|HiL_595_STCP_Pin;
 8000e26:	2305      	movs	r3, #5
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e36:	4619      	mov	r1, r3
 8000e38:	484a      	ldr	r0, [pc, #296]	; (8000f64 <MX_GPIO_Init+0x2bc>)
 8000e3a:	f002 f8c3 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_USR_LED1_Pin */
  GPIO_InitStruct.Pin = HiL_USR_LED1_Pin;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e42:	2300      	movs	r3, #0
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HiL_USR_LED1_GPIO_Port, &GPIO_InitStruct);
 8000e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4841      	ldr	r0, [pc, #260]	; (8000f58 <MX_GPIO_Init+0x2b0>)
 8000e52:	f002 f8b7 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 HiL_LIS2DW12TR_Int1_Pin HiL_TL3_Car_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|HiL_LIS2DW12TR_Int1_Pin|HiL_TL3_Car_Pin;
 8000e56:	f248 4320 	movw	r3, #33824	; 0x8420
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	483a      	ldr	r0, [pc, #232]	; (8000f58 <MX_GPIO_Init+0x2b0>)
 8000e70:	f002 f8a8 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_USR_LED2_Pin */
  GPIO_InitStruct.Pin = HiL_USR_LED2_Pin;
 8000e74:	2301      	movs	r3, #1
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HiL_USR_LED2_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e84:	4619      	mov	r1, r3
 8000e86:	4835      	ldr	r0, [pc, #212]	; (8000f5c <MX_GPIO_Init+0x2b4>)
 8000e88:	f002 f89c 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_SW5_Pin HiL_SW8_Pin HiL_SW6_Pin HiL_SW7_Pin */
  GPIO_InitStruct.Pin = HiL_SW5_Pin|HiL_SW8_Pin|HiL_SW6_Pin|HiL_SW7_Pin;
 8000e8c:	f24c 4310 	movw	r3, #50192	; 0xc410
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e92:	2311      	movs	r3, #17
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	482d      	ldr	r0, [pc, #180]	; (8000f5c <MX_GPIO_Init+0x2b4>)
 8000ea6:	f002 f88d 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_button3_B_Pin HiL_button3_A_Pin */
  GPIO_InitStruct.Pin = HiL_button3_B_Pin|HiL_button3_A_Pin;
 8000eaa:	230c      	movs	r3, #12
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000eae:	2311      	movs	r3, #17
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4827      	ldr	r0, [pc, #156]	; (8000f60 <MX_GPIO_Init+0x2b8>)
 8000ec2:	f002 f87f 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL1_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL1_Car_Pin;
 8000ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HiL_TL1_Car_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000edc:	4619      	mov	r1, r3
 8000ede:	4821      	ldr	r0, [pc, #132]	; (8000f64 <MX_GPIO_Init+0x2bc>)
 8000ee0:	f002 f870 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL4_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL4_Car_Pin;
 8000ee4:	2304      	movs	r3, #4
 8000ee6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HiL_TL4_Car_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef8:	4619      	mov	r1, r3
 8000efa:	481b      	ldr	r0, [pc, #108]	; (8000f68 <MX_GPIO_Init+0x2c0>)
 8000efc:	f002 f862 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_button3_C_Pin HiL_button3_D_Pin HiL_button3_center_Pin */
  GPIO_InitStruct.Pin = HiL_button3_C_Pin|HiL_button3_D_Pin|HiL_button3_center_Pin;
 8000f00:	2370      	movs	r3, #112	; 0x70
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000f04:	2311      	movs	r3, #17
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f14:	4619      	mov	r1, r3
 8000f16:	4814      	ldr	r0, [pc, #80]	; (8000f68 <MX_GPIO_Init+0x2c0>)
 8000f18:	f002 f854 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_LIS2DW12TR_Int2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = HiL_LIS2DW12TR_Int2_Pin|LD2_Pin;
 8000f1c:	23a0      	movs	r3, #160	; 0xa0
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f20:	2301      	movs	r3, #1
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f30:	4619      	mov	r1, r3
 8000f32:	480a      	ldr	r0, [pc, #40]	; (8000f5c <MX_GPIO_Init+0x2b4>)
 8000f34:	f002 f846 	bl	8002fc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2105      	movs	r1, #5
 8000f3c:	2028      	movs	r0, #40	; 0x28
 8000f3e:	f000 ff91 	bl	8001e64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f42:	2028      	movs	r0, #40	; 0x28
 8000f44:	f000 ffaa 	bl	8001e9c <HAL_NVIC_EnableIRQ>

}
 8000f48:	bf00      	nop
 8000f4a:	3738      	adds	r7, #56	; 0x38
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40021400 	.word	0x40021400
 8000f58:	40020000 	.word	0x40020000
 8000f5c:	40020400 	.word	0x40020400
 8000f60:	40021800 	.word	0x40021800
 8000f64:	40020800 	.word	0x40020800
 8000f68:	40020c00 	.word	0x40020c00
 8000f6c:	40021000 	.word	0x40021000

08000f70 <StartTask_controller>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_controller */
void StartTask_controller(void *argument)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000f78:	f010 f8b8 	bl	80110ec <MX_USB_DEVICE_Init>
  uint8_t recieve_message[4];

  /* Infinite loop */
  for(;;)
  {
	  if( USB_MSGQ_Rx != NULL )
 8000f7c:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <StartTask_controller+0x68>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d024      	beq.n	8000fce <StartTask_controller+0x5e>
	 	  {

	 			status = osMessageQueueGet(USB_MSGQ_Rx, &msg, NULL, 0U);		// Try to get message with instructions from USB message queue
 8000f84:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <StartTask_controller+0x68>)
 8000f86:	6818      	ldr	r0, [r3, #0]
 8000f88:	f107 010c 	add.w	r1, r7, #12
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f00c ff34 	bl	800ddfc <osMessageQueueGet>
 8000f94:	6138      	str	r0, [r7, #16]

	 			if (status == osOK)
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d118      	bne.n	8000fce <StartTask_controller+0x5e>
	 			{
	 				for (int i = 0; i < sizeof(msg.Buf); i++)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	e00d      	b.n	8000fbe <StartTask_controller+0x4e>
	 				{
	 					recieve_message[i] = msg.Buf[i];						//Copy message
 8000fa2:	f107 020c 	add.w	r2, r7, #12
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	4413      	add	r3, r2
 8000faa:	7819      	ldrb	r1, [r3, #0]
 8000fac:	f107 0208 	add.w	r2, r7, #8
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	460a      	mov	r2, r1
 8000fb6:	701a      	strb	r2, [r3, #0]
	 				for (int i = 0; i < sizeof(msg.Buf); i++)
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	2b03      	cmp	r3, #3
 8000fc2:	d9ee      	bls.n	8000fa2 <StartTask_controller+0x32>
	 				}

	 				HiL_controller_read_message(recieve_message);				//Process request
 8000fc4:	f107 0308 	add.w	r3, r7, #8
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f00a f8d9 	bl	800b180 <HiL_controller_read_message>
	 			}
	 	  }
	  osDelay(10);
 8000fce:	200a      	movs	r0, #10
 8000fd0:	f00c fc92 	bl	800d8f8 <osDelay>
	  if( USB_MSGQ_Rx != NULL )
 8000fd4:	e7d2      	b.n	8000f7c <StartTask_controller+0xc>
 8000fd6:	bf00      	nop
 8000fd8:	20000784 	.word	0x20000784

08000fdc <StartTask_SHT20>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_SHT20 */
void StartTask_SHT20(void *argument)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_SHT20 */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1000);							//Not implemented.
 8000fe4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fe8:	f00c fc86 	bl	800d8f8 <osDelay>
 8000fec:	e7fa      	b.n	8000fe4 <StartTask_SHT20+0x8>
	...

08000ff0 <StartTask_74HC595D>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_74HC595D */
void StartTask_74HC595D(void *argument)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_74HC595D */
	osStatus status;
	osSemaphoreAcquire(LightOnSemHandle, 1000);
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <StartTask_74HC595D+0x50>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001000:	4618      	mov	r0, r3
 8001002:	f00c fd43 	bl	800da8c <osSemaphoreAcquire>

  /* Infinite loop */
  for(;;)
  {

	  HAL_SPI_Receive_DMA(&hspi1, temp_light_state, sizeof(temp_light_state));
 8001006:	2203      	movs	r2, #3
 8001008:	490e      	ldr	r1, [pc, #56]	; (8001044 <StartTask_74HC595D+0x54>)
 800100a:	480f      	ldr	r0, [pc, #60]	; (8001048 <StartTask_74HC595D+0x58>)
 800100c:	f004 ffda 	bl	8005fc4 <HAL_SPI_Receive_DMA>

	  again:
	  	  status = osSemaphoreAcquire(LightOnSemHandle, 2000);
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <StartTask_74HC595D+0x50>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001018:	4618      	mov	r0, r3
 800101a:	f00c fd37 	bl	800da8c <osSemaphoreAcquire>
 800101e:	60f8      	str	r0, [r7, #12]
	  	  if(status != osOK){
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d000      	beq.n	8001028 <StartTask_74HC595D+0x38>

	  		  goto again;
 8001026:	e7f3      	b.n	8001010 <StartTask_74HC595D+0x20>
	  	  }
	  	  memcpy(light_state, temp_light_state, sizeof(light_state));
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <StartTask_74HC595D+0x5c>)
 800102a:	4a06      	ldr	r2, [pc, #24]	; (8001044 <StartTask_74HC595D+0x54>)
 800102c:	6812      	ldr	r2, [r2, #0]
 800102e:	4611      	mov	r1, r2
 8001030:	8019      	strh	r1, [r3, #0]
 8001032:	3302      	adds	r3, #2
 8001034:	0c12      	lsrs	r2, r2, #16
 8001036:	701a      	strb	r2, [r3, #0]
	  osDelay(10);
 8001038:	200a      	movs	r0, #10
 800103a:	f00c fc5d 	bl	800d8f8 <osDelay>
	  HAL_SPI_Receive_DMA(&hspi1, temp_light_state, sizeof(temp_light_state));
 800103e:	e7e2      	b.n	8001006 <StartTask_74HC595D+0x16>
 8001040:	20000730 	.word	0x20000730
 8001044:	2000078c 	.word	0x2000078c
 8001048:	200004c8 	.word	0x200004c8
 800104c:	20000788 	.word	0x20000788

08001050 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a04      	ldr	r2, [pc, #16]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d101      	bne.n	8001066 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001062:	f000 fd07 	bl	8001a74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40001000 	.word	0x40001000

08001074 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001078:	b672      	cpsid	i
}
 800107a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800107c:	e7fe      	b.n	800107c <Error_Handler+0x8>
	...

08001080 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <HAL_MspInit+0x4c>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	4a10      	ldr	r2, [pc, #64]	; (80010cc <HAL_MspInit+0x4c>)
 800108c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001090:	6413      	str	r3, [r2, #64]	; 0x40
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <HAL_MspInit+0x4c>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <HAL_MspInit+0x4c>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <HAL_MspInit+0x4c>)
 80010a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a8:	6453      	str	r3, [r2, #68]	; 0x44
 80010aa:	4b08      	ldr	r3, [pc, #32]	; (80010cc <HAL_MspInit+0x4c>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	210f      	movs	r1, #15
 80010ba:	f06f 0001 	mvn.w	r0, #1
 80010be:	f000 fed1 	bl	8001e64 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800

080010d0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a17      	ldr	r2, [pc, #92]	; (800114c <HAL_CAN_MspInit+0x7c>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d127      	bne.n	8001142 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010f2:	4b17      	ldr	r3, [pc, #92]	; (8001150 <HAL_CAN_MspInit+0x80>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	4a16      	ldr	r2, [pc, #88]	; (8001150 <HAL_CAN_MspInit+0x80>)
 80010f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010fc:	6413      	str	r3, [r2, #64]	; 0x40
 80010fe:	4b14      	ldr	r3, [pc, #80]	; (8001150 <HAL_CAN_MspInit+0x80>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <HAL_CAN_MspInit+0x80>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a10      	ldr	r2, [pc, #64]	; (8001150 <HAL_CAN_MspInit+0x80>)
 8001110:	f043 0308 	orr.w	r3, r3, #8
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <HAL_CAN_MspInit+0x80>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0308 	and.w	r3, r3, #8
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = HiL_CAN1_RX_Pin|HiL_CAN1_TX_Pin;
 8001122:	2303      	movs	r3, #3
 8001124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112e:	2303      	movs	r3, #3
 8001130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001132:	2309      	movs	r3, #9
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	; (8001154 <HAL_CAN_MspInit+0x84>)
 800113e:	f001 ff41 	bl	8002fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001142:	bf00      	nop
 8001144:	3728      	adds	r7, #40	; 0x28
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40006400 	.word	0x40006400
 8001150:	40023800 	.word	0x40023800
 8001154:	40020c00 	.word	0x40020c00

08001158 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	; 0x28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a19      	ldr	r2, [pc, #100]	; (80011dc <HAL_DAC_MspInit+0x84>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d12b      	bne.n	80011d2 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800117a:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <HAL_DAC_MspInit+0x88>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	4a18      	ldr	r2, [pc, #96]	; (80011e0 <HAL_DAC_MspInit+0x88>)
 8001180:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001184:	6413      	str	r3, [r2, #64]	; 0x40
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <HAL_DAC_MspInit+0x88>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <HAL_DAC_MspInit+0x88>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <HAL_DAC_MspInit+0x88>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <HAL_DAC_MspInit+0x88>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = HiL_Poti_Pin;
 80011aa:	2310      	movs	r3, #16
 80011ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ae:	2303      	movs	r3, #3
 80011b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(HiL_Poti_GPIO_Port, &GPIO_InitStruct);
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4619      	mov	r1, r3
 80011bc:	4809      	ldr	r0, [pc, #36]	; (80011e4 <HAL_DAC_MspInit+0x8c>)
 80011be:	f001 ff01 	bl	8002fc4 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	210f      	movs	r1, #15
 80011c6:	2036      	movs	r0, #54	; 0x36
 80011c8:	f000 fe4c 	bl	8001e64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011cc:	2036      	movs	r0, #54	; 0x36
 80011ce:	f000 fe65 	bl	8001e9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80011d2:	bf00      	nop
 80011d4:	3728      	adds	r7, #40	; 0x28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40007400 	.word	0x40007400
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40020000 	.word	0x40020000

080011e8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08e      	sub	sp, #56	; 0x38
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a4e      	ldr	r2, [pc, #312]	; (8001340 <HAL_ETH_MspInit+0x158>)
 8001206:	4293      	cmp	r3, r2
 8001208:	f040 8096 	bne.w	8001338 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800120c:	4b4d      	ldr	r3, [pc, #308]	; (8001344 <HAL_ETH_MspInit+0x15c>)
 800120e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001210:	4a4c      	ldr	r2, [pc, #304]	; (8001344 <HAL_ETH_MspInit+0x15c>)
 8001212:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001216:	6313      	str	r3, [r2, #48]	; 0x30
 8001218:	4b4a      	ldr	r3, [pc, #296]	; (8001344 <HAL_ETH_MspInit+0x15c>)
 800121a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001220:	623b      	str	r3, [r7, #32]
 8001222:	6a3b      	ldr	r3, [r7, #32]
 8001224:	4b47      	ldr	r3, [pc, #284]	; (8001344 <HAL_ETH_MspInit+0x15c>)
 8001226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001228:	4a46      	ldr	r2, [pc, #280]	; (8001344 <HAL_ETH_MspInit+0x15c>)
 800122a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800122e:	6313      	str	r3, [r2, #48]	; 0x30
 8001230:	4b44      	ldr	r3, [pc, #272]	; (8001344 <HAL_ETH_MspInit+0x15c>)
 8001232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001234:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001238:	61fb      	str	r3, [r7, #28]
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	4b41      	ldr	r3, [pc, #260]	; (8001344 <HAL_ETH_MspInit+0x15c>)
 800123e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001240:	4a40      	ldr	r2, [pc, #256]	; (8001344 <HAL_ETH_MspInit+0x15c>)
 8001242:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001246:	6313      	str	r3, [r2, #48]	; 0x30
 8001248:	4b3e      	ldr	r3, [pc, #248]	; (8001344 <HAL_ETH_MspInit+0x15c>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001250:	61bb      	str	r3, [r7, #24]
 8001252:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001254:	4b3b      	ldr	r3, [pc, #236]	; (8001344 <HAL_ETH_MspInit+0x15c>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001258:	4a3a      	ldr	r2, [pc, #232]	; (8001344 <HAL_ETH_MspInit+0x15c>)
 800125a:	f043 0304 	orr.w	r3, r3, #4
 800125e:	6313      	str	r3, [r2, #48]	; 0x30
 8001260:	4b38      	ldr	r3, [pc, #224]	; (8001344 <HAL_ETH_MspInit+0x15c>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	617b      	str	r3, [r7, #20]
 800126a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126c:	4b35      	ldr	r3, [pc, #212]	; (8001344 <HAL_ETH_MspInit+0x15c>)
 800126e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001270:	4a34      	ldr	r2, [pc, #208]	; (8001344 <HAL_ETH_MspInit+0x15c>)
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	6313      	str	r3, [r2, #48]	; 0x30
 8001278:	4b32      	ldr	r3, [pc, #200]	; (8001344 <HAL_ETH_MspInit+0x15c>)
 800127a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001284:	4b2f      	ldr	r3, [pc, #188]	; (8001344 <HAL_ETH_MspInit+0x15c>)
 8001286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001288:	4a2e      	ldr	r2, [pc, #184]	; (8001344 <HAL_ETH_MspInit+0x15c>)
 800128a:	f043 0302 	orr.w	r3, r3, #2
 800128e:	6313      	str	r3, [r2, #48]	; 0x30
 8001290:	4b2c      	ldr	r3, [pc, #176]	; (8001344 <HAL_ETH_MspInit+0x15c>)
 8001292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800129c:	4b29      	ldr	r3, [pc, #164]	; (8001344 <HAL_ETH_MspInit+0x15c>)
 800129e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a0:	4a28      	ldr	r2, [pc, #160]	; (8001344 <HAL_ETH_MspInit+0x15c>)
 80012a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012a6:	6313      	str	r3, [r2, #48]	; 0x30
 80012a8:	4b26      	ldr	r3, [pc, #152]	; (8001344 <HAL_ETH_MspInit+0x15c>)
 80012aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80012b4:	2332      	movs	r3, #50	; 0x32
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c0:	2303      	movs	r3, #3
 80012c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012c4:	230b      	movs	r3, #11
 80012c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012cc:	4619      	mov	r1, r3
 80012ce:	481e      	ldr	r0, [pc, #120]	; (8001348 <HAL_ETH_MspInit+0x160>)
 80012d0:	f001 fe78 	bl	8002fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80012d4:	2386      	movs	r3, #134	; 0x86
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d8:	2302      	movs	r3, #2
 80012da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e0:	2303      	movs	r3, #3
 80012e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012e4:	230b      	movs	r3, #11
 80012e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ec:	4619      	mov	r1, r3
 80012ee:	4817      	ldr	r0, [pc, #92]	; (800134c <HAL_ETH_MspInit+0x164>)
 80012f0:	f001 fe68 	bl	8002fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001302:	2303      	movs	r3, #3
 8001304:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001306:	230b      	movs	r3, #11
 8001308:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130e:	4619      	mov	r1, r3
 8001310:	480f      	ldr	r0, [pc, #60]	; (8001350 <HAL_ETH_MspInit+0x168>)
 8001312:	f001 fe57 	bl	8002fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001316:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001324:	2303      	movs	r3, #3
 8001326:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001328:	230b      	movs	r3, #11
 800132a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800132c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001330:	4619      	mov	r1, r3
 8001332:	4808      	ldr	r0, [pc, #32]	; (8001354 <HAL_ETH_MspInit+0x16c>)
 8001334:	f001 fe46 	bl	8002fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001338:	bf00      	nop
 800133a:	3738      	adds	r7, #56	; 0x38
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40028000 	.word	0x40028000
 8001344:	40023800 	.word	0x40023800
 8001348:	40020800 	.word	0x40020800
 800134c:	40020000 	.word	0x40020000
 8001350:	40020400 	.word	0x40020400
 8001354:	40021800 	.word	0x40021800

08001358 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b0ae      	sub	sp, #184	; 0xb8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	2290      	movs	r2, #144	; 0x90
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f010 fca5 	bl	8011cc8 <memset>
  if(hi2c->Instance==I2C1)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a22      	ldr	r2, [pc, #136]	; (800140c <HAL_I2C_MspInit+0xb4>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d13c      	bne.n	8001402 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001388:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800138c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800138e:	2300      	movs	r3, #0
 8001390:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4618      	mov	r0, r3
 8001398:	f004 f940 	bl	800561c <HAL_RCCEx_PeriphCLKConfig>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80013a2:	f7ff fe67 	bl	8001074 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a6:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <HAL_I2C_MspInit+0xb8>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a19      	ldr	r2, [pc, #100]	; (8001410 <HAL_I2C_MspInit+0xb8>)
 80013ac:	f043 0302 	orr.w	r3, r3, #2
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b17      	ldr	r3, [pc, #92]	; (8001410 <HAL_I2C_MspInit+0xb8>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = HiL_I2C1_SCL_Pin|HiL_I2C1_SDA_Pin;
 80013be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013c6:	2312      	movs	r3, #18
 80013c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d2:	2303      	movs	r3, #3
 80013d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013d8:	2304      	movs	r3, #4
 80013da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013de:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013e2:	4619      	mov	r1, r3
 80013e4:	480b      	ldr	r0, [pc, #44]	; (8001414 <HAL_I2C_MspInit+0xbc>)
 80013e6:	f001 fded 	bl	8002fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <HAL_I2C_MspInit+0xb8>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	4a08      	ldr	r2, [pc, #32]	; (8001410 <HAL_I2C_MspInit+0xb8>)
 80013f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013f4:	6413      	str	r3, [r2, #64]	; 0x40
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_I2C_MspInit+0xb8>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001402:	bf00      	nop
 8001404:	37b8      	adds	r7, #184	; 0xb8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40005400 	.word	0x40005400
 8001410:	40023800 	.word	0x40023800
 8001414:	40020400 	.word	0x40020400

08001418 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08e      	sub	sp, #56	; 0x38
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a61      	ldr	r2, [pc, #388]	; (80015bc <HAL_SPI_MspInit+0x1a4>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d172      	bne.n	8001520 <HAL_SPI_MspInit+0x108>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800143a:	4b61      	ldr	r3, [pc, #388]	; (80015c0 <HAL_SPI_MspInit+0x1a8>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	4a60      	ldr	r2, [pc, #384]	; (80015c0 <HAL_SPI_MspInit+0x1a8>)
 8001440:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001444:	6453      	str	r3, [r2, #68]	; 0x44
 8001446:	4b5e      	ldr	r3, [pc, #376]	; (80015c0 <HAL_SPI_MspInit+0x1a8>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800144e:	623b      	str	r3, [r7, #32]
 8001450:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001452:	4b5b      	ldr	r3, [pc, #364]	; (80015c0 <HAL_SPI_MspInit+0x1a8>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a5a      	ldr	r2, [pc, #360]	; (80015c0 <HAL_SPI_MspInit+0x1a8>)
 8001458:	f043 0308 	orr.w	r3, r3, #8
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b58      	ldr	r3, [pc, #352]	; (80015c0 <HAL_SPI_MspInit+0x1a8>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	61fb      	str	r3, [r7, #28]
 8001468:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	4b55      	ldr	r3, [pc, #340]	; (80015c0 <HAL_SPI_MspInit+0x1a8>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a54      	ldr	r2, [pc, #336]	; (80015c0 <HAL_SPI_MspInit+0x1a8>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b52      	ldr	r3, [pc, #328]	; (80015c0 <HAL_SPI_MspInit+0x1a8>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	61bb      	str	r3, [r7, #24]
 8001480:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = HiL_595_DS_Pin;
 8001482:	2380      	movs	r3, #128	; 0x80
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001492:	2305      	movs	r3, #5
 8001494:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_595_DS_GPIO_Port, &GPIO_InitStruct);
 8001496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149a:	4619      	mov	r1, r3
 800149c:	4849      	ldr	r0, [pc, #292]	; (80015c4 <HAL_SPI_MspInit+0x1ac>)
 800149e:	f001 fd91 	bl	8002fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HiL_595_SHCP_Pin;
 80014a2:	2308      	movs	r3, #8
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ae:	2303      	movs	r3, #3
 80014b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014b2:	2305      	movs	r3, #5
 80014b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_595_SHCP_GPIO_Port, &GPIO_InitStruct);
 80014b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ba:	4619      	mov	r1, r3
 80014bc:	4842      	ldr	r0, [pc, #264]	; (80015c8 <HAL_SPI_MspInit+0x1b0>)
 80014be:	f001 fd81 	bl	8002fc4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80014c2:	4b42      	ldr	r3, [pc, #264]	; (80015cc <HAL_SPI_MspInit+0x1b4>)
 80014c4:	4a42      	ldr	r2, [pc, #264]	; (80015d0 <HAL_SPI_MspInit+0x1b8>)
 80014c6:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80014c8:	4b40      	ldr	r3, [pc, #256]	; (80015cc <HAL_SPI_MspInit+0x1b4>)
 80014ca:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80014ce:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014d0:	4b3e      	ldr	r3, [pc, #248]	; (80015cc <HAL_SPI_MspInit+0x1b4>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d6:	4b3d      	ldr	r3, [pc, #244]	; (80015cc <HAL_SPI_MspInit+0x1b4>)
 80014d8:	2200      	movs	r2, #0
 80014da:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014dc:	4b3b      	ldr	r3, [pc, #236]	; (80015cc <HAL_SPI_MspInit+0x1b4>)
 80014de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014e2:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014e4:	4b39      	ldr	r3, [pc, #228]	; (80015cc <HAL_SPI_MspInit+0x1b4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014ea:	4b38      	ldr	r3, [pc, #224]	; (80015cc <HAL_SPI_MspInit+0x1b4>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80014f0:	4b36      	ldr	r3, [pc, #216]	; (80015cc <HAL_SPI_MspInit+0x1b4>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014f6:	4b35      	ldr	r3, [pc, #212]	; (80015cc <HAL_SPI_MspInit+0x1b4>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014fc:	4b33      	ldr	r3, [pc, #204]	; (80015cc <HAL_SPI_MspInit+0x1b4>)
 80014fe:	2200      	movs	r2, #0
 8001500:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001502:	4832      	ldr	r0, [pc, #200]	; (80015cc <HAL_SPI_MspInit+0x1b4>)
 8001504:	f000 fe2e 	bl	8002164 <HAL_DMA_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_SPI_MspInit+0xfa>
    {
      Error_Handler();
 800150e:	f7ff fdb1 	bl	8001074 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a2d      	ldr	r2, [pc, #180]	; (80015cc <HAL_SPI_MspInit+0x1b4>)
 8001516:	659a      	str	r2, [r3, #88]	; 0x58
 8001518:	4a2c      	ldr	r2, [pc, #176]	; (80015cc <HAL_SPI_MspInit+0x1b4>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800151e:	e049      	b.n	80015b4 <HAL_SPI_MspInit+0x19c>
  else if(hspi->Instance==SPI3)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a2b      	ldr	r2, [pc, #172]	; (80015d4 <HAL_SPI_MspInit+0x1bc>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d144      	bne.n	80015b4 <HAL_SPI_MspInit+0x19c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800152a:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <HAL_SPI_MspInit+0x1a8>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	4a24      	ldr	r2, [pc, #144]	; (80015c0 <HAL_SPI_MspInit+0x1a8>)
 8001530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001534:	6413      	str	r3, [r2, #64]	; 0x40
 8001536:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <HAL_SPI_MspInit+0x1a8>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001542:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <HAL_SPI_MspInit+0x1a8>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a1e      	ldr	r2, [pc, #120]	; (80015c0 <HAL_SPI_MspInit+0x1a8>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <HAL_SPI_MspInit+0x1a8>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800155a:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <HAL_SPI_MspInit+0x1a8>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a18      	ldr	r2, [pc, #96]	; (80015c0 <HAL_SPI_MspInit+0x1a8>)
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <HAL_SPI_MspInit+0x1a8>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HiL_SPI3_MOSI_Pin;
 8001572:	2304      	movs	r3, #4
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157e:	2303      	movs	r3, #3
 8001580:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001582:	2307      	movs	r3, #7
 8001584:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_SPI3_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158a:	4619      	mov	r1, r3
 800158c:	480e      	ldr	r0, [pc, #56]	; (80015c8 <HAL_SPI_MspInit+0x1b0>)
 800158e:	f001 fd19 	bl	8002fc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HiL_SPI3_SCK_Pin;
 8001592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	2302      	movs	r3, #2
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a0:	2303      	movs	r3, #3
 80015a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015a4:	2306      	movs	r3, #6
 80015a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_SPI3_SCK_GPIO_Port, &GPIO_InitStruct);
 80015a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ac:	4619      	mov	r1, r3
 80015ae:	480a      	ldr	r0, [pc, #40]	; (80015d8 <HAL_SPI_MspInit+0x1c0>)
 80015b0:	f001 fd08 	bl	8002fc4 <HAL_GPIO_Init>
}
 80015b4:	bf00      	nop
 80015b6:	3738      	adds	r7, #56	; 0x38
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40013000 	.word	0x40013000
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020c00 	.word	0x40020c00
 80015c8:	40020400 	.word	0x40020400
 80015cc:	20000590 	.word	0x20000590
 80015d0:	40026410 	.word	0x40026410
 80015d4:	40003c00 	.word	0x40003c00
 80015d8:	40020800 	.word	0x40020800

080015dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a1b      	ldr	r2, [pc, #108]	; (8001668 <HAL_TIM_Base_MspInit+0x8c>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d130      	bne.n	8001660 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015fe:	4b1b      	ldr	r3, [pc, #108]	; (800166c <HAL_TIM_Base_MspInit+0x90>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	4a1a      	ldr	r2, [pc, #104]	; (800166c <HAL_TIM_Base_MspInit+0x90>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6453      	str	r3, [r2, #68]	; 0x44
 800160a:	4b18      	ldr	r3, [pc, #96]	; (800166c <HAL_TIM_Base_MspInit+0x90>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <HAL_TIM_Base_MspInit+0x90>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a14      	ldr	r2, [pc, #80]	; (800166c <HAL_TIM_Base_MspInit+0x90>)
 800161c:	f043 0310 	orr.w	r3, r3, #16
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b12      	ldr	r3, [pc, #72]	; (800166c <HAL_TIM_Base_MspInit+0x90>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0310 	and.w	r3, r3, #16
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = HiL_595_Enable_Pin;
 800162e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001634:	2302      	movs	r3, #2
 8001636:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163c:	2300      	movs	r3, #0
 800163e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001640:	2301      	movs	r3, #1
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HiL_595_Enable_GPIO_Port, &GPIO_InitStruct);
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4619      	mov	r1, r3
 800164a:	4809      	ldr	r0, [pc, #36]	; (8001670 <HAL_TIM_Base_MspInit+0x94>)
 800164c:	f001 fcba 	bl	8002fc4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001650:	2200      	movs	r2, #0
 8001652:	2105      	movs	r1, #5
 8001654:	201b      	movs	r0, #27
 8001656:	f000 fc05 	bl	8001e64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800165a:	201b      	movs	r0, #27
 800165c:	f000 fc1e 	bl	8001e9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001660:	bf00      	nop
 8001662:	3728      	adds	r7, #40	; 0x28
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40010000 	.word	0x40010000
 800166c:	40023800 	.word	0x40023800
 8001670:	40021000 	.word	0x40021000

08001674 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b0ae      	sub	sp, #184	; 0xb8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	2290      	movs	r2, #144	; 0x90
 8001692:	2100      	movs	r1, #0
 8001694:	4618      	mov	r0, r3
 8001696:	f010 fb17 	bl	8011cc8 <memset>
  if(huart->Instance==UART7)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a3d      	ldr	r2, [pc, #244]	; (8001794 <HAL_UART_MspInit+0x120>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d172      	bne.n	800178a <HAL_UART_MspInit+0x116>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80016a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80016aa:	2300      	movs	r3, #0
 80016ac:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	4618      	mov	r0, r3
 80016b4:	f003 ffb2 	bl	800561c <HAL_RCCEx_PeriphCLKConfig>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80016be:	f7ff fcd9 	bl	8001074 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80016c2:	4b35      	ldr	r3, [pc, #212]	; (8001798 <HAL_UART_MspInit+0x124>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	4a34      	ldr	r2, [pc, #208]	; (8001798 <HAL_UART_MspInit+0x124>)
 80016c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80016cc:	6413      	str	r3, [r2, #64]	; 0x40
 80016ce:	4b32      	ldr	r3, [pc, #200]	; (8001798 <HAL_UART_MspInit+0x124>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016da:	4b2f      	ldr	r3, [pc, #188]	; (8001798 <HAL_UART_MspInit+0x124>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a2e      	ldr	r2, [pc, #184]	; (8001798 <HAL_UART_MspInit+0x124>)
 80016e0:	f043 0310 	orr.w	r3, r3, #16
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b2c      	ldr	r3, [pc, #176]	; (8001798 <HAL_UART_MspInit+0x124>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0310 	and.w	r3, r3, #16
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = HiL_UART7_RX_Pin|HiL_UART7_TX_Pin;
 80016f2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80016f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001706:	2303      	movs	r3, #3
 8001708:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800170c:	2308      	movs	r3, #8
 800170e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001712:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001716:	4619      	mov	r1, r3
 8001718:	4820      	ldr	r0, [pc, #128]	; (800179c <HAL_UART_MspInit+0x128>)
 800171a:	f001 fc53 	bl	8002fc4 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 800171e:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <HAL_UART_MspInit+0x12c>)
 8001720:	4a20      	ldr	r2, [pc, #128]	; (80017a4 <HAL_UART_MspInit+0x130>)
 8001722:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 8001724:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <HAL_UART_MspInit+0x12c>)
 8001726:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800172a:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800172c:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <HAL_UART_MspInit+0x12c>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001732:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <HAL_UART_MspInit+0x12c>)
 8001734:	2200      	movs	r2, #0
 8001736:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001738:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <HAL_UART_MspInit+0x12c>)
 800173a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800173e:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001740:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <HAL_UART_MspInit+0x12c>)
 8001742:	2200      	movs	r2, #0
 8001744:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001746:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <HAL_UART_MspInit+0x12c>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 800174c:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <HAL_UART_MspInit+0x12c>)
 800174e:	2200      	movs	r2, #0
 8001750:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001752:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <HAL_UART_MspInit+0x12c>)
 8001754:	2200      	movs	r2, #0
 8001756:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <HAL_UART_MspInit+0x12c>)
 800175a:	2200      	movs	r2, #0
 800175c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 800175e:	4810      	ldr	r0, [pc, #64]	; (80017a0 <HAL_UART_MspInit+0x12c>)
 8001760:	f000 fd00 	bl	8002164 <HAL_DMA_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 800176a:	f7ff fc83 	bl	8001074 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a0b      	ldr	r2, [pc, #44]	; (80017a0 <HAL_UART_MspInit+0x12c>)
 8001772:	675a      	str	r2, [r3, #116]	; 0x74
 8001774:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <HAL_UART_MspInit+0x12c>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	2105      	movs	r1, #5
 800177e:	2052      	movs	r0, #82	; 0x52
 8001780:	f000 fb70 	bl	8001e64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001784:	2052      	movs	r0, #82	; 0x52
 8001786:	f000 fb89 	bl	8001e9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 800178a:	bf00      	nop
 800178c:	37b8      	adds	r7, #184	; 0xb8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40007800 	.word	0x40007800
 8001798:	40023800 	.word	0x40023800
 800179c:	40021000 	.word	0x40021000
 80017a0:	200006c4 	.word	0x200006c4
 80017a4:	40026058 	.word	0x40026058

080017a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08e      	sub	sp, #56	; 0x38
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017b8:	4b33      	ldr	r3, [pc, #204]	; (8001888 <HAL_InitTick+0xe0>)
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	4a32      	ldr	r2, [pc, #200]	; (8001888 <HAL_InitTick+0xe0>)
 80017be:	f043 0310 	orr.w	r3, r3, #16
 80017c2:	6413      	str	r3, [r2, #64]	; 0x40
 80017c4:	4b30      	ldr	r3, [pc, #192]	; (8001888 <HAL_InitTick+0xe0>)
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	f003 0310 	and.w	r3, r3, #16
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017d0:	f107 0210 	add.w	r2, r7, #16
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4611      	mov	r1, r2
 80017da:	4618      	mov	r0, r3
 80017dc:	f003 feec 	bl	80055b8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017e0:	6a3b      	ldr	r3, [r7, #32]
 80017e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d103      	bne.n	80017f2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017ea:	f003 febd 	bl	8005568 <HAL_RCC_GetPCLK1Freq>
 80017ee:	6378      	str	r0, [r7, #52]	; 0x34
 80017f0:	e004      	b.n	80017fc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017f2:	f003 feb9 	bl	8005568 <HAL_RCC_GetPCLK1Freq>
 80017f6:	4603      	mov	r3, r0
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017fe:	4a23      	ldr	r2, [pc, #140]	; (800188c <HAL_InitTick+0xe4>)
 8001800:	fba2 2303 	umull	r2, r3, r2, r3
 8001804:	0c9b      	lsrs	r3, r3, #18
 8001806:	3b01      	subs	r3, #1
 8001808:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800180a:	4b21      	ldr	r3, [pc, #132]	; (8001890 <HAL_InitTick+0xe8>)
 800180c:	4a21      	ldr	r2, [pc, #132]	; (8001894 <HAL_InitTick+0xec>)
 800180e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001810:	4b1f      	ldr	r3, [pc, #124]	; (8001890 <HAL_InitTick+0xe8>)
 8001812:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001816:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001818:	4a1d      	ldr	r2, [pc, #116]	; (8001890 <HAL_InitTick+0xe8>)
 800181a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800181c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800181e:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <HAL_InitTick+0xe8>)
 8001820:	2200      	movs	r2, #0
 8001822:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001824:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <HAL_InitTick+0xe8>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182a:	4b19      	ldr	r3, [pc, #100]	; (8001890 <HAL_InitTick+0xe8>)
 800182c:	2200      	movs	r2, #0
 800182e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001830:	4817      	ldr	r0, [pc, #92]	; (8001890 <HAL_InitTick+0xe8>)
 8001832:	f005 f9bd 	bl	8006bb0 <HAL_TIM_Base_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800183c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001840:	2b00      	cmp	r3, #0
 8001842:	d11b      	bne.n	800187c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001844:	4812      	ldr	r0, [pc, #72]	; (8001890 <HAL_InitTick+0xe8>)
 8001846:	f005 fa0b 	bl	8006c60 <HAL_TIM_Base_Start_IT>
 800184a:	4603      	mov	r3, r0
 800184c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001850:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001854:	2b00      	cmp	r3, #0
 8001856:	d111      	bne.n	800187c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001858:	2036      	movs	r0, #54	; 0x36
 800185a:	f000 fb1f 	bl	8001e9c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b0f      	cmp	r3, #15
 8001862:	d808      	bhi.n	8001876 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001864:	2200      	movs	r2, #0
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	2036      	movs	r0, #54	; 0x36
 800186a:	f000 fafb 	bl	8001e64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800186e:	4a0a      	ldr	r2, [pc, #40]	; (8001898 <HAL_InitTick+0xf0>)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	e002      	b.n	800187c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800187c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001880:	4618      	mov	r0, r3
 8001882:	3738      	adds	r7, #56	; 0x38
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40023800 	.word	0x40023800
 800188c:	431bde83 	.word	0x431bde83
 8001890:	20000818 	.word	0x20000818
 8001894:	40001000 	.word	0x40001000
 8001898:	20000004 	.word	0x20000004

0800189c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <NMI_Handler+0x4>

080018a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a6:	e7fe      	b.n	80018a6 <HardFault_Handler+0x4>

080018a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ac:	e7fe      	b.n	80018ac <MemManage_Handler+0x4>

080018ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b2:	e7fe      	b.n	80018b2 <BusFault_Handler+0x4>

080018b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <UsageFault_Handler+0x4>

080018ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <DMA1_Stream3_IRQHandler+0x10>)
 80018ce:	f000 fde9 	bl	80024a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200006c4 	.word	0x200006c4

080018dc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <TIM1_CC_IRQHandler+0x10>)
 80018e2:	f005 fe1b 	bl	800751c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200005f0 	.word	0x200005f0

080018f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HiL_595_Reset_Pin);
 80018f4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80018f8:	f001 fd42 	bl	8003380 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}

08001900 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <TIM6_DAC_IRQHandler+0x20>)
 8001906:	791b      	ldrb	r3, [r3, #4]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d002      	beq.n	8001914 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 800190e:	4804      	ldr	r0, [pc, #16]	; (8001920 <TIM6_DAC_IRQHandler+0x20>)
 8001910:	f000 fb46 	bl	8001fa0 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001914:	4803      	ldr	r0, [pc, #12]	; (8001924 <TIM6_DAC_IRQHandler+0x24>)
 8001916:	f005 fe01 	bl	800751c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200003b0 	.word	0x200003b0
 8001924:	20000818 	.word	0x20000818

08001928 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800192c:	4802      	ldr	r0, [pc, #8]	; (8001938 <DMA2_Stream0_IRQHandler+0x10>)
 800192e:	f000 fdb9 	bl	80024a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000590 	.word	0x20000590

0800193c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001940:	4802      	ldr	r0, [pc, #8]	; (800194c <OTG_FS_IRQHandler+0x10>)
 8001942:	f001 ffa2 	bl	800388a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20006d64 	.word	0x20006d64

08001950 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001954:	4802      	ldr	r0, [pc, #8]	; (8001960 <UART7_IRQHandler+0x10>)
 8001956:	f006 fd23 	bl	80083a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	2000063c 	.word	0x2000063c

08001964 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800196c:	4a14      	ldr	r2, [pc, #80]	; (80019c0 <_sbrk+0x5c>)
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <_sbrk+0x60>)
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001978:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <_sbrk+0x64>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d102      	bne.n	8001986 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <_sbrk+0x64>)
 8001982:	4a12      	ldr	r2, [pc, #72]	; (80019cc <_sbrk+0x68>)
 8001984:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <_sbrk+0x64>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	429a      	cmp	r2, r3
 8001992:	d207      	bcs.n	80019a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001994:	f010 f94e 	bl	8011c34 <__errno>
 8001998:	4603      	mov	r3, r0
 800199a:	220c      	movs	r2, #12
 800199c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800199e:	f04f 33ff 	mov.w	r3, #4294967295
 80019a2:	e009      	b.n	80019b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <_sbrk+0x64>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019aa:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <_sbrk+0x64>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	4a05      	ldr	r2, [pc, #20]	; (80019c8 <_sbrk+0x64>)
 80019b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019b6:	68fb      	ldr	r3, [r7, #12]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20080000 	.word	0x20080000
 80019c4:	00000400 	.word	0x00000400
 80019c8:	20000864 	.word	0x20000864
 80019cc:	20007280 	.word	0x20007280

080019d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <SystemInit+0x20>)
 80019d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019da:	4a05      	ldr	r2, [pc, #20]	; (80019f0 <SystemInit+0x20>)
 80019dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019f8:	480d      	ldr	r0, [pc, #52]	; (8001a30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019fa:	490e      	ldr	r1, [pc, #56]	; (8001a34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019fc:	4a0e      	ldr	r2, [pc, #56]	; (8001a38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a00:	e002      	b.n	8001a08 <LoopCopyDataInit>

08001a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a06:	3304      	adds	r3, #4

08001a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a0c:	d3f9      	bcc.n	8001a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a0e:	4a0b      	ldr	r2, [pc, #44]	; (8001a3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a10:	4c0b      	ldr	r4, [pc, #44]	; (8001a40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a14:	e001      	b.n	8001a1a <LoopFillZerobss>

08001a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a18:	3204      	adds	r2, #4

08001a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a1c:	d3fb      	bcc.n	8001a16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a1e:	f7ff ffd7 	bl	80019d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a22:	f010 f90d 	bl	8011c40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a26:	f7fe fdf7 	bl	8000618 <main>
  bx  lr    
 8001a2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a2c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a34:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001a38:	0801215c 	.word	0x0801215c
  ldr r2, =_sbss
 8001a3c:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 8001a40:	2000727c 	.word	0x2000727c

08001a44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a44:	e7fe      	b.n	8001a44 <ADC_IRQHandler>
	...

08001a48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <HAL_Init+0x28>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a07      	ldr	r2, [pc, #28]	; (8001a70 <HAL_Init+0x28>)
 8001a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a58:	2003      	movs	r0, #3
 8001a5a:	f000 f9f8 	bl	8001e4e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a5e:	200f      	movs	r0, #15
 8001a60:	f7ff fea2 	bl	80017a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a64:	f7ff fb0c 	bl	8001080 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023c00 	.word	0x40023c00

08001a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_IncTick+0x20>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_IncTick+0x24>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4413      	add	r3, r2
 8001a84:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <HAL_IncTick+0x24>)
 8001a86:	6013      	str	r3, [r2, #0]
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000008 	.word	0x20000008
 8001a98:	20000868 	.word	0x20000868

08001a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	; (8001ab0 <HAL_GetTick+0x14>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	20000868 	.word	0x20000868

08001ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001abc:	f7ff ffee 	bl	8001a9c <HAL_GetTick>
 8001ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001acc:	d005      	beq.n	8001ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ace:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <HAL_Delay+0x44>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ada:	bf00      	nop
 8001adc:	f7ff ffde 	bl	8001a9c <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d8f7      	bhi.n	8001adc <HAL_Delay+0x28>
  {
  }
}
 8001aec:	bf00      	nop
 8001aee:	bf00      	nop
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000008 	.word	0x20000008

08001afc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e0ed      	b.n	8001cea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d102      	bne.n	8001b20 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff fad8 	bl	80010d0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0201 	orr.w	r2, r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b30:	f7ff ffb4 	bl	8001a9c <HAL_GetTick>
 8001b34:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b36:	e012      	b.n	8001b5e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b38:	f7ff ffb0 	bl	8001a9c <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b0a      	cmp	r3, #10
 8001b44:	d90b      	bls.n	8001b5e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2205      	movs	r2, #5
 8001b56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e0c5      	b.n	8001cea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0e5      	beq.n	8001b38 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 0202 	bic.w	r2, r2, #2
 8001b7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b7c:	f7ff ff8e 	bl	8001a9c <HAL_GetTick>
 8001b80:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b82:	e012      	b.n	8001baa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b84:	f7ff ff8a 	bl	8001a9c <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b0a      	cmp	r3, #10
 8001b90:	d90b      	bls.n	8001baa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2205      	movs	r2, #5
 8001ba2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e09f      	b.n	8001cea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1e5      	bne.n	8001b84 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	7e1b      	ldrb	r3, [r3, #24]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d108      	bne.n	8001bd2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	e007      	b.n	8001be2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001be0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	7e5b      	ldrb	r3, [r3, #25]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d108      	bne.n	8001bfc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	e007      	b.n	8001c0c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	7e9b      	ldrb	r3, [r3, #26]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d108      	bne.n	8001c26 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 0220 	orr.w	r2, r2, #32
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	e007      	b.n	8001c36 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 0220 	bic.w	r2, r2, #32
 8001c34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	7edb      	ldrb	r3, [r3, #27]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d108      	bne.n	8001c50 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 0210 	bic.w	r2, r2, #16
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	e007      	b.n	8001c60 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0210 	orr.w	r2, r2, #16
 8001c5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	7f1b      	ldrb	r3, [r3, #28]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d108      	bne.n	8001c7a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0208 	orr.w	r2, r2, #8
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	e007      	b.n	8001c8a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0208 	bic.w	r2, r2, #8
 8001c88:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	7f5b      	ldrb	r3, [r3, #29]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d108      	bne.n	8001ca4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f042 0204 	orr.w	r2, r2, #4
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	e007      	b.n	8001cb4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0204 	bic.w	r2, r2, #4
 8001cb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	ea42 0103 	orr.w	r1, r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	1e5a      	subs	r2, r3, #1
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <__NVIC_SetPriorityGrouping>:
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <__NVIC_SetPriorityGrouping+0x40>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d10:	4013      	ands	r3, r2
 8001d12:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d22:	4a04      	ldr	r2, [pc, #16]	; (8001d34 <__NVIC_SetPriorityGrouping+0x40>)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	60d3      	str	r3, [r2, #12]
}
 8001d28:	bf00      	nop
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000ed00 	.word	0xe000ed00
 8001d38:	05fa0000 	.word	0x05fa0000

08001d3c <__NVIC_GetPriorityGrouping>:
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d40:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <__NVIC_GetPriorityGrouping+0x18>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	f003 0307 	and.w	r3, r3, #7
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_EnableIRQ>:
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	db0b      	blt.n	8001d82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	f003 021f 	and.w	r2, r3, #31
 8001d70:	4907      	ldr	r1, [pc, #28]	; (8001d90 <__NVIC_EnableIRQ+0x38>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	095b      	lsrs	r3, r3, #5
 8001d78:	2001      	movs	r0, #1
 8001d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000e100 	.word	0xe000e100

08001d94 <__NVIC_SetPriority>:
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	6039      	str	r1, [r7, #0]
 8001d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	db0a      	blt.n	8001dbe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	490c      	ldr	r1, [pc, #48]	; (8001de0 <__NVIC_SetPriority+0x4c>)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	0112      	lsls	r2, r2, #4
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	440b      	add	r3, r1
 8001db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001dbc:	e00a      	b.n	8001dd4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	4908      	ldr	r1, [pc, #32]	; (8001de4 <__NVIC_SetPriority+0x50>)
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	3b04      	subs	r3, #4
 8001dcc:	0112      	lsls	r2, r2, #4
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	761a      	strb	r2, [r3, #24]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000e100 	.word	0xe000e100
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <NVIC_EncodePriority>:
{
 8001de8:	b480      	push	{r7}
 8001dea:	b089      	sub	sp, #36	; 0x24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f1c3 0307 	rsb	r3, r3, #7
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	bf28      	it	cs
 8001e06:	2304      	movcs	r3, #4
 8001e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	2b06      	cmp	r3, #6
 8001e10:	d902      	bls.n	8001e18 <NVIC_EncodePriority+0x30>
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3b03      	subs	r3, #3
 8001e16:	e000      	b.n	8001e1a <NVIC_EncodePriority+0x32>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43da      	mvns	r2, r3
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e30:	f04f 31ff 	mov.w	r1, #4294967295
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3a:	43d9      	mvns	r1, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e40:	4313      	orrs	r3, r2
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3724      	adds	r7, #36	; 0x24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff ff4c 	bl	8001cf4 <__NVIC_SetPriorityGrouping>
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e76:	f7ff ff61 	bl	8001d3c <__NVIC_GetPriorityGrouping>
 8001e7a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	68b9      	ldr	r1, [r7, #8]
 8001e80:	6978      	ldr	r0, [r7, #20]
 8001e82:	f7ff ffb1 	bl	8001de8 <NVIC_EncodePriority>
 8001e86:	4602      	mov	r2, r0
 8001e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e8c:	4611      	mov	r1, r2
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff ff80 	bl	8001d94 <__NVIC_SetPriority>
}
 8001e94:	bf00      	nop
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff ff54 	bl	8001d58 <__NVIC_EnableIRQ>
}
 8001eb0:	bf00      	nop
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e014      	b.n	8001ef4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	791b      	ldrb	r3, [r3, #4]
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d105      	bne.n	8001ee0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff f93c 	bl	8001158 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	795b      	ldrb	r3, [r3, #5]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_DAC_Start+0x16>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e040      	b.n	8001f94 <HAL_DAC_Start+0x98>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6819      	ldr	r1, [r3, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	f003 0310 	and.w	r3, r3, #16
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	409a      	lsls	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10f      	bne.n	8001f5c <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001f46:	2b3c      	cmp	r3, #60	; 0x3c
 8001f48:	d11d      	bne.n	8001f86 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f042 0201 	orr.w	r2, r2, #1
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	e014      	b.n	8001f86 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	f003 0310 	and.w	r3, r3, #16
 8001f6c:	213c      	movs	r1, #60	; 0x3c
 8001f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d107      	bne.n	8001f86 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f042 0202 	orr.w	r2, r2, #2
 8001f84:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fb6:	d120      	bne.n	8001ffa <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fc6:	d118      	bne.n	8001ffa <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2204      	movs	r2, #4
 8001fcc:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	f043 0201 	orr.w	r2, r3, #1
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fe2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ff2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f852 	bl	800209e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002008:	d120      	bne.n	800204c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002010:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002014:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002018:	d118      	bne.n	800204c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2204      	movs	r2, #4
 800201e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	f043 0202 	orr.w	r2, r3, #2
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002034:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002044:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f882 	bl	8002150 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800204c:	bf00      	nop
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002054:	b480      	push	{r7}
 8002056:	b087      	sub	sp, #28
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
 8002060:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d105      	bne.n	800207e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4413      	add	r3, r2
 8002078:	3308      	adds	r3, #8
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	e004      	b.n	8002088 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4413      	add	r3, r2
 8002084:	3314      	adds	r3, #20
 8002086:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	461a      	mov	r2, r3
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	371c      	adds	r7, #28
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b087      	sub	sp, #28
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	60f8      	str	r0, [r7, #12]
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	795b      	ldrb	r3, [r3, #5]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d101      	bne.n	80020ca <HAL_DAC_ConfigChannel+0x18>
 80020c6:	2302      	movs	r3, #2
 80020c8:	e03c      	b.n	8002144 <HAL_DAC_ConfigChannel+0x92>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2201      	movs	r2, #1
 80020ce:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2202      	movs	r2, #2
 80020d4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f003 0310 	and.w	r3, r3, #16
 80020e4:	f640 72fe 	movw	r2, #4094	; 0xffe
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	4013      	ands	r3, r2
 80020f2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f003 0310 	and.w	r3, r3, #16
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	4313      	orrs	r3, r2
 8002110:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6819      	ldr	r1, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f003 0310 	and.w	r3, r3, #16
 8002126:	22c0      	movs	r2, #192	; 0xc0
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43da      	mvns	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	400a      	ands	r2, r1
 8002134:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2201      	movs	r2, #1
 800213a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	371c      	adds	r7, #28
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002170:	f7ff fc94 	bl	8001a9c <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e099      	b.n	80022b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2202      	movs	r2, #2
 8002184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0201 	bic.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021a0:	e00f      	b.n	80021c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021a2:	f7ff fc7b 	bl	8001a9c <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b05      	cmp	r3, #5
 80021ae:	d908      	bls.n	80021c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2220      	movs	r2, #32
 80021b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2203      	movs	r2, #3
 80021ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e078      	b.n	80022b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1e8      	bne.n	80021a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	4b38      	ldr	r3, [pc, #224]	; (80022bc <HAL_DMA_Init+0x158>)
 80021dc:	4013      	ands	r3, r2
 80021de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002206:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	4313      	orrs	r3, r2
 8002212:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	2b04      	cmp	r3, #4
 800221a:	d107      	bne.n	800222c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002224:	4313      	orrs	r3, r2
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	4313      	orrs	r3, r2
 800222a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f023 0307 	bic.w	r3, r3, #7
 8002242:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	4313      	orrs	r3, r2
 800224c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	2b04      	cmp	r3, #4
 8002254:	d117      	bne.n	8002286 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	4313      	orrs	r3, r2
 800225e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00e      	beq.n	8002286 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 fb09 	bl	8002880 <DMA_CheckFifoParam>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d008      	beq.n	8002286 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2240      	movs	r2, #64	; 0x40
 8002278:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002282:	2301      	movs	r3, #1
 8002284:	e016      	b.n	80022b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 fac0 	bl	8002814 <DMA_CalcBaseAndBitshift>
 8002294:	4603      	mov	r3, r0
 8002296:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229c:	223f      	movs	r2, #63	; 0x3f
 800229e:	409a      	lsls	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	e010803f 	.word	0xe010803f

080022c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
 80022cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <HAL_DMA_Start_IT+0x26>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e048      	b.n	8002378 <HAL_DMA_Start_IT+0xb8>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d137      	bne.n	800236a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2202      	movs	r2, #2
 80022fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	68b9      	ldr	r1, [r7, #8]
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f000 fa52 	bl	80027b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002318:	223f      	movs	r2, #63	; 0x3f
 800231a:	409a      	lsls	r2, r3
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0216 	orr.w	r2, r2, #22
 800232e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695a      	ldr	r2, [r3, #20]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800233e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	2b00      	cmp	r3, #0
 8002346:	d007      	beq.n	8002358 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0208 	orr.w	r2, r2, #8
 8002356:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0201 	orr.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	e005      	b.n	8002376 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002372:	2302      	movs	r3, #2
 8002374:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002376:	7dfb      	ldrb	r3, [r7, #23]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800238e:	f7ff fb85 	bl	8001a9c <HAL_GetTick>
 8002392:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d008      	beq.n	80023b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2280      	movs	r2, #128	; 0x80
 80023a4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e052      	b.n	8002458 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0216 	bic.w	r2, r2, #22
 80023c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	695a      	ldr	r2, [r3, #20]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d103      	bne.n	80023e2 <HAL_DMA_Abort+0x62>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d007      	beq.n	80023f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0208 	bic.w	r2, r2, #8
 80023f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 0201 	bic.w	r2, r2, #1
 8002400:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002402:	e013      	b.n	800242c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002404:	f7ff fb4a 	bl	8001a9c <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b05      	cmp	r3, #5
 8002410:	d90c      	bls.n	800242c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2220      	movs	r2, #32
 8002416:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2203      	movs	r2, #3
 800241c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e015      	b.n	8002458 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1e4      	bne.n	8002404 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243e:	223f      	movs	r2, #63	; 0x3f
 8002440:	409a      	lsls	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d004      	beq.n	800247e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2280      	movs	r2, #128	; 0x80
 8002478:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e00c      	b.n	8002498 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2205      	movs	r2, #5
 8002482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0201 	bic.w	r2, r2, #1
 8002494:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80024b0:	4b8e      	ldr	r3, [pc, #568]	; (80026ec <HAL_DMA_IRQHandler+0x248>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a8e      	ldr	r2, [pc, #568]	; (80026f0 <HAL_DMA_IRQHandler+0x24c>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	0a9b      	lsrs	r3, r3, #10
 80024bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ce:	2208      	movs	r2, #8
 80024d0:	409a      	lsls	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d01a      	beq.n	8002510 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d013      	beq.n	8002510 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0204 	bic.w	r2, r2, #4
 80024f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fc:	2208      	movs	r2, #8
 80024fe:	409a      	lsls	r2, r3
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002508:	f043 0201 	orr.w	r2, r3, #1
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002514:	2201      	movs	r2, #1
 8002516:	409a      	lsls	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4013      	ands	r3, r2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d012      	beq.n	8002546 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00b      	beq.n	8002546 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002532:	2201      	movs	r2, #1
 8002534:	409a      	lsls	r2, r3
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253e:	f043 0202 	orr.w	r2, r3, #2
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254a:	2204      	movs	r2, #4
 800254c:	409a      	lsls	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	4013      	ands	r3, r2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d012      	beq.n	800257c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00b      	beq.n	800257c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002568:	2204      	movs	r2, #4
 800256a:	409a      	lsls	r2, r3
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002574:	f043 0204 	orr.w	r2, r3, #4
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002580:	2210      	movs	r2, #16
 8002582:	409a      	lsls	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4013      	ands	r3, r2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d043      	beq.n	8002614 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d03c      	beq.n	8002614 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259e:	2210      	movs	r2, #16
 80025a0:	409a      	lsls	r2, r3
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d018      	beq.n	80025e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d108      	bne.n	80025d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d024      	beq.n	8002614 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	4798      	blx	r3
 80025d2:	e01f      	b.n	8002614 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d01b      	beq.n	8002614 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	4798      	blx	r3
 80025e4:	e016      	b.n	8002614 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d107      	bne.n	8002604 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0208 	bic.w	r2, r2, #8
 8002602:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002618:	2220      	movs	r2, #32
 800261a:	409a      	lsls	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4013      	ands	r3, r2
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 808f 	beq.w	8002744 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0310 	and.w	r3, r3, #16
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 8087 	beq.w	8002744 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263a:	2220      	movs	r2, #32
 800263c:	409a      	lsls	r2, r3
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b05      	cmp	r3, #5
 800264c:	d136      	bne.n	80026bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0216 	bic.w	r2, r2, #22
 800265c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	695a      	ldr	r2, [r3, #20]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800266c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	2b00      	cmp	r3, #0
 8002674:	d103      	bne.n	800267e <HAL_DMA_IRQHandler+0x1da>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800267a:	2b00      	cmp	r3, #0
 800267c:	d007      	beq.n	800268e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0208 	bic.w	r2, r2, #8
 800268c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002692:	223f      	movs	r2, #63	; 0x3f
 8002694:	409a      	lsls	r2, r3
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d07e      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	4798      	blx	r3
        }
        return;
 80026ba:	e079      	b.n	80027b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d01d      	beq.n	8002706 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10d      	bne.n	80026f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d031      	beq.n	8002744 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	4798      	blx	r3
 80026e8:	e02c      	b.n	8002744 <HAL_DMA_IRQHandler+0x2a0>
 80026ea:	bf00      	nop
 80026ec:	20000000 	.word	0x20000000
 80026f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d023      	beq.n	8002744 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	4798      	blx	r3
 8002704:	e01e      	b.n	8002744 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10f      	bne.n	8002734 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0210 	bic.w	r2, r2, #16
 8002722:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002748:	2b00      	cmp	r3, #0
 800274a:	d032      	beq.n	80027b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	d022      	beq.n	800279e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2205      	movs	r2, #5
 800275c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0201 	bic.w	r2, r2, #1
 800276e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	3301      	adds	r3, #1
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	429a      	cmp	r2, r3
 800277a:	d307      	bcc.n	800278c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f2      	bne.n	8002770 <HAL_DMA_IRQHandler+0x2cc>
 800278a:	e000      	b.n	800278e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800278c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d005      	beq.n	80027b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	4798      	blx	r3
 80027ae:	e000      	b.n	80027b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80027b0:	bf00      	nop
    }
  }
}
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
 80027c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2b40      	cmp	r3, #64	; 0x40
 80027e4:	d108      	bne.n	80027f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027f6:	e007      	b.n	8002808 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	60da      	str	r2, [r3, #12]
}
 8002808:	bf00      	nop
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	b2db      	uxtb	r3, r3
 8002822:	3b10      	subs	r3, #16
 8002824:	4a13      	ldr	r2, [pc, #76]	; (8002874 <DMA_CalcBaseAndBitshift+0x60>)
 8002826:	fba2 2303 	umull	r2, r3, r2, r3
 800282a:	091b      	lsrs	r3, r3, #4
 800282c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800282e:	4a12      	ldr	r2, [pc, #72]	; (8002878 <DMA_CalcBaseAndBitshift+0x64>)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4413      	add	r3, r2
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2b03      	cmp	r3, #3
 8002840:	d908      	bls.n	8002854 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	461a      	mov	r2, r3
 8002848:	4b0c      	ldr	r3, [pc, #48]	; (800287c <DMA_CalcBaseAndBitshift+0x68>)
 800284a:	4013      	ands	r3, r2
 800284c:	1d1a      	adds	r2, r3, #4
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	659a      	str	r2, [r3, #88]	; 0x58
 8002852:	e006      	b.n	8002862 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	4b08      	ldr	r3, [pc, #32]	; (800287c <DMA_CalcBaseAndBitshift+0x68>)
 800285c:	4013      	ands	r3, r2
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002866:	4618      	mov	r0, r3
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	aaaaaaab 	.word	0xaaaaaaab
 8002878:	080120e4 	.word	0x080120e4
 800287c:	fffffc00 	.word	0xfffffc00

08002880 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002888:	2300      	movs	r3, #0
 800288a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002890:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d11f      	bne.n	80028da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2b03      	cmp	r3, #3
 800289e:	d856      	bhi.n	800294e <DMA_CheckFifoParam+0xce>
 80028a0:	a201      	add	r2, pc, #4	; (adr r2, 80028a8 <DMA_CheckFifoParam+0x28>)
 80028a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a6:	bf00      	nop
 80028a8:	080028b9 	.word	0x080028b9
 80028ac:	080028cb 	.word	0x080028cb
 80028b0:	080028b9 	.word	0x080028b9
 80028b4:	0800294f 	.word	0x0800294f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d046      	beq.n	8002952 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028c8:	e043      	b.n	8002952 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028d2:	d140      	bne.n	8002956 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028d8:	e03d      	b.n	8002956 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028e2:	d121      	bne.n	8002928 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d837      	bhi.n	800295a <DMA_CheckFifoParam+0xda>
 80028ea:	a201      	add	r2, pc, #4	; (adr r2, 80028f0 <DMA_CheckFifoParam+0x70>)
 80028ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f0:	08002901 	.word	0x08002901
 80028f4:	08002907 	.word	0x08002907
 80028f8:	08002901 	.word	0x08002901
 80028fc:	08002919 	.word	0x08002919
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
      break;
 8002904:	e030      	b.n	8002968 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d025      	beq.n	800295e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002916:	e022      	b.n	800295e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002920:	d11f      	bne.n	8002962 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002926:	e01c      	b.n	8002962 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d903      	bls.n	8002936 <DMA_CheckFifoParam+0xb6>
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	2b03      	cmp	r3, #3
 8002932:	d003      	beq.n	800293c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002934:	e018      	b.n	8002968 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	73fb      	strb	r3, [r7, #15]
      break;
 800293a:	e015      	b.n	8002968 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002940:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00e      	beq.n	8002966 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	73fb      	strb	r3, [r7, #15]
      break;
 800294c:	e00b      	b.n	8002966 <DMA_CheckFifoParam+0xe6>
      break;
 800294e:	bf00      	nop
 8002950:	e00a      	b.n	8002968 <DMA_CheckFifoParam+0xe8>
      break;
 8002952:	bf00      	nop
 8002954:	e008      	b.n	8002968 <DMA_CheckFifoParam+0xe8>
      break;
 8002956:	bf00      	nop
 8002958:	e006      	b.n	8002968 <DMA_CheckFifoParam+0xe8>
      break;
 800295a:	bf00      	nop
 800295c:	e004      	b.n	8002968 <DMA_CheckFifoParam+0xe8>
      break;
 800295e:	bf00      	nop
 8002960:	e002      	b.n	8002968 <DMA_CheckFifoParam+0xe8>
      break;   
 8002962:	bf00      	nop
 8002964:	e000      	b.n	8002968 <DMA_CheckFifoParam+0xe8>
      break;
 8002966:	bf00      	nop
    }
  } 
  
  return status; 
 8002968:	7bfb      	ldrb	r3, [r7, #15]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop

08002978 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e06a      	b.n	8002a60 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002990:	2b00      	cmp	r3, #0
 8002992:	d106      	bne.n	80029a2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2223      	movs	r2, #35	; 0x23
 8002998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7fe fc23 	bl	80011e8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a2:	4b31      	ldr	r3, [pc, #196]	; (8002a68 <HAL_ETH_Init+0xf0>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	4a30      	ldr	r2, [pc, #192]	; (8002a68 <HAL_ETH_Init+0xf0>)
 80029a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029ac:	6453      	str	r3, [r2, #68]	; 0x44
 80029ae:	4b2e      	ldr	r3, [pc, #184]	; (8002a68 <HAL_ETH_Init+0xf0>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b6:	60bb      	str	r3, [r7, #8]
 80029b8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80029ba:	4b2c      	ldr	r3, [pc, #176]	; (8002a6c <HAL_ETH_Init+0xf4>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	4a2b      	ldr	r2, [pc, #172]	; (8002a6c <HAL_ETH_Init+0xf4>)
 80029c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80029c4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80029c6:	4b29      	ldr	r3, [pc, #164]	; (8002a6c <HAL_ETH_Init+0xf4>)
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	4927      	ldr	r1, [pc, #156]	; (8002a6c <HAL_ETH_Init+0xf4>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80029d4:	4b25      	ldr	r3, [pc, #148]	; (8002a6c <HAL_ETH_Init+0xf4>)
 80029d6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6812      	ldr	r2, [r2, #0]
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029f0:	f7ff f854 	bl	8001a9c <HAL_GetTick>
 80029f4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80029f6:	e011      	b.n	8002a1c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80029f8:	f7ff f850 	bl	8001a9c <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a06:	d909      	bls.n	8002a1c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2204      	movs	r2, #4
 8002a0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	22e0      	movs	r2, #224	; 0xe0
 8002a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e021      	b.n	8002a60 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1e4      	bne.n	80029f8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f958 	bl	8002ce4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f9ff 	bl	8002e38 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 fa55 	bl	8002eea <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	461a      	mov	r2, r3
 8002a46:	2100      	movs	r1, #0
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f9bd 	bl	8002dc8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2210      	movs	r2, #16
 8002a5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40013800 	.word	0x40013800

08002a70 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	4b51      	ldr	r3, [pc, #324]	; (8002bcc <ETH_SetMACConfig+0x15c>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	7c1b      	ldrb	r3, [r3, #16]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d102      	bne.n	8002a98 <ETH_SetMACConfig+0x28>
 8002a92:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002a96:	e000      	b.n	8002a9a <ETH_SetMACConfig+0x2a>
 8002a98:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	7c5b      	ldrb	r3, [r3, #17]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d102      	bne.n	8002aa8 <ETH_SetMACConfig+0x38>
 8002aa2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002aa6:	e000      	b.n	8002aaa <ETH_SetMACConfig+0x3a>
 8002aa8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002aaa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002ab0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	7fdb      	ldrb	r3, [r3, #31]
 8002ab6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002ab8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002abe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	7f92      	ldrb	r2, [r2, #30]
 8002ac4:	2a00      	cmp	r2, #0
 8002ac6:	d102      	bne.n	8002ace <ETH_SetMACConfig+0x5e>
 8002ac8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002acc:	e000      	b.n	8002ad0 <ETH_SetMACConfig+0x60>
 8002ace:	2200      	movs	r2, #0
                        macconf->Speed |
 8002ad0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	7f1b      	ldrb	r3, [r3, #28]
 8002ad6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002ad8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002ade:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	791b      	ldrb	r3, [r3, #4]
 8002ae4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002ae6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002aee:	2a00      	cmp	r2, #0
 8002af0:	d102      	bne.n	8002af8 <ETH_SetMACConfig+0x88>
 8002af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002af6:	e000      	b.n	8002afa <ETH_SetMACConfig+0x8a>
 8002af8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002afa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	7bdb      	ldrb	r3, [r3, #15]
 8002b00:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002b02:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002b08:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b10:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002b12:	4313      	orrs	r3, r2
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b2a:	2001      	movs	r0, #1
 8002b2c:	f7fe ffc2 	bl	8001ab4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002b46:	4013      	ands	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b4e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002b56:	2a00      	cmp	r2, #0
 8002b58:	d101      	bne.n	8002b5e <ETH_SetMACConfig+0xee>
 8002b5a:	2280      	movs	r2, #128	; 0x80
 8002b5c:	e000      	b.n	8002b60 <ETH_SetMACConfig+0xf0>
 8002b5e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b60:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002b66:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002b6e:	2a01      	cmp	r2, #1
 8002b70:	d101      	bne.n	8002b76 <ETH_SetMACConfig+0x106>
 8002b72:	2208      	movs	r2, #8
 8002b74:	e000      	b.n	8002b78 <ETH_SetMACConfig+0x108>
 8002b76:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002b78:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002b80:	2a01      	cmp	r2, #1
 8002b82:	d101      	bne.n	8002b88 <ETH_SetMACConfig+0x118>
 8002b84:	2204      	movs	r2, #4
 8002b86:	e000      	b.n	8002b8a <ETH_SetMACConfig+0x11a>
 8002b88:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b8a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002b92:	2a01      	cmp	r2, #1
 8002b94:	d101      	bne.n	8002b9a <ETH_SetMACConfig+0x12a>
 8002b96:	2202      	movs	r2, #2
 8002b98:	e000      	b.n	8002b9c <ETH_SetMACConfig+0x12c>
 8002b9a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bb4:	2001      	movs	r0, #1
 8002bb6:	f7fe ff7d 	bl	8001ab4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	619a      	str	r2, [r3, #24]
}
 8002bc2:	bf00      	nop
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	ff20810f 	.word	0xff20810f

08002bd0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	4b3d      	ldr	r3, [pc, #244]	; (8002ce0 <ETH_SetDMAConfig+0x110>)
 8002bea:	4013      	ands	r3, r2
 8002bec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	7b1b      	ldrb	r3, [r3, #12]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d102      	bne.n	8002bfc <ETH_SetDMAConfig+0x2c>
 8002bf6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002bfa:	e000      	b.n	8002bfe <ETH_SetDMAConfig+0x2e>
 8002bfc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	7b5b      	ldrb	r3, [r3, #13]
 8002c02:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002c04:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	7f52      	ldrb	r2, [r2, #29]
 8002c0a:	2a00      	cmp	r2, #0
 8002c0c:	d102      	bne.n	8002c14 <ETH_SetDMAConfig+0x44>
 8002c0e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c12:	e000      	b.n	8002c16 <ETH_SetDMAConfig+0x46>
 8002c14:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002c16:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	7b9b      	ldrb	r3, [r3, #14]
 8002c1c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002c1e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002c24:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	7f1b      	ldrb	r3, [r3, #28]
 8002c2a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002c2c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	7f9b      	ldrb	r3, [r3, #30]
 8002c32:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002c34:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002c3a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c42:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002c44:	4313      	orrs	r3, r2
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c54:	461a      	mov	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c66:	2001      	movs	r0, #1
 8002c68:	f7fe ff24 	bl	8001ab4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c74:	461a      	mov	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	791b      	ldrb	r3, [r3, #4]
 8002c7e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c84:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002c8a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c90:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c98:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002c9a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002ca2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002ca8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6812      	ldr	r2, [r2, #0]
 8002cae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cb2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002cb6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	f7fe fef5 	bl	8001ab4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6013      	str	r3, [r2, #0]
}
 8002cd8:	bf00      	nop
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	f8de3f23 	.word	0xf8de3f23

08002ce4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b0a6      	sub	sp, #152	; 0x98
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002cec:	2301      	movs	r3, #1
 8002cee:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002d02:	2301      	movs	r3, #1
 8002d04:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002d14:	2300      	movs	r3, #0
 8002d16:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002d20:	2300      	movs	r3, #0
 8002d22:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002d24:	2300      	movs	r3, #0
 8002d26:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002d34:	2300      	movs	r3, #0
 8002d36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002d40:	2300      	movs	r3, #0
 8002d42:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002d46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d4a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002d4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d50:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002d52:	2300      	movs	r3, #0
 8002d54:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002d58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7ff fe86 	bl	8002a70 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002d64:	2301      	movs	r3, #1
 8002d66:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002d72:	2301      	movs	r3, #1
 8002d74:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002d76:	2300      	movs	r3, #0
 8002d78:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002d80:	2300      	movs	r3, #0
 8002d82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002d86:	2300      	movs	r3, #0
 8002d88:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002d90:	2301      	movs	r3, #1
 8002d92:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002d94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d98:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002d9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d9e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002da0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002da4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002da6:	2301      	movs	r3, #1
 8002da8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002db0:	2300      	movs	r3, #0
 8002db2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002db4:	f107 0308 	add.w	r3, r7, #8
 8002db8:	4619      	mov	r1, r3
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff ff08 	bl	8002bd0 <ETH_SetDMAConfig>
}
 8002dc0:	bf00      	nop
 8002dc2:	3798      	adds	r7, #152	; 0x98
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3305      	adds	r3, #5
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	021b      	lsls	r3, r3, #8
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	3204      	adds	r2, #4
 8002de0:	7812      	ldrb	r2, [r2, #0]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <ETH_MACAddressConfig+0x68>)
 8002dea:	4413      	add	r3, r2
 8002dec:	461a      	mov	r2, r3
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3303      	adds	r3, #3
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	061a      	lsls	r2, r3, #24
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3302      	adds	r3, #2
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	041b      	lsls	r3, r3, #16
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3301      	adds	r3, #1
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	021b      	lsls	r3, r3, #8
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	7812      	ldrb	r2, [r2, #0]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <ETH_MACAddressConfig+0x6c>)
 8002e1a:	4413      	add	r3, r2
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	6013      	str	r3, [r2, #0]
}
 8002e22:	bf00      	nop
 8002e24:	371c      	adds	r7, #28
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	40028040 	.word	0x40028040
 8002e34:	40028044 	.word	0x40028044

08002e38 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	e03e      	b.n	8002ec4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68d9      	ldr	r1, [r3, #12]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	440b      	add	r3, r1
 8002e56:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2200      	movs	r2, #0
 8002e62:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2200      	movs	r2, #0
 8002e68:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002e70:	68b9      	ldr	r1, [r7, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	3206      	adds	r2, #6
 8002e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d80c      	bhi.n	8002ea8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68d9      	ldr	r1, [r3, #12]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	440b      	add	r3, r1
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	60da      	str	r2, [r3, #12]
 8002ea6:	e004      	b.n	8002eb2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	461a      	mov	r2, r3
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2b03      	cmp	r3, #3
 8002ec8:	d9bd      	bls.n	8002e46 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002edc:	611a      	str	r2, [r3, #16]
}
 8002ede:	bf00      	nop
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b085      	sub	sp, #20
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	e046      	b.n	8002f86 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6919      	ldr	r1, [r3, #16]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	4613      	mov	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	440b      	add	r3, r1
 8002f08:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2200      	movs	r2, #0
 8002f14:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2200      	movs	r2, #0
 8002f26:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002f34:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002f3c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002f4a:	68b9      	ldr	r1, [r7, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	3212      	adds	r2, #18
 8002f52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d80c      	bhi.n	8002f76 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6919      	ldr	r1, [r3, #16]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	1c5a      	adds	r2, r3, #1
 8002f64:	4613      	mov	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	440b      	add	r3, r1
 8002f6e:	461a      	mov	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	60da      	str	r2, [r3, #12]
 8002f74:	e004      	b.n	8002f80 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	3301      	adds	r3, #1
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2b03      	cmp	r3, #3
 8002f8a:	d9b5      	bls.n	8002ef8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691a      	ldr	r2, [r3, #16]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fb6:	60da      	str	r2, [r3, #12]
}
 8002fb8:	bf00      	nop
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b089      	sub	sp, #36	; 0x24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61fb      	str	r3, [r7, #28]
 8002fe2:	e175      	b.n	80032d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	f040 8164 	bne.w	80032ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	2b01      	cmp	r3, #1
 800300c:	d005      	beq.n	800301a <HAL_GPIO_Init+0x56>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d130      	bne.n	800307c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	2203      	movs	r2, #3
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43db      	mvns	r3, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4013      	ands	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4313      	orrs	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003050:	2201      	movs	r2, #1
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4013      	ands	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	091b      	lsrs	r3, r3, #4
 8003066:	f003 0201 	and.w	r2, r3, #1
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4313      	orrs	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f003 0303 	and.w	r3, r3, #3
 8003084:	2b03      	cmp	r3, #3
 8003086:	d017      	beq.n	80030b8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	2203      	movs	r2, #3
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4013      	ands	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f003 0303 	and.w	r3, r3, #3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d123      	bne.n	800310c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	08da      	lsrs	r2, r3, #3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3208      	adds	r2, #8
 80030cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	220f      	movs	r2, #15
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	43db      	mvns	r3, r3
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	4013      	ands	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	691a      	ldr	r2, [r3, #16]
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	08da      	lsrs	r2, r3, #3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3208      	adds	r2, #8
 8003106:	69b9      	ldr	r1, [r7, #24]
 8003108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	2203      	movs	r2, #3
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4013      	ands	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 0203 	and.w	r2, r3, #3
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4313      	orrs	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 80be 	beq.w	80032ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800314e:	4b66      	ldr	r3, [pc, #408]	; (80032e8 <HAL_GPIO_Init+0x324>)
 8003150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003152:	4a65      	ldr	r2, [pc, #404]	; (80032e8 <HAL_GPIO_Init+0x324>)
 8003154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003158:	6453      	str	r3, [r2, #68]	; 0x44
 800315a:	4b63      	ldr	r3, [pc, #396]	; (80032e8 <HAL_GPIO_Init+0x324>)
 800315c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003166:	4a61      	ldr	r2, [pc, #388]	; (80032ec <HAL_GPIO_Init+0x328>)
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	089b      	lsrs	r3, r3, #2
 800316c:	3302      	adds	r3, #2
 800316e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	220f      	movs	r2, #15
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43db      	mvns	r3, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4013      	ands	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a58      	ldr	r2, [pc, #352]	; (80032f0 <HAL_GPIO_Init+0x32c>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d037      	beq.n	8003202 <HAL_GPIO_Init+0x23e>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a57      	ldr	r2, [pc, #348]	; (80032f4 <HAL_GPIO_Init+0x330>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d031      	beq.n	80031fe <HAL_GPIO_Init+0x23a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a56      	ldr	r2, [pc, #344]	; (80032f8 <HAL_GPIO_Init+0x334>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d02b      	beq.n	80031fa <HAL_GPIO_Init+0x236>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a55      	ldr	r2, [pc, #340]	; (80032fc <HAL_GPIO_Init+0x338>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d025      	beq.n	80031f6 <HAL_GPIO_Init+0x232>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a54      	ldr	r2, [pc, #336]	; (8003300 <HAL_GPIO_Init+0x33c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d01f      	beq.n	80031f2 <HAL_GPIO_Init+0x22e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a53      	ldr	r2, [pc, #332]	; (8003304 <HAL_GPIO_Init+0x340>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d019      	beq.n	80031ee <HAL_GPIO_Init+0x22a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a52      	ldr	r2, [pc, #328]	; (8003308 <HAL_GPIO_Init+0x344>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d013      	beq.n	80031ea <HAL_GPIO_Init+0x226>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a51      	ldr	r2, [pc, #324]	; (800330c <HAL_GPIO_Init+0x348>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d00d      	beq.n	80031e6 <HAL_GPIO_Init+0x222>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a50      	ldr	r2, [pc, #320]	; (8003310 <HAL_GPIO_Init+0x34c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d007      	beq.n	80031e2 <HAL_GPIO_Init+0x21e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a4f      	ldr	r2, [pc, #316]	; (8003314 <HAL_GPIO_Init+0x350>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d101      	bne.n	80031de <HAL_GPIO_Init+0x21a>
 80031da:	2309      	movs	r3, #9
 80031dc:	e012      	b.n	8003204 <HAL_GPIO_Init+0x240>
 80031de:	230a      	movs	r3, #10
 80031e0:	e010      	b.n	8003204 <HAL_GPIO_Init+0x240>
 80031e2:	2308      	movs	r3, #8
 80031e4:	e00e      	b.n	8003204 <HAL_GPIO_Init+0x240>
 80031e6:	2307      	movs	r3, #7
 80031e8:	e00c      	b.n	8003204 <HAL_GPIO_Init+0x240>
 80031ea:	2306      	movs	r3, #6
 80031ec:	e00a      	b.n	8003204 <HAL_GPIO_Init+0x240>
 80031ee:	2305      	movs	r3, #5
 80031f0:	e008      	b.n	8003204 <HAL_GPIO_Init+0x240>
 80031f2:	2304      	movs	r3, #4
 80031f4:	e006      	b.n	8003204 <HAL_GPIO_Init+0x240>
 80031f6:	2303      	movs	r3, #3
 80031f8:	e004      	b.n	8003204 <HAL_GPIO_Init+0x240>
 80031fa:	2302      	movs	r3, #2
 80031fc:	e002      	b.n	8003204 <HAL_GPIO_Init+0x240>
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <HAL_GPIO_Init+0x240>
 8003202:	2300      	movs	r3, #0
 8003204:	69fa      	ldr	r2, [r7, #28]
 8003206:	f002 0203 	and.w	r2, r2, #3
 800320a:	0092      	lsls	r2, r2, #2
 800320c:	4093      	lsls	r3, r2
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4313      	orrs	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003214:	4935      	ldr	r1, [pc, #212]	; (80032ec <HAL_GPIO_Init+0x328>)
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	089b      	lsrs	r3, r3, #2
 800321a:	3302      	adds	r3, #2
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003222:	4b3d      	ldr	r3, [pc, #244]	; (8003318 <HAL_GPIO_Init+0x354>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	43db      	mvns	r3, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4013      	ands	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003246:	4a34      	ldr	r2, [pc, #208]	; (8003318 <HAL_GPIO_Init+0x354>)
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800324c:	4b32      	ldr	r3, [pc, #200]	; (8003318 <HAL_GPIO_Init+0x354>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	43db      	mvns	r3, r3
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4013      	ands	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003270:	4a29      	ldr	r2, [pc, #164]	; (8003318 <HAL_GPIO_Init+0x354>)
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003276:	4b28      	ldr	r3, [pc, #160]	; (8003318 <HAL_GPIO_Init+0x354>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	43db      	mvns	r3, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4013      	ands	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	4313      	orrs	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800329a:	4a1f      	ldr	r2, [pc, #124]	; (8003318 <HAL_GPIO_Init+0x354>)
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032a0:	4b1d      	ldr	r3, [pc, #116]	; (8003318 <HAL_GPIO_Init+0x354>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	43db      	mvns	r3, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4013      	ands	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032c4:	4a14      	ldr	r2, [pc, #80]	; (8003318 <HAL_GPIO_Init+0x354>)
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	3301      	adds	r3, #1
 80032ce:	61fb      	str	r3, [r7, #28]
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	2b0f      	cmp	r3, #15
 80032d4:	f67f ae86 	bls.w	8002fe4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80032d8:	bf00      	nop
 80032da:	bf00      	nop
 80032dc:	3724      	adds	r7, #36	; 0x24
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	40023800 	.word	0x40023800
 80032ec:	40013800 	.word	0x40013800
 80032f0:	40020000 	.word	0x40020000
 80032f4:	40020400 	.word	0x40020400
 80032f8:	40020800 	.word	0x40020800
 80032fc:	40020c00 	.word	0x40020c00
 8003300:	40021000 	.word	0x40021000
 8003304:	40021400 	.word	0x40021400
 8003308:	40021800 	.word	0x40021800
 800330c:	40021c00 	.word	0x40021c00
 8003310:	40022000 	.word	0x40022000
 8003314:	40022400 	.word	0x40022400
 8003318:	40013c00 	.word	0x40013c00

0800331c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691a      	ldr	r2, [r3, #16]
 800332c:	887b      	ldrh	r3, [r7, #2]
 800332e:	4013      	ands	r3, r2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003334:	2301      	movs	r3, #1
 8003336:	73fb      	strb	r3, [r7, #15]
 8003338:	e001      	b.n	800333e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800333a:	2300      	movs	r3, #0
 800333c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800333e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	807b      	strh	r3, [r7, #2]
 8003358:	4613      	mov	r3, r2
 800335a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800335c:	787b      	ldrb	r3, [r7, #1]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003362:	887a      	ldrh	r2, [r7, #2]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003368:	e003      	b.n	8003372 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800336a:	887b      	ldrh	r3, [r7, #2]
 800336c:	041a      	lsls	r2, r3, #16
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	619a      	str	r2, [r3, #24]
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
	...

08003380 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800338a:	4b08      	ldr	r3, [pc, #32]	; (80033ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800338c:	695a      	ldr	r2, [r3, #20]
 800338e:	88fb      	ldrh	r3, [r7, #6]
 8003390:	4013      	ands	r3, r2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d006      	beq.n	80033a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003396:	4a05      	ldr	r2, [pc, #20]	; (80033ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003398:	88fb      	ldrh	r3, [r7, #6]
 800339a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800339c:	88fb      	ldrh	r3, [r7, #6]
 800339e:	4618      	mov	r0, r3
 80033a0:	f007 fea6 	bl	800b0f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80033a4:	bf00      	nop
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40013c00 	.word	0x40013c00

080033b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e07f      	b.n	80034c2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d106      	bne.n	80033dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7fd ffbe 	bl	8001358 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2224      	movs	r2, #36	; 0x24
 80033e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0201 	bic.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003400:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003410:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d107      	bne.n	800342a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003426:	609a      	str	r2, [r3, #8]
 8003428:	e006      	b.n	8003438 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003436:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	2b02      	cmp	r3, #2
 800343e:	d104      	bne.n	800344a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003448:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6859      	ldr	r1, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	4b1d      	ldr	r3, [pc, #116]	; (80034cc <HAL_I2C_Init+0x11c>)
 8003456:	430b      	orrs	r3, r1
 8003458:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003468:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691a      	ldr	r2, [r3, #16]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69d9      	ldr	r1, [r3, #28]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a1a      	ldr	r2, [r3, #32]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	02008000 	.word	0x02008000

080034d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b20      	cmp	r3, #32
 80034e4:	d138      	bne.n	8003558 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034f0:	2302      	movs	r3, #2
 80034f2:	e032      	b.n	800355a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2224      	movs	r2, #36	; 0x24
 8003500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0201 	bic.w	r2, r2, #1
 8003512:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003522:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6819      	ldr	r1, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0201 	orr.w	r2, r2, #1
 8003542:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	e000      	b.n	800355a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003558:	2302      	movs	r3, #2
  }
}
 800355a:	4618      	mov	r0, r3
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003566:	b480      	push	{r7}
 8003568:	b085      	sub	sp, #20
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b20      	cmp	r3, #32
 800357a:	d139      	bne.n	80035f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003586:	2302      	movs	r3, #2
 8003588:	e033      	b.n	80035f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2224      	movs	r2, #36	; 0x24
 8003596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0201 	bic.w	r2, r2, #1
 80035a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	021b      	lsls	r3, r3, #8
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0201 	orr.w	r2, r2, #1
 80035da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035ec:	2300      	movs	r3, #0
 80035ee:	e000      	b.n	80035f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035f0:	2302      	movs	r3, #2
  }
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003600:	b08f      	sub	sp, #60	; 0x3c
 8003602:	af0a      	add	r7, sp, #40	; 0x28
 8003604:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e116      	b.n	800383e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d106      	bne.n	8003630 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f00d ff94 	bl	8011558 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2203      	movs	r2, #3
 8003634:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003640:	2b00      	cmp	r3, #0
 8003642:	d102      	bne.n	800364a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f006 f995 	bl	800997e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	603b      	str	r3, [r7, #0]
 800365a:	687e      	ldr	r6, [r7, #4]
 800365c:	466d      	mov	r5, sp
 800365e:	f106 0410 	add.w	r4, r6, #16
 8003662:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003664:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003666:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003668:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800366a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800366e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003672:	1d33      	adds	r3, r6, #4
 8003674:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003676:	6838      	ldr	r0, [r7, #0]
 8003678:	f006 f876 	bl	8009768 <USB_CoreInit>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d005      	beq.n	800368e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2202      	movs	r2, #2
 8003686:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e0d7      	b.n	800383e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2100      	movs	r1, #0
 8003694:	4618      	mov	r0, r3
 8003696:	f006 f983 	bl	80099a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800369a:	2300      	movs	r3, #0
 800369c:	73fb      	strb	r3, [r7, #15]
 800369e:	e04a      	b.n	8003736 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80036a0:	7bfa      	ldrb	r2, [r7, #15]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	333d      	adds	r3, #61	; 0x3d
 80036b0:	2201      	movs	r2, #1
 80036b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036b4:	7bfa      	ldrb	r2, [r7, #15]
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	4613      	mov	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4413      	add	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	333c      	adds	r3, #60	; 0x3c
 80036c4:	7bfa      	ldrb	r2, [r7, #15]
 80036c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036c8:	7bfa      	ldrb	r2, [r7, #15]
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
 80036cc:	b298      	uxth	r0, r3
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	4613      	mov	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	4413      	add	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	3344      	adds	r3, #68	; 0x44
 80036dc:	4602      	mov	r2, r0
 80036de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036e0:	7bfa      	ldrb	r2, [r7, #15]
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	4613      	mov	r3, r2
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	4413      	add	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	3340      	adds	r3, #64	; 0x40
 80036f0:	2200      	movs	r2, #0
 80036f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036f4:	7bfa      	ldrb	r2, [r7, #15]
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	4613      	mov	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	3348      	adds	r3, #72	; 0x48
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003708:	7bfa      	ldrb	r2, [r7, #15]
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	4613      	mov	r3, r2
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	4413      	add	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	334c      	adds	r3, #76	; 0x4c
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800371c:	7bfa      	ldrb	r2, [r7, #15]
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	4613      	mov	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	4413      	add	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	3354      	adds	r3, #84	; 0x54
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003730:	7bfb      	ldrb	r3, [r7, #15]
 8003732:	3301      	adds	r3, #1
 8003734:	73fb      	strb	r3, [r7, #15]
 8003736:	7bfa      	ldrb	r2, [r7, #15]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	429a      	cmp	r2, r3
 800373e:	d3af      	bcc.n	80036a0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003740:	2300      	movs	r3, #0
 8003742:	73fb      	strb	r3, [r7, #15]
 8003744:	e044      	b.n	80037d0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003746:	7bfa      	ldrb	r2, [r7, #15]
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	4613      	mov	r3, r2
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	4413      	add	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	440b      	add	r3, r1
 8003754:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003758:	2200      	movs	r2, #0
 800375a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800375c:	7bfa      	ldrb	r2, [r7, #15]
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	4613      	mov	r3, r2
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	4413      	add	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800376e:	7bfa      	ldrb	r2, [r7, #15]
 8003770:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003772:	7bfa      	ldrb	r2, [r7, #15]
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	4613      	mov	r3, r2
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003784:	2200      	movs	r2, #0
 8003786:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003788:	7bfa      	ldrb	r2, [r7, #15]
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	4613      	mov	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	4413      	add	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800379e:	7bfa      	ldrb	r2, [r7, #15]
 80037a0:	6879      	ldr	r1, [r7, #4]
 80037a2:	4613      	mov	r3, r2
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	4413      	add	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	440b      	add	r3, r1
 80037ac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037b4:	7bfa      	ldrb	r2, [r7, #15]
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	4613      	mov	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ca:	7bfb      	ldrb	r3, [r7, #15]
 80037cc:	3301      	adds	r3, #1
 80037ce:	73fb      	strb	r3, [r7, #15]
 80037d0:	7bfa      	ldrb	r2, [r7, #15]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d3b5      	bcc.n	8003746 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	603b      	str	r3, [r7, #0]
 80037e0:	687e      	ldr	r6, [r7, #4]
 80037e2:	466d      	mov	r5, sp
 80037e4:	f106 0410 	add.w	r4, r6, #16
 80037e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80037f8:	1d33      	adds	r3, r6, #4
 80037fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037fc:	6838      	ldr	r0, [r7, #0]
 80037fe:	f006 f91b 	bl	8009a38 <USB_DevInit>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e014      	b.n	800383e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	2b01      	cmp	r3, #1
 800382a:	d102      	bne.n	8003832 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f001 f97b 	bl	8004b28 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f007 fa69 	bl	800ad0e <USB_DevDisconnect>

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003846 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003854:	2b01      	cmp	r3, #1
 8003856:	d101      	bne.n	800385c <HAL_PCD_Start+0x16>
 8003858:	2302      	movs	r3, #2
 800385a:	e012      	b.n	8003882 <HAL_PCD_Start+0x3c>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4618      	mov	r0, r3
 800386a:	f006 f877 	bl	800995c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f007 fa2a 	bl	800accc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800388a:	b590      	push	{r4, r7, lr}
 800388c:	b08d      	sub	sp, #52	; 0x34
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f007 fae8 	bl	800ae76 <USB_GetMode>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f040 84b7 	bne.w	800421c <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f007 fa4c 	bl	800ad50 <USB_ReadInterrupts>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 84ad 	beq.w	800421a <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	0a1b      	lsrs	r3, r3, #8
 80038ca:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4618      	mov	r0, r3
 80038da:	f007 fa39 	bl	800ad50 <USB_ReadInterrupts>
 80038de:	4603      	mov	r3, r0
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d107      	bne.n	80038f8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f002 0202 	and.w	r2, r2, #2
 80038f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f007 fa27 	bl	800ad50 <USB_ReadInterrupts>
 8003902:	4603      	mov	r3, r0
 8003904:	f003 0310 	and.w	r3, r3, #16
 8003908:	2b10      	cmp	r3, #16
 800390a:	d161      	bne.n	80039d0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	699a      	ldr	r2, [r3, #24]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0210 	bic.w	r2, r2, #16
 800391a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	f003 020f 	and.w	r2, r3, #15
 8003928:	4613      	mov	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	4413      	add	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	4413      	add	r3, r2
 8003938:	3304      	adds	r3, #4
 800393a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	0c5b      	lsrs	r3, r3, #17
 8003940:	f003 030f 	and.w	r3, r3, #15
 8003944:	2b02      	cmp	r3, #2
 8003946:	d124      	bne.n	8003992 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800394e:	4013      	ands	r3, r2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d035      	beq.n	80039c0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	091b      	lsrs	r3, r3, #4
 800395c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800395e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003962:	b29b      	uxth	r3, r3
 8003964:	461a      	mov	r2, r3
 8003966:	6a38      	ldr	r0, [r7, #32]
 8003968:	f007 f85e 	bl	800aa28 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	091b      	lsrs	r3, r3, #4
 8003974:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003978:	441a      	add	r2, r3
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	6a1a      	ldr	r2, [r3, #32]
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	091b      	lsrs	r3, r3, #4
 8003986:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800398a:	441a      	add	r2, r3
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	621a      	str	r2, [r3, #32]
 8003990:	e016      	b.n	80039c0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	0c5b      	lsrs	r3, r3, #17
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	2b06      	cmp	r3, #6
 800399c:	d110      	bne.n	80039c0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039a4:	2208      	movs	r2, #8
 80039a6:	4619      	mov	r1, r3
 80039a8:	6a38      	ldr	r0, [r7, #32]
 80039aa:	f007 f83d 	bl	800aa28 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	6a1a      	ldr	r2, [r3, #32]
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	091b      	lsrs	r3, r3, #4
 80039b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039ba:	441a      	add	r2, r3
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699a      	ldr	r2, [r3, #24]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0210 	orr.w	r2, r2, #16
 80039ce:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f007 f9bb 	bl	800ad50 <USB_ReadInterrupts>
 80039da:	4603      	mov	r3, r0
 80039dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80039e4:	f040 80a7 	bne.w	8003b36 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f007 f9c0 	bl	800ad76 <USB_ReadDevAllOutEpInterrupt>
 80039f6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80039f8:	e099      	b.n	8003b2e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80039fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 808e 	beq.w	8003b22 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	4611      	mov	r1, r2
 8003a10:	4618      	mov	r0, r3
 8003a12:	f007 f9e4 	bl	800adde <USB_ReadDevOutEPInterrupt>
 8003a16:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00c      	beq.n	8003a3c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	015a      	lsls	r2, r3, #5
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a2e:	461a      	mov	r2, r3
 8003a30:	2301      	movs	r3, #1
 8003a32:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003a34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 fef0 	bl	800481c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00c      	beq.n	8003a60 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	015a      	lsls	r2, r3, #5
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a52:	461a      	mov	r2, r3
 8003a54:	2308      	movs	r3, #8
 8003a56:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003a58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 ffc6 	bl	80049ec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	f003 0310 	and.w	r3, r3, #16
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d008      	beq.n	8003a7c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	015a      	lsls	r2, r3, #5
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	4413      	add	r3, r2
 8003a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a76:	461a      	mov	r2, r3
 8003a78:	2310      	movs	r3, #16
 8003a7a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d030      	beq.n	8003ae8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8e:	2b80      	cmp	r3, #128	; 0x80
 8003a90:	d109      	bne.n	8003aa6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	69fa      	ldr	r2, [r7, #28]
 8003a9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aa0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003aa4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	4413      	add	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	3304      	adds	r3, #4
 8003aba:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	78db      	ldrb	r3, [r3, #3]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d108      	bne.n	8003ad6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	4619      	mov	r1, r3
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f00d fe65 	bl	80117a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	015a      	lsls	r2, r3, #5
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	f003 0320 	and.w	r3, r3, #32
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d008      	beq.n	8003b04 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	015a      	lsls	r2, r3, #5
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003afe:	461a      	mov	r2, r3
 8003b00:	2320      	movs	r3, #32
 8003b02:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d009      	beq.n	8003b22 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	015a      	lsls	r2, r3, #5
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	4413      	add	r3, r2
 8003b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b20:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	3301      	adds	r3, #1
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	085b      	lsrs	r3, r3, #1
 8003b2c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f47f af62 	bne.w	80039fa <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f007 f908 	bl	800ad50 <USB_ReadInterrupts>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b4a:	f040 80db 	bne.w	8003d04 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f007 f929 	bl	800adaa <USB_ReadDevAllInEpInterrupt>
 8003b58:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003b5e:	e0cd      	b.n	8003cfc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 80c2 	beq.w	8003cf0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	4611      	mov	r1, r2
 8003b76:	4618      	mov	r0, r3
 8003b78:	f007 f94f 	bl	800ae1a <USB_ReadDevInEPInterrupt>
 8003b7c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d057      	beq.n	8003c38 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	2201      	movs	r2, #1
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	69f9      	ldr	r1, [r7, #28]
 8003ba4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ba8:	4013      	ands	r3, r2
 8003baa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb8:	461a      	mov	r2, r3
 8003bba:	2301      	movs	r3, #1
 8003bbc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d132      	bne.n	8003c2c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bca:	4613      	mov	r3, r2
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	4413      	add	r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	440b      	add	r3, r1
 8003bd4:	334c      	adds	r3, #76	; 0x4c
 8003bd6:	6819      	ldr	r1, [r3, #0]
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bdc:	4613      	mov	r3, r2
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	4413      	add	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4403      	add	r3, r0
 8003be6:	3348      	adds	r3, #72	; 0x48
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4419      	add	r1, r3
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4403      	add	r3, r0
 8003bfa:	334c      	adds	r3, #76	; 0x4c
 8003bfc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d113      	bne.n	8003c2c <HAL_PCD_IRQHandler+0x3a2>
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c08:	4613      	mov	r3, r2
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	4413      	add	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	3354      	adds	r3, #84	; 0x54
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d108      	bne.n	8003c2c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6818      	ldr	r0, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c24:	461a      	mov	r2, r3
 8003c26:	2101      	movs	r1, #1
 8003c28:	f007 f958 	bl	800aedc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	4619      	mov	r1, r3
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f00d fd2f 	bl	8011696 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f003 0308 	and.w	r3, r3, #8
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d008      	beq.n	8003c54 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c4e:	461a      	mov	r2, r3
 8003c50:	2308      	movs	r3, #8
 8003c52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	f003 0310 	and.w	r3, r3, #16
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d008      	beq.n	8003c70 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	2310      	movs	r3, #16
 8003c6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d008      	beq.n	8003c8c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c86:	461a      	mov	r2, r3
 8003c88:	2340      	movs	r3, #64	; 0x40
 8003c8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d023      	beq.n	8003cde <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003c96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c98:	6a38      	ldr	r0, [r7, #32]
 8003c9a:	f006 f82b 	bl	8009cf4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	4413      	add	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	3338      	adds	r3, #56	; 0x38
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	4413      	add	r3, r2
 8003cae:	3304      	adds	r3, #4
 8003cb0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	78db      	ldrb	r3, [r3, #3]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d108      	bne.n	8003ccc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f00d fd7c 	bl	80117c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	015a      	lsls	r2, r3, #5
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd8:	461a      	mov	r2, r3
 8003cda:	2302      	movs	r3, #2
 8003cdc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003ce8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 fd08 	bl	8004700 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf8:	085b      	lsrs	r3, r3, #1
 8003cfa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f47f af2e 	bne.w	8003b60 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f007 f821 	bl	800ad50 <USB_ReadInterrupts>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d18:	d122      	bne.n	8003d60 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	69fa      	ldr	r2, [r7, #28]
 8003d24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d28:	f023 0301 	bic.w	r3, r3, #1
 8003d2c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d108      	bne.n	8003d4a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003d40:	2100      	movs	r1, #0
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f00d fef6 	bl	8011b34 <HAL_PCDEx_LPM_Callback>
 8003d48:	e002      	b.n	8003d50 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f00d fd1a 	bl	8011784 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695a      	ldr	r2, [r3, #20]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003d5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f006 fff3 	bl	800ad50 <USB_ReadInterrupts>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d74:	d112      	bne.n	8003d9c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d102      	bne.n	8003d8c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f00d fcd6 	bl	8011738 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	695a      	ldr	r2, [r3, #20]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003d9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f006 ffd5 	bl	800ad50 <USB_ReadInterrupts>
 8003da6:	4603      	mov	r3, r0
 8003da8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003db0:	d121      	bne.n	8003df6 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695a      	ldr	r2, [r3, #20]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003dc0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d111      	bne.n	8003df0 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dda:	089b      	lsrs	r3, r3, #2
 8003ddc:	f003 020f 	and.w	r2, r3, #15
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003de6:	2101      	movs	r1, #1
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f00d fea3 	bl	8011b34 <HAL_PCDEx_LPM_Callback>
 8003dee:	e002      	b.n	8003df6 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f00d fca1 	bl	8011738 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f006 ffa8 	bl	800ad50 <USB_ReadInterrupts>
 8003e00:	4603      	mov	r3, r0
 8003e02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e0a:	f040 80b7 	bne.w	8003f7c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	69fa      	ldr	r2, [r7, #28]
 8003e18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e1c:	f023 0301 	bic.w	r3, r3, #1
 8003e20:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2110      	movs	r1, #16
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f005 ff63 	bl	8009cf4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e2e:	2300      	movs	r3, #0
 8003e30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e32:	e046      	b.n	8003ec2 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e40:	461a      	mov	r2, r3
 8003e42:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e46:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e58:	0151      	lsls	r1, r2, #5
 8003e5a:	69fa      	ldr	r2, [r7, #28]
 8003e5c:	440a      	add	r2, r1
 8003e5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e66:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e74:	461a      	mov	r2, r3
 8003e76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e7a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e8c:	0151      	lsls	r1, r2, #5
 8003e8e:	69fa      	ldr	r2, [r7, #28]
 8003e90:	440a      	add	r2, r1
 8003e92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e9a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eac:	0151      	lsls	r1, r2, #5
 8003eae:	69fa      	ldr	r2, [r7, #28]
 8003eb0:	440a      	add	r2, r1
 8003eb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eb6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003eba:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d3b3      	bcc.n	8003e34 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eda:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003ede:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d016      	beq.n	8003f16 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ef2:	69fa      	ldr	r2, [r7, #28]
 8003ef4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ef8:	f043 030b 	orr.w	r3, r3, #11
 8003efc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f08:	69fa      	ldr	r2, [r7, #28]
 8003f0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f0e:	f043 030b 	orr.w	r3, r3, #11
 8003f12:	6453      	str	r3, [r2, #68]	; 0x44
 8003f14:	e015      	b.n	8003f42 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f1c:	695a      	ldr	r2, [r3, #20]
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f24:	4619      	mov	r1, r3
 8003f26:	f242 032b 	movw	r3, #8235	; 0x202b
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	69fa      	ldr	r2, [r7, #28]
 8003f38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f3c:	f043 030b 	orr.w	r3, r3, #11
 8003f40:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	69fa      	ldr	r2, [r7, #28]
 8003f4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f50:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003f54:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f66:	461a      	mov	r2, r3
 8003f68:	f006 ffb8 	bl	800aedc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695a      	ldr	r2, [r3, #20]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003f7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f006 fee5 	bl	800ad50 <USB_ReadInterrupts>
 8003f86:	4603      	mov	r3, r0
 8003f88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f90:	d124      	bne.n	8003fdc <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f006 ff7c 	bl	800ae94 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f005 ff24 	bl	8009dee <USB_GetDevSpeed>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	461a      	mov	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681c      	ldr	r4, [r3, #0]
 8003fb2:	f001 facd 	bl	8005550 <HAL_RCC_GetHCLKFreq>
 8003fb6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	4620      	mov	r0, r4
 8003fc2:	f005 fc29 	bl	8009818 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f00d fb8d 	bl	80116e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	695a      	ldr	r2, [r3, #20]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003fda:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f006 feb5 	bl	800ad50 <USB_ReadInterrupts>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d10a      	bne.n	8004006 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f00d fb6a 	bl	80116ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695a      	ldr	r2, [r3, #20]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f002 0208 	and.w	r2, r2, #8
 8004004:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f006 fea0 	bl	800ad50 <USB_ReadInterrupts>
 8004010:	4603      	mov	r3, r0
 8004012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004016:	2b80      	cmp	r3, #128	; 0x80
 8004018:	d122      	bne.n	8004060 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004026:	2301      	movs	r3, #1
 8004028:	627b      	str	r3, [r7, #36]	; 0x24
 800402a:	e014      	b.n	8004056 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004030:	4613      	mov	r3, r2
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	4413      	add	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	440b      	add	r3, r1
 800403a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d105      	bne.n	8004050 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004046:	b2db      	uxtb	r3, r3
 8004048:	4619      	mov	r1, r3
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fb27 	bl	800469e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	3301      	adds	r3, #1
 8004054:	627b      	str	r3, [r7, #36]	; 0x24
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800405c:	429a      	cmp	r2, r3
 800405e:	d3e5      	bcc.n	800402c <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4618      	mov	r0, r3
 8004066:	f006 fe73 	bl	800ad50 <USB_ReadInterrupts>
 800406a:	4603      	mov	r3, r0
 800406c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004070:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004074:	d13b      	bne.n	80040ee <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004076:	2301      	movs	r3, #1
 8004078:	627b      	str	r3, [r7, #36]	; 0x24
 800407a:	e02b      	b.n	80040d4 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	4413      	add	r3, r2
 8004084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004090:	4613      	mov	r3, r2
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	4413      	add	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	3340      	adds	r3, #64	; 0x40
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d115      	bne.n	80040ce <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80040a2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	da12      	bge.n	80040ce <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ac:	4613      	mov	r3, r2
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	4413      	add	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	333f      	adds	r3, #63	; 0x3f
 80040b8:	2201      	movs	r2, #1
 80040ba:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	4619      	mov	r1, r3
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 fae8 	bl	800469e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	3301      	adds	r3, #1
 80040d2:	627b      	str	r3, [r7, #36]	; 0x24
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040da:	429a      	cmp	r2, r3
 80040dc:	d3ce      	bcc.n	800407c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	695a      	ldr	r2, [r3, #20]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80040ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f006 fe2c 	bl	800ad50 <USB_ReadInterrupts>
 80040f8:	4603      	mov	r3, r0
 80040fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004102:	d155      	bne.n	80041b0 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004104:	2301      	movs	r3, #1
 8004106:	627b      	str	r3, [r7, #36]	; 0x24
 8004108:	e045      	b.n	8004196 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	015a      	lsls	r2, r3, #5
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	4413      	add	r3, r2
 8004112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800411e:	4613      	mov	r3, r2
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	4413      	add	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	440b      	add	r3, r1
 8004128:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d12e      	bne.n	8004190 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004132:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004134:	2b00      	cmp	r3, #0
 8004136:	da2b      	bge.n	8004190 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004144:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004148:	429a      	cmp	r2, r3
 800414a:	d121      	bne.n	8004190 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800414c:	6879      	ldr	r1, [r7, #4]
 800414e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004150:	4613      	mov	r3, r2
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	4413      	add	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800415e:	2201      	movs	r2, #1
 8004160:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004162:	6a3b      	ldr	r3, [r7, #32]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10a      	bne.n	8004190 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	69fa      	ldr	r2, [r7, #28]
 8004184:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004188:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800418c:	6053      	str	r3, [r2, #4]
            break;
 800418e:	e007      	b.n	80041a0 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	3301      	adds	r3, #1
 8004194:	627b      	str	r3, [r7, #36]	; 0x24
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800419c:	429a      	cmp	r2, r3
 800419e:	d3b4      	bcc.n	800410a <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695a      	ldr	r2, [r3, #20]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80041ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f006 fdcb 	bl	800ad50 <USB_ReadInterrupts>
 80041ba:	4603      	mov	r3, r0
 80041bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80041c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c4:	d10a      	bne.n	80041dc <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f00d fb0e 	bl	80117e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695a      	ldr	r2, [r3, #20]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80041da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f006 fdb5 	bl	800ad50 <USB_ReadInterrupts>
 80041e6:	4603      	mov	r3, r0
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b04      	cmp	r3, #4
 80041ee:	d115      	bne.n	800421c <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	f003 0304 	and.w	r3, r3, #4
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d002      	beq.n	8004208 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f00d fafe 	bl	8011804 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6859      	ldr	r1, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	430a      	orrs	r2, r1
 8004216:	605a      	str	r2, [r3, #4]
 8004218:	e000      	b.n	800421c <HAL_PCD_IRQHandler+0x992>
      return;
 800421a:	bf00      	nop
    }
  }
}
 800421c:	3734      	adds	r7, #52	; 0x34
 800421e:	46bd      	mov	sp, r7
 8004220:	bd90      	pop	{r4, r7, pc}

08004222 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b082      	sub	sp, #8
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	460b      	mov	r3, r1
 800422c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_PCD_SetAddress+0x1a>
 8004238:	2302      	movs	r3, #2
 800423a:	e013      	b.n	8004264 <HAL_PCD_SetAddress+0x42>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	78fa      	ldrb	r2, [r7, #3]
 8004248:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	78fa      	ldrb	r2, [r7, #3]
 8004252:	4611      	mov	r1, r2
 8004254:	4618      	mov	r0, r3
 8004256:	f006 fd13 	bl	800ac80 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	4608      	mov	r0, r1
 8004276:	4611      	mov	r1, r2
 8004278:	461a      	mov	r2, r3
 800427a:	4603      	mov	r3, r0
 800427c:	70fb      	strb	r3, [r7, #3]
 800427e:	460b      	mov	r3, r1
 8004280:	803b      	strh	r3, [r7, #0]
 8004282:	4613      	mov	r3, r2
 8004284:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004286:	2300      	movs	r3, #0
 8004288:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800428a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800428e:	2b00      	cmp	r3, #0
 8004290:	da0f      	bge.n	80042b2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004292:	78fb      	ldrb	r3, [r7, #3]
 8004294:	f003 020f 	and.w	r2, r3, #15
 8004298:	4613      	mov	r3, r2
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	4413      	add	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	3338      	adds	r3, #56	; 0x38
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	4413      	add	r3, r2
 80042a6:	3304      	adds	r3, #4
 80042a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2201      	movs	r2, #1
 80042ae:	705a      	strb	r2, [r3, #1]
 80042b0:	e00f      	b.n	80042d2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042b2:	78fb      	ldrb	r3, [r7, #3]
 80042b4:	f003 020f 	and.w	r2, r3, #15
 80042b8:	4613      	mov	r3, r2
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	4413      	add	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	4413      	add	r3, r2
 80042c8:	3304      	adds	r3, #4
 80042ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80042d2:	78fb      	ldrb	r3, [r7, #3]
 80042d4:	f003 030f 	and.w	r3, r3, #15
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80042de:	883a      	ldrh	r2, [r7, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	78ba      	ldrb	r2, [r7, #2]
 80042e8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	785b      	ldrb	r3, [r3, #1]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d004      	beq.n	80042fc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80042fc:	78bb      	ldrb	r3, [r7, #2]
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d102      	bne.n	8004308 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800430e:	2b01      	cmp	r3, #1
 8004310:	d101      	bne.n	8004316 <HAL_PCD_EP_Open+0xaa>
 8004312:	2302      	movs	r3, #2
 8004314:	e00e      	b.n	8004334 <HAL_PCD_EP_Open+0xc8>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68f9      	ldr	r1, [r7, #12]
 8004324:	4618      	mov	r0, r3
 8004326:	f005 fd87 	bl	8009e38 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004332:	7afb      	ldrb	r3, [r7, #11]
}
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	460b      	mov	r3, r1
 8004346:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004348:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800434c:	2b00      	cmp	r3, #0
 800434e:	da0f      	bge.n	8004370 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004350:	78fb      	ldrb	r3, [r7, #3]
 8004352:	f003 020f 	and.w	r2, r3, #15
 8004356:	4613      	mov	r3, r2
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	4413      	add	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	3338      	adds	r3, #56	; 0x38
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	4413      	add	r3, r2
 8004364:	3304      	adds	r3, #4
 8004366:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2201      	movs	r2, #1
 800436c:	705a      	strb	r2, [r3, #1]
 800436e:	e00f      	b.n	8004390 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004370:	78fb      	ldrb	r3, [r7, #3]
 8004372:	f003 020f 	and.w	r2, r3, #15
 8004376:	4613      	mov	r3, r2
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	4413      	add	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	4413      	add	r3, r2
 8004386:	3304      	adds	r3, #4
 8004388:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004390:	78fb      	ldrb	r3, [r7, #3]
 8004392:	f003 030f 	and.w	r3, r3, #15
 8004396:	b2da      	uxtb	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d101      	bne.n	80043aa <HAL_PCD_EP_Close+0x6e>
 80043a6:	2302      	movs	r3, #2
 80043a8:	e00e      	b.n	80043c8 <HAL_PCD_EP_Close+0x8c>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68f9      	ldr	r1, [r7, #12]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f005 fdc5 	bl	8009f48 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	607a      	str	r2, [r7, #4]
 80043da:	603b      	str	r3, [r7, #0]
 80043dc:	460b      	mov	r3, r1
 80043de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043e0:	7afb      	ldrb	r3, [r7, #11]
 80043e2:	f003 020f 	and.w	r2, r3, #15
 80043e6:	4613      	mov	r3, r2
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	4413      	add	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	4413      	add	r3, r2
 80043f6:	3304      	adds	r3, #4
 80043f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	2200      	movs	r2, #0
 800440a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	2200      	movs	r2, #0
 8004410:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004412:	7afb      	ldrb	r3, [r7, #11]
 8004414:	f003 030f 	and.w	r3, r3, #15
 8004418:	b2da      	uxtb	r2, r3
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d102      	bne.n	800442c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800442c:	7afb      	ldrb	r3, [r7, #11]
 800442e:	f003 030f 	and.w	r3, r3, #15
 8004432:	2b00      	cmp	r3, #0
 8004434:	d109      	bne.n	800444a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6818      	ldr	r0, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	b2db      	uxtb	r3, r3
 8004440:	461a      	mov	r2, r3
 8004442:	6979      	ldr	r1, [r7, #20]
 8004444:	f006 f8ac 	bl	800a5a0 <USB_EP0StartXfer>
 8004448:	e008      	b.n	800445c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6818      	ldr	r0, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	b2db      	uxtb	r3, r3
 8004454:	461a      	mov	r2, r3
 8004456:	6979      	ldr	r1, [r7, #20]
 8004458:	f005 fe52 	bl	800a100 <USB_EPStartXfer>
  }

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3718      	adds	r7, #24
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	460b      	mov	r3, r1
 8004470:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004472:	78fb      	ldrb	r3, [r7, #3]
 8004474:	f003 020f 	and.w	r2, r3, #15
 8004478:	6879      	ldr	r1, [r7, #4]
 800447a:	4613      	mov	r3, r2
 800447c:	00db      	lsls	r3, r3, #3
 800447e:	4413      	add	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	440b      	add	r3, r1
 8004484:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004488:	681b      	ldr	r3, [r3, #0]
}
 800448a:	4618      	mov	r0, r3
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b086      	sub	sp, #24
 800449a:	af00      	add	r7, sp, #0
 800449c:	60f8      	str	r0, [r7, #12]
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	603b      	str	r3, [r7, #0]
 80044a2:	460b      	mov	r3, r1
 80044a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044a6:	7afb      	ldrb	r3, [r7, #11]
 80044a8:	f003 020f 	and.w	r2, r3, #15
 80044ac:	4613      	mov	r3, r2
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	4413      	add	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	3338      	adds	r3, #56	; 0x38
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4413      	add	r3, r2
 80044ba:	3304      	adds	r3, #4
 80044bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2200      	movs	r2, #0
 80044ce:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	2201      	movs	r2, #1
 80044d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044d6:	7afb      	ldrb	r3, [r7, #11]
 80044d8:	f003 030f 	and.w	r3, r3, #15
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d102      	bne.n	80044f0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044f0:	7afb      	ldrb	r3, [r7, #11]
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d109      	bne.n	800450e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6818      	ldr	r0, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	b2db      	uxtb	r3, r3
 8004504:	461a      	mov	r2, r3
 8004506:	6979      	ldr	r1, [r7, #20]
 8004508:	f006 f84a 	bl	800a5a0 <USB_EP0StartXfer>
 800450c:	e008      	b.n	8004520 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6818      	ldr	r0, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	b2db      	uxtb	r3, r3
 8004518:	461a      	mov	r2, r3
 800451a:	6979      	ldr	r1, [r7, #20]
 800451c:	f005 fdf0 	bl	800a100 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3718      	adds	r7, #24
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b084      	sub	sp, #16
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
 8004532:	460b      	mov	r3, r1
 8004534:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004536:	78fb      	ldrb	r3, [r7, #3]
 8004538:	f003 020f 	and.w	r2, r3, #15
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	429a      	cmp	r2, r3
 8004542:	d901      	bls.n	8004548 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e050      	b.n	80045ea <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004548:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800454c:	2b00      	cmp	r3, #0
 800454e:	da0f      	bge.n	8004570 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004550:	78fb      	ldrb	r3, [r7, #3]
 8004552:	f003 020f 	and.w	r2, r3, #15
 8004556:	4613      	mov	r3, r2
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	4413      	add	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	3338      	adds	r3, #56	; 0x38
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	4413      	add	r3, r2
 8004564:	3304      	adds	r3, #4
 8004566:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2201      	movs	r2, #1
 800456c:	705a      	strb	r2, [r3, #1]
 800456e:	e00d      	b.n	800458c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004570:	78fa      	ldrb	r2, [r7, #3]
 8004572:	4613      	mov	r3, r2
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	4413      	add	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	4413      	add	r3, r2
 8004582:	3304      	adds	r3, #4
 8004584:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2201      	movs	r2, #1
 8004590:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004592:	78fb      	ldrb	r3, [r7, #3]
 8004594:	f003 030f 	and.w	r3, r3, #15
 8004598:	b2da      	uxtb	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d101      	bne.n	80045ac <HAL_PCD_EP_SetStall+0x82>
 80045a8:	2302      	movs	r3, #2
 80045aa:	e01e      	b.n	80045ea <HAL_PCD_EP_SetStall+0xc0>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68f9      	ldr	r1, [r7, #12]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f006 fa8c 	bl	800aad8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80045c0:	78fb      	ldrb	r3, [r7, #3]
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10a      	bne.n	80045e0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	b2d9      	uxtb	r1, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80045da:	461a      	mov	r2, r3
 80045dc:	f006 fc7e 	bl	800aedc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b084      	sub	sp, #16
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	460b      	mov	r3, r1
 80045fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80045fe:	78fb      	ldrb	r3, [r7, #3]
 8004600:	f003 020f 	and.w	r2, r3, #15
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	429a      	cmp	r2, r3
 800460a:	d901      	bls.n	8004610 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e042      	b.n	8004696 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004610:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004614:	2b00      	cmp	r3, #0
 8004616:	da0f      	bge.n	8004638 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004618:	78fb      	ldrb	r3, [r7, #3]
 800461a:	f003 020f 	and.w	r2, r3, #15
 800461e:	4613      	mov	r3, r2
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	4413      	add	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	3338      	adds	r3, #56	; 0x38
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	4413      	add	r3, r2
 800462c:	3304      	adds	r3, #4
 800462e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2201      	movs	r2, #1
 8004634:	705a      	strb	r2, [r3, #1]
 8004636:	e00f      	b.n	8004658 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004638:	78fb      	ldrb	r3, [r7, #3]
 800463a:	f003 020f 	and.w	r2, r3, #15
 800463e:	4613      	mov	r3, r2
 8004640:	00db      	lsls	r3, r3, #3
 8004642:	4413      	add	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	4413      	add	r3, r2
 800464e:	3304      	adds	r3, #4
 8004650:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800465e:	78fb      	ldrb	r3, [r7, #3]
 8004660:	f003 030f 	and.w	r3, r3, #15
 8004664:	b2da      	uxtb	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004670:	2b01      	cmp	r3, #1
 8004672:	d101      	bne.n	8004678 <HAL_PCD_EP_ClrStall+0x86>
 8004674:	2302      	movs	r3, #2
 8004676:	e00e      	b.n	8004696 <HAL_PCD_EP_ClrStall+0xa4>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68f9      	ldr	r1, [r7, #12]
 8004686:	4618      	mov	r0, r3
 8004688:	f006 fa94 	bl	800abb4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b084      	sub	sp, #16
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
 80046a6:	460b      	mov	r3, r1
 80046a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80046aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	da0c      	bge.n	80046cc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046b2:	78fb      	ldrb	r3, [r7, #3]
 80046b4:	f003 020f 	and.w	r2, r3, #15
 80046b8:	4613      	mov	r3, r2
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	4413      	add	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	3338      	adds	r3, #56	; 0x38
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	4413      	add	r3, r2
 80046c6:	3304      	adds	r3, #4
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	e00c      	b.n	80046e6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046cc:	78fb      	ldrb	r3, [r7, #3]
 80046ce:	f003 020f 	and.w	r2, r3, #15
 80046d2:	4613      	mov	r3, r2
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	4413      	add	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	4413      	add	r3, r2
 80046e2:	3304      	adds	r3, #4
 80046e4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68f9      	ldr	r1, [r7, #12]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f006 f8b3 	bl	800a858 <USB_EPStopXfer>
 80046f2:	4603      	mov	r3, r0
 80046f4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80046f6:	7afb      	ldrb	r3, [r7, #11]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b08a      	sub	sp, #40	; 0x28
 8004704:	af02      	add	r7, sp, #8
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	4613      	mov	r3, r2
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	4413      	add	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	3338      	adds	r3, #56	; 0x38
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	4413      	add	r3, r2
 8004724:	3304      	adds	r3, #4
 8004726:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6a1a      	ldr	r2, [r3, #32]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	429a      	cmp	r2, r3
 8004732:	d901      	bls.n	8004738 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e06c      	b.n	8004812 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	699a      	ldr	r2, [r3, #24]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	69fa      	ldr	r2, [r7, #28]
 800474a:	429a      	cmp	r2, r3
 800474c:	d902      	bls.n	8004754 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	3303      	adds	r3, #3
 8004758:	089b      	lsrs	r3, r3, #2
 800475a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800475c:	e02b      	b.n	80047b6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	699a      	ldr	r2, [r3, #24]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	69fa      	ldr	r2, [r7, #28]
 8004770:	429a      	cmp	r2, r3
 8004772:	d902      	bls.n	800477a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	3303      	adds	r3, #3
 800477e:	089b      	lsrs	r3, r3, #2
 8004780:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6919      	ldr	r1, [r3, #16]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	b2da      	uxtb	r2, r3
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004792:	b2db      	uxtb	r3, r3
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	4603      	mov	r3, r0
 8004798:	6978      	ldr	r0, [r7, #20]
 800479a:	f006 f907 	bl	800a9ac <USB_WritePacket>

    ep->xfer_buff  += len;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	691a      	ldr	r2, [r3, #16]
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	441a      	add	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6a1a      	ldr	r2, [r3, #32]
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	441a      	add	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	015a      	lsls	r2, r3, #5
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	4413      	add	r3, r2
 80047be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d809      	bhi.n	80047e0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a1a      	ldr	r2, [r3, #32]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d203      	bcs.n	80047e0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1be      	bne.n	800475e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	699a      	ldr	r2, [r3, #24]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d811      	bhi.n	8004810 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	f003 030f 	and.w	r3, r3, #15
 80047f2:	2201      	movs	r2, #1
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	43db      	mvns	r3, r3
 8004806:	6939      	ldr	r1, [r7, #16]
 8004808:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800480c:	4013      	ands	r3, r2
 800480e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3720      	adds	r7, #32
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
	...

0800481c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b088      	sub	sp, #32
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	333c      	adds	r3, #60	; 0x3c
 8004834:	3304      	adds	r3, #4
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	4413      	add	r3, r2
 8004842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d17b      	bne.n	800494a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f003 0308 	and.w	r3, r3, #8
 8004858:	2b00      	cmp	r3, #0
 800485a:	d015      	beq.n	8004888 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	4a61      	ldr	r2, [pc, #388]	; (80049e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	f240 80b9 	bls.w	80049d8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 80b3 	beq.w	80049d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487e:	461a      	mov	r2, r3
 8004880:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004884:	6093      	str	r3, [r2, #8]
 8004886:	e0a7      	b.n	80049d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f003 0320 	and.w	r3, r3, #32
 800488e:	2b00      	cmp	r3, #0
 8004890:	d009      	beq.n	80048a6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	4413      	add	r3, r2
 800489a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489e:	461a      	mov	r2, r3
 80048a0:	2320      	movs	r3, #32
 80048a2:	6093      	str	r3, [r2, #8]
 80048a4:	e098      	b.n	80049d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f040 8093 	bne.w	80049d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	4a4b      	ldr	r2, [pc, #300]	; (80049e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d90f      	bls.n	80048da <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00a      	beq.n	80048da <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d0:	461a      	mov	r2, r3
 80048d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048d6:	6093      	str	r3, [r2, #8]
 80048d8:	e07e      	b.n	80049d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	4613      	mov	r3, r2
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	4413      	add	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	4413      	add	r3, r2
 80048ec:	3304      	adds	r3, #4
 80048ee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	69da      	ldr	r2, [r3, #28]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	0159      	lsls	r1, r3, #5
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	440b      	add	r3, r1
 80048fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004906:	1ad2      	subs	r2, r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d114      	bne.n	800493c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d109      	bne.n	800492e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6818      	ldr	r0, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004924:	461a      	mov	r2, r3
 8004926:	2101      	movs	r1, #1
 8004928:	f006 fad8 	bl	800aedc <USB_EP0_OutStart>
 800492c:	e006      	b.n	800493c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	691a      	ldr	r2, [r3, #16]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	441a      	add	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	b2db      	uxtb	r3, r3
 8004940:	4619      	mov	r1, r3
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f00c fe8c 	bl	8011660 <HAL_PCD_DataOutStageCallback>
 8004948:	e046      	b.n	80049d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	4a26      	ldr	r2, [pc, #152]	; (80049e8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d124      	bne.n	800499c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00a      	beq.n	8004972 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	015a      	lsls	r2, r3, #5
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	4413      	add	r3, r2
 8004964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004968:	461a      	mov	r2, r3
 800496a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800496e:	6093      	str	r3, [r2, #8]
 8004970:	e032      	b.n	80049d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f003 0320 	and.w	r3, r3, #32
 8004978:	2b00      	cmp	r3, #0
 800497a:	d008      	beq.n	800498e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	4413      	add	r3, r2
 8004984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004988:	461a      	mov	r2, r3
 800498a:	2320      	movs	r3, #32
 800498c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	b2db      	uxtb	r3, r3
 8004992:	4619      	mov	r1, r3
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f00c fe63 	bl	8011660 <HAL_PCD_DataOutStageCallback>
 800499a:	e01d      	b.n	80049d8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d114      	bne.n	80049cc <PCD_EP_OutXfrComplete_int+0x1b0>
 80049a2:	6879      	ldr	r1, [r7, #4]
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	4613      	mov	r3, r2
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	4413      	add	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	440b      	add	r3, r1
 80049b0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d108      	bne.n	80049cc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6818      	ldr	r0, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80049c4:	461a      	mov	r2, r3
 80049c6:	2100      	movs	r1, #0
 80049c8:	f006 fa88 	bl	800aedc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	4619      	mov	r1, r3
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f00c fe44 	bl	8011660 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3720      	adds	r7, #32
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	4f54300a 	.word	0x4f54300a
 80049e8:	4f54310a 	.word	0x4f54310a

080049ec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	333c      	adds	r3, #60	; 0x3c
 8004a04:	3304      	adds	r3, #4
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	4a15      	ldr	r2, [pc, #84]	; (8004a74 <PCD_EP_OutSetupPacket_int+0x88>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d90e      	bls.n	8004a40 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d009      	beq.n	8004a40 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a38:	461a      	mov	r2, r3
 8004a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a3e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f00c fdfb 	bl	801163c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	4a0a      	ldr	r2, [pc, #40]	; (8004a74 <PCD_EP_OutSetupPacket_int+0x88>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d90c      	bls.n	8004a68 <PCD_EP_OutSetupPacket_int+0x7c>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d108      	bne.n	8004a68 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6818      	ldr	r0, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a60:	461a      	mov	r2, r3
 8004a62:	2101      	movs	r1, #1
 8004a64:	f006 fa3a 	bl	800aedc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3718      	adds	r7, #24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	4f54300a 	.word	0x4f54300a

08004a78 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	460b      	mov	r3, r1
 8004a82:	70fb      	strb	r3, [r7, #3]
 8004a84:	4613      	mov	r3, r2
 8004a86:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004a90:	78fb      	ldrb	r3, [r7, #3]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d107      	bne.n	8004aa6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004a96:	883b      	ldrh	r3, [r7, #0]
 8004a98:	0419      	lsls	r1, r3, #16
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	629a      	str	r2, [r3, #40]	; 0x28
 8004aa4:	e028      	b.n	8004af8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aac:	0c1b      	lsrs	r3, r3, #16
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	73fb      	strb	r3, [r7, #15]
 8004ab8:	e00d      	b.n	8004ad6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	7bfb      	ldrb	r3, [r7, #15]
 8004ac0:	3340      	adds	r3, #64	; 0x40
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	0c1b      	lsrs	r3, r3, #16
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	4413      	add	r3, r2
 8004ace:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	73fb      	strb	r3, [r7, #15]
 8004ad6:	7bfa      	ldrb	r2, [r7, #15]
 8004ad8:	78fb      	ldrb	r3, [r7, #3]
 8004ada:	3b01      	subs	r3, #1
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d3ec      	bcc.n	8004aba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004ae0:	883b      	ldrh	r3, [r7, #0]
 8004ae2:	0418      	lsls	r0, r3, #16
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6819      	ldr	r1, [r3, #0]
 8004ae8:	78fb      	ldrb	r3, [r7, #3]
 8004aea:	3b01      	subs	r3, #1
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	4302      	orrs	r2, r0
 8004af0:	3340      	adds	r3, #64	; 0x40
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	440b      	add	r3, r1
 8004af6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b083      	sub	sp, #12
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	460b      	mov	r3, r1
 8004b10:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	887a      	ldrh	r2, [r7, #2]
 8004b18:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b56:	4b05      	ldr	r3, [pc, #20]	; (8004b6c <HAL_PCDEx_ActivateLPM+0x44>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	10000003 	.word	0x10000003

08004b70 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004b76:	2300      	movs	r3, #0
 8004b78:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004b7a:	4b23      	ldr	r3, [pc, #140]	; (8004c08 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	4a22      	ldr	r2, [pc, #136]	; (8004c08 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b84:	6413      	str	r3, [r2, #64]	; 0x40
 8004b86:	4b20      	ldr	r3, [pc, #128]	; (8004c08 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b8e:	603b      	str	r3, [r7, #0]
 8004b90:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004b92:	4b1e      	ldr	r3, [pc, #120]	; (8004c0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a1d      	ldr	r2, [pc, #116]	; (8004c0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b9c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b9e:	f7fc ff7d 	bl	8001a9c <HAL_GetTick>
 8004ba2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ba4:	e009      	b.n	8004bba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ba6:	f7fc ff79 	bl	8001a9c <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bb4:	d901      	bls.n	8004bba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e022      	b.n	8004c00 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004bba:	4b14      	ldr	r3, [pc, #80]	; (8004c0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc6:	d1ee      	bne.n	8004ba6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004bc8:	4b10      	ldr	r3, [pc, #64]	; (8004c0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a0f      	ldr	r2, [pc, #60]	; (8004c0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bd2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bd4:	f7fc ff62 	bl	8001a9c <HAL_GetTick>
 8004bd8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004bda:	e009      	b.n	8004bf0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004bdc:	f7fc ff5e 	bl	8001a9c <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bea:	d901      	bls.n	8004bf0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e007      	b.n	8004c00 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004bf0:	4b06      	ldr	r3, [pc, #24]	; (8004c0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bfc:	d1ee      	bne.n	8004bdc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	40007000 	.word	0x40007000

08004c10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e29b      	b.n	800515e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 8087 	beq.w	8004d42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c34:	4b96      	ldr	r3, [pc, #600]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f003 030c 	and.w	r3, r3, #12
 8004c3c:	2b04      	cmp	r3, #4
 8004c3e:	d00c      	beq.n	8004c5a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c40:	4b93      	ldr	r3, [pc, #588]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f003 030c 	and.w	r3, r3, #12
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	d112      	bne.n	8004c72 <HAL_RCC_OscConfig+0x62>
 8004c4c:	4b90      	ldr	r3, [pc, #576]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c58:	d10b      	bne.n	8004c72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c5a:	4b8d      	ldr	r3, [pc, #564]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d06c      	beq.n	8004d40 <HAL_RCC_OscConfig+0x130>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d168      	bne.n	8004d40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e275      	b.n	800515e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c7a:	d106      	bne.n	8004c8a <HAL_RCC_OscConfig+0x7a>
 8004c7c:	4b84      	ldr	r3, [pc, #528]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a83      	ldr	r2, [pc, #524]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c86:	6013      	str	r3, [r2, #0]
 8004c88:	e02e      	b.n	8004ce8 <HAL_RCC_OscConfig+0xd8>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10c      	bne.n	8004cac <HAL_RCC_OscConfig+0x9c>
 8004c92:	4b7f      	ldr	r3, [pc, #508]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a7e      	ldr	r2, [pc, #504]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	4b7c      	ldr	r3, [pc, #496]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a7b      	ldr	r2, [pc, #492]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004ca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	e01d      	b.n	8004ce8 <HAL_RCC_OscConfig+0xd8>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cb4:	d10c      	bne.n	8004cd0 <HAL_RCC_OscConfig+0xc0>
 8004cb6:	4b76      	ldr	r3, [pc, #472]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a75      	ldr	r2, [pc, #468]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cc0:	6013      	str	r3, [r2, #0]
 8004cc2:	4b73      	ldr	r3, [pc, #460]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a72      	ldr	r2, [pc, #456]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	e00b      	b.n	8004ce8 <HAL_RCC_OscConfig+0xd8>
 8004cd0:	4b6f      	ldr	r3, [pc, #444]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a6e      	ldr	r2, [pc, #440]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	4b6c      	ldr	r3, [pc, #432]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a6b      	ldr	r2, [pc, #428]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d013      	beq.n	8004d18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf0:	f7fc fed4 	bl	8001a9c <HAL_GetTick>
 8004cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cf8:	f7fc fed0 	bl	8001a9c <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b64      	cmp	r3, #100	; 0x64
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e229      	b.n	800515e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d0a:	4b61      	ldr	r3, [pc, #388]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0f0      	beq.n	8004cf8 <HAL_RCC_OscConfig+0xe8>
 8004d16:	e014      	b.n	8004d42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d18:	f7fc fec0 	bl	8001a9c <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d20:	f7fc febc 	bl	8001a9c <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b64      	cmp	r3, #100	; 0x64
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e215      	b.n	800515e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d32:	4b57      	ldr	r3, [pc, #348]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1f0      	bne.n	8004d20 <HAL_RCC_OscConfig+0x110>
 8004d3e:	e000      	b.n	8004d42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d069      	beq.n	8004e22 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d4e:	4b50      	ldr	r3, [pc, #320]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 030c 	and.w	r3, r3, #12
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00b      	beq.n	8004d72 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d5a:	4b4d      	ldr	r3, [pc, #308]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 030c 	and.w	r3, r3, #12
 8004d62:	2b08      	cmp	r3, #8
 8004d64:	d11c      	bne.n	8004da0 <HAL_RCC_OscConfig+0x190>
 8004d66:	4b4a      	ldr	r3, [pc, #296]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d116      	bne.n	8004da0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d72:	4b47      	ldr	r3, [pc, #284]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d005      	beq.n	8004d8a <HAL_RCC_OscConfig+0x17a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d001      	beq.n	8004d8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e1e9      	b.n	800515e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d8a:	4b41      	ldr	r3, [pc, #260]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	493d      	ldr	r1, [pc, #244]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d9e:	e040      	b.n	8004e22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d023      	beq.n	8004df0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004da8:	4b39      	ldr	r3, [pc, #228]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a38      	ldr	r2, [pc, #224]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004dae:	f043 0301 	orr.w	r3, r3, #1
 8004db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db4:	f7fc fe72 	bl	8001a9c <HAL_GetTick>
 8004db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dba:	e008      	b.n	8004dce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dbc:	f7fc fe6e 	bl	8001a9c <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e1c7      	b.n	800515e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dce:	4b30      	ldr	r3, [pc, #192]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d0f0      	beq.n	8004dbc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dda:	4b2d      	ldr	r3, [pc, #180]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	4929      	ldr	r1, [pc, #164]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	600b      	str	r3, [r1, #0]
 8004dee:	e018      	b.n	8004e22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004df0:	4b27      	ldr	r3, [pc, #156]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a26      	ldr	r2, [pc, #152]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004df6:	f023 0301 	bic.w	r3, r3, #1
 8004dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfc:	f7fc fe4e 	bl	8001a9c <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e04:	f7fc fe4a 	bl	8001a9c <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e1a3      	b.n	800515e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e16:	4b1e      	ldr	r3, [pc, #120]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1f0      	bne.n	8004e04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0308 	and.w	r3, r3, #8
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d038      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d019      	beq.n	8004e6a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e36:	4b16      	ldr	r3, [pc, #88]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e3a:	4a15      	ldr	r2, [pc, #84]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004e3c:	f043 0301 	orr.w	r3, r3, #1
 8004e40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e42:	f7fc fe2b 	bl	8001a9c <HAL_GetTick>
 8004e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e48:	e008      	b.n	8004e5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e4a:	f7fc fe27 	bl	8001a9c <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d901      	bls.n	8004e5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e180      	b.n	800515e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e5c:	4b0c      	ldr	r3, [pc, #48]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0f0      	beq.n	8004e4a <HAL_RCC_OscConfig+0x23a>
 8004e68:	e01a      	b.n	8004ea0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e6a:	4b09      	ldr	r3, [pc, #36]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e6e:	4a08      	ldr	r2, [pc, #32]	; (8004e90 <HAL_RCC_OscConfig+0x280>)
 8004e70:	f023 0301 	bic.w	r3, r3, #1
 8004e74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e76:	f7fc fe11 	bl	8001a9c <HAL_GetTick>
 8004e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e7c:	e00a      	b.n	8004e94 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e7e:	f7fc fe0d 	bl	8001a9c <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d903      	bls.n	8004e94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e166      	b.n	800515e <HAL_RCC_OscConfig+0x54e>
 8004e90:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e94:	4b92      	ldr	r3, [pc, #584]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1ee      	bne.n	8004e7e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 80a4 	beq.w	8004ff6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eae:	4b8c      	ldr	r3, [pc, #560]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10d      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eba:	4b89      	ldr	r3, [pc, #548]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebe:	4a88      	ldr	r2, [pc, #544]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ec6:	4b86      	ldr	r3, [pc, #536]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ece:	60bb      	str	r3, [r7, #8]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ed6:	4b83      	ldr	r3, [pc, #524]	; (80050e4 <HAL_RCC_OscConfig+0x4d4>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d118      	bne.n	8004f14 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004ee2:	4b80      	ldr	r3, [pc, #512]	; (80050e4 <HAL_RCC_OscConfig+0x4d4>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a7f      	ldr	r2, [pc, #508]	; (80050e4 <HAL_RCC_OscConfig+0x4d4>)
 8004ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eee:	f7fc fdd5 	bl	8001a9c <HAL_GetTick>
 8004ef2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ef4:	e008      	b.n	8004f08 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ef6:	f7fc fdd1 	bl	8001a9c <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	2b64      	cmp	r3, #100	; 0x64
 8004f02:	d901      	bls.n	8004f08 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e12a      	b.n	800515e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f08:	4b76      	ldr	r3, [pc, #472]	; (80050e4 <HAL_RCC_OscConfig+0x4d4>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d0f0      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d106      	bne.n	8004f2a <HAL_RCC_OscConfig+0x31a>
 8004f1c:	4b70      	ldr	r3, [pc, #448]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f20:	4a6f      	ldr	r2, [pc, #444]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004f22:	f043 0301 	orr.w	r3, r3, #1
 8004f26:	6713      	str	r3, [r2, #112]	; 0x70
 8004f28:	e02d      	b.n	8004f86 <HAL_RCC_OscConfig+0x376>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10c      	bne.n	8004f4c <HAL_RCC_OscConfig+0x33c>
 8004f32:	4b6b      	ldr	r3, [pc, #428]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f36:	4a6a      	ldr	r2, [pc, #424]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004f38:	f023 0301 	bic.w	r3, r3, #1
 8004f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f3e:	4b68      	ldr	r3, [pc, #416]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f42:	4a67      	ldr	r2, [pc, #412]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004f44:	f023 0304 	bic.w	r3, r3, #4
 8004f48:	6713      	str	r3, [r2, #112]	; 0x70
 8004f4a:	e01c      	b.n	8004f86 <HAL_RCC_OscConfig+0x376>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	2b05      	cmp	r3, #5
 8004f52:	d10c      	bne.n	8004f6e <HAL_RCC_OscConfig+0x35e>
 8004f54:	4b62      	ldr	r3, [pc, #392]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f58:	4a61      	ldr	r2, [pc, #388]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004f5a:	f043 0304 	orr.w	r3, r3, #4
 8004f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f60:	4b5f      	ldr	r3, [pc, #380]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f64:	4a5e      	ldr	r2, [pc, #376]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004f66:	f043 0301 	orr.w	r3, r3, #1
 8004f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f6c:	e00b      	b.n	8004f86 <HAL_RCC_OscConfig+0x376>
 8004f6e:	4b5c      	ldr	r3, [pc, #368]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f72:	4a5b      	ldr	r2, [pc, #364]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004f74:	f023 0301 	bic.w	r3, r3, #1
 8004f78:	6713      	str	r3, [r2, #112]	; 0x70
 8004f7a:	4b59      	ldr	r3, [pc, #356]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7e:	4a58      	ldr	r2, [pc, #352]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004f80:	f023 0304 	bic.w	r3, r3, #4
 8004f84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d015      	beq.n	8004fba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f8e:	f7fc fd85 	bl	8001a9c <HAL_GetTick>
 8004f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f94:	e00a      	b.n	8004fac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f96:	f7fc fd81 	bl	8001a9c <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d901      	bls.n	8004fac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e0d8      	b.n	800515e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fac:	4b4c      	ldr	r3, [pc, #304]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d0ee      	beq.n	8004f96 <HAL_RCC_OscConfig+0x386>
 8004fb8:	e014      	b.n	8004fe4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fba:	f7fc fd6f 	bl	8001a9c <HAL_GetTick>
 8004fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fc0:	e00a      	b.n	8004fd8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fc2:	f7fc fd6b 	bl	8001a9c <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e0c2      	b.n	800515e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fd8:	4b41      	ldr	r3, [pc, #260]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1ee      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fe4:	7dfb      	ldrb	r3, [r7, #23]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d105      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fea:	4b3d      	ldr	r3, [pc, #244]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	4a3c      	ldr	r2, [pc, #240]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8004ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ff4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 80ae 	beq.w	800515c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005000:	4b37      	ldr	r3, [pc, #220]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f003 030c 	and.w	r3, r3, #12
 8005008:	2b08      	cmp	r3, #8
 800500a:	d06d      	beq.n	80050e8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	2b02      	cmp	r3, #2
 8005012:	d14b      	bne.n	80050ac <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005014:	4b32      	ldr	r3, [pc, #200]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a31      	ldr	r2, [pc, #196]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 800501a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800501e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005020:	f7fc fd3c 	bl	8001a9c <HAL_GetTick>
 8005024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005028:	f7fc fd38 	bl	8001a9c <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e091      	b.n	800515e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800503a:	4b29      	ldr	r3, [pc, #164]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1f0      	bne.n	8005028 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	69da      	ldr	r2, [r3, #28]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	019b      	lsls	r3, r3, #6
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505c:	085b      	lsrs	r3, r3, #1
 800505e:	3b01      	subs	r3, #1
 8005060:	041b      	lsls	r3, r3, #16
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005068:	061b      	lsls	r3, r3, #24
 800506a:	431a      	orrs	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005070:	071b      	lsls	r3, r3, #28
 8005072:	491b      	ldr	r1, [pc, #108]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 8005074:	4313      	orrs	r3, r2
 8005076:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005078:	4b19      	ldr	r3, [pc, #100]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a18      	ldr	r2, [pc, #96]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 800507e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005084:	f7fc fd0a 	bl	8001a9c <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800508c:	f7fc fd06 	bl	8001a9c <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e05f      	b.n	800515e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800509e:	4b10      	ldr	r3, [pc, #64]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0f0      	beq.n	800508c <HAL_RCC_OscConfig+0x47c>
 80050aa:	e057      	b.n	800515c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ac:	4b0c      	ldr	r3, [pc, #48]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a0b      	ldr	r2, [pc, #44]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 80050b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b8:	f7fc fcf0 	bl	8001a9c <HAL_GetTick>
 80050bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050be:	e008      	b.n	80050d2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c0:	f7fc fcec 	bl	8001a9c <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e045      	b.n	800515e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050d2:	4b03      	ldr	r3, [pc, #12]	; (80050e0 <HAL_RCC_OscConfig+0x4d0>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1f0      	bne.n	80050c0 <HAL_RCC_OscConfig+0x4b0>
 80050de:	e03d      	b.n	800515c <HAL_RCC_OscConfig+0x54c>
 80050e0:	40023800 	.word	0x40023800
 80050e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80050e8:	4b1f      	ldr	r3, [pc, #124]	; (8005168 <HAL_RCC_OscConfig+0x558>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d030      	beq.n	8005158 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005100:	429a      	cmp	r2, r3
 8005102:	d129      	bne.n	8005158 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800510e:	429a      	cmp	r2, r3
 8005110:	d122      	bne.n	8005158 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005118:	4013      	ands	r3, r2
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800511e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005120:	4293      	cmp	r3, r2
 8005122:	d119      	bne.n	8005158 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512e:	085b      	lsrs	r3, r3, #1
 8005130:	3b01      	subs	r3, #1
 8005132:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005134:	429a      	cmp	r2, r3
 8005136:	d10f      	bne.n	8005158 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005142:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005144:	429a      	cmp	r2, r3
 8005146:	d107      	bne.n	8005158 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005152:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005154:	429a      	cmp	r2, r3
 8005156:	d001      	beq.n	800515c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e000      	b.n	800515e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3718      	adds	r7, #24
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	40023800 	.word	0x40023800

0800516c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005176:	2300      	movs	r3, #0
 8005178:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e0d0      	b.n	8005326 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005184:	4b6a      	ldr	r3, [pc, #424]	; (8005330 <HAL_RCC_ClockConfig+0x1c4>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 030f 	and.w	r3, r3, #15
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d910      	bls.n	80051b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005192:	4b67      	ldr	r3, [pc, #412]	; (8005330 <HAL_RCC_ClockConfig+0x1c4>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f023 020f 	bic.w	r2, r3, #15
 800519a:	4965      	ldr	r1, [pc, #404]	; (8005330 <HAL_RCC_ClockConfig+0x1c4>)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	4313      	orrs	r3, r2
 80051a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a2:	4b63      	ldr	r3, [pc, #396]	; (8005330 <HAL_RCC_ClockConfig+0x1c4>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 030f 	and.w	r3, r3, #15
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d001      	beq.n	80051b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e0b8      	b.n	8005326 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d020      	beq.n	8005202 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d005      	beq.n	80051d8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051cc:	4b59      	ldr	r3, [pc, #356]	; (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	4a58      	ldr	r2, [pc, #352]	; (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 80051d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0308 	and.w	r3, r3, #8
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d005      	beq.n	80051f0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051e4:	4b53      	ldr	r3, [pc, #332]	; (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	4a52      	ldr	r2, [pc, #328]	; (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 80051ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051f0:	4b50      	ldr	r3, [pc, #320]	; (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	494d      	ldr	r1, [pc, #308]	; (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	d040      	beq.n	8005290 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d107      	bne.n	8005226 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005216:	4b47      	ldr	r3, [pc, #284]	; (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d115      	bne.n	800524e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e07f      	b.n	8005326 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	2b02      	cmp	r3, #2
 800522c:	d107      	bne.n	800523e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800522e:	4b41      	ldr	r3, [pc, #260]	; (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d109      	bne.n	800524e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e073      	b.n	8005326 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800523e:	4b3d      	ldr	r3, [pc, #244]	; (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e06b      	b.n	8005326 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800524e:	4b39      	ldr	r3, [pc, #228]	; (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f023 0203 	bic.w	r2, r3, #3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	4936      	ldr	r1, [pc, #216]	; (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 800525c:	4313      	orrs	r3, r2
 800525e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005260:	f7fc fc1c 	bl	8001a9c <HAL_GetTick>
 8005264:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005266:	e00a      	b.n	800527e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005268:	f7fc fc18 	bl	8001a9c <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	f241 3288 	movw	r2, #5000	; 0x1388
 8005276:	4293      	cmp	r3, r2
 8005278:	d901      	bls.n	800527e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e053      	b.n	8005326 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800527e:	4b2d      	ldr	r3, [pc, #180]	; (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f003 020c 	and.w	r2, r3, #12
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	429a      	cmp	r2, r3
 800528e:	d1eb      	bne.n	8005268 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005290:	4b27      	ldr	r3, [pc, #156]	; (8005330 <HAL_RCC_ClockConfig+0x1c4>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 030f 	and.w	r3, r3, #15
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	429a      	cmp	r2, r3
 800529c:	d210      	bcs.n	80052c0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800529e:	4b24      	ldr	r3, [pc, #144]	; (8005330 <HAL_RCC_ClockConfig+0x1c4>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f023 020f 	bic.w	r2, r3, #15
 80052a6:	4922      	ldr	r1, [pc, #136]	; (8005330 <HAL_RCC_ClockConfig+0x1c4>)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ae:	4b20      	ldr	r3, [pc, #128]	; (8005330 <HAL_RCC_ClockConfig+0x1c4>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 030f 	and.w	r3, r3, #15
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d001      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e032      	b.n	8005326 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0304 	and.w	r3, r3, #4
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d008      	beq.n	80052de <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052cc:	4b19      	ldr	r3, [pc, #100]	; (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	4916      	ldr	r1, [pc, #88]	; (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0308 	and.w	r3, r3, #8
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d009      	beq.n	80052fe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052ea:	4b12      	ldr	r3, [pc, #72]	; (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	490e      	ldr	r1, [pc, #56]	; (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80052fe:	f000 f821 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 8005302:	4602      	mov	r2, r0
 8005304:	4b0b      	ldr	r3, [pc, #44]	; (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	091b      	lsrs	r3, r3, #4
 800530a:	f003 030f 	and.w	r3, r3, #15
 800530e:	490a      	ldr	r1, [pc, #40]	; (8005338 <HAL_RCC_ClockConfig+0x1cc>)
 8005310:	5ccb      	ldrb	r3, [r1, r3]
 8005312:	fa22 f303 	lsr.w	r3, r2, r3
 8005316:	4a09      	ldr	r2, [pc, #36]	; (800533c <HAL_RCC_ClockConfig+0x1d0>)
 8005318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800531a:	4b09      	ldr	r3, [pc, #36]	; (8005340 <HAL_RCC_ClockConfig+0x1d4>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4618      	mov	r0, r3
 8005320:	f7fc fa42 	bl	80017a8 <HAL_InitTick>

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	40023c00 	.word	0x40023c00
 8005334:	40023800 	.word	0x40023800
 8005338:	080120cc 	.word	0x080120cc
 800533c:	20000000 	.word	0x20000000
 8005340:	20000004 	.word	0x20000004

08005344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005348:	b094      	sub	sp, #80	; 0x50
 800534a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800534c:	2300      	movs	r3, #0
 800534e:	647b      	str	r3, [r7, #68]	; 0x44
 8005350:	2300      	movs	r3, #0
 8005352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005354:	2300      	movs	r3, #0
 8005356:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005358:	2300      	movs	r3, #0
 800535a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800535c:	4b79      	ldr	r3, [pc, #484]	; (8005544 <HAL_RCC_GetSysClockFreq+0x200>)
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f003 030c 	and.w	r3, r3, #12
 8005364:	2b08      	cmp	r3, #8
 8005366:	d00d      	beq.n	8005384 <HAL_RCC_GetSysClockFreq+0x40>
 8005368:	2b08      	cmp	r3, #8
 800536a:	f200 80e1 	bhi.w	8005530 <HAL_RCC_GetSysClockFreq+0x1ec>
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <HAL_RCC_GetSysClockFreq+0x34>
 8005372:	2b04      	cmp	r3, #4
 8005374:	d003      	beq.n	800537e <HAL_RCC_GetSysClockFreq+0x3a>
 8005376:	e0db      	b.n	8005530 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005378:	4b73      	ldr	r3, [pc, #460]	; (8005548 <HAL_RCC_GetSysClockFreq+0x204>)
 800537a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800537c:	e0db      	b.n	8005536 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800537e:	4b73      	ldr	r3, [pc, #460]	; (800554c <HAL_RCC_GetSysClockFreq+0x208>)
 8005380:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005382:	e0d8      	b.n	8005536 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005384:	4b6f      	ldr	r3, [pc, #444]	; (8005544 <HAL_RCC_GetSysClockFreq+0x200>)
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800538c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800538e:	4b6d      	ldr	r3, [pc, #436]	; (8005544 <HAL_RCC_GetSysClockFreq+0x200>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d063      	beq.n	8005462 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800539a:	4b6a      	ldr	r3, [pc, #424]	; (8005544 <HAL_RCC_GetSysClockFreq+0x200>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	099b      	lsrs	r3, r3, #6
 80053a0:	2200      	movs	r2, #0
 80053a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80053a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80053a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ac:	633b      	str	r3, [r7, #48]	; 0x30
 80053ae:	2300      	movs	r3, #0
 80053b0:	637b      	str	r3, [r7, #52]	; 0x34
 80053b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80053b6:	4622      	mov	r2, r4
 80053b8:	462b      	mov	r3, r5
 80053ba:	f04f 0000 	mov.w	r0, #0
 80053be:	f04f 0100 	mov.w	r1, #0
 80053c2:	0159      	lsls	r1, r3, #5
 80053c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053c8:	0150      	lsls	r0, r2, #5
 80053ca:	4602      	mov	r2, r0
 80053cc:	460b      	mov	r3, r1
 80053ce:	4621      	mov	r1, r4
 80053d0:	1a51      	subs	r1, r2, r1
 80053d2:	6139      	str	r1, [r7, #16]
 80053d4:	4629      	mov	r1, r5
 80053d6:	eb63 0301 	sbc.w	r3, r3, r1
 80053da:	617b      	str	r3, [r7, #20]
 80053dc:	f04f 0200 	mov.w	r2, #0
 80053e0:	f04f 0300 	mov.w	r3, #0
 80053e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053e8:	4659      	mov	r1, fp
 80053ea:	018b      	lsls	r3, r1, #6
 80053ec:	4651      	mov	r1, sl
 80053ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053f2:	4651      	mov	r1, sl
 80053f4:	018a      	lsls	r2, r1, #6
 80053f6:	4651      	mov	r1, sl
 80053f8:	ebb2 0801 	subs.w	r8, r2, r1
 80053fc:	4659      	mov	r1, fp
 80053fe:	eb63 0901 	sbc.w	r9, r3, r1
 8005402:	f04f 0200 	mov.w	r2, #0
 8005406:	f04f 0300 	mov.w	r3, #0
 800540a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800540e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005412:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005416:	4690      	mov	r8, r2
 8005418:	4699      	mov	r9, r3
 800541a:	4623      	mov	r3, r4
 800541c:	eb18 0303 	adds.w	r3, r8, r3
 8005420:	60bb      	str	r3, [r7, #8]
 8005422:	462b      	mov	r3, r5
 8005424:	eb49 0303 	adc.w	r3, r9, r3
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	f04f 0200 	mov.w	r2, #0
 800542e:	f04f 0300 	mov.w	r3, #0
 8005432:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005436:	4629      	mov	r1, r5
 8005438:	024b      	lsls	r3, r1, #9
 800543a:	4621      	mov	r1, r4
 800543c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005440:	4621      	mov	r1, r4
 8005442:	024a      	lsls	r2, r1, #9
 8005444:	4610      	mov	r0, r2
 8005446:	4619      	mov	r1, r3
 8005448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800544a:	2200      	movs	r2, #0
 800544c:	62bb      	str	r3, [r7, #40]	; 0x28
 800544e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005450:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005454:	f7fa fef4 	bl	8000240 <__aeabi_uldivmod>
 8005458:	4602      	mov	r2, r0
 800545a:	460b      	mov	r3, r1
 800545c:	4613      	mov	r3, r2
 800545e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005460:	e058      	b.n	8005514 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005462:	4b38      	ldr	r3, [pc, #224]	; (8005544 <HAL_RCC_GetSysClockFreq+0x200>)
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	099b      	lsrs	r3, r3, #6
 8005468:	2200      	movs	r2, #0
 800546a:	4618      	mov	r0, r3
 800546c:	4611      	mov	r1, r2
 800546e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005472:	623b      	str	r3, [r7, #32]
 8005474:	2300      	movs	r3, #0
 8005476:	627b      	str	r3, [r7, #36]	; 0x24
 8005478:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800547c:	4642      	mov	r2, r8
 800547e:	464b      	mov	r3, r9
 8005480:	f04f 0000 	mov.w	r0, #0
 8005484:	f04f 0100 	mov.w	r1, #0
 8005488:	0159      	lsls	r1, r3, #5
 800548a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800548e:	0150      	lsls	r0, r2, #5
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	4641      	mov	r1, r8
 8005496:	ebb2 0a01 	subs.w	sl, r2, r1
 800549a:	4649      	mov	r1, r9
 800549c:	eb63 0b01 	sbc.w	fp, r3, r1
 80054a0:	f04f 0200 	mov.w	r2, #0
 80054a4:	f04f 0300 	mov.w	r3, #0
 80054a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80054ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80054b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80054b4:	ebb2 040a 	subs.w	r4, r2, sl
 80054b8:	eb63 050b 	sbc.w	r5, r3, fp
 80054bc:	f04f 0200 	mov.w	r2, #0
 80054c0:	f04f 0300 	mov.w	r3, #0
 80054c4:	00eb      	lsls	r3, r5, #3
 80054c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054ca:	00e2      	lsls	r2, r4, #3
 80054cc:	4614      	mov	r4, r2
 80054ce:	461d      	mov	r5, r3
 80054d0:	4643      	mov	r3, r8
 80054d2:	18e3      	adds	r3, r4, r3
 80054d4:	603b      	str	r3, [r7, #0]
 80054d6:	464b      	mov	r3, r9
 80054d8:	eb45 0303 	adc.w	r3, r5, r3
 80054dc:	607b      	str	r3, [r7, #4]
 80054de:	f04f 0200 	mov.w	r2, #0
 80054e2:	f04f 0300 	mov.w	r3, #0
 80054e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054ea:	4629      	mov	r1, r5
 80054ec:	028b      	lsls	r3, r1, #10
 80054ee:	4621      	mov	r1, r4
 80054f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054f4:	4621      	mov	r1, r4
 80054f6:	028a      	lsls	r2, r1, #10
 80054f8:	4610      	mov	r0, r2
 80054fa:	4619      	mov	r1, r3
 80054fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054fe:	2200      	movs	r2, #0
 8005500:	61bb      	str	r3, [r7, #24]
 8005502:	61fa      	str	r2, [r7, #28]
 8005504:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005508:	f7fa fe9a 	bl	8000240 <__aeabi_uldivmod>
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	4613      	mov	r3, r2
 8005512:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005514:	4b0b      	ldr	r3, [pc, #44]	; (8005544 <HAL_RCC_GetSysClockFreq+0x200>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	0c1b      	lsrs	r3, r3, #16
 800551a:	f003 0303 	and.w	r3, r3, #3
 800551e:	3301      	adds	r3, #1
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005524:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005528:	fbb2 f3f3 	udiv	r3, r2, r3
 800552c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800552e:	e002      	b.n	8005536 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005530:	4b05      	ldr	r3, [pc, #20]	; (8005548 <HAL_RCC_GetSysClockFreq+0x204>)
 8005532:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005538:	4618      	mov	r0, r3
 800553a:	3750      	adds	r7, #80	; 0x50
 800553c:	46bd      	mov	sp, r7
 800553e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005542:	bf00      	nop
 8005544:	40023800 	.word	0x40023800
 8005548:	00f42400 	.word	0x00f42400
 800554c:	007a1200 	.word	0x007a1200

08005550 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005550:	b480      	push	{r7}
 8005552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005554:	4b03      	ldr	r3, [pc, #12]	; (8005564 <HAL_RCC_GetHCLKFreq+0x14>)
 8005556:	681b      	ldr	r3, [r3, #0]
}
 8005558:	4618      	mov	r0, r3
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	20000000 	.word	0x20000000

08005568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800556c:	f7ff fff0 	bl	8005550 <HAL_RCC_GetHCLKFreq>
 8005570:	4602      	mov	r2, r0
 8005572:	4b05      	ldr	r3, [pc, #20]	; (8005588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	0a9b      	lsrs	r3, r3, #10
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	4903      	ldr	r1, [pc, #12]	; (800558c <HAL_RCC_GetPCLK1Freq+0x24>)
 800557e:	5ccb      	ldrb	r3, [r1, r3]
 8005580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005584:	4618      	mov	r0, r3
 8005586:	bd80      	pop	{r7, pc}
 8005588:	40023800 	.word	0x40023800
 800558c:	080120dc 	.word	0x080120dc

08005590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005594:	f7ff ffdc 	bl	8005550 <HAL_RCC_GetHCLKFreq>
 8005598:	4602      	mov	r2, r0
 800559a:	4b05      	ldr	r3, [pc, #20]	; (80055b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	0b5b      	lsrs	r3, r3, #13
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	4903      	ldr	r1, [pc, #12]	; (80055b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055a6:	5ccb      	ldrb	r3, [r1, r3]
 80055a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	40023800 	.word	0x40023800
 80055b4:	080120dc 	.word	0x080120dc

080055b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	220f      	movs	r2, #15
 80055c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80055c8:	4b12      	ldr	r3, [pc, #72]	; (8005614 <HAL_RCC_GetClockConfig+0x5c>)
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f003 0203 	and.w	r2, r3, #3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80055d4:	4b0f      	ldr	r3, [pc, #60]	; (8005614 <HAL_RCC_GetClockConfig+0x5c>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80055e0:	4b0c      	ldr	r3, [pc, #48]	; (8005614 <HAL_RCC_GetClockConfig+0x5c>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80055ec:	4b09      	ldr	r3, [pc, #36]	; (8005614 <HAL_RCC_GetClockConfig+0x5c>)
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	08db      	lsrs	r3, r3, #3
 80055f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80055fa:	4b07      	ldr	r3, [pc, #28]	; (8005618 <HAL_RCC_GetClockConfig+0x60>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 020f 	and.w	r2, r3, #15
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	601a      	str	r2, [r3, #0]
}
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	40023800 	.word	0x40023800
 8005618:	40023c00 	.word	0x40023c00

0800561c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b088      	sub	sp, #32
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005624:	2300      	movs	r3, #0
 8005626:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005628:	2300      	movs	r3, #0
 800562a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800562c:	2300      	movs	r3, #0
 800562e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005630:	2300      	movs	r3, #0
 8005632:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005634:	2300      	movs	r3, #0
 8005636:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	2b00      	cmp	r3, #0
 8005642:	d012      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005644:	4b69      	ldr	r3, [pc, #420]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	4a68      	ldr	r2, [pc, #416]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800564a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800564e:	6093      	str	r3, [r2, #8]
 8005650:	4b66      	ldr	r3, [pc, #408]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005658:	4964      	ldr	r1, [pc, #400]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800565a:	4313      	orrs	r3, r2
 800565c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005666:	2301      	movs	r3, #1
 8005668:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d017      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005676:	4b5d      	ldr	r3, [pc, #372]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800567c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005684:	4959      	ldr	r1, [pc, #356]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005686:	4313      	orrs	r3, r2
 8005688:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005690:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005694:	d101      	bne.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005696:	2301      	movs	r3, #1
 8005698:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80056a2:	2301      	movs	r3, #1
 80056a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d017      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80056b2:	4b4e      	ldr	r3, [pc, #312]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c0:	494a      	ldr	r1, [pc, #296]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056d0:	d101      	bne.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80056d2:	2301      	movs	r3, #1
 80056d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80056de:	2301      	movs	r3, #1
 80056e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80056ee:	2301      	movs	r3, #1
 80056f0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0320 	and.w	r3, r3, #32
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 808b 	beq.w	8005816 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005700:	4b3a      	ldr	r3, [pc, #232]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005704:	4a39      	ldr	r2, [pc, #228]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800570a:	6413      	str	r3, [r2, #64]	; 0x40
 800570c:	4b37      	ldr	r3, [pc, #220]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800570e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005714:	60bb      	str	r3, [r7, #8]
 8005716:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005718:	4b35      	ldr	r3, [pc, #212]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a34      	ldr	r2, [pc, #208]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800571e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005722:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005724:	f7fc f9ba 	bl	8001a9c <HAL_GetTick>
 8005728:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800572a:	e008      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800572c:	f7fc f9b6 	bl	8001a9c <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b64      	cmp	r3, #100	; 0x64
 8005738:	d901      	bls.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e38f      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800573e:	4b2c      	ldr	r3, [pc, #176]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0f0      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800574a:	4b28      	ldr	r3, [pc, #160]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800574c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005752:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d035      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	429a      	cmp	r2, r3
 8005766:	d02e      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005768:	4b20      	ldr	r3, [pc, #128]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800576a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005770:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005772:	4b1e      	ldr	r3, [pc, #120]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005776:	4a1d      	ldr	r2, [pc, #116]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800577c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800577e:	4b1b      	ldr	r3, [pc, #108]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005782:	4a1a      	ldr	r2, [pc, #104]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005788:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800578a:	4a18      	ldr	r2, [pc, #96]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005790:	4b16      	ldr	r3, [pc, #88]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	2b01      	cmp	r3, #1
 800579a:	d114      	bne.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579c:	f7fc f97e 	bl	8001a9c <HAL_GetTick>
 80057a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057a2:	e00a      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057a4:	f7fc f97a 	bl	8001a9c <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d901      	bls.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e351      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057ba:	4b0c      	ldr	r3, [pc, #48]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d0ee      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057d2:	d111      	bne.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80057d4:	4b05      	ldr	r3, [pc, #20]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80057e0:	4b04      	ldr	r3, [pc, #16]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80057e2:	400b      	ands	r3, r1
 80057e4:	4901      	ldr	r1, [pc, #4]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	608b      	str	r3, [r1, #8]
 80057ea:	e00b      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80057ec:	40023800 	.word	0x40023800
 80057f0:	40007000 	.word	0x40007000
 80057f4:	0ffffcff 	.word	0x0ffffcff
 80057f8:	4bac      	ldr	r3, [pc, #688]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	4aab      	ldr	r2, [pc, #684]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057fe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005802:	6093      	str	r3, [r2, #8]
 8005804:	4ba9      	ldr	r3, [pc, #676]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005806:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005810:	49a6      	ldr	r1, [pc, #664]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005812:	4313      	orrs	r3, r2
 8005814:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0310 	and.w	r3, r3, #16
 800581e:	2b00      	cmp	r3, #0
 8005820:	d010      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005822:	4ba2      	ldr	r3, [pc, #648]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005828:	4aa0      	ldr	r2, [pc, #640]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800582a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800582e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005832:	4b9e      	ldr	r3, [pc, #632]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005834:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583c:	499b      	ldr	r1, [pc, #620]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800583e:	4313      	orrs	r3, r2
 8005840:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00a      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005850:	4b96      	ldr	r3, [pc, #600]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005856:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800585e:	4993      	ldr	r1, [pc, #588]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005860:	4313      	orrs	r3, r2
 8005862:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00a      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005872:	4b8e      	ldr	r3, [pc, #568]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005878:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005880:	498a      	ldr	r1, [pc, #552]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005882:	4313      	orrs	r3, r2
 8005884:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00a      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005894:	4b85      	ldr	r3, [pc, #532]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800589a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058a2:	4982      	ldr	r1, [pc, #520]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00a      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80058b6:	4b7d      	ldr	r3, [pc, #500]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c4:	4979      	ldr	r1, [pc, #484]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00a      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058d8:	4b74      	ldr	r3, [pc, #464]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058de:	f023 0203 	bic.w	r2, r3, #3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e6:	4971      	ldr	r1, [pc, #452]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00a      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058fa:	4b6c      	ldr	r3, [pc, #432]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005900:	f023 020c 	bic.w	r2, r3, #12
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005908:	4968      	ldr	r1, [pc, #416]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800590a:	4313      	orrs	r3, r2
 800590c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00a      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800591c:	4b63      	ldr	r3, [pc, #396]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800591e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005922:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800592a:	4960      	ldr	r1, [pc, #384]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800592c:	4313      	orrs	r3, r2
 800592e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00a      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800593e:	4b5b      	ldr	r3, [pc, #364]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005944:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800594c:	4957      	ldr	r1, [pc, #348]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800594e:	4313      	orrs	r3, r2
 8005950:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00a      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005960:	4b52      	ldr	r3, [pc, #328]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005966:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800596e:	494f      	ldr	r1, [pc, #316]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005970:	4313      	orrs	r3, r2
 8005972:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00a      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005982:	4b4a      	ldr	r3, [pc, #296]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005988:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005990:	4946      	ldr	r1, [pc, #280]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005992:	4313      	orrs	r3, r2
 8005994:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00a      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80059a4:	4b41      	ldr	r3, [pc, #260]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b2:	493e      	ldr	r1, [pc, #248]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00a      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80059c6:	4b39      	ldr	r3, [pc, #228]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059d4:	4935      	ldr	r1, [pc, #212]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00a      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80059e8:	4b30      	ldr	r3, [pc, #192]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059f6:	492d      	ldr	r1, [pc, #180]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d011      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005a0a:	4b28      	ldr	r3, [pc, #160]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a10:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a18:	4924      	ldr	r1, [pc, #144]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a28:	d101      	bne.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0308 	and.w	r3, r3, #8
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00a      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a4a:	4b18      	ldr	r3, [pc, #96]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a50:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a58:	4914      	ldr	r1, [pc, #80]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00b      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a6c:	4b0f      	ldr	r3, [pc, #60]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a72:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a7c:	490b      	ldr	r1, [pc, #44]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00f      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005a90:	4b06      	ldr	r3, [pc, #24]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a96:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aa0:	4902      	ldr	r1, [pc, #8]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005aa8:	e002      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005aaa:	bf00      	nop
 8005aac:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00b      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005abc:	4b8a      	ldr	r3, [pc, #552]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ac2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005acc:	4986      	ldr	r1, [pc, #536]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00b      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005ae0:	4b81      	ldr	r3, [pc, #516]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ae6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005af0:	497d      	ldr	r1, [pc, #500]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d006      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 80d6 	beq.w	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b0c:	4b76      	ldr	r3, [pc, #472]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a75      	ldr	r2, [pc, #468]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b18:	f7fb ffc0 	bl	8001a9c <HAL_GetTick>
 8005b1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b1e:	e008      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b20:	f7fb ffbc 	bl	8001a9c <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	2b64      	cmp	r3, #100	; 0x64
 8005b2c:	d901      	bls.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e195      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b32:	4b6d      	ldr	r3, [pc, #436]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1f0      	bne.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d021      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d11d      	bne.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005b52:	4b65      	ldr	r3, [pc, #404]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b58:	0c1b      	lsrs	r3, r3, #16
 8005b5a:	f003 0303 	and.w	r3, r3, #3
 8005b5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b60:	4b61      	ldr	r3, [pc, #388]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b66:	0e1b      	lsrs	r3, r3, #24
 8005b68:	f003 030f 	and.w	r3, r3, #15
 8005b6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	019a      	lsls	r2, r3, #6
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	041b      	lsls	r3, r3, #16
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	061b      	lsls	r3, r3, #24
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	071b      	lsls	r3, r3, #28
 8005b86:	4958      	ldr	r1, [pc, #352]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d004      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ba2:	d00a      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d02e      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bb8:	d129      	bne.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005bba:	4b4b      	ldr	r3, [pc, #300]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bc0:	0c1b      	lsrs	r3, r3, #16
 8005bc2:	f003 0303 	and.w	r3, r3, #3
 8005bc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005bc8:	4b47      	ldr	r3, [pc, #284]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bce:	0f1b      	lsrs	r3, r3, #28
 8005bd0:	f003 0307 	and.w	r3, r3, #7
 8005bd4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	019a      	lsls	r2, r3, #6
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	041b      	lsls	r3, r3, #16
 8005be0:	431a      	orrs	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	061b      	lsls	r3, r3, #24
 8005be8:	431a      	orrs	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	071b      	lsls	r3, r3, #28
 8005bee:	493e      	ldr	r1, [pc, #248]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005bf6:	4b3c      	ldr	r3, [pc, #240]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bfc:	f023 021f 	bic.w	r2, r3, #31
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c04:	3b01      	subs	r3, #1
 8005c06:	4938      	ldr	r1, [pc, #224]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d01d      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005c1a:	4b33      	ldr	r3, [pc, #204]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c20:	0e1b      	lsrs	r3, r3, #24
 8005c22:	f003 030f 	and.w	r3, r3, #15
 8005c26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005c28:	4b2f      	ldr	r3, [pc, #188]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c2e:	0f1b      	lsrs	r3, r3, #28
 8005c30:	f003 0307 	and.w	r3, r3, #7
 8005c34:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	019a      	lsls	r2, r3, #6
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	041b      	lsls	r3, r3, #16
 8005c42:	431a      	orrs	r2, r3
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	061b      	lsls	r3, r3, #24
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	071b      	lsls	r3, r3, #28
 8005c4e:	4926      	ldr	r1, [pc, #152]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d011      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	019a      	lsls	r2, r3, #6
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	041b      	lsls	r3, r3, #16
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	061b      	lsls	r3, r3, #24
 8005c76:	431a      	orrs	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	071b      	lsls	r3, r3, #28
 8005c7e:	491a      	ldr	r1, [pc, #104]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c80:	4313      	orrs	r3, r2
 8005c82:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c86:	4b18      	ldr	r3, [pc, #96]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a17      	ldr	r2, [pc, #92]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c92:	f7fb ff03 	bl	8001a9c <HAL_GetTick>
 8005c96:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c98:	e008      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c9a:	f7fb feff 	bl	8001a9c <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	2b64      	cmp	r3, #100	; 0x64
 8005ca6:	d901      	bls.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e0d8      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cac:	4b0e      	ldr	r3, [pc, #56]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d0f0      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	f040 80ce 	bne.w	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005cc0:	4b09      	ldr	r3, [pc, #36]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a08      	ldr	r2, [pc, #32]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ccc:	f7fb fee6 	bl	8001a9c <HAL_GetTick>
 8005cd0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005cd2:	e00b      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005cd4:	f7fb fee2 	bl	8001a9c <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	2b64      	cmp	r3, #100	; 0x64
 8005ce0:	d904      	bls.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e0bb      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005ce6:	bf00      	nop
 8005ce8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005cec:	4b5e      	ldr	r3, [pc, #376]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cf8:	d0ec      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d009      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d02e      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d12a      	bne.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005d22:	4b51      	ldr	r3, [pc, #324]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d28:	0c1b      	lsrs	r3, r3, #16
 8005d2a:	f003 0303 	and.w	r3, r3, #3
 8005d2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d30:	4b4d      	ldr	r3, [pc, #308]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d36:	0f1b      	lsrs	r3, r3, #28
 8005d38:	f003 0307 	and.w	r3, r3, #7
 8005d3c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	019a      	lsls	r2, r3, #6
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	041b      	lsls	r3, r3, #16
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	061b      	lsls	r3, r3, #24
 8005d50:	431a      	orrs	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	071b      	lsls	r3, r3, #28
 8005d56:	4944      	ldr	r1, [pc, #272]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005d5e:	4b42      	ldr	r3, [pc, #264]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d64:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	021b      	lsls	r3, r3, #8
 8005d70:	493d      	ldr	r1, [pc, #244]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d022      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d8c:	d11d      	bne.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d8e:	4b36      	ldr	r3, [pc, #216]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d94:	0e1b      	lsrs	r3, r3, #24
 8005d96:	f003 030f 	and.w	r3, r3, #15
 8005d9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d9c:	4b32      	ldr	r3, [pc, #200]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da2:	0f1b      	lsrs	r3, r3, #28
 8005da4:	f003 0307 	and.w	r3, r3, #7
 8005da8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	019a      	lsls	r2, r3, #6
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	041b      	lsls	r3, r3, #16
 8005db6:	431a      	orrs	r2, r3
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	061b      	lsls	r3, r3, #24
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	071b      	lsls	r3, r3, #28
 8005dc2:	4929      	ldr	r1, [pc, #164]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0308 	and.w	r3, r3, #8
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d028      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005dd6:	4b24      	ldr	r3, [pc, #144]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ddc:	0e1b      	lsrs	r3, r3, #24
 8005dde:	f003 030f 	and.w	r3, r3, #15
 8005de2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005de4:	4b20      	ldr	r3, [pc, #128]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dea:	0c1b      	lsrs	r3, r3, #16
 8005dec:	f003 0303 	and.w	r3, r3, #3
 8005df0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	019a      	lsls	r2, r3, #6
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	041b      	lsls	r3, r3, #16
 8005dfc:	431a      	orrs	r2, r3
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	061b      	lsls	r3, r3, #24
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	69db      	ldr	r3, [r3, #28]
 8005e08:	071b      	lsls	r3, r3, #28
 8005e0a:	4917      	ldr	r1, [pc, #92]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005e12:	4b15      	ldr	r3, [pc, #84]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e20:	4911      	ldr	r1, [pc, #68]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005e28:	4b0f      	ldr	r3, [pc, #60]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a0e      	ldr	r2, [pc, #56]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e34:	f7fb fe32 	bl	8001a9c <HAL_GetTick>
 8005e38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e3a:	e008      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e3c:	f7fb fe2e 	bl	8001a9c <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	2b64      	cmp	r3, #100	; 0x64
 8005e48:	d901      	bls.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e007      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e4e:	4b06      	ldr	r3, [pc, #24]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e5a:	d1ef      	bne.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3720      	adds	r7, #32
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	40023800 	.word	0x40023800

08005e6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e09d      	b.n	8005fba <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d108      	bne.n	8005e98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e8e:	d009      	beq.n	8005ea4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	61da      	str	r2, [r3, #28]
 8005e96:	e005      	b.n	8005ea4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d106      	bne.n	8005ec4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7fb faaa 	bl	8001418 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eda:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ee4:	d902      	bls.n	8005eec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	60fb      	str	r3, [r7, #12]
 8005eea:	e002      	b.n	8005ef2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ef0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005efa:	d007      	beq.n	8005f0c <HAL_SPI_Init+0xa0>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f04:	d002      	beq.n	8005f0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	f003 0302 	and.w	r3, r3, #2
 8005f26:	431a      	orrs	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	695b      	ldr	r3, [r3, #20]
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	431a      	orrs	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	69db      	ldr	r3, [r3, #28]
 8005f40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f44:	431a      	orrs	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4e:	ea42 0103 	orr.w	r1, r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f56:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	0c1b      	lsrs	r3, r3, #16
 8005f68:	f003 0204 	and.w	r2, r3, #4
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f70:	f003 0310 	and.w	r3, r3, #16
 8005f74:	431a      	orrs	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f7a:	f003 0308 	and.w	r3, r3, #8
 8005f7e:	431a      	orrs	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005f88:	ea42 0103 	orr.w	r1, r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	430a      	orrs	r2, r1
 8005f98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	69da      	ldr	r2, [r3, #28]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fa8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
	...

08005fc4 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d110      	bne.n	8006000 <HAL_SPI_Receive_DMA+0x3c>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fe6:	d10b      	bne.n	8006000 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2204      	movs	r2, #4
 8005fec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8005ff0:	88fb      	ldrh	r3, [r7, #6]
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	68b9      	ldr	r1, [r7, #8]
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f000 f908 	bl	800620c <HAL_SPI_TransmitReceive_DMA>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	e0fb      	b.n	80061f8 <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006006:	2b01      	cmp	r3, #1
 8006008:	d101      	bne.n	800600e <HAL_SPI_Receive_DMA+0x4a>
 800600a:	2302      	movs	r3, #2
 800600c:	e0f4      	b.n	80061f8 <HAL_SPI_Receive_DMA+0x234>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2b01      	cmp	r3, #1
 8006020:	d002      	beq.n	8006028 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8006022:	2302      	movs	r3, #2
 8006024:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006026:	e0e2      	b.n	80061ee <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d002      	beq.n	8006034 <HAL_SPI_Receive_DMA+0x70>
 800602e:	88fb      	ldrh	r3, [r7, #6]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d102      	bne.n	800603a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006038:	e0d9      	b.n	80061ee <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2204      	movs	r2, #4
 800603e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	88fa      	ldrh	r2, [r7, #6]
 8006052:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	88fa      	ldrh	r2, [r7, #6]
 800605a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800607e:	d10f      	bne.n	80060a0 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800608e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800609e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060ae:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060b8:	d908      	bls.n	80060cc <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	685a      	ldr	r2, [r3, #4]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80060c8:	605a      	str	r2, [r3, #4]
 80060ca:	e042      	b.n	8006152 <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685a      	ldr	r2, [r3, #4]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060da:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060e6:	d134      	bne.n	8006152 <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	685a      	ldr	r2, [r3, #4]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80060f6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060fe:	b29b      	uxth	r3, r3
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	2b00      	cmp	r3, #0
 8006106:	d111      	bne.n	800612c <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006116:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800611e:	b29b      	uxth	r3, r3
 8006120:	085b      	lsrs	r3, r3, #1
 8006122:	b29a      	uxth	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800612a:	e012      	b.n	8006152 <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800613a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006142:	b29b      	uxth	r3, r3
 8006144:	085b      	lsrs	r3, r3, #1
 8006146:	b29b      	uxth	r3, r3
 8006148:	3301      	adds	r3, #1
 800614a:	b29a      	uxth	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006156:	4a2a      	ldr	r2, [pc, #168]	; (8006200 <HAL_SPI_Receive_DMA+0x23c>)
 8006158:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800615e:	4a29      	ldr	r2, [pc, #164]	; (8006204 <HAL_SPI_Receive_DMA+0x240>)
 8006160:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006166:	4a28      	ldr	r2, [pc, #160]	; (8006208 <HAL_SPI_Receive_DMA+0x244>)
 8006168:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800616e:	2200      	movs	r2, #0
 8006170:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	330c      	adds	r3, #12
 800617c:	4619      	mov	r1, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800618a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800618c:	f7fc f898 	bl	80022c0 <HAL_DMA_Start_IT>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00c      	beq.n	80061b0 <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800619a:	f043 0210 	orr.w	r2, r3, #16
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80061ae:	e01e      	b.n	80061ee <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ba:	2b40      	cmp	r3, #64	; 0x40
 80061bc:	d007      	beq.n	80061ce <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061cc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	685a      	ldr	r2, [r3, #4]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f042 0220 	orr.w	r2, r2, #32
 80061dc:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f042 0201 	orr.w	r2, r2, #1
 80061ec:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80061f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3718      	adds	r7, #24
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	0800672f 	.word	0x0800672f
 8006204:	080065f3 	.word	0x080065f3
 8006208:	08006767 	.word	0x08006767

0800620c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
 8006218:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800621a:	2300      	movs	r3, #0
 800621c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006224:	2b01      	cmp	r3, #1
 8006226:	d101      	bne.n	800622c <HAL_SPI_TransmitReceive_DMA+0x20>
 8006228:	2302      	movs	r3, #2
 800622a:	e16c      	b.n	8006506 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800623a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006242:	7dbb      	ldrb	r3, [r7, #22]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d00d      	beq.n	8006264 <HAL_SPI_TransmitReceive_DMA+0x58>
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800624e:	d106      	bne.n	800625e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d102      	bne.n	800625e <HAL_SPI_TransmitReceive_DMA+0x52>
 8006258:	7dbb      	ldrb	r3, [r7, #22]
 800625a:	2b04      	cmp	r3, #4
 800625c:	d002      	beq.n	8006264 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800625e:	2302      	movs	r3, #2
 8006260:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006262:	e14b      	b.n	80064fc <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d005      	beq.n	8006276 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d002      	beq.n	8006276 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006270:	887b      	ldrh	r3, [r7, #2]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d102      	bne.n	800627c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	75fb      	strb	r3, [r7, #23]
    goto error;
 800627a:	e13f      	b.n	80064fc <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b04      	cmp	r3, #4
 8006286:	d003      	beq.n	8006290 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2205      	movs	r2, #5
 800628c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	887a      	ldrh	r2, [r7, #2]
 80062a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	887a      	ldrh	r2, [r7, #2]
 80062a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	887a      	ldrh	r2, [r7, #2]
 80062b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	887a      	ldrh	r2, [r7, #2]
 80062ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80062d8:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062e2:	d908      	bls.n	80062f6 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	685a      	ldr	r2, [r3, #4]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80062f2:	605a      	str	r2, [r3, #4]
 80062f4:	e06f      	b.n	80063d6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	685a      	ldr	r2, [r3, #4]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006304:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006310:	d126      	bne.n	8006360 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10f      	bne.n	800633e <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	685a      	ldr	r2, [r3, #4]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800632c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006332:	b29b      	uxth	r3, r3
 8006334:	085b      	lsrs	r3, r3, #1
 8006336:	b29a      	uxth	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800633c:	e010      	b.n	8006360 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	685a      	ldr	r2, [r3, #4]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800634c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006352:	b29b      	uxth	r3, r3
 8006354:	085b      	lsrs	r3, r3, #1
 8006356:	b29b      	uxth	r3, r3
 8006358:	3301      	adds	r3, #1
 800635a:	b29a      	uxth	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800636a:	d134      	bne.n	80063d6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685a      	ldr	r2, [r3, #4]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800637a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006382:	b29b      	uxth	r3, r3
 8006384:	f003 0301 	and.w	r3, r3, #1
 8006388:	2b00      	cmp	r3, #0
 800638a:	d111      	bne.n	80063b0 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800639a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	085b      	lsrs	r3, r3, #1
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80063ae:	e012      	b.n	80063d6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063be:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	085b      	lsrs	r3, r3, #1
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	3301      	adds	r3, #1
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b04      	cmp	r3, #4
 80063e0:	d108      	bne.n	80063f4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e6:	4a4a      	ldr	r2, [pc, #296]	; (8006510 <HAL_SPI_TransmitReceive_DMA+0x304>)
 80063e8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ee:	4a49      	ldr	r2, [pc, #292]	; (8006514 <HAL_SPI_TransmitReceive_DMA+0x308>)
 80063f0:	63da      	str	r2, [r3, #60]	; 0x3c
 80063f2:	e007      	b.n	8006404 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f8:	4a47      	ldr	r2, [pc, #284]	; (8006518 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 80063fa:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006400:	4a46      	ldr	r2, [pc, #280]	; (800651c <HAL_SPI_TransmitReceive_DMA+0x310>)
 8006402:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006408:	4a45      	ldr	r2, [pc, #276]	; (8006520 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800640a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006410:	2200      	movs	r2, #0
 8006412:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	330c      	adds	r3, #12
 800641e:	4619      	mov	r1, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006424:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800642c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800642e:	f7fb ff47 	bl	80022c0 <HAL_DMA_Start_IT>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00c      	beq.n	8006452 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800643c:	f043 0210 	orr.w	r2, r3, #16
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8006450:	e054      	b.n	80064fc <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f042 0201 	orr.w	r2, r2, #1
 8006460:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006466:	2200      	movs	r2, #0
 8006468:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800646e:	2200      	movs	r2, #0
 8006470:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006476:	2200      	movs	r2, #0
 8006478:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800647e:	2200      	movs	r2, #0
 8006480:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648a:	4619      	mov	r1, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	330c      	adds	r3, #12
 8006492:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006498:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800649a:	f7fb ff11 	bl	80022c0 <HAL_DMA_Start_IT>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00c      	beq.n	80064be <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064a8:	f043 0210 	orr.w	r2, r3, #16
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80064bc:	e01e      	b.n	80064fc <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c8:	2b40      	cmp	r3, #64	; 0x40
 80064ca:	d007      	beq.n	80064dc <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064da:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	685a      	ldr	r2, [r3, #4]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f042 0220 	orr.w	r2, r2, #32
 80064ea:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	685a      	ldr	r2, [r3, #4]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f042 0202 	orr.w	r2, r2, #2
 80064fa:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006504:	7dfb      	ldrb	r3, [r7, #23]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3718      	adds	r7, #24
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	0800672f 	.word	0x0800672f
 8006514:	080065f3 	.word	0x080065f3
 8006518:	0800674b 	.word	0x0800674b
 800651c:	0800669d 	.word	0x0800669d
 8006520:	08006767 	.word	0x08006767

08006524 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800652c:	2300      	movs	r3, #0
 800652e:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00f      	beq.n	8006558 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800653c:	4618      	mov	r0, r3
 800653e:	f7fb ff1f 	bl	8002380 <HAL_DMA_Abort>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d007      	beq.n	8006558 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800654c:	f043 0210 	orr.w	r2, r3, #16
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00f      	beq.n	8006580 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006564:	4618      	mov	r0, r3
 8006566:	f7fb ff0b 	bl	8002380 <HAL_DMA_Abort>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d007      	beq.n	8006580 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006574:	f043 0210 	orr.w	r2, r3, #16
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f022 0203 	bic.w	r2, r2, #3
 800658e:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return errorcode;
 8006598:	7bfb      	ldrb	r3, [r7, #15]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b083      	sub	sp, #12
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80065aa:	bf00      	nop
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b083      	sub	sp, #12
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80065be:	bf00      	nop
 80065c0:	370c      	adds	r7, #12
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80065ca:	b480      	push	{r7}
 80065cc:	b083      	sub	sp, #12
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80065d2:	bf00      	nop
 80065d4:	370c      	adds	r7, #12
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80065de:	b480      	push	{r7}
 80065e0:	b083      	sub	sp, #12
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80065e6:	bf00      	nop
 80065e8:	370c      	adds	r7, #12
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b084      	sub	sp, #16
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fe:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006600:	f7fb fa4c 	bl	8001a9c <HAL_GetTick>
 8006604:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006610:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006614:	d03c      	beq.n	8006690 <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	685a      	ldr	r2, [r3, #4]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f022 0220 	bic.w	r2, r2, #32
 8006624:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10d      	bne.n	800664a <SPI_DMAReceiveCplt+0x58>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006636:	d108      	bne.n	800664a <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685a      	ldr	r2, [r3, #4]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f022 0203 	bic.w	r2, r2, #3
 8006646:	605a      	str	r2, [r3, #4]
 8006648:	e007      	b.n	800665a <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f022 0201 	bic.w	r2, r2, #1
 8006658:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	2164      	movs	r1, #100	; 0x64
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f000 f9c0 	bl	80069e4 <SPI_EndRxTransaction>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d002      	beq.n	8006670 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2220      	movs	r2, #32
 800666e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006684:	2b00      	cmp	r3, #0
 8006686:	d003      	beq.n	8006690 <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f7ff ffa8 	bl	80065de <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800668e:	e002      	b.n	8006696 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f004 fd1d 	bl	800b0d0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a8:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066aa:	f7fb f9f7 	bl	8001a9c <HAL_GetTick>
 80066ae:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066be:	d030      	beq.n	8006722 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f022 0220 	bic.w	r2, r2, #32
 80066ce:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	2164      	movs	r1, #100	; 0x64
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f000 fa01 	bl	8006adc <SPI_EndRxTxTransaction>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d005      	beq.n	80066ec <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066e4:	f043 0220 	orr.w	r2, r3, #32
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 0203 	bic.w	r2, r2, #3
 80066fa:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006716:	2b00      	cmp	r3, #0
 8006718:	d003      	beq.n	8006722 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f7ff ff5f 	bl	80065de <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006720:	e002      	b.n	8006728 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f7ff ff3d 	bl	80065a2 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b084      	sub	sp, #16
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f7ff ff3a 	bl	80065b6 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006742:	bf00      	nop
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b084      	sub	sp, #16
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006756:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f7ff ff36 	bl	80065ca <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800675e:	bf00      	nop
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b084      	sub	sp, #16
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006772:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	685a      	ldr	r2, [r3, #4]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f022 0203 	bic.w	r2, r2, #3
 8006782:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006788:	f043 0210 	orr.w	r2, r3, #16
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f7ff ff20 	bl	80065de <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800679e:	bf00      	nop
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
	...

080067a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b088      	sub	sp, #32
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	603b      	str	r3, [r7, #0]
 80067b4:	4613      	mov	r3, r2
 80067b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80067b8:	f7fb f970 	bl	8001a9c <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c0:	1a9b      	subs	r3, r3, r2
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	4413      	add	r3, r2
 80067c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80067c8:	f7fb f968 	bl	8001a9c <HAL_GetTick>
 80067cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80067ce:	4b39      	ldr	r3, [pc, #228]	; (80068b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	015b      	lsls	r3, r3, #5
 80067d4:	0d1b      	lsrs	r3, r3, #20
 80067d6:	69fa      	ldr	r2, [r7, #28]
 80067d8:	fb02 f303 	mul.w	r3, r2, r3
 80067dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067de:	e054      	b.n	800688a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e6:	d050      	beq.n	800688a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067e8:	f7fb f958 	bl	8001a9c <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	69fa      	ldr	r2, [r7, #28]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d902      	bls.n	80067fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d13d      	bne.n	800687a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	685a      	ldr	r2, [r3, #4]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800680c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006816:	d111      	bne.n	800683c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006820:	d004      	beq.n	800682c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800682a:	d107      	bne.n	800683c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800683a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006844:	d10f      	bne.n	8006866 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006864:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e017      	b.n	80068aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006880:	2300      	movs	r3, #0
 8006882:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	3b01      	subs	r3, #1
 8006888:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	689a      	ldr	r2, [r3, #8]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	4013      	ands	r3, r2
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	429a      	cmp	r2, r3
 8006898:	bf0c      	ite	eq
 800689a:	2301      	moveq	r3, #1
 800689c:	2300      	movne	r3, #0
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	461a      	mov	r2, r3
 80068a2:	79fb      	ldrb	r3, [r7, #7]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d19b      	bne.n	80067e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3720      	adds	r7, #32
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	20000000 	.word	0x20000000

080068b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b08a      	sub	sp, #40	; 0x28
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	607a      	str	r2, [r7, #4]
 80068c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80068c6:	2300      	movs	r3, #0
 80068c8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80068ca:	f7fb f8e7 	bl	8001a9c <HAL_GetTick>
 80068ce:	4602      	mov	r2, r0
 80068d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d2:	1a9b      	subs	r3, r3, r2
 80068d4:	683a      	ldr	r2, [r7, #0]
 80068d6:	4413      	add	r3, r2
 80068d8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80068da:	f7fb f8df 	bl	8001a9c <HAL_GetTick>
 80068de:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	330c      	adds	r3, #12
 80068e6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80068e8:	4b3d      	ldr	r3, [pc, #244]	; (80069e0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	4613      	mov	r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	4413      	add	r3, r2
 80068f2:	00da      	lsls	r2, r3, #3
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	0d1b      	lsrs	r3, r3, #20
 80068f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068fa:	fb02 f303 	mul.w	r3, r2, r3
 80068fe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006900:	e060      	b.n	80069c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006908:	d107      	bne.n	800691a <SPI_WaitFifoStateUntilTimeout+0x62>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d104      	bne.n	800691a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	b2db      	uxtb	r3, r3
 8006916:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006918:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006920:	d050      	beq.n	80069c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006922:	f7fb f8bb 	bl	8001a9c <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	6a3b      	ldr	r3, [r7, #32]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800692e:	429a      	cmp	r2, r3
 8006930:	d902      	bls.n	8006938 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006934:	2b00      	cmp	r3, #0
 8006936:	d13d      	bne.n	80069b4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006946:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006950:	d111      	bne.n	8006976 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800695a:	d004      	beq.n	8006966 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006964:	d107      	bne.n	8006976 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006974:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800697e:	d10f      	bne.n	80069a0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800698e:	601a      	str	r2, [r3, #0]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800699e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e010      	b.n	80069d6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d101      	bne.n	80069be <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80069ba:	2300      	movs	r3, #0
 80069bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	3b01      	subs	r3, #1
 80069c2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	689a      	ldr	r2, [r3, #8]
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	4013      	ands	r3, r2
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d196      	bne.n	8006902 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3728      	adds	r7, #40	; 0x28
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	20000000 	.word	0x20000000

080069e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b088      	sub	sp, #32
 80069e8:	af02      	add	r7, sp, #8
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069f8:	d111      	bne.n	8006a1e <SPI_EndRxTransaction+0x3a>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a02:	d004      	beq.n	8006a0e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a0c:	d107      	bne.n	8006a1e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a1c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a26:	d112      	bne.n	8006a4e <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	9300      	str	r3, [sp, #0]
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	2180      	movs	r1, #128	; 0x80
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f7ff feb8 	bl	80067a8 <SPI_WaitFlagStateUntilTimeout>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d021      	beq.n	8006a82 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a42:	f043 0220 	orr.w	r2, r3, #32
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e03d      	b.n	8006aca <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a4e:	4b21      	ldr	r3, [pc, #132]	; (8006ad4 <SPI_EndRxTransaction+0xf0>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a21      	ldr	r2, [pc, #132]	; (8006ad8 <SPI_EndRxTransaction+0xf4>)
 8006a54:	fba2 2303 	umull	r2, r3, r2, r3
 8006a58:	0d5b      	lsrs	r3, r3, #21
 8006a5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a5e:	fb02 f303 	mul.w	r3, r2, r3
 8006a62:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00a      	beq.n	8006a80 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a7a:	2b80      	cmp	r3, #128	; 0x80
 8006a7c:	d0f2      	beq.n	8006a64 <SPI_EndRxTransaction+0x80>
 8006a7e:	e000      	b.n	8006a82 <SPI_EndRxTransaction+0x9e>
        break;
 8006a80:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a8a:	d11d      	bne.n	8006ac8 <SPI_EndRxTransaction+0xe4>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a94:	d004      	beq.n	8006aa0 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a9e:	d113      	bne.n	8006ac8 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f7ff ff03 	bl	80068b8 <SPI_WaitFifoStateUntilTimeout>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d007      	beq.n	8006ac8 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006abc:	f043 0220 	orr.w	r2, r3, #32
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e000      	b.n	8006aca <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3718      	adds	r7, #24
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	20000000 	.word	0x20000000
 8006ad8:	165e9f81 	.word	0x165e9f81

08006adc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b088      	sub	sp, #32
 8006ae0:	af02      	add	r7, sp, #8
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f7ff fedf 	bl	80068b8 <SPI_WaitFifoStateUntilTimeout>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d007      	beq.n	8006b10 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b04:	f043 0220 	orr.w	r2, r3, #32
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	e046      	b.n	8006b9e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006b10:	4b25      	ldr	r3, [pc, #148]	; (8006ba8 <SPI_EndRxTxTransaction+0xcc>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a25      	ldr	r2, [pc, #148]	; (8006bac <SPI_EndRxTxTransaction+0xd0>)
 8006b16:	fba2 2303 	umull	r2, r3, r2, r3
 8006b1a:	0d5b      	lsrs	r3, r3, #21
 8006b1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b20:	fb02 f303 	mul.w	r3, r2, r3
 8006b24:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b2e:	d112      	bne.n	8006b56 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2200      	movs	r2, #0
 8006b38:	2180      	movs	r1, #128	; 0x80
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f7ff fe34 	bl	80067a8 <SPI_WaitFlagStateUntilTimeout>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d016      	beq.n	8006b74 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b4a:	f043 0220 	orr.w	r2, r3, #32
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e023      	b.n	8006b9e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00a      	beq.n	8006b72 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b6c:	2b80      	cmp	r3, #128	; 0x80
 8006b6e:	d0f2      	beq.n	8006b56 <SPI_EndRxTxTransaction+0x7a>
 8006b70:	e000      	b.n	8006b74 <SPI_EndRxTxTransaction+0x98>
        break;
 8006b72:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	9300      	str	r3, [sp, #0]
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f7ff fe99 	bl	80068b8 <SPI_WaitFifoStateUntilTimeout>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d007      	beq.n	8006b9c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b90:	f043 0220 	orr.w	r2, r3, #32
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e000      	b.n	8006b9e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3718      	adds	r7, #24
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	20000000 	.word	0x20000000
 8006bac:	165e9f81 	.word	0x165e9f81

08006bb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e049      	b.n	8006c56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d106      	bne.n	8006bdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7fa fd00 	bl	80015dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2202      	movs	r2, #2
 8006be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	3304      	adds	r3, #4
 8006bec:	4619      	mov	r1, r3
 8006bee:	4610      	mov	r0, r2
 8006bf0:	f000 ffbe 	bl	8007b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3708      	adds	r7, #8
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
	...

08006c60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d001      	beq.n	8006c78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e054      	b.n	8006d22 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68da      	ldr	r2, [r3, #12]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f042 0201 	orr.w	r2, r2, #1
 8006c8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a26      	ldr	r2, [pc, #152]	; (8006d30 <HAL_TIM_Base_Start_IT+0xd0>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d022      	beq.n	8006ce0 <HAL_TIM_Base_Start_IT+0x80>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ca2:	d01d      	beq.n	8006ce0 <HAL_TIM_Base_Start_IT+0x80>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a22      	ldr	r2, [pc, #136]	; (8006d34 <HAL_TIM_Base_Start_IT+0xd4>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d018      	beq.n	8006ce0 <HAL_TIM_Base_Start_IT+0x80>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a21      	ldr	r2, [pc, #132]	; (8006d38 <HAL_TIM_Base_Start_IT+0xd8>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d013      	beq.n	8006ce0 <HAL_TIM_Base_Start_IT+0x80>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a1f      	ldr	r2, [pc, #124]	; (8006d3c <HAL_TIM_Base_Start_IT+0xdc>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d00e      	beq.n	8006ce0 <HAL_TIM_Base_Start_IT+0x80>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a1e      	ldr	r2, [pc, #120]	; (8006d40 <HAL_TIM_Base_Start_IT+0xe0>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d009      	beq.n	8006ce0 <HAL_TIM_Base_Start_IT+0x80>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a1c      	ldr	r2, [pc, #112]	; (8006d44 <HAL_TIM_Base_Start_IT+0xe4>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d004      	beq.n	8006ce0 <HAL_TIM_Base_Start_IT+0x80>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a1b      	ldr	r2, [pc, #108]	; (8006d48 <HAL_TIM_Base_Start_IT+0xe8>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d115      	bne.n	8006d0c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689a      	ldr	r2, [r3, #8]
 8006ce6:	4b19      	ldr	r3, [pc, #100]	; (8006d4c <HAL_TIM_Base_Start_IT+0xec>)
 8006ce8:	4013      	ands	r3, r2
 8006cea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2b06      	cmp	r3, #6
 8006cf0:	d015      	beq.n	8006d1e <HAL_TIM_Base_Start_IT+0xbe>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cf8:	d011      	beq.n	8006d1e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f042 0201 	orr.w	r2, r2, #1
 8006d08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d0a:	e008      	b.n	8006d1e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f042 0201 	orr.w	r2, r2, #1
 8006d1a:	601a      	str	r2, [r3, #0]
 8006d1c:	e000      	b.n	8006d20 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3714      	adds	r7, #20
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	40010000 	.word	0x40010000
 8006d34:	40000400 	.word	0x40000400
 8006d38:	40000800 	.word	0x40000800
 8006d3c:	40000c00 	.word	0x40000c00
 8006d40:	40010400 	.word	0x40010400
 8006d44:	40014000 	.word	0x40014000
 8006d48:	40001800 	.word	0x40001800
 8006d4c:	00010007 	.word	0x00010007

08006d50 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e049      	b.n	8006df6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d106      	bne.n	8006d7c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f841 	bl	8006dfe <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	3304      	adds	r3, #4
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	4610      	mov	r0, r2
 8006d90:	f000 feee 	bl	8007b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b083      	sub	sp, #12
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006e06:	bf00      	nop
 8006e08:	370c      	adds	r7, #12
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
	...

08006e14 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d104      	bne.n	8006e2e <HAL_TIM_IC_Start+0x1a>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	e023      	b.n	8006e76 <HAL_TIM_IC_Start+0x62>
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	2b04      	cmp	r3, #4
 8006e32:	d104      	bne.n	8006e3e <HAL_TIM_IC_Start+0x2a>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	e01b      	b.n	8006e76 <HAL_TIM_IC_Start+0x62>
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	2b08      	cmp	r3, #8
 8006e42:	d104      	bne.n	8006e4e <HAL_TIM_IC_Start+0x3a>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	e013      	b.n	8006e76 <HAL_TIM_IC_Start+0x62>
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	2b0c      	cmp	r3, #12
 8006e52:	d104      	bne.n	8006e5e <HAL_TIM_IC_Start+0x4a>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	e00b      	b.n	8006e76 <HAL_TIM_IC_Start+0x62>
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	2b10      	cmp	r3, #16
 8006e62:	d104      	bne.n	8006e6e <HAL_TIM_IC_Start+0x5a>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	e003      	b.n	8006e76 <HAL_TIM_IC_Start+0x62>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d104      	bne.n	8006e88 <HAL_TIM_IC_Start+0x74>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	e013      	b.n	8006eb0 <HAL_TIM_IC_Start+0x9c>
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	2b04      	cmp	r3, #4
 8006e8c:	d104      	bne.n	8006e98 <HAL_TIM_IC_Start+0x84>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	e00b      	b.n	8006eb0 <HAL_TIM_IC_Start+0x9c>
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	2b08      	cmp	r3, #8
 8006e9c:	d104      	bne.n	8006ea8 <HAL_TIM_IC_Start+0x94>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	e003      	b.n	8006eb0 <HAL_TIM_IC_Start+0x9c>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006eb2:	7bfb      	ldrb	r3, [r7, #15]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d102      	bne.n	8006ebe <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006eb8:	7bbb      	ldrb	r3, [r7, #14]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d001      	beq.n	8006ec2 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e097      	b.n	8006ff2 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d104      	bne.n	8006ed2 <HAL_TIM_IC_Start+0xbe>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2202      	movs	r2, #2
 8006ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ed0:	e023      	b.n	8006f1a <HAL_TIM_IC_Start+0x106>
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	2b04      	cmp	r3, #4
 8006ed6:	d104      	bne.n	8006ee2 <HAL_TIM_IC_Start+0xce>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2202      	movs	r2, #2
 8006edc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ee0:	e01b      	b.n	8006f1a <HAL_TIM_IC_Start+0x106>
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	2b08      	cmp	r3, #8
 8006ee6:	d104      	bne.n	8006ef2 <HAL_TIM_IC_Start+0xde>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2202      	movs	r2, #2
 8006eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ef0:	e013      	b.n	8006f1a <HAL_TIM_IC_Start+0x106>
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	2b0c      	cmp	r3, #12
 8006ef6:	d104      	bne.n	8006f02 <HAL_TIM_IC_Start+0xee>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2202      	movs	r2, #2
 8006efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f00:	e00b      	b.n	8006f1a <HAL_TIM_IC_Start+0x106>
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	2b10      	cmp	r3, #16
 8006f06:	d104      	bne.n	8006f12 <HAL_TIM_IC_Start+0xfe>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f10:	e003      	b.n	8006f1a <HAL_TIM_IC_Start+0x106>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2202      	movs	r2, #2
 8006f16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d104      	bne.n	8006f2a <HAL_TIM_IC_Start+0x116>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f28:	e013      	b.n	8006f52 <HAL_TIM_IC_Start+0x13e>
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	2b04      	cmp	r3, #4
 8006f2e:	d104      	bne.n	8006f3a <HAL_TIM_IC_Start+0x126>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2202      	movs	r2, #2
 8006f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f38:	e00b      	b.n	8006f52 <HAL_TIM_IC_Start+0x13e>
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	2b08      	cmp	r3, #8
 8006f3e:	d104      	bne.n	8006f4a <HAL_TIM_IC_Start+0x136>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2202      	movs	r2, #2
 8006f44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f48:	e003      	b.n	8006f52 <HAL_TIM_IC_Start+0x13e>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2202      	movs	r2, #2
 8006f4e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2201      	movs	r2, #1
 8006f58:	6839      	ldr	r1, [r7, #0]
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f001 f900 	bl	8008160 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a25      	ldr	r2, [pc, #148]	; (8006ffc <HAL_TIM_IC_Start+0x1e8>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d022      	beq.n	8006fb0 <HAL_TIM_IC_Start+0x19c>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f72:	d01d      	beq.n	8006fb0 <HAL_TIM_IC_Start+0x19c>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a21      	ldr	r2, [pc, #132]	; (8007000 <HAL_TIM_IC_Start+0x1ec>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d018      	beq.n	8006fb0 <HAL_TIM_IC_Start+0x19c>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a20      	ldr	r2, [pc, #128]	; (8007004 <HAL_TIM_IC_Start+0x1f0>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d013      	beq.n	8006fb0 <HAL_TIM_IC_Start+0x19c>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a1e      	ldr	r2, [pc, #120]	; (8007008 <HAL_TIM_IC_Start+0x1f4>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d00e      	beq.n	8006fb0 <HAL_TIM_IC_Start+0x19c>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a1d      	ldr	r2, [pc, #116]	; (800700c <HAL_TIM_IC_Start+0x1f8>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d009      	beq.n	8006fb0 <HAL_TIM_IC_Start+0x19c>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a1b      	ldr	r2, [pc, #108]	; (8007010 <HAL_TIM_IC_Start+0x1fc>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d004      	beq.n	8006fb0 <HAL_TIM_IC_Start+0x19c>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a1a      	ldr	r2, [pc, #104]	; (8007014 <HAL_TIM_IC_Start+0x200>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d115      	bne.n	8006fdc <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	689a      	ldr	r2, [r3, #8]
 8006fb6:	4b18      	ldr	r3, [pc, #96]	; (8007018 <HAL_TIM_IC_Start+0x204>)
 8006fb8:	4013      	ands	r3, r2
 8006fba:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	2b06      	cmp	r3, #6
 8006fc0:	d015      	beq.n	8006fee <HAL_TIM_IC_Start+0x1da>
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fc8:	d011      	beq.n	8006fee <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f042 0201 	orr.w	r2, r2, #1
 8006fd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fda:	e008      	b.n	8006fee <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f042 0201 	orr.w	r2, r2, #1
 8006fea:	601a      	str	r2, [r3, #0]
 8006fec:	e000      	b.n	8006ff0 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	40010000 	.word	0x40010000
 8007000:	40000400 	.word	0x40000400
 8007004:	40000800 	.word	0x40000800
 8007008:	40000c00 	.word	0x40000c00
 800700c:	40010400 	.word	0x40010400
 8007010:	40014000 	.word	0x40014000
 8007014:	40001800 	.word	0x40001800
 8007018:	00010007 	.word	0x00010007

0800701c <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2200      	movs	r2, #0
 800702c:	6839      	ldr	r1, [r7, #0]
 800702e:	4618      	mov	r0, r3
 8007030:	f001 f896 	bl	8008160 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	6a1a      	ldr	r2, [r3, #32]
 800703a:	f241 1311 	movw	r3, #4369	; 0x1111
 800703e:	4013      	ands	r3, r2
 8007040:	2b00      	cmp	r3, #0
 8007042:	d10f      	bne.n	8007064 <HAL_TIM_IC_Stop+0x48>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	6a1a      	ldr	r2, [r3, #32]
 800704a:	f240 4344 	movw	r3, #1092	; 0x444
 800704e:	4013      	ands	r3, r2
 8007050:	2b00      	cmp	r3, #0
 8007052:	d107      	bne.n	8007064 <HAL_TIM_IC_Stop+0x48>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f022 0201 	bic.w	r2, r2, #1
 8007062:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d104      	bne.n	8007074 <HAL_TIM_IC_Stop+0x58>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007072:	e023      	b.n	80070bc <HAL_TIM_IC_Stop+0xa0>
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	2b04      	cmp	r3, #4
 8007078:	d104      	bne.n	8007084 <HAL_TIM_IC_Stop+0x68>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007082:	e01b      	b.n	80070bc <HAL_TIM_IC_Stop+0xa0>
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	2b08      	cmp	r3, #8
 8007088:	d104      	bne.n	8007094 <HAL_TIM_IC_Stop+0x78>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007092:	e013      	b.n	80070bc <HAL_TIM_IC_Stop+0xa0>
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	2b0c      	cmp	r3, #12
 8007098:	d104      	bne.n	80070a4 <HAL_TIM_IC_Stop+0x88>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070a2:	e00b      	b.n	80070bc <HAL_TIM_IC_Stop+0xa0>
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	2b10      	cmp	r3, #16
 80070a8:	d104      	bne.n	80070b4 <HAL_TIM_IC_Stop+0x98>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070b2:	e003      	b.n	80070bc <HAL_TIM_IC_Stop+0xa0>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d104      	bne.n	80070cc <HAL_TIM_IC_Stop+0xb0>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070ca:	e013      	b.n	80070f4 <HAL_TIM_IC_Stop+0xd8>
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	2b04      	cmp	r3, #4
 80070d0:	d104      	bne.n	80070dc <HAL_TIM_IC_Stop+0xc0>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070da:	e00b      	b.n	80070f4 <HAL_TIM_IC_Stop+0xd8>
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	2b08      	cmp	r3, #8
 80070e0:	d104      	bne.n	80070ec <HAL_TIM_IC_Stop+0xd0>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80070ea:	e003      	b.n	80070f4 <HAL_TIM_IC_Stop+0xd8>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3708      	adds	r7, #8
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
	...

08007100 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800710a:	2300      	movs	r3, #0
 800710c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d104      	bne.n	800711e <HAL_TIM_IC_Start_IT+0x1e>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800711a:	b2db      	uxtb	r3, r3
 800711c:	e023      	b.n	8007166 <HAL_TIM_IC_Start_IT+0x66>
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	2b04      	cmp	r3, #4
 8007122:	d104      	bne.n	800712e <HAL_TIM_IC_Start_IT+0x2e>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800712a:	b2db      	uxtb	r3, r3
 800712c:	e01b      	b.n	8007166 <HAL_TIM_IC_Start_IT+0x66>
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	2b08      	cmp	r3, #8
 8007132:	d104      	bne.n	800713e <HAL_TIM_IC_Start_IT+0x3e>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800713a:	b2db      	uxtb	r3, r3
 800713c:	e013      	b.n	8007166 <HAL_TIM_IC_Start_IT+0x66>
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	2b0c      	cmp	r3, #12
 8007142:	d104      	bne.n	800714e <HAL_TIM_IC_Start_IT+0x4e>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800714a:	b2db      	uxtb	r3, r3
 800714c:	e00b      	b.n	8007166 <HAL_TIM_IC_Start_IT+0x66>
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2b10      	cmp	r3, #16
 8007152:	d104      	bne.n	800715e <HAL_TIM_IC_Start_IT+0x5e>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800715a:	b2db      	uxtb	r3, r3
 800715c:	e003      	b.n	8007166 <HAL_TIM_IC_Start_IT+0x66>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007164:	b2db      	uxtb	r3, r3
 8007166:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d104      	bne.n	8007178 <HAL_TIM_IC_Start_IT+0x78>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007174:	b2db      	uxtb	r3, r3
 8007176:	e013      	b.n	80071a0 <HAL_TIM_IC_Start_IT+0xa0>
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	2b04      	cmp	r3, #4
 800717c:	d104      	bne.n	8007188 <HAL_TIM_IC_Start_IT+0x88>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007184:	b2db      	uxtb	r3, r3
 8007186:	e00b      	b.n	80071a0 <HAL_TIM_IC_Start_IT+0xa0>
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	2b08      	cmp	r3, #8
 800718c:	d104      	bne.n	8007198 <HAL_TIM_IC_Start_IT+0x98>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007194:	b2db      	uxtb	r3, r3
 8007196:	e003      	b.n	80071a0 <HAL_TIM_IC_Start_IT+0xa0>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80071a2:	7bbb      	ldrb	r3, [r7, #14]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d102      	bne.n	80071ae <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80071a8:	7b7b      	ldrb	r3, [r7, #13]
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d001      	beq.n	80071b2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e0e2      	b.n	8007378 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d104      	bne.n	80071c2 <HAL_TIM_IC_Start_IT+0xc2>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2202      	movs	r2, #2
 80071bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071c0:	e023      	b.n	800720a <HAL_TIM_IC_Start_IT+0x10a>
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	2b04      	cmp	r3, #4
 80071c6:	d104      	bne.n	80071d2 <HAL_TIM_IC_Start_IT+0xd2>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2202      	movs	r2, #2
 80071cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071d0:	e01b      	b.n	800720a <HAL_TIM_IC_Start_IT+0x10a>
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	2b08      	cmp	r3, #8
 80071d6:	d104      	bne.n	80071e2 <HAL_TIM_IC_Start_IT+0xe2>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2202      	movs	r2, #2
 80071dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071e0:	e013      	b.n	800720a <HAL_TIM_IC_Start_IT+0x10a>
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	2b0c      	cmp	r3, #12
 80071e6:	d104      	bne.n	80071f2 <HAL_TIM_IC_Start_IT+0xf2>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2202      	movs	r2, #2
 80071ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071f0:	e00b      	b.n	800720a <HAL_TIM_IC_Start_IT+0x10a>
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	2b10      	cmp	r3, #16
 80071f6:	d104      	bne.n	8007202 <HAL_TIM_IC_Start_IT+0x102>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2202      	movs	r2, #2
 80071fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007200:	e003      	b.n	800720a <HAL_TIM_IC_Start_IT+0x10a>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2202      	movs	r2, #2
 8007206:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d104      	bne.n	800721a <HAL_TIM_IC_Start_IT+0x11a>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2202      	movs	r2, #2
 8007214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007218:	e013      	b.n	8007242 <HAL_TIM_IC_Start_IT+0x142>
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	2b04      	cmp	r3, #4
 800721e:	d104      	bne.n	800722a <HAL_TIM_IC_Start_IT+0x12a>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2202      	movs	r2, #2
 8007224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007228:	e00b      	b.n	8007242 <HAL_TIM_IC_Start_IT+0x142>
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	2b08      	cmp	r3, #8
 800722e:	d104      	bne.n	800723a <HAL_TIM_IC_Start_IT+0x13a>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2202      	movs	r2, #2
 8007234:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007238:	e003      	b.n	8007242 <HAL_TIM_IC_Start_IT+0x142>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2202      	movs	r2, #2
 800723e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	2b0c      	cmp	r3, #12
 8007246:	d841      	bhi.n	80072cc <HAL_TIM_IC_Start_IT+0x1cc>
 8007248:	a201      	add	r2, pc, #4	; (adr r2, 8007250 <HAL_TIM_IC_Start_IT+0x150>)
 800724a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724e:	bf00      	nop
 8007250:	08007285 	.word	0x08007285
 8007254:	080072cd 	.word	0x080072cd
 8007258:	080072cd 	.word	0x080072cd
 800725c:	080072cd 	.word	0x080072cd
 8007260:	08007297 	.word	0x08007297
 8007264:	080072cd 	.word	0x080072cd
 8007268:	080072cd 	.word	0x080072cd
 800726c:	080072cd 	.word	0x080072cd
 8007270:	080072a9 	.word	0x080072a9
 8007274:	080072cd 	.word	0x080072cd
 8007278:	080072cd 	.word	0x080072cd
 800727c:	080072cd 	.word	0x080072cd
 8007280:	080072bb 	.word	0x080072bb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68da      	ldr	r2, [r3, #12]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f042 0202 	orr.w	r2, r2, #2
 8007292:	60da      	str	r2, [r3, #12]
      break;
 8007294:	e01d      	b.n	80072d2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68da      	ldr	r2, [r3, #12]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f042 0204 	orr.w	r2, r2, #4
 80072a4:	60da      	str	r2, [r3, #12]
      break;
 80072a6:	e014      	b.n	80072d2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68da      	ldr	r2, [r3, #12]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f042 0208 	orr.w	r2, r2, #8
 80072b6:	60da      	str	r2, [r3, #12]
      break;
 80072b8:	e00b      	b.n	80072d2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68da      	ldr	r2, [r3, #12]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f042 0210 	orr.w	r2, r2, #16
 80072c8:	60da      	str	r2, [r3, #12]
      break;
 80072ca:	e002      	b.n	80072d2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	73fb      	strb	r3, [r7, #15]
      break;
 80072d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80072d2:	7bfb      	ldrb	r3, [r7, #15]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d14e      	bne.n	8007376 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2201      	movs	r2, #1
 80072de:	6839      	ldr	r1, [r7, #0]
 80072e0:	4618      	mov	r0, r3
 80072e2:	f000 ff3d 	bl	8008160 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a25      	ldr	r2, [pc, #148]	; (8007380 <HAL_TIM_IC_Start_IT+0x280>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d022      	beq.n	8007336 <HAL_TIM_IC_Start_IT+0x236>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072f8:	d01d      	beq.n	8007336 <HAL_TIM_IC_Start_IT+0x236>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a21      	ldr	r2, [pc, #132]	; (8007384 <HAL_TIM_IC_Start_IT+0x284>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d018      	beq.n	8007336 <HAL_TIM_IC_Start_IT+0x236>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a1f      	ldr	r2, [pc, #124]	; (8007388 <HAL_TIM_IC_Start_IT+0x288>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d013      	beq.n	8007336 <HAL_TIM_IC_Start_IT+0x236>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a1e      	ldr	r2, [pc, #120]	; (800738c <HAL_TIM_IC_Start_IT+0x28c>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d00e      	beq.n	8007336 <HAL_TIM_IC_Start_IT+0x236>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a1c      	ldr	r2, [pc, #112]	; (8007390 <HAL_TIM_IC_Start_IT+0x290>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d009      	beq.n	8007336 <HAL_TIM_IC_Start_IT+0x236>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a1b      	ldr	r2, [pc, #108]	; (8007394 <HAL_TIM_IC_Start_IT+0x294>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d004      	beq.n	8007336 <HAL_TIM_IC_Start_IT+0x236>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a19      	ldr	r2, [pc, #100]	; (8007398 <HAL_TIM_IC_Start_IT+0x298>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d115      	bne.n	8007362 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	689a      	ldr	r2, [r3, #8]
 800733c:	4b17      	ldr	r3, [pc, #92]	; (800739c <HAL_TIM_IC_Start_IT+0x29c>)
 800733e:	4013      	ands	r3, r2
 8007340:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	2b06      	cmp	r3, #6
 8007346:	d015      	beq.n	8007374 <HAL_TIM_IC_Start_IT+0x274>
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800734e:	d011      	beq.n	8007374 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f042 0201 	orr.w	r2, r2, #1
 800735e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007360:	e008      	b.n	8007374 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f042 0201 	orr.w	r2, r2, #1
 8007370:	601a      	str	r2, [r3, #0]
 8007372:	e000      	b.n	8007376 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007374:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007376:	7bfb      	ldrb	r3, [r7, #15]
}
 8007378:	4618      	mov	r0, r3
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	40010000 	.word	0x40010000
 8007384:	40000400 	.word	0x40000400
 8007388:	40000800 	.word	0x40000800
 800738c:	40000c00 	.word	0x40000c00
 8007390:	40010400 	.word	0x40010400
 8007394:	40014000 	.word	0x40014000
 8007398:	40001800 	.word	0x40001800
 800739c:	00010007 	.word	0x00010007

080073a0 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073aa:	2300      	movs	r3, #0
 80073ac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	2b0c      	cmp	r3, #12
 80073b2:	d841      	bhi.n	8007438 <HAL_TIM_IC_Stop_IT+0x98>
 80073b4:	a201      	add	r2, pc, #4	; (adr r2, 80073bc <HAL_TIM_IC_Stop_IT+0x1c>)
 80073b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ba:	bf00      	nop
 80073bc:	080073f1 	.word	0x080073f1
 80073c0:	08007439 	.word	0x08007439
 80073c4:	08007439 	.word	0x08007439
 80073c8:	08007439 	.word	0x08007439
 80073cc:	08007403 	.word	0x08007403
 80073d0:	08007439 	.word	0x08007439
 80073d4:	08007439 	.word	0x08007439
 80073d8:	08007439 	.word	0x08007439
 80073dc:	08007415 	.word	0x08007415
 80073e0:	08007439 	.word	0x08007439
 80073e4:	08007439 	.word	0x08007439
 80073e8:	08007439 	.word	0x08007439
 80073ec:	08007427 	.word	0x08007427
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68da      	ldr	r2, [r3, #12]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f022 0202 	bic.w	r2, r2, #2
 80073fe:	60da      	str	r2, [r3, #12]
      break;
 8007400:	e01d      	b.n	800743e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68da      	ldr	r2, [r3, #12]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f022 0204 	bic.w	r2, r2, #4
 8007410:	60da      	str	r2, [r3, #12]
      break;
 8007412:	e014      	b.n	800743e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68da      	ldr	r2, [r3, #12]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f022 0208 	bic.w	r2, r2, #8
 8007422:	60da      	str	r2, [r3, #12]
      break;
 8007424:	e00b      	b.n	800743e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68da      	ldr	r2, [r3, #12]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f022 0210 	bic.w	r2, r2, #16
 8007434:	60da      	str	r2, [r3, #12]
      break;
 8007436:	e002      	b.n	800743e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	73fb      	strb	r3, [r7, #15]
      break;
 800743c:	bf00      	nop
  }

  if (status == HAL_OK)
 800743e:	7bfb      	ldrb	r3, [r7, #15]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d166      	bne.n	8007512 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2200      	movs	r2, #0
 800744a:	6839      	ldr	r1, [r7, #0]
 800744c:	4618      	mov	r0, r3
 800744e:	f000 fe87 	bl	8008160 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6a1a      	ldr	r2, [r3, #32]
 8007458:	f241 1311 	movw	r3, #4369	; 0x1111
 800745c:	4013      	ands	r3, r2
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10f      	bne.n	8007482 <HAL_TIM_IC_Stop_IT+0xe2>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	6a1a      	ldr	r2, [r3, #32]
 8007468:	f240 4344 	movw	r3, #1092	; 0x444
 800746c:	4013      	ands	r3, r2
 800746e:	2b00      	cmp	r3, #0
 8007470:	d107      	bne.n	8007482 <HAL_TIM_IC_Stop_IT+0xe2>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f022 0201 	bic.w	r2, r2, #1
 8007480:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d104      	bne.n	8007492 <HAL_TIM_IC_Stop_IT+0xf2>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007490:	e023      	b.n	80074da <HAL_TIM_IC_Stop_IT+0x13a>
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	2b04      	cmp	r3, #4
 8007496:	d104      	bne.n	80074a2 <HAL_TIM_IC_Stop_IT+0x102>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074a0:	e01b      	b.n	80074da <HAL_TIM_IC_Stop_IT+0x13a>
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	2b08      	cmp	r3, #8
 80074a6:	d104      	bne.n	80074b2 <HAL_TIM_IC_Stop_IT+0x112>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074b0:	e013      	b.n	80074da <HAL_TIM_IC_Stop_IT+0x13a>
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2b0c      	cmp	r3, #12
 80074b6:	d104      	bne.n	80074c2 <HAL_TIM_IC_Stop_IT+0x122>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80074c0:	e00b      	b.n	80074da <HAL_TIM_IC_Stop_IT+0x13a>
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	2b10      	cmp	r3, #16
 80074c6:	d104      	bne.n	80074d2 <HAL_TIM_IC_Stop_IT+0x132>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074d0:	e003      	b.n	80074da <HAL_TIM_IC_Stop_IT+0x13a>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d104      	bne.n	80074ea <HAL_TIM_IC_Stop_IT+0x14a>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074e8:	e013      	b.n	8007512 <HAL_TIM_IC_Stop_IT+0x172>
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	2b04      	cmp	r3, #4
 80074ee:	d104      	bne.n	80074fa <HAL_TIM_IC_Stop_IT+0x15a>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074f8:	e00b      	b.n	8007512 <HAL_TIM_IC_Stop_IT+0x172>
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	2b08      	cmp	r3, #8
 80074fe:	d104      	bne.n	800750a <HAL_TIM_IC_Stop_IT+0x16a>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007508:	e003      	b.n	8007512 <HAL_TIM_IC_Stop_IT+0x172>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 8007512:	7bfb      	ldrb	r3, [r7, #15]
}
 8007514:	4618      	mov	r0, r3
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	2b02      	cmp	r3, #2
 8007530:	d122      	bne.n	8007578 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	f003 0302 	and.w	r3, r3, #2
 800753c:	2b02      	cmp	r3, #2
 800753e:	d11b      	bne.n	8007578 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f06f 0202 	mvn.w	r2, #2
 8007548:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	f003 0303 	and.w	r3, r3, #3
 800755a:	2b00      	cmp	r3, #0
 800755c:	d003      	beq.n	8007566 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f003 fd64 	bl	800b02c <HAL_TIM_IC_CaptureCallback>
 8007564:	e005      	b.n	8007572 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fae4 	bl	8007b34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 faeb 	bl	8007b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	f003 0304 	and.w	r3, r3, #4
 8007582:	2b04      	cmp	r3, #4
 8007584:	d122      	bne.n	80075cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	f003 0304 	and.w	r3, r3, #4
 8007590:	2b04      	cmp	r3, #4
 8007592:	d11b      	bne.n	80075cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f06f 0204 	mvn.w	r2, #4
 800759c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2202      	movs	r2, #2
 80075a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d003      	beq.n	80075ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f003 fd3a 	bl	800b02c <HAL_TIM_IC_CaptureCallback>
 80075b8:	e005      	b.n	80075c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 faba 	bl	8007b34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 fac1 	bl	8007b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	f003 0308 	and.w	r3, r3, #8
 80075d6:	2b08      	cmp	r3, #8
 80075d8:	d122      	bne.n	8007620 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	f003 0308 	and.w	r3, r3, #8
 80075e4:	2b08      	cmp	r3, #8
 80075e6:	d11b      	bne.n	8007620 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f06f 0208 	mvn.w	r2, #8
 80075f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2204      	movs	r2, #4
 80075f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	69db      	ldr	r3, [r3, #28]
 80075fe:	f003 0303 	and.w	r3, r3, #3
 8007602:	2b00      	cmp	r3, #0
 8007604:	d003      	beq.n	800760e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f003 fd10 	bl	800b02c <HAL_TIM_IC_CaptureCallback>
 800760c:	e005      	b.n	800761a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fa90 	bl	8007b34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fa97 	bl	8007b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	f003 0310 	and.w	r3, r3, #16
 800762a:	2b10      	cmp	r3, #16
 800762c:	d122      	bne.n	8007674 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	f003 0310 	and.w	r3, r3, #16
 8007638:	2b10      	cmp	r3, #16
 800763a:	d11b      	bne.n	8007674 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f06f 0210 	mvn.w	r2, #16
 8007644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2208      	movs	r2, #8
 800764a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007656:	2b00      	cmp	r3, #0
 8007658:	d003      	beq.n	8007662 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f003 fce6 	bl	800b02c <HAL_TIM_IC_CaptureCallback>
 8007660:	e005      	b.n	800766e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 fa66 	bl	8007b34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 fa6d 	bl	8007b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	2b01      	cmp	r3, #1
 8007680:	d10e      	bne.n	80076a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	f003 0301 	and.w	r3, r3, #1
 800768c:	2b01      	cmp	r3, #1
 800768e:	d107      	bne.n	80076a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f06f 0201 	mvn.w	r2, #1
 8007698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f7f9 fcd8 	bl	8001050 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076aa:	2b80      	cmp	r3, #128	; 0x80
 80076ac:	d10e      	bne.n	80076cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076b8:	2b80      	cmp	r3, #128	; 0x80
 80076ba:	d107      	bne.n	80076cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80076c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fe08 	bl	80082dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076da:	d10e      	bne.n	80076fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076e6:	2b80      	cmp	r3, #128	; 0x80
 80076e8:	d107      	bne.n	80076fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80076f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 fdfb 	bl	80082f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007704:	2b40      	cmp	r3, #64	; 0x40
 8007706:	d10e      	bne.n	8007726 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007712:	2b40      	cmp	r3, #64	; 0x40
 8007714:	d107      	bne.n	8007726 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800771e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fa1b 	bl	8007b5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	f003 0320 	and.w	r3, r3, #32
 8007730:	2b20      	cmp	r3, #32
 8007732:	d10e      	bne.n	8007752 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	f003 0320 	and.w	r3, r3, #32
 800773e:	2b20      	cmp	r3, #32
 8007740:	d107      	bne.n	8007752 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f06f 0220 	mvn.w	r2, #32
 800774a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fdbb 	bl	80082c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007752:	bf00      	nop
 8007754:	3708      	adds	r7, #8
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b086      	sub	sp, #24
 800775e:	af00      	add	r7, sp, #0
 8007760:	60f8      	str	r0, [r7, #12]
 8007762:	60b9      	str	r1, [r7, #8]
 8007764:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007766:	2300      	movs	r3, #0
 8007768:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007770:	2b01      	cmp	r3, #1
 8007772:	d101      	bne.n	8007778 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007774:	2302      	movs	r3, #2
 8007776:	e088      	b.n	800788a <HAL_TIM_IC_ConfigChannel+0x130>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d11b      	bne.n	80077be <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6818      	ldr	r0, [r3, #0]
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	6819      	ldr	r1, [r3, #0]
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	685a      	ldr	r2, [r3, #4]
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	f000 fb1f 	bl	8007dd8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	699a      	ldr	r2, [r3, #24]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f022 020c 	bic.w	r2, r2, #12
 80077a8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	6999      	ldr	r1, [r3, #24]
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	689a      	ldr	r2, [r3, #8]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	430a      	orrs	r2, r1
 80077ba:	619a      	str	r2, [r3, #24]
 80077bc:	e060      	b.n	8007880 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2b04      	cmp	r3, #4
 80077c2:	d11c      	bne.n	80077fe <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6818      	ldr	r0, [r3, #0]
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	6819      	ldr	r1, [r3, #0]
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	685a      	ldr	r2, [r3, #4]
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	f000 fba3 	bl	8007f1e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	699a      	ldr	r2, [r3, #24]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80077e6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6999      	ldr	r1, [r3, #24]
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	021a      	lsls	r2, r3, #8
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	430a      	orrs	r2, r1
 80077fa:	619a      	str	r2, [r3, #24]
 80077fc:	e040      	b.n	8007880 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2b08      	cmp	r3, #8
 8007802:	d11b      	bne.n	800783c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6818      	ldr	r0, [r3, #0]
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	6819      	ldr	r1, [r3, #0]
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	685a      	ldr	r2, [r3, #4]
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	f000 fbf0 	bl	8007ff8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	69da      	ldr	r2, [r3, #28]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f022 020c 	bic.w	r2, r2, #12
 8007826:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	69d9      	ldr	r1, [r3, #28]
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	689a      	ldr	r2, [r3, #8]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	430a      	orrs	r2, r1
 8007838:	61da      	str	r2, [r3, #28]
 800783a:	e021      	b.n	8007880 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2b0c      	cmp	r3, #12
 8007840:	d11c      	bne.n	800787c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6818      	ldr	r0, [r3, #0]
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	6819      	ldr	r1, [r3, #0]
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	685a      	ldr	r2, [r3, #4]
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	f000 fc0d 	bl	8008070 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	69da      	ldr	r2, [r3, #28]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007864:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	69d9      	ldr	r1, [r3, #28]
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	021a      	lsls	r2, r3, #8
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	430a      	orrs	r2, r1
 8007878:	61da      	str	r2, [r3, #28]
 800787a:	e001      	b.n	8007880 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2200      	movs	r2, #0
 8007884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007888:	7dfb      	ldrb	r3, [r7, #23]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3718      	adds	r7, #24
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
	...

08007894 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800789e:	2300      	movs	r3, #0
 80078a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d101      	bne.n	80078b0 <HAL_TIM_ConfigClockSource+0x1c>
 80078ac:	2302      	movs	r3, #2
 80078ae:	e0b4      	b.n	8007a1a <HAL_TIM_ConfigClockSource+0x186>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2202      	movs	r2, #2
 80078bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80078c8:	68ba      	ldr	r2, [r7, #8]
 80078ca:	4b56      	ldr	r3, [pc, #344]	; (8007a24 <HAL_TIM_ConfigClockSource+0x190>)
 80078cc:	4013      	ands	r3, r2
 80078ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078e8:	d03e      	beq.n	8007968 <HAL_TIM_ConfigClockSource+0xd4>
 80078ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078ee:	f200 8087 	bhi.w	8007a00 <HAL_TIM_ConfigClockSource+0x16c>
 80078f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078f6:	f000 8086 	beq.w	8007a06 <HAL_TIM_ConfigClockSource+0x172>
 80078fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078fe:	d87f      	bhi.n	8007a00 <HAL_TIM_ConfigClockSource+0x16c>
 8007900:	2b70      	cmp	r3, #112	; 0x70
 8007902:	d01a      	beq.n	800793a <HAL_TIM_ConfigClockSource+0xa6>
 8007904:	2b70      	cmp	r3, #112	; 0x70
 8007906:	d87b      	bhi.n	8007a00 <HAL_TIM_ConfigClockSource+0x16c>
 8007908:	2b60      	cmp	r3, #96	; 0x60
 800790a:	d050      	beq.n	80079ae <HAL_TIM_ConfigClockSource+0x11a>
 800790c:	2b60      	cmp	r3, #96	; 0x60
 800790e:	d877      	bhi.n	8007a00 <HAL_TIM_ConfigClockSource+0x16c>
 8007910:	2b50      	cmp	r3, #80	; 0x50
 8007912:	d03c      	beq.n	800798e <HAL_TIM_ConfigClockSource+0xfa>
 8007914:	2b50      	cmp	r3, #80	; 0x50
 8007916:	d873      	bhi.n	8007a00 <HAL_TIM_ConfigClockSource+0x16c>
 8007918:	2b40      	cmp	r3, #64	; 0x40
 800791a:	d058      	beq.n	80079ce <HAL_TIM_ConfigClockSource+0x13a>
 800791c:	2b40      	cmp	r3, #64	; 0x40
 800791e:	d86f      	bhi.n	8007a00 <HAL_TIM_ConfigClockSource+0x16c>
 8007920:	2b30      	cmp	r3, #48	; 0x30
 8007922:	d064      	beq.n	80079ee <HAL_TIM_ConfigClockSource+0x15a>
 8007924:	2b30      	cmp	r3, #48	; 0x30
 8007926:	d86b      	bhi.n	8007a00 <HAL_TIM_ConfigClockSource+0x16c>
 8007928:	2b20      	cmp	r3, #32
 800792a:	d060      	beq.n	80079ee <HAL_TIM_ConfigClockSource+0x15a>
 800792c:	2b20      	cmp	r3, #32
 800792e:	d867      	bhi.n	8007a00 <HAL_TIM_ConfigClockSource+0x16c>
 8007930:	2b00      	cmp	r3, #0
 8007932:	d05c      	beq.n	80079ee <HAL_TIM_ConfigClockSource+0x15a>
 8007934:	2b10      	cmp	r3, #16
 8007936:	d05a      	beq.n	80079ee <HAL_TIM_ConfigClockSource+0x15a>
 8007938:	e062      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6818      	ldr	r0, [r3, #0]
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	6899      	ldr	r1, [r3, #8]
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	685a      	ldr	r2, [r3, #4]
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	f000 fbe9 	bl	8008120 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800795c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68ba      	ldr	r2, [r7, #8]
 8007964:	609a      	str	r2, [r3, #8]
      break;
 8007966:	e04f      	b.n	8007a08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6818      	ldr	r0, [r3, #0]
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	6899      	ldr	r1, [r3, #8]
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	685a      	ldr	r2, [r3, #4]
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	f000 fbd2 	bl	8008120 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	689a      	ldr	r2, [r3, #8]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800798a:	609a      	str	r2, [r3, #8]
      break;
 800798c:	e03c      	b.n	8007a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6818      	ldr	r0, [r3, #0]
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	6859      	ldr	r1, [r3, #4]
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	461a      	mov	r2, r3
 800799c:	f000 fa90 	bl	8007ec0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2150      	movs	r1, #80	; 0x50
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 fb9f 	bl	80080ea <TIM_ITRx_SetConfig>
      break;
 80079ac:	e02c      	b.n	8007a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6818      	ldr	r0, [r3, #0]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	6859      	ldr	r1, [r3, #4]
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	461a      	mov	r2, r3
 80079bc:	f000 faec 	bl	8007f98 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2160      	movs	r1, #96	; 0x60
 80079c6:	4618      	mov	r0, r3
 80079c8:	f000 fb8f 	bl	80080ea <TIM_ITRx_SetConfig>
      break;
 80079cc:	e01c      	b.n	8007a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6818      	ldr	r0, [r3, #0]
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	6859      	ldr	r1, [r3, #4]
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	461a      	mov	r2, r3
 80079dc:	f000 fa70 	bl	8007ec0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2140      	movs	r1, #64	; 0x40
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 fb7f 	bl	80080ea <TIM_ITRx_SetConfig>
      break;
 80079ec:	e00c      	b.n	8007a08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4619      	mov	r1, r3
 80079f8:	4610      	mov	r0, r2
 80079fa:	f000 fb76 	bl	80080ea <TIM_ITRx_SetConfig>
      break;
 80079fe:	e003      	b.n	8007a08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	73fb      	strb	r3, [r7, #15]
      break;
 8007a04:	e000      	b.n	8007a08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007a06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	fffeff88 	.word	0xfffeff88

08007a28 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d101      	bne.n	8007a40 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	e031      	b.n	8007aa4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007a50:	6839      	ldr	r1, [r7, #0]
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f92c 	bl	8007cb0 <TIM_SlaveTimer_SetConfig>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d009      	beq.n	8007a72 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e018      	b.n	8007aa4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	68da      	ldr	r2, [r3, #12]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a80:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68da      	ldr	r2, [r3, #12]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a90:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3708      	adds	r7, #8
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	2b0c      	cmp	r3, #12
 8007abe:	d831      	bhi.n	8007b24 <HAL_TIM_ReadCapturedValue+0x78>
 8007ac0:	a201      	add	r2, pc, #4	; (adr r2, 8007ac8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac6:	bf00      	nop
 8007ac8:	08007afd 	.word	0x08007afd
 8007acc:	08007b25 	.word	0x08007b25
 8007ad0:	08007b25 	.word	0x08007b25
 8007ad4:	08007b25 	.word	0x08007b25
 8007ad8:	08007b07 	.word	0x08007b07
 8007adc:	08007b25 	.word	0x08007b25
 8007ae0:	08007b25 	.word	0x08007b25
 8007ae4:	08007b25 	.word	0x08007b25
 8007ae8:	08007b11 	.word	0x08007b11
 8007aec:	08007b25 	.word	0x08007b25
 8007af0:	08007b25 	.word	0x08007b25
 8007af4:	08007b25 	.word	0x08007b25
 8007af8:	08007b1b 	.word	0x08007b1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b02:	60fb      	str	r3, [r7, #12]

      break;
 8007b04:	e00f      	b.n	8007b26 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0c:	60fb      	str	r3, [r7, #12]

      break;
 8007b0e:	e00a      	b.n	8007b26 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b16:	60fb      	str	r3, [r7, #12]

      break;
 8007b18:	e005      	b.n	8007b26 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b20:	60fb      	str	r3, [r7, #12]

      break;
 8007b22:	e000      	b.n	8007b26 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007b24:	bf00      	nop
  }

  return tmpreg;
 8007b26:	68fb      	ldr	r3, [r7, #12]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3714      	adds	r7, #20
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b3c:	bf00      	nop
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b50:	bf00      	nop
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a40      	ldr	r2, [pc, #256]	; (8007c84 <TIM_Base_SetConfig+0x114>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d013      	beq.n	8007bb0 <TIM_Base_SetConfig+0x40>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b8e:	d00f      	beq.n	8007bb0 <TIM_Base_SetConfig+0x40>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a3d      	ldr	r2, [pc, #244]	; (8007c88 <TIM_Base_SetConfig+0x118>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d00b      	beq.n	8007bb0 <TIM_Base_SetConfig+0x40>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4a3c      	ldr	r2, [pc, #240]	; (8007c8c <TIM_Base_SetConfig+0x11c>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d007      	beq.n	8007bb0 <TIM_Base_SetConfig+0x40>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a3b      	ldr	r2, [pc, #236]	; (8007c90 <TIM_Base_SetConfig+0x120>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d003      	beq.n	8007bb0 <TIM_Base_SetConfig+0x40>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a3a      	ldr	r2, [pc, #232]	; (8007c94 <TIM_Base_SetConfig+0x124>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d108      	bne.n	8007bc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a2f      	ldr	r2, [pc, #188]	; (8007c84 <TIM_Base_SetConfig+0x114>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d02b      	beq.n	8007c22 <TIM_Base_SetConfig+0xb2>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bd0:	d027      	beq.n	8007c22 <TIM_Base_SetConfig+0xb2>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a2c      	ldr	r2, [pc, #176]	; (8007c88 <TIM_Base_SetConfig+0x118>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d023      	beq.n	8007c22 <TIM_Base_SetConfig+0xb2>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4a2b      	ldr	r2, [pc, #172]	; (8007c8c <TIM_Base_SetConfig+0x11c>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d01f      	beq.n	8007c22 <TIM_Base_SetConfig+0xb2>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a2a      	ldr	r2, [pc, #168]	; (8007c90 <TIM_Base_SetConfig+0x120>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d01b      	beq.n	8007c22 <TIM_Base_SetConfig+0xb2>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a29      	ldr	r2, [pc, #164]	; (8007c94 <TIM_Base_SetConfig+0x124>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d017      	beq.n	8007c22 <TIM_Base_SetConfig+0xb2>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a28      	ldr	r2, [pc, #160]	; (8007c98 <TIM_Base_SetConfig+0x128>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d013      	beq.n	8007c22 <TIM_Base_SetConfig+0xb2>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a27      	ldr	r2, [pc, #156]	; (8007c9c <TIM_Base_SetConfig+0x12c>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d00f      	beq.n	8007c22 <TIM_Base_SetConfig+0xb2>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a26      	ldr	r2, [pc, #152]	; (8007ca0 <TIM_Base_SetConfig+0x130>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d00b      	beq.n	8007c22 <TIM_Base_SetConfig+0xb2>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a25      	ldr	r2, [pc, #148]	; (8007ca4 <TIM_Base_SetConfig+0x134>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d007      	beq.n	8007c22 <TIM_Base_SetConfig+0xb2>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a24      	ldr	r2, [pc, #144]	; (8007ca8 <TIM_Base_SetConfig+0x138>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d003      	beq.n	8007c22 <TIM_Base_SetConfig+0xb2>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a23      	ldr	r2, [pc, #140]	; (8007cac <TIM_Base_SetConfig+0x13c>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d108      	bne.n	8007c34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	689a      	ldr	r2, [r3, #8]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a0a      	ldr	r2, [pc, #40]	; (8007c84 <TIM_Base_SetConfig+0x114>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d003      	beq.n	8007c68 <TIM_Base_SetConfig+0xf8>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a0c      	ldr	r2, [pc, #48]	; (8007c94 <TIM_Base_SetConfig+0x124>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d103      	bne.n	8007c70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	691a      	ldr	r2, [r3, #16]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	615a      	str	r2, [r3, #20]
}
 8007c76:	bf00      	nop
 8007c78:	3714      	adds	r7, #20
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	40010000 	.word	0x40010000
 8007c88:	40000400 	.word	0x40000400
 8007c8c:	40000800 	.word	0x40000800
 8007c90:	40000c00 	.word	0x40000c00
 8007c94:	40010400 	.word	0x40010400
 8007c98:	40014000 	.word	0x40014000
 8007c9c:	40014400 	.word	0x40014400
 8007ca0:	40014800 	.word	0x40014800
 8007ca4:	40001800 	.word	0x40001800
 8007ca8:	40001c00 	.word	0x40001c00
 8007cac:	40002000 	.word	0x40002000

08007cb0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ccc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	693a      	ldr	r2, [r7, #16]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007cd8:	693a      	ldr	r2, [r7, #16]
 8007cda:	4b3e      	ldr	r3, [pc, #248]	; (8007dd4 <TIM_SlaveTimer_SetConfig+0x124>)
 8007cdc:	4013      	ands	r3, r2
 8007cde:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	693a      	ldr	r2, [r7, #16]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	693a      	ldr	r2, [r7, #16]
 8007cf0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	2b70      	cmp	r3, #112	; 0x70
 8007cf8:	d01a      	beq.n	8007d30 <TIM_SlaveTimer_SetConfig+0x80>
 8007cfa:	2b70      	cmp	r3, #112	; 0x70
 8007cfc:	d860      	bhi.n	8007dc0 <TIM_SlaveTimer_SetConfig+0x110>
 8007cfe:	2b60      	cmp	r3, #96	; 0x60
 8007d00:	d054      	beq.n	8007dac <TIM_SlaveTimer_SetConfig+0xfc>
 8007d02:	2b60      	cmp	r3, #96	; 0x60
 8007d04:	d85c      	bhi.n	8007dc0 <TIM_SlaveTimer_SetConfig+0x110>
 8007d06:	2b50      	cmp	r3, #80	; 0x50
 8007d08:	d046      	beq.n	8007d98 <TIM_SlaveTimer_SetConfig+0xe8>
 8007d0a:	2b50      	cmp	r3, #80	; 0x50
 8007d0c:	d858      	bhi.n	8007dc0 <TIM_SlaveTimer_SetConfig+0x110>
 8007d0e:	2b40      	cmp	r3, #64	; 0x40
 8007d10:	d019      	beq.n	8007d46 <TIM_SlaveTimer_SetConfig+0x96>
 8007d12:	2b40      	cmp	r3, #64	; 0x40
 8007d14:	d854      	bhi.n	8007dc0 <TIM_SlaveTimer_SetConfig+0x110>
 8007d16:	2b30      	cmp	r3, #48	; 0x30
 8007d18:	d055      	beq.n	8007dc6 <TIM_SlaveTimer_SetConfig+0x116>
 8007d1a:	2b30      	cmp	r3, #48	; 0x30
 8007d1c:	d850      	bhi.n	8007dc0 <TIM_SlaveTimer_SetConfig+0x110>
 8007d1e:	2b20      	cmp	r3, #32
 8007d20:	d051      	beq.n	8007dc6 <TIM_SlaveTimer_SetConfig+0x116>
 8007d22:	2b20      	cmp	r3, #32
 8007d24:	d84c      	bhi.n	8007dc0 <TIM_SlaveTimer_SetConfig+0x110>
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d04d      	beq.n	8007dc6 <TIM_SlaveTimer_SetConfig+0x116>
 8007d2a:	2b10      	cmp	r3, #16
 8007d2c:	d04b      	beq.n	8007dc6 <TIM_SlaveTimer_SetConfig+0x116>
 8007d2e:	e047      	b.n	8007dc0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6818      	ldr	r0, [r3, #0]
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	68d9      	ldr	r1, [r3, #12]
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	689a      	ldr	r2, [r3, #8]
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	f000 f9ee 	bl	8008120 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007d44:	e040      	b.n	8007dc8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2b05      	cmp	r3, #5
 8007d4c:	d101      	bne.n	8007d52 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e03b      	b.n	8007dca <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	6a1b      	ldr	r3, [r3, #32]
 8007d58:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	6a1a      	ldr	r2, [r3, #32]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f022 0201 	bic.w	r2, r2, #1
 8007d68:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	699b      	ldr	r3, [r3, #24]
 8007d70:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d78:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	011b      	lsls	r3, r3, #4
 8007d80:	68ba      	ldr	r2, [r7, #8]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	621a      	str	r2, [r3, #32]
      break;
 8007d96:	e017      	b.n	8007dc8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6818      	ldr	r0, [r3, #0]
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	6899      	ldr	r1, [r3, #8]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	461a      	mov	r2, r3
 8007da6:	f000 f88b 	bl	8007ec0 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007daa:	e00d      	b.n	8007dc8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6818      	ldr	r0, [r3, #0]
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	6899      	ldr	r1, [r3, #8]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	461a      	mov	r2, r3
 8007dba:	f000 f8ed 	bl	8007f98 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007dbe:	e003      	b.n	8007dc8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	75fb      	strb	r3, [r7, #23]
      break;
 8007dc4:	e000      	b.n	8007dc8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8007dc6:	bf00      	nop
  }

  return status;
 8007dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3718      	adds	r7, #24
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	fffefff8 	.word	0xfffefff8

08007dd8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b087      	sub	sp, #28
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	607a      	str	r2, [r7, #4]
 8007de4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	f023 0201 	bic.w	r2, r3, #1
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6a1b      	ldr	r3, [r3, #32]
 8007dfc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	4a28      	ldr	r2, [pc, #160]	; (8007ea4 <TIM_TI1_SetConfig+0xcc>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d01b      	beq.n	8007e3e <TIM_TI1_SetConfig+0x66>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e0c:	d017      	beq.n	8007e3e <TIM_TI1_SetConfig+0x66>
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	4a25      	ldr	r2, [pc, #148]	; (8007ea8 <TIM_TI1_SetConfig+0xd0>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d013      	beq.n	8007e3e <TIM_TI1_SetConfig+0x66>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	4a24      	ldr	r2, [pc, #144]	; (8007eac <TIM_TI1_SetConfig+0xd4>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d00f      	beq.n	8007e3e <TIM_TI1_SetConfig+0x66>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	4a23      	ldr	r2, [pc, #140]	; (8007eb0 <TIM_TI1_SetConfig+0xd8>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d00b      	beq.n	8007e3e <TIM_TI1_SetConfig+0x66>
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	4a22      	ldr	r2, [pc, #136]	; (8007eb4 <TIM_TI1_SetConfig+0xdc>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d007      	beq.n	8007e3e <TIM_TI1_SetConfig+0x66>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	4a21      	ldr	r2, [pc, #132]	; (8007eb8 <TIM_TI1_SetConfig+0xe0>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d003      	beq.n	8007e3e <TIM_TI1_SetConfig+0x66>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	4a20      	ldr	r2, [pc, #128]	; (8007ebc <TIM_TI1_SetConfig+0xe4>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d101      	bne.n	8007e42 <TIM_TI1_SetConfig+0x6a>
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e000      	b.n	8007e44 <TIM_TI1_SetConfig+0x6c>
 8007e42:	2300      	movs	r3, #0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d008      	beq.n	8007e5a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	f023 0303 	bic.w	r3, r3, #3
 8007e4e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007e50:	697a      	ldr	r2, [r7, #20]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	617b      	str	r3, [r7, #20]
 8007e58:	e003      	b.n	8007e62 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	f043 0301 	orr.w	r3, r3, #1
 8007e60:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	011b      	lsls	r3, r3, #4
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	697a      	ldr	r2, [r7, #20]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	f023 030a 	bic.w	r3, r3, #10
 8007e7c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	f003 030a 	and.w	r3, r3, #10
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	697a      	ldr	r2, [r7, #20]
 8007e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	693a      	ldr	r2, [r7, #16]
 8007e94:	621a      	str	r2, [r3, #32]
}
 8007e96:	bf00      	nop
 8007e98:	371c      	adds	r7, #28
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	40010000 	.word	0x40010000
 8007ea8:	40000400 	.word	0x40000400
 8007eac:	40000800 	.word	0x40000800
 8007eb0:	40000c00 	.word	0x40000c00
 8007eb4:	40010400 	.word	0x40010400
 8007eb8:	40014000 	.word	0x40014000
 8007ebc:	40001800 	.word	0x40001800

08007ec0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b087      	sub	sp, #28
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6a1b      	ldr	r3, [r3, #32]
 8007ed0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6a1b      	ldr	r3, [r3, #32]
 8007ed6:	f023 0201 	bic.w	r2, r3, #1
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	699b      	ldr	r3, [r3, #24]
 8007ee2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007eea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	011b      	lsls	r3, r3, #4
 8007ef0:	693a      	ldr	r2, [r7, #16]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	f023 030a 	bic.w	r3, r3, #10
 8007efc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007efe:	697a      	ldr	r2, [r7, #20]
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	693a      	ldr	r2, [r7, #16]
 8007f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	621a      	str	r2, [r3, #32]
}
 8007f12:	bf00      	nop
 8007f14:	371c      	adds	r7, #28
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b087      	sub	sp, #28
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	60f8      	str	r0, [r7, #12]
 8007f26:	60b9      	str	r1, [r7, #8]
 8007f28:	607a      	str	r2, [r7, #4]
 8007f2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6a1b      	ldr	r3, [r3, #32]
 8007f30:	f023 0210 	bic.w	r2, r3, #16
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	699b      	ldr	r3, [r3, #24]
 8007f3c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6a1b      	ldr	r3, [r3, #32]
 8007f42:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f4a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	021b      	lsls	r3, r3, #8
 8007f50:	697a      	ldr	r2, [r7, #20]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	031b      	lsls	r3, r3, #12
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	697a      	ldr	r2, [r7, #20]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f70:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	011b      	lsls	r3, r3, #4
 8007f76:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	697a      	ldr	r2, [r7, #20]
 8007f84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	693a      	ldr	r2, [r7, #16]
 8007f8a:	621a      	str	r2, [r3, #32]
}
 8007f8c:	bf00      	nop
 8007f8e:	371c      	adds	r7, #28
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b087      	sub	sp, #28
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6a1b      	ldr	r3, [r3, #32]
 8007fa8:	f023 0210 	bic.w	r2, r3, #16
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	699b      	ldr	r3, [r3, #24]
 8007fb4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6a1b      	ldr	r3, [r3, #32]
 8007fba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007fc2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	031b      	lsls	r3, r3, #12
 8007fc8:	697a      	ldr	r2, [r7, #20]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007fd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	011b      	lsls	r3, r3, #4
 8007fda:	693a      	ldr	r2, [r7, #16]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	697a      	ldr	r2, [r7, #20]
 8007fe4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	693a      	ldr	r2, [r7, #16]
 8007fea:	621a      	str	r2, [r3, #32]
}
 8007fec:	bf00      	nop
 8007fee:	371c      	adds	r7, #28
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b087      	sub	sp, #28
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	607a      	str	r2, [r7, #4]
 8008004:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6a1b      	ldr	r3, [r3, #32]
 800800a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	69db      	ldr	r3, [r3, #28]
 8008016:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6a1b      	ldr	r3, [r3, #32]
 800801c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	f023 0303 	bic.w	r3, r3, #3
 8008024:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008026:	697a      	ldr	r2, [r7, #20]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4313      	orrs	r3, r2
 800802c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008034:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	011b      	lsls	r3, r3, #4
 800803a:	b2db      	uxtb	r3, r3
 800803c:	697a      	ldr	r2, [r7, #20]
 800803e:	4313      	orrs	r3, r2
 8008040:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008048:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	021b      	lsls	r3, r3, #8
 800804e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	4313      	orrs	r3, r2
 8008056:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	697a      	ldr	r2, [r7, #20]
 800805c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	693a      	ldr	r2, [r7, #16]
 8008062:	621a      	str	r2, [r3, #32]
}
 8008064:	bf00      	nop
 8008066:	371c      	adds	r7, #28
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008070:	b480      	push	{r7}
 8008072:	b087      	sub	sp, #28
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
 800807c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6a1b      	ldr	r3, [r3, #32]
 8008082:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	69db      	ldr	r3, [r3, #28]
 800808e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6a1b      	ldr	r3, [r3, #32]
 8008094:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800809c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	021b      	lsls	r3, r3, #8
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080ae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	031b      	lsls	r3, r3, #12
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	697a      	ldr	r2, [r7, #20]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80080c2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	031b      	lsls	r3, r3, #12
 80080c8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80080cc:	693a      	ldr	r2, [r7, #16]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	697a      	ldr	r2, [r7, #20]
 80080d6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	693a      	ldr	r2, [r7, #16]
 80080dc:	621a      	str	r2, [r3, #32]
}
 80080de:	bf00      	nop
 80080e0:	371c      	adds	r7, #28
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr

080080ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080ea:	b480      	push	{r7}
 80080ec:	b085      	sub	sp, #20
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008100:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008102:	683a      	ldr	r2, [r7, #0]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	4313      	orrs	r3, r2
 8008108:	f043 0307 	orr.w	r3, r3, #7
 800810c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	609a      	str	r2, [r3, #8]
}
 8008114:	bf00      	nop
 8008116:	3714      	adds	r7, #20
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008120:	b480      	push	{r7}
 8008122:	b087      	sub	sp, #28
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	607a      	str	r2, [r7, #4]
 800812c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800813a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	021a      	lsls	r2, r3, #8
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	431a      	orrs	r2, r3
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	4313      	orrs	r3, r2
 8008148:	697a      	ldr	r2, [r7, #20]
 800814a:	4313      	orrs	r3, r2
 800814c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	697a      	ldr	r2, [r7, #20]
 8008152:	609a      	str	r2, [r3, #8]
}
 8008154:	bf00      	nop
 8008156:	371c      	adds	r7, #28
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008160:	b480      	push	{r7}
 8008162:	b087      	sub	sp, #28
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	f003 031f 	and.w	r3, r3, #31
 8008172:	2201      	movs	r2, #1
 8008174:	fa02 f303 	lsl.w	r3, r2, r3
 8008178:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6a1a      	ldr	r2, [r3, #32]
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	43db      	mvns	r3, r3
 8008182:	401a      	ands	r2, r3
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6a1a      	ldr	r2, [r3, #32]
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	f003 031f 	and.w	r3, r3, #31
 8008192:	6879      	ldr	r1, [r7, #4]
 8008194:	fa01 f303 	lsl.w	r3, r1, r3
 8008198:	431a      	orrs	r2, r3
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	621a      	str	r2, [r3, #32]
}
 800819e:	bf00      	nop
 80081a0:	371c      	adds	r7, #28
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
	...

080081ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d101      	bne.n	80081c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081c0:	2302      	movs	r3, #2
 80081c2:	e06d      	b.n	80082a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2202      	movs	r2, #2
 80081d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a30      	ldr	r2, [pc, #192]	; (80082ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d004      	beq.n	80081f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a2f      	ldr	r2, [pc, #188]	; (80082b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d108      	bne.n	800820a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80081fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	68fa      	ldr	r2, [r7, #12]
 8008206:	4313      	orrs	r3, r2
 8008208:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008210:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	68fa      	ldr	r2, [r7, #12]
 8008218:	4313      	orrs	r3, r2
 800821a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68fa      	ldr	r2, [r7, #12]
 8008222:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a20      	ldr	r2, [pc, #128]	; (80082ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d022      	beq.n	8008274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008236:	d01d      	beq.n	8008274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a1d      	ldr	r2, [pc, #116]	; (80082b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d018      	beq.n	8008274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a1c      	ldr	r2, [pc, #112]	; (80082b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d013      	beq.n	8008274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a1a      	ldr	r2, [pc, #104]	; (80082bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d00e      	beq.n	8008274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a15      	ldr	r2, [pc, #84]	; (80082b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d009      	beq.n	8008274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a16      	ldr	r2, [pc, #88]	; (80082c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d004      	beq.n	8008274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a15      	ldr	r2, [pc, #84]	; (80082c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d10c      	bne.n	800828e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800827a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	4313      	orrs	r3, r2
 8008284:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2201      	movs	r2, #1
 8008292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3714      	adds	r7, #20
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr
 80082ac:	40010000 	.word	0x40010000
 80082b0:	40010400 	.word	0x40010400
 80082b4:	40000400 	.word	0x40000400
 80082b8:	40000800 	.word	0x40000800
 80082bc:	40000c00 	.word	0x40000c00
 80082c0:	40014000 	.word	0x40014000
 80082c4:	40001800 	.word	0x40001800

080082c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082d0:	bf00      	nop
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082e4:	bf00      	nop
 80082e6:	370c      	adds	r7, #12
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80082f8:	bf00      	nop
 80082fa:	370c      	adds	r7, #12
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d101      	bne.n	8008316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	e040      	b.n	8008398 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800831a:	2b00      	cmp	r3, #0
 800831c:	d106      	bne.n	800832c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f7f9 f9a4 	bl	8001674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2224      	movs	r2, #36	; 0x24
 8008330:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f022 0201 	bic.w	r2, r2, #1
 8008340:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fb46 	bl	80089d4 <UART_SetConfig>
 8008348:	4603      	mov	r3, r0
 800834a:	2b01      	cmp	r3, #1
 800834c:	d101      	bne.n	8008352 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	e022      	b.n	8008398 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008356:	2b00      	cmp	r3, #0
 8008358:	d002      	beq.n	8008360 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fd9e 	bl	8008e9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	685a      	ldr	r2, [r3, #4]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800836e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	689a      	ldr	r2, [r3, #8]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800837e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f042 0201 	orr.w	r2, r2, #1
 800838e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 fe25 	bl	8008fe0 <UART_CheckIdleState>
 8008396:	4603      	mov	r3, r0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3708      	adds	r7, #8
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b0ba      	sub	sp, #232	; 0xe8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	69db      	ldr	r3, [r3, #28]
 80083ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80083c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80083ca:	f640 030f 	movw	r3, #2063	; 0x80f
 80083ce:	4013      	ands	r3, r2
 80083d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80083d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d115      	bne.n	8008408 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80083dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083e0:	f003 0320 	and.w	r3, r3, #32
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00f      	beq.n	8008408 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80083e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083ec:	f003 0320 	and.w	r3, r3, #32
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d009      	beq.n	8008408 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f000 82ac 	beq.w	8008956 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	4798      	blx	r3
      }
      return;
 8008406:	e2a6      	b.n	8008956 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008408:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800840c:	2b00      	cmp	r3, #0
 800840e:	f000 8117 	beq.w	8008640 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008412:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	2b00      	cmp	r3, #0
 800841c:	d106      	bne.n	800842c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800841e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008422:	4b85      	ldr	r3, [pc, #532]	; (8008638 <HAL_UART_IRQHandler+0x298>)
 8008424:	4013      	ands	r3, r2
 8008426:	2b00      	cmp	r3, #0
 8008428:	f000 810a 	beq.w	8008640 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800842c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008430:	f003 0301 	and.w	r3, r3, #1
 8008434:	2b00      	cmp	r3, #0
 8008436:	d011      	beq.n	800845c <HAL_UART_IRQHandler+0xbc>
 8008438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800843c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00b      	beq.n	800845c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2201      	movs	r2, #1
 800844a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008452:	f043 0201 	orr.w	r2, r3, #1
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800845c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008460:	f003 0302 	and.w	r3, r3, #2
 8008464:	2b00      	cmp	r3, #0
 8008466:	d011      	beq.n	800848c <HAL_UART_IRQHandler+0xec>
 8008468:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800846c:	f003 0301 	and.w	r3, r3, #1
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00b      	beq.n	800848c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2202      	movs	r2, #2
 800847a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008482:	f043 0204 	orr.w	r2, r3, #4
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800848c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008490:	f003 0304 	and.w	r3, r3, #4
 8008494:	2b00      	cmp	r3, #0
 8008496:	d011      	beq.n	80084bc <HAL_UART_IRQHandler+0x11c>
 8008498:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800849c:	f003 0301 	and.w	r3, r3, #1
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d00b      	beq.n	80084bc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2204      	movs	r2, #4
 80084aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084b2:	f043 0202 	orr.w	r2, r3, #2
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80084bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084c0:	f003 0308 	and.w	r3, r3, #8
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d017      	beq.n	80084f8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80084c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084cc:	f003 0320 	and.w	r3, r3, #32
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d105      	bne.n	80084e0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80084d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00b      	beq.n	80084f8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2208      	movs	r2, #8
 80084e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084ee:	f043 0208 	orr.w	r2, r3, #8
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80084f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008500:	2b00      	cmp	r3, #0
 8008502:	d012      	beq.n	800852a <HAL_UART_IRQHandler+0x18a>
 8008504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008508:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00c      	beq.n	800852a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008518:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008520:	f043 0220 	orr.w	r2, r3, #32
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008530:	2b00      	cmp	r3, #0
 8008532:	f000 8212 	beq.w	800895a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800853a:	f003 0320 	and.w	r3, r3, #32
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00d      	beq.n	800855e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008546:	f003 0320 	and.w	r3, r3, #32
 800854a:	2b00      	cmp	r3, #0
 800854c:	d007      	beq.n	800855e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008552:	2b00      	cmp	r3, #0
 8008554:	d003      	beq.n	800855e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008564:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008572:	2b40      	cmp	r3, #64	; 0x40
 8008574:	d005      	beq.n	8008582 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008576:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800857a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800857e:	2b00      	cmp	r3, #0
 8008580:	d04f      	beq.n	8008622 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 ff06 	bl	8009394 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008592:	2b40      	cmp	r3, #64	; 0x40
 8008594:	d141      	bne.n	800861a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	3308      	adds	r3, #8
 800859c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80085a4:	e853 3f00 	ldrex	r3, [r3]
 80085a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80085ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80085b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	3308      	adds	r3, #8
 80085be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80085c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80085c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80085ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80085d2:	e841 2300 	strex	r3, r2, [r1]
 80085d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80085da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d1d9      	bne.n	8008596 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d013      	beq.n	8008612 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085ee:	4a13      	ldr	r2, [pc, #76]	; (800863c <HAL_UART_IRQHandler+0x29c>)
 80085f0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7f9 ff32 	bl	8002460 <HAL_DMA_Abort_IT>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d017      	beq.n	8008632 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800860c:	4610      	mov	r0, r2
 800860e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008610:	e00f      	b.n	8008632 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 f9ca 	bl	80089ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008618:	e00b      	b.n	8008632 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 f9c6 	bl	80089ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008620:	e007      	b.n	8008632 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f9c2 	bl	80089ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8008630:	e193      	b.n	800895a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008632:	bf00      	nop
    return;
 8008634:	e191      	b.n	800895a <HAL_UART_IRQHandler+0x5ba>
 8008636:	bf00      	nop
 8008638:	04000120 	.word	0x04000120
 800863c:	08009641 	.word	0x08009641

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008644:	2b01      	cmp	r3, #1
 8008646:	f040 814c 	bne.w	80088e2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800864a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800864e:	f003 0310 	and.w	r3, r3, #16
 8008652:	2b00      	cmp	r3, #0
 8008654:	f000 8145 	beq.w	80088e2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800865c:	f003 0310 	and.w	r3, r3, #16
 8008660:	2b00      	cmp	r3, #0
 8008662:	f000 813e 	beq.w	80088e2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2210      	movs	r2, #16
 800866c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008678:	2b40      	cmp	r3, #64	; 0x40
 800867a:	f040 80b6 	bne.w	80087ea <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800868a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800868e:	2b00      	cmp	r3, #0
 8008690:	f000 8165 	beq.w	800895e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800869a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800869e:	429a      	cmp	r2, r3
 80086a0:	f080 815d 	bcs.w	800895e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80086aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086b2:	69db      	ldr	r3, [r3, #28]
 80086b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086b8:	f000 8086 	beq.w	80087c8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80086c8:	e853 3f00 	ldrex	r3, [r3]
 80086cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80086d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80086d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	461a      	mov	r2, r3
 80086e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80086ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80086f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80086f6:	e841 2300 	strex	r3, r2, [r1]
 80086fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80086fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1da      	bne.n	80086bc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	3308      	adds	r3, #8
 800870c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008710:	e853 3f00 	ldrex	r3, [r3]
 8008714:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008716:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008718:	f023 0301 	bic.w	r3, r3, #1
 800871c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	3308      	adds	r3, #8
 8008726:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800872a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800872e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008730:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008732:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008736:	e841 2300 	strex	r3, r2, [r1]
 800873a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800873c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1e1      	bne.n	8008706 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	3308      	adds	r3, #8
 8008748:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800874c:	e853 3f00 	ldrex	r3, [r3]
 8008750:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008752:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008754:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008758:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	3308      	adds	r3, #8
 8008762:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008766:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008768:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800876c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800876e:	e841 2300 	strex	r3, r2, [r1]
 8008772:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008774:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008776:	2b00      	cmp	r3, #0
 8008778:	d1e3      	bne.n	8008742 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2220      	movs	r2, #32
 800877e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800878e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008790:	e853 3f00 	ldrex	r3, [r3]
 8008794:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008798:	f023 0310 	bic.w	r3, r3, #16
 800879c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	461a      	mov	r2, r3
 80087a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80087ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80087b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087b2:	e841 2300 	strex	r3, r2, [r1]
 80087b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80087b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d1e4      	bne.n	8008788 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7f9 fddc 	bl	8002380 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2202      	movs	r2, #2
 80087cc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80087da:	b29b      	uxth	r3, r3
 80087dc:	1ad3      	subs	r3, r2, r3
 80087de:	b29b      	uxth	r3, r3
 80087e0:	4619      	mov	r1, r3
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f002 fc52 	bl	800b08c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80087e8:	e0b9      	b.n	800895e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008804:	b29b      	uxth	r3, r3
 8008806:	2b00      	cmp	r3, #0
 8008808:	f000 80ab 	beq.w	8008962 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 800880c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008810:	2b00      	cmp	r3, #0
 8008812:	f000 80a6 	beq.w	8008962 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881e:	e853 3f00 	ldrex	r3, [r3]
 8008822:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008826:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800882a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	461a      	mov	r2, r3
 8008834:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008838:	647b      	str	r3, [r7, #68]	; 0x44
 800883a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800883e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008840:	e841 2300 	strex	r3, r2, [r1]
 8008844:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008848:	2b00      	cmp	r3, #0
 800884a:	d1e4      	bne.n	8008816 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	3308      	adds	r3, #8
 8008852:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008856:	e853 3f00 	ldrex	r3, [r3]
 800885a:	623b      	str	r3, [r7, #32]
   return(result);
 800885c:	6a3b      	ldr	r3, [r7, #32]
 800885e:	f023 0301 	bic.w	r3, r3, #1
 8008862:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	3308      	adds	r3, #8
 800886c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008870:	633a      	str	r2, [r7, #48]	; 0x30
 8008872:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008874:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008878:	e841 2300 	strex	r3, r2, [r1]
 800887c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800887e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008880:	2b00      	cmp	r3, #0
 8008882:	d1e3      	bne.n	800884c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2220      	movs	r2, #32
 8008888:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2200      	movs	r2, #0
 8008896:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	e853 3f00 	ldrex	r3, [r3]
 80088a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f023 0310 	bic.w	r3, r3, #16
 80088ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	461a      	mov	r2, r3
 80088b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80088ba:	61fb      	str	r3, [r7, #28]
 80088bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088be:	69b9      	ldr	r1, [r7, #24]
 80088c0:	69fa      	ldr	r2, [r7, #28]
 80088c2:	e841 2300 	strex	r3, r2, [r1]
 80088c6:	617b      	str	r3, [r7, #20]
   return(result);
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1e4      	bne.n	8008898 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2202      	movs	r2, #2
 80088d2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80088d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80088d8:	4619      	mov	r1, r3
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f002 fbd6 	bl	800b08c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80088e0:	e03f      	b.n	8008962 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80088e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00e      	beq.n	800890c <HAL_UART_IRQHandler+0x56c>
 80088ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d008      	beq.n	800890c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008902:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 f85b 	bl	80089c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800890a:	e02d      	b.n	8008968 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800890c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00e      	beq.n	8008936 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800891c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008920:	2b00      	cmp	r3, #0
 8008922:	d008      	beq.n	8008936 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008928:	2b00      	cmp	r3, #0
 800892a:	d01c      	beq.n	8008966 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	4798      	blx	r3
    }
    return;
 8008934:	e017      	b.n	8008966 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800893a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800893e:	2b00      	cmp	r3, #0
 8008940:	d012      	beq.n	8008968 <HAL_UART_IRQHandler+0x5c8>
 8008942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800894a:	2b00      	cmp	r3, #0
 800894c:	d00c      	beq.n	8008968 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fe8c 	bl	800966c <UART_EndTransmit_IT>
    return;
 8008954:	e008      	b.n	8008968 <HAL_UART_IRQHandler+0x5c8>
      return;
 8008956:	bf00      	nop
 8008958:	e006      	b.n	8008968 <HAL_UART_IRQHandler+0x5c8>
    return;
 800895a:	bf00      	nop
 800895c:	e004      	b.n	8008968 <HAL_UART_IRQHandler+0x5c8>
      return;
 800895e:	bf00      	nop
 8008960:	e002      	b.n	8008968 <HAL_UART_IRQHandler+0x5c8>
      return;
 8008962:	bf00      	nop
 8008964:	e000      	b.n	8008968 <HAL_UART_IRQHandler+0x5c8>
    return;
 8008966:	bf00      	nop
  }

}
 8008968:	37e8      	adds	r7, #232	; 0xe8
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop

08008970 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008978:	bf00      	nop
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800898c:	bf00      	nop
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80089a0:	bf00      	nop
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80089b4:	bf00      	nop
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80089c8:	bf00      	nop
 80089ca:	370c      	adds	r7, #12
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b088      	sub	sp, #32
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80089dc:	2300      	movs	r3, #0
 80089de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	689a      	ldr	r2, [r3, #8]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	691b      	ldr	r3, [r3, #16]
 80089e8:	431a      	orrs	r2, r3
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	695b      	ldr	r3, [r3, #20]
 80089ee:	431a      	orrs	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	69db      	ldr	r3, [r3, #28]
 80089f4:	4313      	orrs	r3, r2
 80089f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	4ba6      	ldr	r3, [pc, #664]	; (8008c98 <UART_SetConfig+0x2c4>)
 8008a00:	4013      	ands	r3, r2
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	6812      	ldr	r2, [r2, #0]
 8008a06:	6979      	ldr	r1, [r7, #20]
 8008a08:	430b      	orrs	r3, r1
 8008a0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	68da      	ldr	r2, [r3, #12]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	430a      	orrs	r2, r1
 8008a20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	699b      	ldr	r3, [r3, #24]
 8008a26:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6a1b      	ldr	r3, [r3, #32]
 8008a2c:	697a      	ldr	r2, [r7, #20]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	697a      	ldr	r2, [r7, #20]
 8008a42:	430a      	orrs	r2, r1
 8008a44:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a94      	ldr	r2, [pc, #592]	; (8008c9c <UART_SetConfig+0x2c8>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d120      	bne.n	8008a92 <UART_SetConfig+0xbe>
 8008a50:	4b93      	ldr	r3, [pc, #588]	; (8008ca0 <UART_SetConfig+0x2cc>)
 8008a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a56:	f003 0303 	and.w	r3, r3, #3
 8008a5a:	2b03      	cmp	r3, #3
 8008a5c:	d816      	bhi.n	8008a8c <UART_SetConfig+0xb8>
 8008a5e:	a201      	add	r2, pc, #4	; (adr r2, 8008a64 <UART_SetConfig+0x90>)
 8008a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a64:	08008a75 	.word	0x08008a75
 8008a68:	08008a81 	.word	0x08008a81
 8008a6c:	08008a7b 	.word	0x08008a7b
 8008a70:	08008a87 	.word	0x08008a87
 8008a74:	2301      	movs	r3, #1
 8008a76:	77fb      	strb	r3, [r7, #31]
 8008a78:	e150      	b.n	8008d1c <UART_SetConfig+0x348>
 8008a7a:	2302      	movs	r3, #2
 8008a7c:	77fb      	strb	r3, [r7, #31]
 8008a7e:	e14d      	b.n	8008d1c <UART_SetConfig+0x348>
 8008a80:	2304      	movs	r3, #4
 8008a82:	77fb      	strb	r3, [r7, #31]
 8008a84:	e14a      	b.n	8008d1c <UART_SetConfig+0x348>
 8008a86:	2308      	movs	r3, #8
 8008a88:	77fb      	strb	r3, [r7, #31]
 8008a8a:	e147      	b.n	8008d1c <UART_SetConfig+0x348>
 8008a8c:	2310      	movs	r3, #16
 8008a8e:	77fb      	strb	r3, [r7, #31]
 8008a90:	e144      	b.n	8008d1c <UART_SetConfig+0x348>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a83      	ldr	r2, [pc, #524]	; (8008ca4 <UART_SetConfig+0x2d0>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d132      	bne.n	8008b02 <UART_SetConfig+0x12e>
 8008a9c:	4b80      	ldr	r3, [pc, #512]	; (8008ca0 <UART_SetConfig+0x2cc>)
 8008a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aa2:	f003 030c 	and.w	r3, r3, #12
 8008aa6:	2b0c      	cmp	r3, #12
 8008aa8:	d828      	bhi.n	8008afc <UART_SetConfig+0x128>
 8008aaa:	a201      	add	r2, pc, #4	; (adr r2, 8008ab0 <UART_SetConfig+0xdc>)
 8008aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab0:	08008ae5 	.word	0x08008ae5
 8008ab4:	08008afd 	.word	0x08008afd
 8008ab8:	08008afd 	.word	0x08008afd
 8008abc:	08008afd 	.word	0x08008afd
 8008ac0:	08008af1 	.word	0x08008af1
 8008ac4:	08008afd 	.word	0x08008afd
 8008ac8:	08008afd 	.word	0x08008afd
 8008acc:	08008afd 	.word	0x08008afd
 8008ad0:	08008aeb 	.word	0x08008aeb
 8008ad4:	08008afd 	.word	0x08008afd
 8008ad8:	08008afd 	.word	0x08008afd
 8008adc:	08008afd 	.word	0x08008afd
 8008ae0:	08008af7 	.word	0x08008af7
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	77fb      	strb	r3, [r7, #31]
 8008ae8:	e118      	b.n	8008d1c <UART_SetConfig+0x348>
 8008aea:	2302      	movs	r3, #2
 8008aec:	77fb      	strb	r3, [r7, #31]
 8008aee:	e115      	b.n	8008d1c <UART_SetConfig+0x348>
 8008af0:	2304      	movs	r3, #4
 8008af2:	77fb      	strb	r3, [r7, #31]
 8008af4:	e112      	b.n	8008d1c <UART_SetConfig+0x348>
 8008af6:	2308      	movs	r3, #8
 8008af8:	77fb      	strb	r3, [r7, #31]
 8008afa:	e10f      	b.n	8008d1c <UART_SetConfig+0x348>
 8008afc:	2310      	movs	r3, #16
 8008afe:	77fb      	strb	r3, [r7, #31]
 8008b00:	e10c      	b.n	8008d1c <UART_SetConfig+0x348>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a68      	ldr	r2, [pc, #416]	; (8008ca8 <UART_SetConfig+0x2d4>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d120      	bne.n	8008b4e <UART_SetConfig+0x17a>
 8008b0c:	4b64      	ldr	r3, [pc, #400]	; (8008ca0 <UART_SetConfig+0x2cc>)
 8008b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b12:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008b16:	2b30      	cmp	r3, #48	; 0x30
 8008b18:	d013      	beq.n	8008b42 <UART_SetConfig+0x16e>
 8008b1a:	2b30      	cmp	r3, #48	; 0x30
 8008b1c:	d814      	bhi.n	8008b48 <UART_SetConfig+0x174>
 8008b1e:	2b20      	cmp	r3, #32
 8008b20:	d009      	beq.n	8008b36 <UART_SetConfig+0x162>
 8008b22:	2b20      	cmp	r3, #32
 8008b24:	d810      	bhi.n	8008b48 <UART_SetConfig+0x174>
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d002      	beq.n	8008b30 <UART_SetConfig+0x15c>
 8008b2a:	2b10      	cmp	r3, #16
 8008b2c:	d006      	beq.n	8008b3c <UART_SetConfig+0x168>
 8008b2e:	e00b      	b.n	8008b48 <UART_SetConfig+0x174>
 8008b30:	2300      	movs	r3, #0
 8008b32:	77fb      	strb	r3, [r7, #31]
 8008b34:	e0f2      	b.n	8008d1c <UART_SetConfig+0x348>
 8008b36:	2302      	movs	r3, #2
 8008b38:	77fb      	strb	r3, [r7, #31]
 8008b3a:	e0ef      	b.n	8008d1c <UART_SetConfig+0x348>
 8008b3c:	2304      	movs	r3, #4
 8008b3e:	77fb      	strb	r3, [r7, #31]
 8008b40:	e0ec      	b.n	8008d1c <UART_SetConfig+0x348>
 8008b42:	2308      	movs	r3, #8
 8008b44:	77fb      	strb	r3, [r7, #31]
 8008b46:	e0e9      	b.n	8008d1c <UART_SetConfig+0x348>
 8008b48:	2310      	movs	r3, #16
 8008b4a:	77fb      	strb	r3, [r7, #31]
 8008b4c:	e0e6      	b.n	8008d1c <UART_SetConfig+0x348>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a56      	ldr	r2, [pc, #344]	; (8008cac <UART_SetConfig+0x2d8>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d120      	bne.n	8008b9a <UART_SetConfig+0x1c6>
 8008b58:	4b51      	ldr	r3, [pc, #324]	; (8008ca0 <UART_SetConfig+0x2cc>)
 8008b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b5e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008b62:	2bc0      	cmp	r3, #192	; 0xc0
 8008b64:	d013      	beq.n	8008b8e <UART_SetConfig+0x1ba>
 8008b66:	2bc0      	cmp	r3, #192	; 0xc0
 8008b68:	d814      	bhi.n	8008b94 <UART_SetConfig+0x1c0>
 8008b6a:	2b80      	cmp	r3, #128	; 0x80
 8008b6c:	d009      	beq.n	8008b82 <UART_SetConfig+0x1ae>
 8008b6e:	2b80      	cmp	r3, #128	; 0x80
 8008b70:	d810      	bhi.n	8008b94 <UART_SetConfig+0x1c0>
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d002      	beq.n	8008b7c <UART_SetConfig+0x1a8>
 8008b76:	2b40      	cmp	r3, #64	; 0x40
 8008b78:	d006      	beq.n	8008b88 <UART_SetConfig+0x1b4>
 8008b7a:	e00b      	b.n	8008b94 <UART_SetConfig+0x1c0>
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	77fb      	strb	r3, [r7, #31]
 8008b80:	e0cc      	b.n	8008d1c <UART_SetConfig+0x348>
 8008b82:	2302      	movs	r3, #2
 8008b84:	77fb      	strb	r3, [r7, #31]
 8008b86:	e0c9      	b.n	8008d1c <UART_SetConfig+0x348>
 8008b88:	2304      	movs	r3, #4
 8008b8a:	77fb      	strb	r3, [r7, #31]
 8008b8c:	e0c6      	b.n	8008d1c <UART_SetConfig+0x348>
 8008b8e:	2308      	movs	r3, #8
 8008b90:	77fb      	strb	r3, [r7, #31]
 8008b92:	e0c3      	b.n	8008d1c <UART_SetConfig+0x348>
 8008b94:	2310      	movs	r3, #16
 8008b96:	77fb      	strb	r3, [r7, #31]
 8008b98:	e0c0      	b.n	8008d1c <UART_SetConfig+0x348>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a44      	ldr	r2, [pc, #272]	; (8008cb0 <UART_SetConfig+0x2dc>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d125      	bne.n	8008bf0 <UART_SetConfig+0x21c>
 8008ba4:	4b3e      	ldr	r3, [pc, #248]	; (8008ca0 <UART_SetConfig+0x2cc>)
 8008ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bb2:	d017      	beq.n	8008be4 <UART_SetConfig+0x210>
 8008bb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bb8:	d817      	bhi.n	8008bea <UART_SetConfig+0x216>
 8008bba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bbe:	d00b      	beq.n	8008bd8 <UART_SetConfig+0x204>
 8008bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bc4:	d811      	bhi.n	8008bea <UART_SetConfig+0x216>
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d003      	beq.n	8008bd2 <UART_SetConfig+0x1fe>
 8008bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bce:	d006      	beq.n	8008bde <UART_SetConfig+0x20a>
 8008bd0:	e00b      	b.n	8008bea <UART_SetConfig+0x216>
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	77fb      	strb	r3, [r7, #31]
 8008bd6:	e0a1      	b.n	8008d1c <UART_SetConfig+0x348>
 8008bd8:	2302      	movs	r3, #2
 8008bda:	77fb      	strb	r3, [r7, #31]
 8008bdc:	e09e      	b.n	8008d1c <UART_SetConfig+0x348>
 8008bde:	2304      	movs	r3, #4
 8008be0:	77fb      	strb	r3, [r7, #31]
 8008be2:	e09b      	b.n	8008d1c <UART_SetConfig+0x348>
 8008be4:	2308      	movs	r3, #8
 8008be6:	77fb      	strb	r3, [r7, #31]
 8008be8:	e098      	b.n	8008d1c <UART_SetConfig+0x348>
 8008bea:	2310      	movs	r3, #16
 8008bec:	77fb      	strb	r3, [r7, #31]
 8008bee:	e095      	b.n	8008d1c <UART_SetConfig+0x348>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a2f      	ldr	r2, [pc, #188]	; (8008cb4 <UART_SetConfig+0x2e0>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d125      	bne.n	8008c46 <UART_SetConfig+0x272>
 8008bfa:	4b29      	ldr	r3, [pc, #164]	; (8008ca0 <UART_SetConfig+0x2cc>)
 8008bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008c04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c08:	d017      	beq.n	8008c3a <UART_SetConfig+0x266>
 8008c0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c0e:	d817      	bhi.n	8008c40 <UART_SetConfig+0x26c>
 8008c10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c14:	d00b      	beq.n	8008c2e <UART_SetConfig+0x25a>
 8008c16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c1a:	d811      	bhi.n	8008c40 <UART_SetConfig+0x26c>
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d003      	beq.n	8008c28 <UART_SetConfig+0x254>
 8008c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c24:	d006      	beq.n	8008c34 <UART_SetConfig+0x260>
 8008c26:	e00b      	b.n	8008c40 <UART_SetConfig+0x26c>
 8008c28:	2301      	movs	r3, #1
 8008c2a:	77fb      	strb	r3, [r7, #31]
 8008c2c:	e076      	b.n	8008d1c <UART_SetConfig+0x348>
 8008c2e:	2302      	movs	r3, #2
 8008c30:	77fb      	strb	r3, [r7, #31]
 8008c32:	e073      	b.n	8008d1c <UART_SetConfig+0x348>
 8008c34:	2304      	movs	r3, #4
 8008c36:	77fb      	strb	r3, [r7, #31]
 8008c38:	e070      	b.n	8008d1c <UART_SetConfig+0x348>
 8008c3a:	2308      	movs	r3, #8
 8008c3c:	77fb      	strb	r3, [r7, #31]
 8008c3e:	e06d      	b.n	8008d1c <UART_SetConfig+0x348>
 8008c40:	2310      	movs	r3, #16
 8008c42:	77fb      	strb	r3, [r7, #31]
 8008c44:	e06a      	b.n	8008d1c <UART_SetConfig+0x348>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a1b      	ldr	r2, [pc, #108]	; (8008cb8 <UART_SetConfig+0x2e4>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d138      	bne.n	8008cc2 <UART_SetConfig+0x2ee>
 8008c50:	4b13      	ldr	r3, [pc, #76]	; (8008ca0 <UART_SetConfig+0x2cc>)
 8008c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c56:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008c5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c5e:	d017      	beq.n	8008c90 <UART_SetConfig+0x2bc>
 8008c60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c64:	d82a      	bhi.n	8008cbc <UART_SetConfig+0x2e8>
 8008c66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c6a:	d00b      	beq.n	8008c84 <UART_SetConfig+0x2b0>
 8008c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c70:	d824      	bhi.n	8008cbc <UART_SetConfig+0x2e8>
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d003      	beq.n	8008c7e <UART_SetConfig+0x2aa>
 8008c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c7a:	d006      	beq.n	8008c8a <UART_SetConfig+0x2b6>
 8008c7c:	e01e      	b.n	8008cbc <UART_SetConfig+0x2e8>
 8008c7e:	2300      	movs	r3, #0
 8008c80:	77fb      	strb	r3, [r7, #31]
 8008c82:	e04b      	b.n	8008d1c <UART_SetConfig+0x348>
 8008c84:	2302      	movs	r3, #2
 8008c86:	77fb      	strb	r3, [r7, #31]
 8008c88:	e048      	b.n	8008d1c <UART_SetConfig+0x348>
 8008c8a:	2304      	movs	r3, #4
 8008c8c:	77fb      	strb	r3, [r7, #31]
 8008c8e:	e045      	b.n	8008d1c <UART_SetConfig+0x348>
 8008c90:	2308      	movs	r3, #8
 8008c92:	77fb      	strb	r3, [r7, #31]
 8008c94:	e042      	b.n	8008d1c <UART_SetConfig+0x348>
 8008c96:	bf00      	nop
 8008c98:	efff69f3 	.word	0xefff69f3
 8008c9c:	40011000 	.word	0x40011000
 8008ca0:	40023800 	.word	0x40023800
 8008ca4:	40004400 	.word	0x40004400
 8008ca8:	40004800 	.word	0x40004800
 8008cac:	40004c00 	.word	0x40004c00
 8008cb0:	40005000 	.word	0x40005000
 8008cb4:	40011400 	.word	0x40011400
 8008cb8:	40007800 	.word	0x40007800
 8008cbc:	2310      	movs	r3, #16
 8008cbe:	77fb      	strb	r3, [r7, #31]
 8008cc0:	e02c      	b.n	8008d1c <UART_SetConfig+0x348>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a72      	ldr	r2, [pc, #456]	; (8008e90 <UART_SetConfig+0x4bc>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d125      	bne.n	8008d18 <UART_SetConfig+0x344>
 8008ccc:	4b71      	ldr	r3, [pc, #452]	; (8008e94 <UART_SetConfig+0x4c0>)
 8008cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cd2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008cd6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008cda:	d017      	beq.n	8008d0c <UART_SetConfig+0x338>
 8008cdc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008ce0:	d817      	bhi.n	8008d12 <UART_SetConfig+0x33e>
 8008ce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ce6:	d00b      	beq.n	8008d00 <UART_SetConfig+0x32c>
 8008ce8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cec:	d811      	bhi.n	8008d12 <UART_SetConfig+0x33e>
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d003      	beq.n	8008cfa <UART_SetConfig+0x326>
 8008cf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cf6:	d006      	beq.n	8008d06 <UART_SetConfig+0x332>
 8008cf8:	e00b      	b.n	8008d12 <UART_SetConfig+0x33e>
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	77fb      	strb	r3, [r7, #31]
 8008cfe:	e00d      	b.n	8008d1c <UART_SetConfig+0x348>
 8008d00:	2302      	movs	r3, #2
 8008d02:	77fb      	strb	r3, [r7, #31]
 8008d04:	e00a      	b.n	8008d1c <UART_SetConfig+0x348>
 8008d06:	2304      	movs	r3, #4
 8008d08:	77fb      	strb	r3, [r7, #31]
 8008d0a:	e007      	b.n	8008d1c <UART_SetConfig+0x348>
 8008d0c:	2308      	movs	r3, #8
 8008d0e:	77fb      	strb	r3, [r7, #31]
 8008d10:	e004      	b.n	8008d1c <UART_SetConfig+0x348>
 8008d12:	2310      	movs	r3, #16
 8008d14:	77fb      	strb	r3, [r7, #31]
 8008d16:	e001      	b.n	8008d1c <UART_SetConfig+0x348>
 8008d18:	2310      	movs	r3, #16
 8008d1a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	69db      	ldr	r3, [r3, #28]
 8008d20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d24:	d15b      	bne.n	8008dde <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008d26:	7ffb      	ldrb	r3, [r7, #31]
 8008d28:	2b08      	cmp	r3, #8
 8008d2a:	d828      	bhi.n	8008d7e <UART_SetConfig+0x3aa>
 8008d2c:	a201      	add	r2, pc, #4	; (adr r2, 8008d34 <UART_SetConfig+0x360>)
 8008d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d32:	bf00      	nop
 8008d34:	08008d59 	.word	0x08008d59
 8008d38:	08008d61 	.word	0x08008d61
 8008d3c:	08008d69 	.word	0x08008d69
 8008d40:	08008d7f 	.word	0x08008d7f
 8008d44:	08008d6f 	.word	0x08008d6f
 8008d48:	08008d7f 	.word	0x08008d7f
 8008d4c:	08008d7f 	.word	0x08008d7f
 8008d50:	08008d7f 	.word	0x08008d7f
 8008d54:	08008d77 	.word	0x08008d77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d58:	f7fc fc06 	bl	8005568 <HAL_RCC_GetPCLK1Freq>
 8008d5c:	61b8      	str	r0, [r7, #24]
        break;
 8008d5e:	e013      	b.n	8008d88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d60:	f7fc fc16 	bl	8005590 <HAL_RCC_GetPCLK2Freq>
 8008d64:	61b8      	str	r0, [r7, #24]
        break;
 8008d66:	e00f      	b.n	8008d88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d68:	4b4b      	ldr	r3, [pc, #300]	; (8008e98 <UART_SetConfig+0x4c4>)
 8008d6a:	61bb      	str	r3, [r7, #24]
        break;
 8008d6c:	e00c      	b.n	8008d88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d6e:	f7fc fae9 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 8008d72:	61b8      	str	r0, [r7, #24]
        break;
 8008d74:	e008      	b.n	8008d88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d7a:	61bb      	str	r3, [r7, #24]
        break;
 8008d7c:	e004      	b.n	8008d88 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	77bb      	strb	r3, [r7, #30]
        break;
 8008d86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d88:	69bb      	ldr	r3, [r7, #24]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d074      	beq.n	8008e78 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	005a      	lsls	r2, r3, #1
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	085b      	lsrs	r3, r3, #1
 8008d98:	441a      	add	r2, r3
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008da2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	2b0f      	cmp	r3, #15
 8008da8:	d916      	bls.n	8008dd8 <UART_SetConfig+0x404>
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008db0:	d212      	bcs.n	8008dd8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	f023 030f 	bic.w	r3, r3, #15
 8008dba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	085b      	lsrs	r3, r3, #1
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	f003 0307 	and.w	r3, r3, #7
 8008dc6:	b29a      	uxth	r2, r3
 8008dc8:	89fb      	ldrh	r3, [r7, #14]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	89fa      	ldrh	r2, [r7, #14]
 8008dd4:	60da      	str	r2, [r3, #12]
 8008dd6:	e04f      	b.n	8008e78 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	77bb      	strb	r3, [r7, #30]
 8008ddc:	e04c      	b.n	8008e78 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008dde:	7ffb      	ldrb	r3, [r7, #31]
 8008de0:	2b08      	cmp	r3, #8
 8008de2:	d828      	bhi.n	8008e36 <UART_SetConfig+0x462>
 8008de4:	a201      	add	r2, pc, #4	; (adr r2, 8008dec <UART_SetConfig+0x418>)
 8008de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dea:	bf00      	nop
 8008dec:	08008e11 	.word	0x08008e11
 8008df0:	08008e19 	.word	0x08008e19
 8008df4:	08008e21 	.word	0x08008e21
 8008df8:	08008e37 	.word	0x08008e37
 8008dfc:	08008e27 	.word	0x08008e27
 8008e00:	08008e37 	.word	0x08008e37
 8008e04:	08008e37 	.word	0x08008e37
 8008e08:	08008e37 	.word	0x08008e37
 8008e0c:	08008e2f 	.word	0x08008e2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e10:	f7fc fbaa 	bl	8005568 <HAL_RCC_GetPCLK1Freq>
 8008e14:	61b8      	str	r0, [r7, #24]
        break;
 8008e16:	e013      	b.n	8008e40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e18:	f7fc fbba 	bl	8005590 <HAL_RCC_GetPCLK2Freq>
 8008e1c:	61b8      	str	r0, [r7, #24]
        break;
 8008e1e:	e00f      	b.n	8008e40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e20:	4b1d      	ldr	r3, [pc, #116]	; (8008e98 <UART_SetConfig+0x4c4>)
 8008e22:	61bb      	str	r3, [r7, #24]
        break;
 8008e24:	e00c      	b.n	8008e40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e26:	f7fc fa8d 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 8008e2a:	61b8      	str	r0, [r7, #24]
        break;
 8008e2c:	e008      	b.n	8008e40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e32:	61bb      	str	r3, [r7, #24]
        break;
 8008e34:	e004      	b.n	8008e40 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008e36:	2300      	movs	r3, #0
 8008e38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	77bb      	strb	r3, [r7, #30]
        break;
 8008e3e:	bf00      	nop
    }

    if (pclk != 0U)
 8008e40:	69bb      	ldr	r3, [r7, #24]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d018      	beq.n	8008e78 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	085a      	lsrs	r2, r3, #1
 8008e4c:	69bb      	ldr	r3, [r7, #24]
 8008e4e:	441a      	add	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e58:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	2b0f      	cmp	r3, #15
 8008e5e:	d909      	bls.n	8008e74 <UART_SetConfig+0x4a0>
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e66:	d205      	bcs.n	8008e74 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	b29a      	uxth	r2, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	60da      	str	r2, [r3, #12]
 8008e72:	e001      	b.n	8008e78 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008e74:	2301      	movs	r3, #1
 8008e76:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008e84:	7fbb      	ldrb	r3, [r7, #30]
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3720      	adds	r7, #32
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	40007c00 	.word	0x40007c00
 8008e94:	40023800 	.word	0x40023800
 8008e98:	00f42400 	.word	0x00f42400

08008e9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea8:	f003 0301 	and.w	r3, r3, #1
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d00a      	beq.n	8008ec6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	430a      	orrs	r2, r1
 8008ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eca:	f003 0302 	and.w	r3, r3, #2
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d00a      	beq.n	8008ee8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	430a      	orrs	r2, r1
 8008ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eec:	f003 0304 	and.w	r3, r3, #4
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d00a      	beq.n	8008f0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	430a      	orrs	r2, r1
 8008f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0e:	f003 0308 	and.w	r3, r3, #8
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00a      	beq.n	8008f2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	430a      	orrs	r2, r1
 8008f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f30:	f003 0310 	and.w	r3, r3, #16
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d00a      	beq.n	8008f4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	430a      	orrs	r2, r1
 8008f4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f52:	f003 0320 	and.w	r3, r3, #32
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00a      	beq.n	8008f70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	430a      	orrs	r2, r1
 8008f6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d01a      	beq.n	8008fb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	430a      	orrs	r2, r1
 8008f90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f9a:	d10a      	bne.n	8008fb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	430a      	orrs	r2, r1
 8008fb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00a      	beq.n	8008fd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	430a      	orrs	r2, r1
 8008fd2:	605a      	str	r2, [r3, #4]
  }
}
 8008fd4:	bf00      	nop
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b086      	sub	sp, #24
 8008fe4:	af02      	add	r7, sp, #8
 8008fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ff0:	f7f8 fd54 	bl	8001a9c <HAL_GetTick>
 8008ff4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f003 0308 	and.w	r3, r3, #8
 8009000:	2b08      	cmp	r3, #8
 8009002:	d10e      	bne.n	8009022 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009004:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2200      	movs	r2, #0
 800900e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f831 	bl	800907a <UART_WaitOnFlagUntilTimeout>
 8009018:	4603      	mov	r3, r0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d001      	beq.n	8009022 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800901e:	2303      	movs	r3, #3
 8009020:	e027      	b.n	8009072 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f003 0304 	and.w	r3, r3, #4
 800902c:	2b04      	cmp	r3, #4
 800902e:	d10e      	bne.n	800904e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009030:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009034:	9300      	str	r3, [sp, #0]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2200      	movs	r2, #0
 800903a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 f81b 	bl	800907a <UART_WaitOnFlagUntilTimeout>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d001      	beq.n	800904e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800904a:	2303      	movs	r3, #3
 800904c:	e011      	b.n	8009072 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2220      	movs	r2, #32
 8009052:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2220      	movs	r2, #32
 8009058:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b09c      	sub	sp, #112	; 0x70
 800907e:	af00      	add	r7, sp, #0
 8009080:	60f8      	str	r0, [r7, #12]
 8009082:	60b9      	str	r1, [r7, #8]
 8009084:	603b      	str	r3, [r7, #0]
 8009086:	4613      	mov	r3, r2
 8009088:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800908a:	e0a7      	b.n	80091dc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800908c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800908e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009092:	f000 80a3 	beq.w	80091dc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009096:	f7f8 fd01 	bl	8001a9c <HAL_GetTick>
 800909a:	4602      	mov	r2, r0
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d302      	bcc.n	80090ac <UART_WaitOnFlagUntilTimeout+0x32>
 80090a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d13f      	bne.n	800912c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090b4:	e853 3f00 	ldrex	r3, [r3]
 80090b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80090ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80090c0:	667b      	str	r3, [r7, #100]	; 0x64
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	461a      	mov	r2, r3
 80090c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090cc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80090d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80090d2:	e841 2300 	strex	r3, r2, [r1]
 80090d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80090d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d1e6      	bne.n	80090ac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	3308      	adds	r3, #8
 80090e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090e8:	e853 3f00 	ldrex	r3, [r3]
 80090ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80090ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f0:	f023 0301 	bic.w	r3, r3, #1
 80090f4:	663b      	str	r3, [r7, #96]	; 0x60
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	3308      	adds	r3, #8
 80090fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80090fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8009100:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009102:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009104:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009106:	e841 2300 	strex	r3, r2, [r1]
 800910a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800910c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800910e:	2b00      	cmp	r3, #0
 8009110:	d1e5      	bne.n	80090de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2220      	movs	r2, #32
 8009116:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2220      	movs	r2, #32
 800911c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2200      	movs	r2, #0
 8009124:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8009128:	2303      	movs	r3, #3
 800912a:	e068      	b.n	80091fe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f003 0304 	and.w	r3, r3, #4
 8009136:	2b00      	cmp	r3, #0
 8009138:	d050      	beq.n	80091dc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	69db      	ldr	r3, [r3, #28]
 8009140:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009148:	d148      	bne.n	80091dc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009152:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915c:	e853 3f00 	ldrex	r3, [r3]
 8009160:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009164:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009168:	66fb      	str	r3, [r7, #108]	; 0x6c
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	461a      	mov	r2, r3
 8009170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009172:	637b      	str	r3, [r7, #52]	; 0x34
 8009174:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009176:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009178:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800917a:	e841 2300 	strex	r3, r2, [r1]
 800917e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009182:	2b00      	cmp	r3, #0
 8009184:	d1e6      	bne.n	8009154 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	3308      	adds	r3, #8
 800918c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	e853 3f00 	ldrex	r3, [r3]
 8009194:	613b      	str	r3, [r7, #16]
   return(result);
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	f023 0301 	bic.w	r3, r3, #1
 800919c:	66bb      	str	r3, [r7, #104]	; 0x68
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	3308      	adds	r3, #8
 80091a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80091a6:	623a      	str	r2, [r7, #32]
 80091a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091aa:	69f9      	ldr	r1, [r7, #28]
 80091ac:	6a3a      	ldr	r2, [r7, #32]
 80091ae:	e841 2300 	strex	r3, r2, [r1]
 80091b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d1e5      	bne.n	8009186 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2220      	movs	r2, #32
 80091be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2220      	movs	r2, #32
 80091c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2220      	movs	r2, #32
 80091cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80091d8:	2303      	movs	r3, #3
 80091da:	e010      	b.n	80091fe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	69da      	ldr	r2, [r3, #28]
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	4013      	ands	r3, r2
 80091e6:	68ba      	ldr	r2, [r7, #8]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	bf0c      	ite	eq
 80091ec:	2301      	moveq	r3, #1
 80091ee:	2300      	movne	r3, #0
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	461a      	mov	r2, r3
 80091f4:	79fb      	ldrb	r3, [r7, #7]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	f43f af48 	beq.w	800908c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3770      	adds	r7, #112	; 0x70
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
	...

08009208 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b096      	sub	sp, #88	; 0x58
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	4613      	mov	r3, r2
 8009214:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	68ba      	ldr	r2, [r7, #8]
 800921a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	88fa      	ldrh	r2, [r7, #6]
 8009220:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2222      	movs	r2, #34	; 0x22
 8009230:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009238:	2b00      	cmp	r3, #0
 800923a:	d028      	beq.n	800928e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009240:	4a3e      	ldr	r2, [pc, #248]	; (800933c <UART_Start_Receive_DMA+0x134>)
 8009242:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009248:	4a3d      	ldr	r2, [pc, #244]	; (8009340 <UART_Start_Receive_DMA+0x138>)
 800924a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009250:	4a3c      	ldr	r2, [pc, #240]	; (8009344 <UART_Start_Receive_DMA+0x13c>)
 8009252:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009258:	2200      	movs	r2, #0
 800925a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	3324      	adds	r3, #36	; 0x24
 8009266:	4619      	mov	r1, r3
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800926c:	461a      	mov	r2, r3
 800926e:	88fb      	ldrh	r3, [r7, #6]
 8009270:	f7f9 f826 	bl	80022c0 <HAL_DMA_Start_IT>
 8009274:	4603      	mov	r3, r0
 8009276:	2b00      	cmp	r3, #0
 8009278:	d009      	beq.n	800928e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2210      	movs	r2, #16
 800927e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2220      	movs	r2, #32
 8009286:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800928a:	2301      	movs	r3, #1
 800928c:	e051      	b.n	8009332 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	691b      	ldr	r3, [r3, #16]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d018      	beq.n	80092c8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800929e:	e853 3f00 	ldrex	r3, [r3]
 80092a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092aa:	657b      	str	r3, [r7, #84]	; 0x54
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	461a      	mov	r2, r3
 80092b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80092b6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80092ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092bc:	e841 2300 	strex	r3, r2, [r1]
 80092c0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80092c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d1e6      	bne.n	8009296 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	3308      	adds	r3, #8
 80092ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d2:	e853 3f00 	ldrex	r3, [r3]
 80092d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092da:	f043 0301 	orr.w	r3, r3, #1
 80092de:	653b      	str	r3, [r7, #80]	; 0x50
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	3308      	adds	r3, #8
 80092e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80092e8:	637a      	str	r2, [r7, #52]	; 0x34
 80092ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80092ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092f0:	e841 2300 	strex	r3, r2, [r1]
 80092f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80092f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d1e5      	bne.n	80092c8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	3308      	adds	r3, #8
 8009302:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	e853 3f00 	ldrex	r3, [r3]
 800930a:	613b      	str	r3, [r7, #16]
   return(result);
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	3308      	adds	r3, #8
 800931a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800931c:	623a      	str	r2, [r7, #32]
 800931e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009320:	69f9      	ldr	r1, [r7, #28]
 8009322:	6a3a      	ldr	r2, [r7, #32]
 8009324:	e841 2300 	strex	r3, r2, [r1]
 8009328:	61bb      	str	r3, [r7, #24]
   return(result);
 800932a:	69bb      	ldr	r3, [r7, #24]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d1e5      	bne.n	80092fc <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8009330:	2300      	movs	r3, #0
}
 8009332:	4618      	mov	r0, r3
 8009334:	3758      	adds	r7, #88	; 0x58
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	0800945d 	.word	0x0800945d
 8009340:	08009585 	.word	0x08009585
 8009344:	080095c3 	.word	0x080095c3

08009348 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009348:	b480      	push	{r7}
 800934a:	b089      	sub	sp, #36	; 0x24
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	e853 3f00 	ldrex	r3, [r3]
 800935c:	60bb      	str	r3, [r7, #8]
   return(result);
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009364:	61fb      	str	r3, [r7, #28]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	461a      	mov	r2, r3
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	61bb      	str	r3, [r7, #24]
 8009370:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009372:	6979      	ldr	r1, [r7, #20]
 8009374:	69ba      	ldr	r2, [r7, #24]
 8009376:	e841 2300 	strex	r3, r2, [r1]
 800937a:	613b      	str	r3, [r7, #16]
   return(result);
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d1e6      	bne.n	8009350 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2220      	movs	r2, #32
 8009386:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8009388:	bf00      	nop
 800938a:	3724      	adds	r7, #36	; 0x24
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009394:	b480      	push	{r7}
 8009396:	b095      	sub	sp, #84	; 0x54
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093a4:	e853 3f00 	ldrex	r3, [r3]
 80093a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80093aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80093b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	461a      	mov	r2, r3
 80093b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093ba:	643b      	str	r3, [r7, #64]	; 0x40
 80093bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80093c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093c2:	e841 2300 	strex	r3, r2, [r1]
 80093c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80093c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d1e6      	bne.n	800939c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	3308      	adds	r3, #8
 80093d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d6:	6a3b      	ldr	r3, [r7, #32]
 80093d8:	e853 3f00 	ldrex	r3, [r3]
 80093dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	f023 0301 	bic.w	r3, r3, #1
 80093e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	3308      	adds	r3, #8
 80093ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80093f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093f6:	e841 2300 	strex	r3, r2, [r1]
 80093fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d1e5      	bne.n	80093ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009406:	2b01      	cmp	r3, #1
 8009408:	d118      	bne.n	800943c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	e853 3f00 	ldrex	r3, [r3]
 8009416:	60bb      	str	r3, [r7, #8]
   return(result);
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	f023 0310 	bic.w	r3, r3, #16
 800941e:	647b      	str	r3, [r7, #68]	; 0x44
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	461a      	mov	r2, r3
 8009426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009428:	61bb      	str	r3, [r7, #24]
 800942a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942c:	6979      	ldr	r1, [r7, #20]
 800942e:	69ba      	ldr	r2, [r7, #24]
 8009430:	e841 2300 	strex	r3, r2, [r1]
 8009434:	613b      	str	r3, [r7, #16]
   return(result);
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d1e6      	bne.n	800940a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2220      	movs	r2, #32
 8009440:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009450:	bf00      	nop
 8009452:	3754      	adds	r7, #84	; 0x54
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b09c      	sub	sp, #112	; 0x70
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009468:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	69db      	ldr	r3, [r3, #28]
 800946e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009472:	d071      	beq.n	8009558 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009476:	2200      	movs	r2, #0
 8009478:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800947c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009484:	e853 3f00 	ldrex	r3, [r3]
 8009488:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800948a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800948c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009490:	66bb      	str	r3, [r7, #104]	; 0x68
 8009492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	461a      	mov	r2, r3
 8009498:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800949a:	65bb      	str	r3, [r7, #88]	; 0x58
 800949c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800949e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80094a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80094a2:	e841 2300 	strex	r3, r2, [r1]
 80094a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80094a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d1e6      	bne.n	800947c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	3308      	adds	r3, #8
 80094b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b8:	e853 3f00 	ldrex	r3, [r3]
 80094bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80094be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c0:	f023 0301 	bic.w	r3, r3, #1
 80094c4:	667b      	str	r3, [r7, #100]	; 0x64
 80094c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	3308      	adds	r3, #8
 80094cc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80094ce:	647a      	str	r2, [r7, #68]	; 0x44
 80094d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80094d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094d6:	e841 2300 	strex	r3, r2, [r1]
 80094da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80094dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1e5      	bne.n	80094ae <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	3308      	adds	r3, #8
 80094e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ec:	e853 3f00 	ldrex	r3, [r3]
 80094f0:	623b      	str	r3, [r7, #32]
   return(result);
 80094f2:	6a3b      	ldr	r3, [r7, #32]
 80094f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094f8:	663b      	str	r3, [r7, #96]	; 0x60
 80094fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	3308      	adds	r3, #8
 8009500:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009502:	633a      	str	r2, [r7, #48]	; 0x30
 8009504:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009506:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800950a:	e841 2300 	strex	r3, r2, [r1]
 800950e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009512:	2b00      	cmp	r3, #0
 8009514:	d1e5      	bne.n	80094e2 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009518:	2220      	movs	r2, #32
 800951a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800951e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009522:	2b01      	cmp	r3, #1
 8009524:	d118      	bne.n	8009558 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	e853 3f00 	ldrex	r3, [r3]
 8009532:	60fb      	str	r3, [r7, #12]
   return(result);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f023 0310 	bic.w	r3, r3, #16
 800953a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800953c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	461a      	mov	r2, r3
 8009542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009544:	61fb      	str	r3, [r7, #28]
 8009546:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009548:	69b9      	ldr	r1, [r7, #24]
 800954a:	69fa      	ldr	r2, [r7, #28]
 800954c:	e841 2300 	strex	r3, r2, [r1]
 8009550:	617b      	str	r3, [r7, #20]
   return(result);
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d1e6      	bne.n	8009526 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800955a:	2200      	movs	r2, #0
 800955c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800955e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009562:	2b01      	cmp	r3, #1
 8009564:	d107      	bne.n	8009576 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009568:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800956c:	4619      	mov	r1, r3
 800956e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009570:	f001 fd8c 	bl	800b08c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009574:	e002      	b.n	800957c <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8009576:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009578:	f7ff fa04 	bl	8008984 <HAL_UART_RxCpltCallback>
}
 800957c:	bf00      	nop
 800957e:	3770      	adds	r7, #112	; 0x70
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009590:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2201      	movs	r2, #1
 8009596:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800959c:	2b01      	cmp	r3, #1
 800959e:	d109      	bne.n	80095b4 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80095a6:	085b      	lsrs	r3, r3, #1
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	4619      	mov	r1, r3
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f001 fd6d 	bl	800b08c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80095b2:	e002      	b.n	80095ba <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80095b4:	68f8      	ldr	r0, [r7, #12]
 80095b6:	f7ff f9ef 	bl	8008998 <HAL_UART_RxHalfCpltCallback>
}
 80095ba:	bf00      	nop
 80095bc:	3710      	adds	r7, #16
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b086      	sub	sp, #24
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ce:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095d4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095dc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095e8:	2b80      	cmp	r3, #128	; 0x80
 80095ea:	d109      	bne.n	8009600 <UART_DMAError+0x3e>
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	2b21      	cmp	r3, #33	; 0x21
 80095f0:	d106      	bne.n	8009600 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	2200      	movs	r2, #0
 80095f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80095fa:	6978      	ldr	r0, [r7, #20]
 80095fc:	f7ff fea4 	bl	8009348 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800960a:	2b40      	cmp	r3, #64	; 0x40
 800960c:	d109      	bne.n	8009622 <UART_DMAError+0x60>
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2b22      	cmp	r3, #34	; 0x22
 8009612:	d106      	bne.n	8009622 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	2200      	movs	r2, #0
 8009618:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800961c:	6978      	ldr	r0, [r7, #20]
 800961e:	f7ff feb9 	bl	8009394 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009628:	f043 0210 	orr.w	r2, r3, #16
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009632:	6978      	ldr	r0, [r7, #20]
 8009634:	f7ff f9ba 	bl	80089ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009638:	bf00      	nop
 800963a:	3718      	adds	r7, #24
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800964c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2200      	movs	r2, #0
 8009652:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2200      	movs	r2, #0
 800965a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f7ff f9a4 	bl	80089ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009664:	bf00      	nop
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b088      	sub	sp, #32
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	e853 3f00 	ldrex	r3, [r3]
 8009680:	60bb      	str	r3, [r7, #8]
   return(result);
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009688:	61fb      	str	r3, [r7, #28]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	461a      	mov	r2, r3
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	61bb      	str	r3, [r7, #24]
 8009694:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009696:	6979      	ldr	r1, [r7, #20]
 8009698:	69ba      	ldr	r2, [r7, #24]
 800969a:	e841 2300 	strex	r3, r2, [r1]
 800969e:	613b      	str	r3, [r7, #16]
   return(result);
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d1e6      	bne.n	8009674 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2220      	movs	r2, #32
 80096aa:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f7ff f95c 	bl	8008970 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096b8:	bf00      	nop
 80096ba:	3720      	adds	r7, #32
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b08c      	sub	sp, #48	; 0x30
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	4613      	mov	r3, r2
 80096cc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096d4:	2b20      	cmp	r3, #32
 80096d6:	d142      	bne.n	800975e <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d002      	beq.n	80096e4 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80096de:	88fb      	ldrh	r3, [r7, #6]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d101      	bne.n	80096e8 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	e03b      	b.n	8009760 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2201      	movs	r2, #1
 80096ec:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2200      	movs	r2, #0
 80096f2:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80096f4:	88fb      	ldrh	r3, [r7, #6]
 80096f6:	461a      	mov	r2, r3
 80096f8:	68b9      	ldr	r1, [r7, #8]
 80096fa:	68f8      	ldr	r0, [r7, #12]
 80096fc:	f7ff fd84 	bl	8009208 <UART_Start_Receive_DMA>
 8009700:	4603      	mov	r3, r0
 8009702:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009706:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800970a:	2b00      	cmp	r3, #0
 800970c:	d124      	bne.n	8009758 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009712:	2b01      	cmp	r3, #1
 8009714:	d11d      	bne.n	8009752 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2210      	movs	r2, #16
 800971c:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	e853 3f00 	ldrex	r3, [r3]
 800972a:	617b      	str	r3, [r7, #20]
   return(result);
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	f043 0310 	orr.w	r3, r3, #16
 8009732:	62bb      	str	r3, [r7, #40]	; 0x28
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	461a      	mov	r2, r3
 800973a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973c:	627b      	str	r3, [r7, #36]	; 0x24
 800973e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009740:	6a39      	ldr	r1, [r7, #32]
 8009742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009744:	e841 2300 	strex	r3, r2, [r1]
 8009748:	61fb      	str	r3, [r7, #28]
   return(result);
 800974a:	69fb      	ldr	r3, [r7, #28]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d1e6      	bne.n	800971e <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8009750:	e002      	b.n	8009758 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8009758:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800975c:	e000      	b.n	8009760 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800975e:	2302      	movs	r3, #2
  }
}
 8009760:	4618      	mov	r0, r3
 8009762:	3730      	adds	r7, #48	; 0x30
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009768:	b084      	sub	sp, #16
 800976a:	b580      	push	{r7, lr}
 800976c:	b084      	sub	sp, #16
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
 8009772:	f107 001c 	add.w	r0, r7, #28
 8009776:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800977a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977c:	2b01      	cmp	r3, #1
 800977e:	d120      	bne.n	80097c2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009784:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	68da      	ldr	r2, [r3, #12]
 8009790:	4b20      	ldr	r3, [pc, #128]	; (8009814 <USB_CoreInit+0xac>)
 8009792:	4013      	ands	r3, r2
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80097a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d105      	bne.n	80097b6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f001 fbee 	bl	800af98 <USB_CoreReset>
 80097bc:	4603      	mov	r3, r0
 80097be:	73fb      	strb	r3, [r7, #15]
 80097c0:	e010      	b.n	80097e4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f001 fbe2 	bl	800af98 <USB_CoreReset>
 80097d4:	4603      	mov	r3, r0
 80097d6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097dc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80097e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d10b      	bne.n	8009802 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	f043 0206 	orr.w	r2, r3, #6
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	f043 0220 	orr.w	r2, r3, #32
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009802:	7bfb      	ldrb	r3, [r7, #15]
}
 8009804:	4618      	mov	r0, r3
 8009806:	3710      	adds	r7, #16
 8009808:	46bd      	mov	sp, r7
 800980a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800980e:	b004      	add	sp, #16
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	ffbdffbf 	.word	0xffbdffbf

08009818 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009818:	b480      	push	{r7}
 800981a:	b087      	sub	sp, #28
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	4613      	mov	r3, r2
 8009824:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009826:	79fb      	ldrb	r3, [r7, #7]
 8009828:	2b02      	cmp	r3, #2
 800982a:	d165      	bne.n	80098f8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	4a41      	ldr	r2, [pc, #260]	; (8009934 <USB_SetTurnaroundTime+0x11c>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d906      	bls.n	8009842 <USB_SetTurnaroundTime+0x2a>
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	4a40      	ldr	r2, [pc, #256]	; (8009938 <USB_SetTurnaroundTime+0x120>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d202      	bcs.n	8009842 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800983c:	230f      	movs	r3, #15
 800983e:	617b      	str	r3, [r7, #20]
 8009840:	e062      	b.n	8009908 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	4a3c      	ldr	r2, [pc, #240]	; (8009938 <USB_SetTurnaroundTime+0x120>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d306      	bcc.n	8009858 <USB_SetTurnaroundTime+0x40>
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	4a3b      	ldr	r2, [pc, #236]	; (800993c <USB_SetTurnaroundTime+0x124>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d202      	bcs.n	8009858 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009852:	230e      	movs	r3, #14
 8009854:	617b      	str	r3, [r7, #20]
 8009856:	e057      	b.n	8009908 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	4a38      	ldr	r2, [pc, #224]	; (800993c <USB_SetTurnaroundTime+0x124>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d306      	bcc.n	800986e <USB_SetTurnaroundTime+0x56>
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	4a37      	ldr	r2, [pc, #220]	; (8009940 <USB_SetTurnaroundTime+0x128>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d202      	bcs.n	800986e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009868:	230d      	movs	r3, #13
 800986a:	617b      	str	r3, [r7, #20]
 800986c:	e04c      	b.n	8009908 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	4a33      	ldr	r2, [pc, #204]	; (8009940 <USB_SetTurnaroundTime+0x128>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d306      	bcc.n	8009884 <USB_SetTurnaroundTime+0x6c>
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	4a32      	ldr	r2, [pc, #200]	; (8009944 <USB_SetTurnaroundTime+0x12c>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d802      	bhi.n	8009884 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800987e:	230c      	movs	r3, #12
 8009880:	617b      	str	r3, [r7, #20]
 8009882:	e041      	b.n	8009908 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	4a2f      	ldr	r2, [pc, #188]	; (8009944 <USB_SetTurnaroundTime+0x12c>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d906      	bls.n	800989a <USB_SetTurnaroundTime+0x82>
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	4a2e      	ldr	r2, [pc, #184]	; (8009948 <USB_SetTurnaroundTime+0x130>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d802      	bhi.n	800989a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009894:	230b      	movs	r3, #11
 8009896:	617b      	str	r3, [r7, #20]
 8009898:	e036      	b.n	8009908 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	4a2a      	ldr	r2, [pc, #168]	; (8009948 <USB_SetTurnaroundTime+0x130>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d906      	bls.n	80098b0 <USB_SetTurnaroundTime+0x98>
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	4a29      	ldr	r2, [pc, #164]	; (800994c <USB_SetTurnaroundTime+0x134>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d802      	bhi.n	80098b0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80098aa:	230a      	movs	r3, #10
 80098ac:	617b      	str	r3, [r7, #20]
 80098ae:	e02b      	b.n	8009908 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	4a26      	ldr	r2, [pc, #152]	; (800994c <USB_SetTurnaroundTime+0x134>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d906      	bls.n	80098c6 <USB_SetTurnaroundTime+0xae>
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	4a25      	ldr	r2, [pc, #148]	; (8009950 <USB_SetTurnaroundTime+0x138>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d202      	bcs.n	80098c6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80098c0:	2309      	movs	r3, #9
 80098c2:	617b      	str	r3, [r7, #20]
 80098c4:	e020      	b.n	8009908 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	4a21      	ldr	r2, [pc, #132]	; (8009950 <USB_SetTurnaroundTime+0x138>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d306      	bcc.n	80098dc <USB_SetTurnaroundTime+0xc4>
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	4a20      	ldr	r2, [pc, #128]	; (8009954 <USB_SetTurnaroundTime+0x13c>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d802      	bhi.n	80098dc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80098d6:	2308      	movs	r3, #8
 80098d8:	617b      	str	r3, [r7, #20]
 80098da:	e015      	b.n	8009908 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	4a1d      	ldr	r2, [pc, #116]	; (8009954 <USB_SetTurnaroundTime+0x13c>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d906      	bls.n	80098f2 <USB_SetTurnaroundTime+0xda>
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	4a1c      	ldr	r2, [pc, #112]	; (8009958 <USB_SetTurnaroundTime+0x140>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d202      	bcs.n	80098f2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80098ec:	2307      	movs	r3, #7
 80098ee:	617b      	str	r3, [r7, #20]
 80098f0:	e00a      	b.n	8009908 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80098f2:	2306      	movs	r3, #6
 80098f4:	617b      	str	r3, [r7, #20]
 80098f6:	e007      	b.n	8009908 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80098f8:	79fb      	ldrb	r3, [r7, #7]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d102      	bne.n	8009904 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80098fe:	2309      	movs	r3, #9
 8009900:	617b      	str	r3, [r7, #20]
 8009902:	e001      	b.n	8009908 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009904:	2309      	movs	r3, #9
 8009906:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	68da      	ldr	r2, [r3, #12]
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	029b      	lsls	r3, r3, #10
 800991c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009920:	431a      	orrs	r2, r3
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009926:	2300      	movs	r3, #0
}
 8009928:	4618      	mov	r0, r3
 800992a:	371c      	adds	r7, #28
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr
 8009934:	00d8acbf 	.word	0x00d8acbf
 8009938:	00e4e1c0 	.word	0x00e4e1c0
 800993c:	00f42400 	.word	0x00f42400
 8009940:	01067380 	.word	0x01067380
 8009944:	011a499f 	.word	0x011a499f
 8009948:	01312cff 	.word	0x01312cff
 800994c:	014ca43f 	.word	0x014ca43f
 8009950:	016e3600 	.word	0x016e3600
 8009954:	01a6ab1f 	.word	0x01a6ab1f
 8009958:	01e84800 	.word	0x01e84800

0800995c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	689b      	ldr	r3, [r3, #8]
 8009968:	f043 0201 	orr.w	r2, r3, #1
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	370c      	adds	r7, #12
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr

0800997e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800997e:	b480      	push	{r7}
 8009980:	b083      	sub	sp, #12
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	689b      	ldr	r3, [r3, #8]
 800998a:	f023 0201 	bic.w	r2, r3, #1
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	370c      	adds	r7, #12
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	460b      	mov	r3, r1
 80099aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80099ac:	2300      	movs	r3, #0
 80099ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80099bc:	78fb      	ldrb	r3, [r7, #3]
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d115      	bne.n	80099ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	68db      	ldr	r3, [r3, #12]
 80099c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80099ce:	2001      	movs	r0, #1
 80099d0:	f7f8 f870 	bl	8001ab4 <HAL_Delay>
      ms++;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	3301      	adds	r3, #1
 80099d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f001 fa4b 	bl	800ae76 <USB_GetMode>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d01e      	beq.n	8009a24 <USB_SetCurrentMode+0x84>
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2b31      	cmp	r3, #49	; 0x31
 80099ea:	d9f0      	bls.n	80099ce <USB_SetCurrentMode+0x2e>
 80099ec:	e01a      	b.n	8009a24 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80099ee:	78fb      	ldrb	r3, [r7, #3]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d115      	bne.n	8009a20 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009a00:	2001      	movs	r0, #1
 8009a02:	f7f8 f857 	bl	8001ab4 <HAL_Delay>
      ms++;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f001 fa32 	bl	800ae76 <USB_GetMode>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d005      	beq.n	8009a24 <USB_SetCurrentMode+0x84>
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2b31      	cmp	r3, #49	; 0x31
 8009a1c:	d9f0      	bls.n	8009a00 <USB_SetCurrentMode+0x60>
 8009a1e:	e001      	b.n	8009a24 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009a20:	2301      	movs	r3, #1
 8009a22:	e005      	b.n	8009a30 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2b32      	cmp	r3, #50	; 0x32
 8009a28:	d101      	bne.n	8009a2e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e000      	b.n	8009a30 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009a2e:	2300      	movs	r3, #0
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3710      	adds	r7, #16
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009a38:	b084      	sub	sp, #16
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b086      	sub	sp, #24
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
 8009a42:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009a46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009a52:	2300      	movs	r3, #0
 8009a54:	613b      	str	r3, [r7, #16]
 8009a56:	e009      	b.n	8009a6c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	3340      	adds	r3, #64	; 0x40
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	4413      	add	r3, r2
 8009a62:	2200      	movs	r2, #0
 8009a64:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	3301      	adds	r3, #1
 8009a6a:	613b      	str	r3, [r7, #16]
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	2b0e      	cmp	r3, #14
 8009a70:	d9f2      	bls.n	8009a58 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d11c      	bne.n	8009ab2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	68fa      	ldr	r2, [r7, #12]
 8009a82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a86:	f043 0302 	orr.w	r3, r3, #2
 8009a8a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a90:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	601a      	str	r2, [r3, #0]
 8009ab0:	e005      	b.n	8009abe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ad8:	461a      	mov	r2, r3
 8009ada:	680b      	ldr	r3, [r1, #0]
 8009adc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d10c      	bne.n	8009afe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d104      	bne.n	8009af4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009aea:	2100      	movs	r1, #0
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 f965 	bl	8009dbc <USB_SetDevSpeed>
 8009af2:	e008      	b.n	8009b06 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009af4:	2101      	movs	r1, #1
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 f960 	bl	8009dbc <USB_SetDevSpeed>
 8009afc:	e003      	b.n	8009b06 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009afe:	2103      	movs	r1, #3
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 f95b 	bl	8009dbc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009b06:	2110      	movs	r1, #16
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 f8f3 	bl	8009cf4 <USB_FlushTxFifo>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d001      	beq.n	8009b18 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009b14:	2301      	movs	r3, #1
 8009b16:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 f91f 	bl	8009d5c <USB_FlushRxFifo>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d001      	beq.n	8009b28 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009b24:	2301      	movs	r3, #1
 8009b26:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b2e:	461a      	mov	r2, r3
 8009b30:	2300      	movs	r3, #0
 8009b32:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b46:	461a      	mov	r2, r3
 8009b48:	2300      	movs	r3, #0
 8009b4a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	613b      	str	r3, [r7, #16]
 8009b50:	e043      	b.n	8009bda <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	015a      	lsls	r2, r3, #5
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	4413      	add	r3, r2
 8009b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b68:	d118      	bne.n	8009b9c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d10a      	bne.n	8009b86 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	015a      	lsls	r2, r3, #5
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	4413      	add	r3, r2
 8009b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009b82:	6013      	str	r3, [r2, #0]
 8009b84:	e013      	b.n	8009bae <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	015a      	lsls	r2, r3, #5
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	4413      	add	r3, r2
 8009b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b92:	461a      	mov	r2, r3
 8009b94:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009b98:	6013      	str	r3, [r2, #0]
 8009b9a:	e008      	b.n	8009bae <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	015a      	lsls	r2, r3, #5
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	4413      	add	r3, r2
 8009ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ba8:	461a      	mov	r2, r3
 8009baa:	2300      	movs	r3, #0
 8009bac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	015a      	lsls	r2, r3, #5
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bba:	461a      	mov	r2, r3
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	015a      	lsls	r2, r3, #5
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	4413      	add	r3, r2
 8009bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bcc:	461a      	mov	r2, r3
 8009bce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009bd2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	613b      	str	r3, [r7, #16]
 8009bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bdc:	693a      	ldr	r2, [r7, #16]
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d3b7      	bcc.n	8009b52 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009be2:	2300      	movs	r3, #0
 8009be4:	613b      	str	r3, [r7, #16]
 8009be6:	e043      	b.n	8009c70 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	015a      	lsls	r2, r3, #5
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	4413      	add	r3, r2
 8009bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bfe:	d118      	bne.n	8009c32 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d10a      	bne.n	8009c1c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	015a      	lsls	r2, r3, #5
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c12:	461a      	mov	r2, r3
 8009c14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009c18:	6013      	str	r3, [r2, #0]
 8009c1a:	e013      	b.n	8009c44 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	015a      	lsls	r2, r3, #5
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	4413      	add	r3, r2
 8009c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c28:	461a      	mov	r2, r3
 8009c2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009c2e:	6013      	str	r3, [r2, #0]
 8009c30:	e008      	b.n	8009c44 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	015a      	lsls	r2, r3, #5
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	4413      	add	r3, r2
 8009c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c3e:	461a      	mov	r2, r3
 8009c40:	2300      	movs	r3, #0
 8009c42:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	015a      	lsls	r2, r3, #5
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	4413      	add	r3, r2
 8009c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c50:	461a      	mov	r2, r3
 8009c52:	2300      	movs	r3, #0
 8009c54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	015a      	lsls	r2, r3, #5
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c62:	461a      	mov	r2, r3
 8009c64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009c68:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	613b      	str	r3, [r7, #16]
 8009c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c72:	693a      	ldr	r2, [r7, #16]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d3b7      	bcc.n	8009be8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c7e:	691b      	ldr	r3, [r3, #16]
 8009c80:	68fa      	ldr	r2, [r7, #12]
 8009c82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c8a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009c98:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d105      	bne.n	8009cac <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	699b      	ldr	r3, [r3, #24]
 8009ca4:	f043 0210 	orr.w	r2, r3, #16
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	699a      	ldr	r2, [r3, #24]
 8009cb0:	4b0e      	ldr	r3, [pc, #56]	; (8009cec <USB_DevInit+0x2b4>)
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d005      	beq.n	8009cca <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	699b      	ldr	r3, [r3, #24]
 8009cc2:	f043 0208 	orr.w	r2, r3, #8
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d105      	bne.n	8009cdc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	699a      	ldr	r2, [r3, #24]
 8009cd4:	4b06      	ldr	r3, [pc, #24]	; (8009cf0 <USB_DevInit+0x2b8>)
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3718      	adds	r7, #24
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ce8:	b004      	add	sp, #16
 8009cea:	4770      	bx	lr
 8009cec:	803c3800 	.word	0x803c3800
 8009cf0:	40000004 	.word	0x40000004

08009cf4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b085      	sub	sp, #20
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	3301      	adds	r3, #1
 8009d06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	4a13      	ldr	r2, [pc, #76]	; (8009d58 <USB_FlushTxFifo+0x64>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d901      	bls.n	8009d14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009d10:	2303      	movs	r3, #3
 8009d12:	e01b      	b.n	8009d4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	691b      	ldr	r3, [r3, #16]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	daf2      	bge.n	8009d02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	019b      	lsls	r3, r3, #6
 8009d24:	f043 0220 	orr.w	r2, r3, #32
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	3301      	adds	r3, #1
 8009d30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	4a08      	ldr	r2, [pc, #32]	; (8009d58 <USB_FlushTxFifo+0x64>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d901      	bls.n	8009d3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009d3a:	2303      	movs	r3, #3
 8009d3c:	e006      	b.n	8009d4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	691b      	ldr	r3, [r3, #16]
 8009d42:	f003 0320 	and.w	r3, r3, #32
 8009d46:	2b20      	cmp	r3, #32
 8009d48:	d0f0      	beq.n	8009d2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009d4a:	2300      	movs	r3, #0
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3714      	adds	r7, #20
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr
 8009d58:	00030d40 	.word	0x00030d40

08009d5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b085      	sub	sp, #20
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009d64:	2300      	movs	r3, #0
 8009d66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	4a11      	ldr	r2, [pc, #68]	; (8009db8 <USB_FlushRxFifo+0x5c>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d901      	bls.n	8009d7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009d76:	2303      	movs	r3, #3
 8009d78:	e018      	b.n	8009dac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	691b      	ldr	r3, [r3, #16]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	daf2      	bge.n	8009d68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009d82:	2300      	movs	r3, #0
 8009d84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2210      	movs	r2, #16
 8009d8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	3301      	adds	r3, #1
 8009d90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	4a08      	ldr	r2, [pc, #32]	; (8009db8 <USB_FlushRxFifo+0x5c>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d901      	bls.n	8009d9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009d9a:	2303      	movs	r3, #3
 8009d9c:	e006      	b.n	8009dac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	691b      	ldr	r3, [r3, #16]
 8009da2:	f003 0310 	and.w	r3, r3, #16
 8009da6:	2b10      	cmp	r3, #16
 8009da8:	d0f0      	beq.n	8009d8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009daa:	2300      	movs	r3, #0
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3714      	adds	r7, #20
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr
 8009db8:	00030d40 	.word	0x00030d40

08009dbc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b085      	sub	sp, #20
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	78fb      	ldrb	r3, [r7, #3]
 8009dd6:	68f9      	ldr	r1, [r7, #12]
 8009dd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009de0:	2300      	movs	r3, #0
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3714      	adds	r7, #20
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr

08009dee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009dee:	b480      	push	{r7}
 8009df0:	b087      	sub	sp, #28
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e00:	689b      	ldr	r3, [r3, #8]
 8009e02:	f003 0306 	and.w	r3, r3, #6
 8009e06:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d102      	bne.n	8009e14 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	75fb      	strb	r3, [r7, #23]
 8009e12:	e00a      	b.n	8009e2a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2b02      	cmp	r3, #2
 8009e18:	d002      	beq.n	8009e20 <USB_GetDevSpeed+0x32>
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2b06      	cmp	r3, #6
 8009e1e:	d102      	bne.n	8009e26 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009e20:	2302      	movs	r3, #2
 8009e22:	75fb      	strb	r3, [r7, #23]
 8009e24:	e001      	b.n	8009e2a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009e26:	230f      	movs	r3, #15
 8009e28:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	371c      	adds	r7, #28
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr

08009e38 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	785b      	ldrb	r3, [r3, #1]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d139      	bne.n	8009ec8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e5a:	69da      	ldr	r2, [r3, #28]
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	f003 030f 	and.w	r3, r3, #15
 8009e64:	2101      	movs	r1, #1
 8009e66:	fa01 f303 	lsl.w	r3, r1, r3
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	68f9      	ldr	r1, [r7, #12]
 8009e6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e72:	4313      	orrs	r3, r2
 8009e74:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	015a      	lsls	r2, r3, #5
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d153      	bne.n	8009f34 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	015a      	lsls	r2, r3, #5
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	4413      	add	r3, r2
 8009e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	68db      	ldr	r3, [r3, #12]
 8009e9e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	791b      	ldrb	r3, [r3, #4]
 8009ea6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ea8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	059b      	lsls	r3, r3, #22
 8009eae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009eb0:	431a      	orrs	r2, r3
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	0159      	lsls	r1, r3, #5
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	440b      	add	r3, r1
 8009eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	4b20      	ldr	r3, [pc, #128]	; (8009f44 <USB_ActivateEndpoint+0x10c>)
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	600b      	str	r3, [r1, #0]
 8009ec6:	e035      	b.n	8009f34 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ece:	69da      	ldr	r2, [r3, #28]
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	781b      	ldrb	r3, [r3, #0]
 8009ed4:	f003 030f 	and.w	r3, r3, #15
 8009ed8:	2101      	movs	r1, #1
 8009eda:	fa01 f303 	lsl.w	r3, r1, r3
 8009ede:	041b      	lsls	r3, r3, #16
 8009ee0:	68f9      	ldr	r1, [r7, #12]
 8009ee2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	015a      	lsls	r2, r3, #5
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d119      	bne.n	8009f34 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	015a      	lsls	r2, r3, #5
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	4413      	add	r3, r2
 8009f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	68db      	ldr	r3, [r3, #12]
 8009f12:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	791b      	ldrb	r3, [r3, #4]
 8009f1a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009f1c:	430b      	orrs	r3, r1
 8009f1e:	431a      	orrs	r2, r3
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	0159      	lsls	r1, r3, #5
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	440b      	add	r3, r1
 8009f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	4b05      	ldr	r3, [pc, #20]	; (8009f44 <USB_ActivateEndpoint+0x10c>)
 8009f30:	4313      	orrs	r3, r2
 8009f32:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009f34:	2300      	movs	r3, #0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3714      	adds	r7, #20
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	10008000 	.word	0x10008000

08009f48 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b085      	sub	sp, #20
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	785b      	ldrb	r3, [r3, #1]
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d161      	bne.n	800a028 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	015a      	lsls	r2, r3, #5
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	4413      	add	r3, r2
 8009f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f7a:	d11f      	bne.n	8009fbc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	015a      	lsls	r2, r3, #5
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	4413      	add	r3, r2
 8009f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	68ba      	ldr	r2, [r7, #8]
 8009f8c:	0151      	lsls	r1, r2, #5
 8009f8e:	68fa      	ldr	r2, [r7, #12]
 8009f90:	440a      	add	r2, r1
 8009f92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f9a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	015a      	lsls	r2, r3, #5
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	68ba      	ldr	r2, [r7, #8]
 8009fac:	0151      	lsls	r1, r2, #5
 8009fae:	68fa      	ldr	r2, [r7, #12]
 8009fb0:	440a      	add	r2, r1
 8009fb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009fba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	f003 030f 	and.w	r3, r3, #15
 8009fcc:	2101      	movs	r1, #1
 8009fce:	fa01 f303 	lsl.w	r3, r1, r3
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	43db      	mvns	r3, r3
 8009fd6:	68f9      	ldr	r1, [r7, #12]
 8009fd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009fdc:	4013      	ands	r3, r2
 8009fde:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fe6:	69da      	ldr	r2, [r3, #28]
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	f003 030f 	and.w	r3, r3, #15
 8009ff0:	2101      	movs	r1, #1
 8009ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	43db      	mvns	r3, r3
 8009ffa:	68f9      	ldr	r1, [r7, #12]
 8009ffc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a000:	4013      	ands	r3, r2
 800a002:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	015a      	lsls	r2, r3, #5
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	4413      	add	r3, r2
 800a00c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	0159      	lsls	r1, r3, #5
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	440b      	add	r3, r1
 800a01a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a01e:	4619      	mov	r1, r3
 800a020:	4b35      	ldr	r3, [pc, #212]	; (800a0f8 <USB_DeactivateEndpoint+0x1b0>)
 800a022:	4013      	ands	r3, r2
 800a024:	600b      	str	r3, [r1, #0]
 800a026:	e060      	b.n	800a0ea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	015a      	lsls	r2, r3, #5
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	4413      	add	r3, r2
 800a030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a03a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a03e:	d11f      	bne.n	800a080 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	015a      	lsls	r2, r3, #5
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	4413      	add	r3, r2
 800a048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	68ba      	ldr	r2, [r7, #8]
 800a050:	0151      	lsls	r1, r2, #5
 800a052:	68fa      	ldr	r2, [r7, #12]
 800a054:	440a      	add	r2, r1
 800a056:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a05a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a05e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	015a      	lsls	r2, r3, #5
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	4413      	add	r3, r2
 800a068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	68ba      	ldr	r2, [r7, #8]
 800a070:	0151      	lsls	r1, r2, #5
 800a072:	68fa      	ldr	r2, [r7, #12]
 800a074:	440a      	add	r2, r1
 800a076:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a07a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a07e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a086:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	f003 030f 	and.w	r3, r3, #15
 800a090:	2101      	movs	r1, #1
 800a092:	fa01 f303 	lsl.w	r3, r1, r3
 800a096:	041b      	lsls	r3, r3, #16
 800a098:	43db      	mvns	r3, r3
 800a09a:	68f9      	ldr	r1, [r7, #12]
 800a09c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0a0:	4013      	ands	r3, r2
 800a0a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0aa:	69da      	ldr	r2, [r3, #28]
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	f003 030f 	and.w	r3, r3, #15
 800a0b4:	2101      	movs	r1, #1
 800a0b6:	fa01 f303 	lsl.w	r3, r1, r3
 800a0ba:	041b      	lsls	r3, r3, #16
 800a0bc:	43db      	mvns	r3, r3
 800a0be:	68f9      	ldr	r1, [r7, #12]
 800a0c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0c4:	4013      	ands	r3, r2
 800a0c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	015a      	lsls	r2, r3, #5
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	4413      	add	r3, r2
 800a0d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	0159      	lsls	r1, r3, #5
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	440b      	add	r3, r1
 800a0de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	4b05      	ldr	r3, [pc, #20]	; (800a0fc <USB_DeactivateEndpoint+0x1b4>)
 800a0e6:	4013      	ands	r3, r2
 800a0e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a0ea:	2300      	movs	r3, #0
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3714      	adds	r7, #20
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr
 800a0f8:	ec337800 	.word	0xec337800
 800a0fc:	eff37800 	.word	0xeff37800

0800a100 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b08a      	sub	sp, #40	; 0x28
 800a104:	af02      	add	r7, sp, #8
 800a106:	60f8      	str	r0, [r7, #12]
 800a108:	60b9      	str	r1, [r7, #8]
 800a10a:	4613      	mov	r3, r2
 800a10c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	785b      	ldrb	r3, [r3, #1]
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	f040 8163 	bne.w	800a3e8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	699b      	ldr	r3, [r3, #24]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d132      	bne.n	800a190 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	015a      	lsls	r2, r3, #5
 800a12e:	69fb      	ldr	r3, [r7, #28]
 800a130:	4413      	add	r3, r2
 800a132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a136:	691a      	ldr	r2, [r3, #16]
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	0159      	lsls	r1, r3, #5
 800a13c:	69fb      	ldr	r3, [r7, #28]
 800a13e:	440b      	add	r3, r1
 800a140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a144:	4619      	mov	r1, r3
 800a146:	4ba5      	ldr	r3, [pc, #660]	; (800a3dc <USB_EPStartXfer+0x2dc>)
 800a148:	4013      	ands	r3, r2
 800a14a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a14c:	69bb      	ldr	r3, [r7, #24]
 800a14e:	015a      	lsls	r2, r3, #5
 800a150:	69fb      	ldr	r3, [r7, #28]
 800a152:	4413      	add	r3, r2
 800a154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a158:	691b      	ldr	r3, [r3, #16]
 800a15a:	69ba      	ldr	r2, [r7, #24]
 800a15c:	0151      	lsls	r1, r2, #5
 800a15e:	69fa      	ldr	r2, [r7, #28]
 800a160:	440a      	add	r2, r1
 800a162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a166:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a16a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	015a      	lsls	r2, r3, #5
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	4413      	add	r3, r2
 800a174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a178:	691a      	ldr	r2, [r3, #16]
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	0159      	lsls	r1, r3, #5
 800a17e:	69fb      	ldr	r3, [r7, #28]
 800a180:	440b      	add	r3, r1
 800a182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a186:	4619      	mov	r1, r3
 800a188:	4b95      	ldr	r3, [pc, #596]	; (800a3e0 <USB_EPStartXfer+0x2e0>)
 800a18a:	4013      	ands	r3, r2
 800a18c:	610b      	str	r3, [r1, #16]
 800a18e:	e074      	b.n	800a27a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a190:	69bb      	ldr	r3, [r7, #24]
 800a192:	015a      	lsls	r2, r3, #5
 800a194:	69fb      	ldr	r3, [r7, #28]
 800a196:	4413      	add	r3, r2
 800a198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a19c:	691a      	ldr	r2, [r3, #16]
 800a19e:	69bb      	ldr	r3, [r7, #24]
 800a1a0:	0159      	lsls	r1, r3, #5
 800a1a2:	69fb      	ldr	r3, [r7, #28]
 800a1a4:	440b      	add	r3, r1
 800a1a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	4b8c      	ldr	r3, [pc, #560]	; (800a3e0 <USB_EPStartXfer+0x2e0>)
 800a1ae:	4013      	ands	r3, r2
 800a1b0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a1b2:	69bb      	ldr	r3, [r7, #24]
 800a1b4:	015a      	lsls	r2, r3, #5
 800a1b6:	69fb      	ldr	r3, [r7, #28]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1be:	691a      	ldr	r2, [r3, #16]
 800a1c0:	69bb      	ldr	r3, [r7, #24]
 800a1c2:	0159      	lsls	r1, r3, #5
 800a1c4:	69fb      	ldr	r3, [r7, #28]
 800a1c6:	440b      	add	r3, r1
 800a1c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	4b83      	ldr	r3, [pc, #524]	; (800a3dc <USB_EPStartXfer+0x2dc>)
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a1d4:	69bb      	ldr	r3, [r7, #24]
 800a1d6:	015a      	lsls	r2, r3, #5
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	4413      	add	r3, r2
 800a1dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1e0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	6999      	ldr	r1, [r3, #24]
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	68db      	ldr	r3, [r3, #12]
 800a1ea:	440b      	add	r3, r1
 800a1ec:	1e59      	subs	r1, r3, #1
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	68db      	ldr	r3, [r3, #12]
 800a1f2:	fbb1 f3f3 	udiv	r3, r1, r3
 800a1f6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a1f8:	4b7a      	ldr	r3, [pc, #488]	; (800a3e4 <USB_EPStartXfer+0x2e4>)
 800a1fa:	400b      	ands	r3, r1
 800a1fc:	69b9      	ldr	r1, [r7, #24]
 800a1fe:	0148      	lsls	r0, r1, #5
 800a200:	69f9      	ldr	r1, [r7, #28]
 800a202:	4401      	add	r1, r0
 800a204:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a208:	4313      	orrs	r3, r2
 800a20a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	015a      	lsls	r2, r3, #5
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	4413      	add	r3, r2
 800a214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a218:	691a      	ldr	r2, [r3, #16]
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	699b      	ldr	r3, [r3, #24]
 800a21e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a222:	69b9      	ldr	r1, [r7, #24]
 800a224:	0148      	lsls	r0, r1, #5
 800a226:	69f9      	ldr	r1, [r7, #28]
 800a228:	4401      	add	r1, r0
 800a22a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a22e:	4313      	orrs	r3, r2
 800a230:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	791b      	ldrb	r3, [r3, #4]
 800a236:	2b01      	cmp	r3, #1
 800a238:	d11f      	bne.n	800a27a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a23a:	69bb      	ldr	r3, [r7, #24]
 800a23c:	015a      	lsls	r2, r3, #5
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	4413      	add	r3, r2
 800a242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a246:	691b      	ldr	r3, [r3, #16]
 800a248:	69ba      	ldr	r2, [r7, #24]
 800a24a:	0151      	lsls	r1, r2, #5
 800a24c:	69fa      	ldr	r2, [r7, #28]
 800a24e:	440a      	add	r2, r1
 800a250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a254:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a258:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a25a:	69bb      	ldr	r3, [r7, #24]
 800a25c:	015a      	lsls	r2, r3, #5
 800a25e:	69fb      	ldr	r3, [r7, #28]
 800a260:	4413      	add	r3, r2
 800a262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a266:	691b      	ldr	r3, [r3, #16]
 800a268:	69ba      	ldr	r2, [r7, #24]
 800a26a:	0151      	lsls	r1, r2, #5
 800a26c:	69fa      	ldr	r2, [r7, #28]
 800a26e:	440a      	add	r2, r1
 800a270:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a274:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a278:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a27a:	79fb      	ldrb	r3, [r7, #7]
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d14b      	bne.n	800a318 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	695b      	ldr	r3, [r3, #20]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d009      	beq.n	800a29c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	015a      	lsls	r2, r3, #5
 800a28c:	69fb      	ldr	r3, [r7, #28]
 800a28e:	4413      	add	r3, r2
 800a290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a294:	461a      	mov	r2, r3
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	695b      	ldr	r3, [r3, #20]
 800a29a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	791b      	ldrb	r3, [r3, #4]
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d128      	bne.n	800a2f6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a2a4:	69fb      	ldr	r3, [r7, #28]
 800a2a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2aa:	689b      	ldr	r3, [r3, #8]
 800a2ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d110      	bne.n	800a2d6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a2b4:	69bb      	ldr	r3, [r7, #24]
 800a2b6:	015a      	lsls	r2, r3, #5
 800a2b8:	69fb      	ldr	r3, [r7, #28]
 800a2ba:	4413      	add	r3, r2
 800a2bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	69ba      	ldr	r2, [r7, #24]
 800a2c4:	0151      	lsls	r1, r2, #5
 800a2c6:	69fa      	ldr	r2, [r7, #28]
 800a2c8:	440a      	add	r2, r1
 800a2ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a2d2:	6013      	str	r3, [r2, #0]
 800a2d4:	e00f      	b.n	800a2f6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a2d6:	69bb      	ldr	r3, [r7, #24]
 800a2d8:	015a      	lsls	r2, r3, #5
 800a2da:	69fb      	ldr	r3, [r7, #28]
 800a2dc:	4413      	add	r3, r2
 800a2de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	69ba      	ldr	r2, [r7, #24]
 800a2e6:	0151      	lsls	r1, r2, #5
 800a2e8:	69fa      	ldr	r2, [r7, #28]
 800a2ea:	440a      	add	r2, r1
 800a2ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2f4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	015a      	lsls	r2, r3, #5
 800a2fa:	69fb      	ldr	r3, [r7, #28]
 800a2fc:	4413      	add	r3, r2
 800a2fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	69ba      	ldr	r2, [r7, #24]
 800a306:	0151      	lsls	r1, r2, #5
 800a308:	69fa      	ldr	r2, [r7, #28]
 800a30a:	440a      	add	r2, r1
 800a30c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a310:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a314:	6013      	str	r3, [r2, #0]
 800a316:	e137      	b.n	800a588 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a318:	69bb      	ldr	r3, [r7, #24]
 800a31a:	015a      	lsls	r2, r3, #5
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	4413      	add	r3, r2
 800a320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	69ba      	ldr	r2, [r7, #24]
 800a328:	0151      	lsls	r1, r2, #5
 800a32a:	69fa      	ldr	r2, [r7, #28]
 800a32c:	440a      	add	r2, r1
 800a32e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a332:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a336:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	791b      	ldrb	r3, [r3, #4]
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d015      	beq.n	800a36c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	699b      	ldr	r3, [r3, #24]
 800a344:	2b00      	cmp	r3, #0
 800a346:	f000 811f 	beq.w	800a588 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	f003 030f 	and.w	r3, r3, #15
 800a35a:	2101      	movs	r1, #1
 800a35c:	fa01 f303 	lsl.w	r3, r1, r3
 800a360:	69f9      	ldr	r1, [r7, #28]
 800a362:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a366:	4313      	orrs	r3, r2
 800a368:	634b      	str	r3, [r1, #52]	; 0x34
 800a36a:	e10d      	b.n	800a588 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a36c:	69fb      	ldr	r3, [r7, #28]
 800a36e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d110      	bne.n	800a39e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a37c:	69bb      	ldr	r3, [r7, #24]
 800a37e:	015a      	lsls	r2, r3, #5
 800a380:	69fb      	ldr	r3, [r7, #28]
 800a382:	4413      	add	r3, r2
 800a384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	69ba      	ldr	r2, [r7, #24]
 800a38c:	0151      	lsls	r1, r2, #5
 800a38e:	69fa      	ldr	r2, [r7, #28]
 800a390:	440a      	add	r2, r1
 800a392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a396:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a39a:	6013      	str	r3, [r2, #0]
 800a39c:	e00f      	b.n	800a3be <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a39e:	69bb      	ldr	r3, [r7, #24]
 800a3a0:	015a      	lsls	r2, r3, #5
 800a3a2:	69fb      	ldr	r3, [r7, #28]
 800a3a4:	4413      	add	r3, r2
 800a3a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	69ba      	ldr	r2, [r7, #24]
 800a3ae:	0151      	lsls	r1, r2, #5
 800a3b0:	69fa      	ldr	r2, [r7, #28]
 800a3b2:	440a      	add	r2, r1
 800a3b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3bc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	6919      	ldr	r1, [r3, #16]
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	781a      	ldrb	r2, [r3, #0]
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	699b      	ldr	r3, [r3, #24]
 800a3ca:	b298      	uxth	r0, r3
 800a3cc:	79fb      	ldrb	r3, [r7, #7]
 800a3ce:	9300      	str	r3, [sp, #0]
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	68f8      	ldr	r0, [r7, #12]
 800a3d4:	f000 faea 	bl	800a9ac <USB_WritePacket>
 800a3d8:	e0d6      	b.n	800a588 <USB_EPStartXfer+0x488>
 800a3da:	bf00      	nop
 800a3dc:	e007ffff 	.word	0xe007ffff
 800a3e0:	fff80000 	.word	0xfff80000
 800a3e4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a3e8:	69bb      	ldr	r3, [r7, #24]
 800a3ea:	015a      	lsls	r2, r3, #5
 800a3ec:	69fb      	ldr	r3, [r7, #28]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3f4:	691a      	ldr	r2, [r3, #16]
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	0159      	lsls	r1, r3, #5
 800a3fa:	69fb      	ldr	r3, [r7, #28]
 800a3fc:	440b      	add	r3, r1
 800a3fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a402:	4619      	mov	r1, r3
 800a404:	4b63      	ldr	r3, [pc, #396]	; (800a594 <USB_EPStartXfer+0x494>)
 800a406:	4013      	ands	r3, r2
 800a408:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a40a:	69bb      	ldr	r3, [r7, #24]
 800a40c:	015a      	lsls	r2, r3, #5
 800a40e:	69fb      	ldr	r3, [r7, #28]
 800a410:	4413      	add	r3, r2
 800a412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a416:	691a      	ldr	r2, [r3, #16]
 800a418:	69bb      	ldr	r3, [r7, #24]
 800a41a:	0159      	lsls	r1, r3, #5
 800a41c:	69fb      	ldr	r3, [r7, #28]
 800a41e:	440b      	add	r3, r1
 800a420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a424:	4619      	mov	r1, r3
 800a426:	4b5c      	ldr	r3, [pc, #368]	; (800a598 <USB_EPStartXfer+0x498>)
 800a428:	4013      	ands	r3, r2
 800a42a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	699b      	ldr	r3, [r3, #24]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d123      	bne.n	800a47c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a434:	69bb      	ldr	r3, [r7, #24]
 800a436:	015a      	lsls	r2, r3, #5
 800a438:	69fb      	ldr	r3, [r7, #28]
 800a43a:	4413      	add	r3, r2
 800a43c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a440:	691a      	ldr	r2, [r3, #16]
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a44a:	69b9      	ldr	r1, [r7, #24]
 800a44c:	0148      	lsls	r0, r1, #5
 800a44e:	69f9      	ldr	r1, [r7, #28]
 800a450:	4401      	add	r1, r0
 800a452:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a456:	4313      	orrs	r3, r2
 800a458:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	015a      	lsls	r2, r3, #5
 800a45e:	69fb      	ldr	r3, [r7, #28]
 800a460:	4413      	add	r3, r2
 800a462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a466:	691b      	ldr	r3, [r3, #16]
 800a468:	69ba      	ldr	r2, [r7, #24]
 800a46a:	0151      	lsls	r1, r2, #5
 800a46c:	69fa      	ldr	r2, [r7, #28]
 800a46e:	440a      	add	r2, r1
 800a470:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a474:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a478:	6113      	str	r3, [r2, #16]
 800a47a:	e037      	b.n	800a4ec <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	699a      	ldr	r2, [r3, #24]
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	68db      	ldr	r3, [r3, #12]
 800a484:	4413      	add	r3, r2
 800a486:	1e5a      	subs	r2, r3, #1
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a490:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	8afa      	ldrh	r2, [r7, #22]
 800a498:	fb03 f202 	mul.w	r2, r3, r2
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a4a0:	69bb      	ldr	r3, [r7, #24]
 800a4a2:	015a      	lsls	r2, r3, #5
 800a4a4:	69fb      	ldr	r3, [r7, #28]
 800a4a6:	4413      	add	r3, r2
 800a4a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4ac:	691a      	ldr	r2, [r3, #16]
 800a4ae:	8afb      	ldrh	r3, [r7, #22]
 800a4b0:	04d9      	lsls	r1, r3, #19
 800a4b2:	4b3a      	ldr	r3, [pc, #232]	; (800a59c <USB_EPStartXfer+0x49c>)
 800a4b4:	400b      	ands	r3, r1
 800a4b6:	69b9      	ldr	r1, [r7, #24]
 800a4b8:	0148      	lsls	r0, r1, #5
 800a4ba:	69f9      	ldr	r1, [r7, #28]
 800a4bc:	4401      	add	r1, r0
 800a4be:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	015a      	lsls	r2, r3, #5
 800a4ca:	69fb      	ldr	r3, [r7, #28]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4d2:	691a      	ldr	r2, [r3, #16]
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	69db      	ldr	r3, [r3, #28]
 800a4d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4dc:	69b9      	ldr	r1, [r7, #24]
 800a4de:	0148      	lsls	r0, r1, #5
 800a4e0:	69f9      	ldr	r1, [r7, #28]
 800a4e2:	4401      	add	r1, r0
 800a4e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a4ec:	79fb      	ldrb	r3, [r7, #7]
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d10d      	bne.n	800a50e <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	691b      	ldr	r3, [r3, #16]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d009      	beq.n	800a50e <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	6919      	ldr	r1, [r3, #16]
 800a4fe:	69bb      	ldr	r3, [r7, #24]
 800a500:	015a      	lsls	r2, r3, #5
 800a502:	69fb      	ldr	r3, [r7, #28]
 800a504:	4413      	add	r3, r2
 800a506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a50a:	460a      	mov	r2, r1
 800a50c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	791b      	ldrb	r3, [r3, #4]
 800a512:	2b01      	cmp	r3, #1
 800a514:	d128      	bne.n	800a568 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a516:	69fb      	ldr	r3, [r7, #28]
 800a518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a51c:	689b      	ldr	r3, [r3, #8]
 800a51e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a522:	2b00      	cmp	r3, #0
 800a524:	d110      	bne.n	800a548 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a526:	69bb      	ldr	r3, [r7, #24]
 800a528:	015a      	lsls	r2, r3, #5
 800a52a:	69fb      	ldr	r3, [r7, #28]
 800a52c:	4413      	add	r3, r2
 800a52e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	69ba      	ldr	r2, [r7, #24]
 800a536:	0151      	lsls	r1, r2, #5
 800a538:	69fa      	ldr	r2, [r7, #28]
 800a53a:	440a      	add	r2, r1
 800a53c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a540:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a544:	6013      	str	r3, [r2, #0]
 800a546:	e00f      	b.n	800a568 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a548:	69bb      	ldr	r3, [r7, #24]
 800a54a:	015a      	lsls	r2, r3, #5
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	4413      	add	r3, r2
 800a550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	69ba      	ldr	r2, [r7, #24]
 800a558:	0151      	lsls	r1, r2, #5
 800a55a:	69fa      	ldr	r2, [r7, #28]
 800a55c:	440a      	add	r2, r1
 800a55e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a566:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	015a      	lsls	r2, r3, #5
 800a56c:	69fb      	ldr	r3, [r7, #28]
 800a56e:	4413      	add	r3, r2
 800a570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	69ba      	ldr	r2, [r7, #24]
 800a578:	0151      	lsls	r1, r2, #5
 800a57a:	69fa      	ldr	r2, [r7, #28]
 800a57c:	440a      	add	r2, r1
 800a57e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a582:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a586:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a588:	2300      	movs	r3, #0
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3720      	adds	r7, #32
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	fff80000 	.word	0xfff80000
 800a598:	e007ffff 	.word	0xe007ffff
 800a59c:	1ff80000 	.word	0x1ff80000

0800a5a0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b087      	sub	sp, #28
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	4613      	mov	r3, r2
 800a5ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	785b      	ldrb	r3, [r3, #1]
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	f040 80ce 	bne.w	800a75e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	699b      	ldr	r3, [r3, #24]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d132      	bne.n	800a630 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	015a      	lsls	r2, r3, #5
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	4413      	add	r3, r2
 800a5d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5d6:	691a      	ldr	r2, [r3, #16]
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	0159      	lsls	r1, r3, #5
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	440b      	add	r3, r1
 800a5e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	4b9a      	ldr	r3, [pc, #616]	; (800a850 <USB_EP0StartXfer+0x2b0>)
 800a5e8:	4013      	ands	r3, r2
 800a5ea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	015a      	lsls	r2, r3, #5
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	4413      	add	r3, r2
 800a5f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5f8:	691b      	ldr	r3, [r3, #16]
 800a5fa:	693a      	ldr	r2, [r7, #16]
 800a5fc:	0151      	lsls	r1, r2, #5
 800a5fe:	697a      	ldr	r2, [r7, #20]
 800a600:	440a      	add	r2, r1
 800a602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a606:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a60a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	015a      	lsls	r2, r3, #5
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	4413      	add	r3, r2
 800a614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a618:	691a      	ldr	r2, [r3, #16]
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	0159      	lsls	r1, r3, #5
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	440b      	add	r3, r1
 800a622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a626:	4619      	mov	r1, r3
 800a628:	4b8a      	ldr	r3, [pc, #552]	; (800a854 <USB_EP0StartXfer+0x2b4>)
 800a62a:	4013      	ands	r3, r2
 800a62c:	610b      	str	r3, [r1, #16]
 800a62e:	e04e      	b.n	800a6ce <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	015a      	lsls	r2, r3, #5
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	4413      	add	r3, r2
 800a638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a63c:	691a      	ldr	r2, [r3, #16]
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	0159      	lsls	r1, r3, #5
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	440b      	add	r3, r1
 800a646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a64a:	4619      	mov	r1, r3
 800a64c:	4b81      	ldr	r3, [pc, #516]	; (800a854 <USB_EP0StartXfer+0x2b4>)
 800a64e:	4013      	ands	r3, r2
 800a650:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	015a      	lsls	r2, r3, #5
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	4413      	add	r3, r2
 800a65a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a65e:	691a      	ldr	r2, [r3, #16]
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	0159      	lsls	r1, r3, #5
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	440b      	add	r3, r1
 800a668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a66c:	4619      	mov	r1, r3
 800a66e:	4b78      	ldr	r3, [pc, #480]	; (800a850 <USB_EP0StartXfer+0x2b0>)
 800a670:	4013      	ands	r3, r2
 800a672:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	699a      	ldr	r2, [r3, #24]
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d903      	bls.n	800a688 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	68da      	ldr	r2, [r3, #12]
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	015a      	lsls	r2, r3, #5
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	4413      	add	r3, r2
 800a690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a694:	691b      	ldr	r3, [r3, #16]
 800a696:	693a      	ldr	r2, [r7, #16]
 800a698:	0151      	lsls	r1, r2, #5
 800a69a:	697a      	ldr	r2, [r7, #20]
 800a69c:	440a      	add	r2, r1
 800a69e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a6a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	015a      	lsls	r2, r3, #5
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	4413      	add	r3, r2
 800a6b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6b4:	691a      	ldr	r2, [r3, #16]
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	699b      	ldr	r3, [r3, #24]
 800a6ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6be:	6939      	ldr	r1, [r7, #16]
 800a6c0:	0148      	lsls	r0, r1, #5
 800a6c2:	6979      	ldr	r1, [r7, #20]
 800a6c4:	4401      	add	r1, r0
 800a6c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a6ce:	79fb      	ldrb	r3, [r7, #7]
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d11e      	bne.n	800a712 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	695b      	ldr	r3, [r3, #20]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d009      	beq.n	800a6f0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	015a      	lsls	r2, r3, #5
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	695b      	ldr	r3, [r3, #20]
 800a6ee:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	015a      	lsls	r2, r3, #5
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	4413      	add	r3, r2
 800a6f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	693a      	ldr	r2, [r7, #16]
 800a700:	0151      	lsls	r1, r2, #5
 800a702:	697a      	ldr	r2, [r7, #20]
 800a704:	440a      	add	r2, r1
 800a706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a70a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a70e:	6013      	str	r3, [r2, #0]
 800a710:	e097      	b.n	800a842 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	015a      	lsls	r2, r3, #5
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	4413      	add	r3, r2
 800a71a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	693a      	ldr	r2, [r7, #16]
 800a722:	0151      	lsls	r1, r2, #5
 800a724:	697a      	ldr	r2, [r7, #20]
 800a726:	440a      	add	r2, r1
 800a728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a72c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a730:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	699b      	ldr	r3, [r3, #24]
 800a736:	2b00      	cmp	r3, #0
 800a738:	f000 8083 	beq.w	800a842 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a742:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	781b      	ldrb	r3, [r3, #0]
 800a748:	f003 030f 	and.w	r3, r3, #15
 800a74c:	2101      	movs	r1, #1
 800a74e:	fa01 f303 	lsl.w	r3, r1, r3
 800a752:	6979      	ldr	r1, [r7, #20]
 800a754:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a758:	4313      	orrs	r3, r2
 800a75a:	634b      	str	r3, [r1, #52]	; 0x34
 800a75c:	e071      	b.n	800a842 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	015a      	lsls	r2, r3, #5
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	4413      	add	r3, r2
 800a766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a76a:	691a      	ldr	r2, [r3, #16]
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	0159      	lsls	r1, r3, #5
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	440b      	add	r3, r1
 800a774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a778:	4619      	mov	r1, r3
 800a77a:	4b36      	ldr	r3, [pc, #216]	; (800a854 <USB_EP0StartXfer+0x2b4>)
 800a77c:	4013      	ands	r3, r2
 800a77e:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	015a      	lsls	r2, r3, #5
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	4413      	add	r3, r2
 800a788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a78c:	691a      	ldr	r2, [r3, #16]
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	0159      	lsls	r1, r3, #5
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	440b      	add	r3, r1
 800a796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a79a:	4619      	mov	r1, r3
 800a79c:	4b2c      	ldr	r3, [pc, #176]	; (800a850 <USB_EP0StartXfer+0x2b0>)
 800a79e:	4013      	ands	r3, r2
 800a7a0:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	699b      	ldr	r3, [r3, #24]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d003      	beq.n	800a7b2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	68da      	ldr	r2, [r3, #12]
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	68da      	ldr	r2, [r3, #12]
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	015a      	lsls	r2, r3, #5
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	4413      	add	r3, r2
 800a7c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7c6:	691b      	ldr	r3, [r3, #16]
 800a7c8:	693a      	ldr	r2, [r7, #16]
 800a7ca:	0151      	lsls	r1, r2, #5
 800a7cc:	697a      	ldr	r2, [r7, #20]
 800a7ce:	440a      	add	r2, r1
 800a7d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a7d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	015a      	lsls	r2, r3, #5
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	4413      	add	r3, r2
 800a7e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7e6:	691a      	ldr	r2, [r3, #16]
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	69db      	ldr	r3, [r3, #28]
 800a7ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7f0:	6939      	ldr	r1, [r7, #16]
 800a7f2:	0148      	lsls	r0, r1, #5
 800a7f4:	6979      	ldr	r1, [r7, #20]
 800a7f6:	4401      	add	r1, r0
 800a7f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a800:	79fb      	ldrb	r3, [r7, #7]
 800a802:	2b01      	cmp	r3, #1
 800a804:	d10d      	bne.n	800a822 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	691b      	ldr	r3, [r3, #16]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d009      	beq.n	800a822 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	6919      	ldr	r1, [r3, #16]
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	015a      	lsls	r2, r3, #5
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	4413      	add	r3, r2
 800a81a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a81e:	460a      	mov	r2, r1
 800a820:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	015a      	lsls	r2, r3, #5
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	4413      	add	r3, r2
 800a82a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	693a      	ldr	r2, [r7, #16]
 800a832:	0151      	lsls	r1, r2, #5
 800a834:	697a      	ldr	r2, [r7, #20]
 800a836:	440a      	add	r2, r1
 800a838:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a83c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a840:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a842:	2300      	movs	r3, #0
}
 800a844:	4618      	mov	r0, r3
 800a846:	371c      	adds	r7, #28
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr
 800a850:	e007ffff 	.word	0xe007ffff
 800a854:	fff80000 	.word	0xfff80000

0800a858 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a858:	b480      	push	{r7}
 800a85a:	b087      	sub	sp, #28
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a862:	2300      	movs	r3, #0
 800a864:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a866:	2300      	movs	r3, #0
 800a868:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	785b      	ldrb	r3, [r3, #1]
 800a872:	2b01      	cmp	r3, #1
 800a874:	d14a      	bne.n	800a90c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	015a      	lsls	r2, r3, #5
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	4413      	add	r3, r2
 800a880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a88a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a88e:	f040 8086 	bne.w	800a99e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	015a      	lsls	r2, r3, #5
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	4413      	add	r3, r2
 800a89c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	683a      	ldr	r2, [r7, #0]
 800a8a4:	7812      	ldrb	r2, [r2, #0]
 800a8a6:	0151      	lsls	r1, r2, #5
 800a8a8:	693a      	ldr	r2, [r7, #16]
 800a8aa:	440a      	add	r2, r1
 800a8ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a8b4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	015a      	lsls	r2, r3, #5
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	4413      	add	r3, r2
 800a8c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	683a      	ldr	r2, [r7, #0]
 800a8c8:	7812      	ldrb	r2, [r2, #0]
 800a8ca:	0151      	lsls	r1, r2, #5
 800a8cc:	693a      	ldr	r2, [r7, #16]
 800a8ce:	440a      	add	r2, r1
 800a8d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a8d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	3301      	adds	r3, #1
 800a8de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f242 7210 	movw	r2, #10000	; 0x2710
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d902      	bls.n	800a8f0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	75fb      	strb	r3, [r7, #23]
          break;
 800a8ee:	e056      	b.n	800a99e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	015a      	lsls	r2, r3, #5
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	4413      	add	r3, r2
 800a8fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a904:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a908:	d0e7      	beq.n	800a8da <USB_EPStopXfer+0x82>
 800a90a:	e048      	b.n	800a99e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	781b      	ldrb	r3, [r3, #0]
 800a910:	015a      	lsls	r2, r3, #5
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	4413      	add	r3, r2
 800a916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a920:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a924:	d13b      	bne.n	800a99e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	015a      	lsls	r2, r3, #5
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	4413      	add	r3, r2
 800a930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	683a      	ldr	r2, [r7, #0]
 800a938:	7812      	ldrb	r2, [r2, #0]
 800a93a:	0151      	lsls	r1, r2, #5
 800a93c:	693a      	ldr	r2, [r7, #16]
 800a93e:	440a      	add	r2, r1
 800a940:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a944:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a948:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	015a      	lsls	r2, r3, #5
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	4413      	add	r3, r2
 800a954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	683a      	ldr	r2, [r7, #0]
 800a95c:	7812      	ldrb	r2, [r2, #0]
 800a95e:	0151      	lsls	r1, r2, #5
 800a960:	693a      	ldr	r2, [r7, #16]
 800a962:	440a      	add	r2, r1
 800a964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a968:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a96c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	3301      	adds	r3, #1
 800a972:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f242 7210 	movw	r2, #10000	; 0x2710
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d902      	bls.n	800a984 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a97e:	2301      	movs	r3, #1
 800a980:	75fb      	strb	r3, [r7, #23]
          break;
 800a982:	e00c      	b.n	800a99e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	015a      	lsls	r2, r3, #5
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	4413      	add	r3, r2
 800a98e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a998:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a99c:	d0e7      	beq.n	800a96e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a99e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	371c      	adds	r7, #28
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b089      	sub	sp, #36	; 0x24
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	4611      	mov	r1, r2
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	71fb      	strb	r3, [r7, #7]
 800a9be:	4613      	mov	r3, r2
 800a9c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a9ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d123      	bne.n	800aa1a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a9d2:	88bb      	ldrh	r3, [r7, #4]
 800a9d4:	3303      	adds	r3, #3
 800a9d6:	089b      	lsrs	r3, r3, #2
 800a9d8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a9da:	2300      	movs	r3, #0
 800a9dc:	61bb      	str	r3, [r7, #24]
 800a9de:	e018      	b.n	800aa12 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a9e0:	79fb      	ldrb	r3, [r7, #7]
 800a9e2:	031a      	lsls	r2, r3, #12
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	4413      	add	r3, r2
 800a9e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	69fb      	ldr	r3, [r7, #28]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a9f4:	69fb      	ldr	r3, [r7, #28]
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a9fa:	69fb      	ldr	r3, [r7, #28]
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800aa00:	69fb      	ldr	r3, [r7, #28]
 800aa02:	3301      	adds	r3, #1
 800aa04:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800aa06:	69fb      	ldr	r3, [r7, #28]
 800aa08:	3301      	adds	r3, #1
 800aa0a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800aa0c:	69bb      	ldr	r3, [r7, #24]
 800aa0e:	3301      	adds	r3, #1
 800aa10:	61bb      	str	r3, [r7, #24]
 800aa12:	69ba      	ldr	r2, [r7, #24]
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d3e2      	bcc.n	800a9e0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800aa1a:	2300      	movs	r3, #0
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3724      	adds	r7, #36	; 0x24
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b08b      	sub	sp, #44	; 0x2c
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	4613      	mov	r3, r2
 800aa34:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800aa3e:	88fb      	ldrh	r3, [r7, #6]
 800aa40:	089b      	lsrs	r3, r3, #2
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800aa46:	88fb      	ldrh	r3, [r7, #6]
 800aa48:	f003 0303 	and.w	r3, r3, #3
 800aa4c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800aa4e:	2300      	movs	r3, #0
 800aa50:	623b      	str	r3, [r7, #32]
 800aa52:	e014      	b.n	800aa7e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800aa54:	69bb      	ldr	r3, [r7, #24]
 800aa56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5e:	601a      	str	r2, [r3, #0]
    pDest++;
 800aa60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa62:	3301      	adds	r3, #1
 800aa64:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800aa66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa68:	3301      	adds	r3, #1
 800aa6a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800aa6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6e:	3301      	adds	r3, #1
 800aa70:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800aa72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa74:	3301      	adds	r3, #1
 800aa76:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800aa78:	6a3b      	ldr	r3, [r7, #32]
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	623b      	str	r3, [r7, #32]
 800aa7e:	6a3a      	ldr	r2, [r7, #32]
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d3e6      	bcc.n	800aa54 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800aa86:	8bfb      	ldrh	r3, [r7, #30]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d01e      	beq.n	800aaca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800aa90:	69bb      	ldr	r3, [r7, #24]
 800aa92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa96:	461a      	mov	r2, r3
 800aa98:	f107 0310 	add.w	r3, r7, #16
 800aa9c:	6812      	ldr	r2, [r2, #0]
 800aa9e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800aaa0:	693a      	ldr	r2, [r7, #16]
 800aaa2:	6a3b      	ldr	r3, [r7, #32]
 800aaa4:	b2db      	uxtb	r3, r3
 800aaa6:	00db      	lsls	r3, r3, #3
 800aaa8:	fa22 f303 	lsr.w	r3, r2, r3
 800aaac:	b2da      	uxtb	r2, r3
 800aaae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab0:	701a      	strb	r2, [r3, #0]
      i++;
 800aab2:	6a3b      	ldr	r3, [r7, #32]
 800aab4:	3301      	adds	r3, #1
 800aab6:	623b      	str	r3, [r7, #32]
      pDest++;
 800aab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaba:	3301      	adds	r3, #1
 800aabc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800aabe:	8bfb      	ldrh	r3, [r7, #30]
 800aac0:	3b01      	subs	r3, #1
 800aac2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800aac4:	8bfb      	ldrh	r3, [r7, #30]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d1ea      	bne.n	800aaa0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800aaca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aacc:	4618      	mov	r0, r3
 800aace:	372c      	adds	r7, #44	; 0x2c
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr

0800aad8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aad8:	b480      	push	{r7}
 800aada:	b085      	sub	sp, #20
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	785b      	ldrb	r3, [r3, #1]
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d12c      	bne.n	800ab4e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	015a      	lsls	r2, r3, #5
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	4413      	add	r3, r2
 800aafc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	db12      	blt.n	800ab2c <USB_EPSetStall+0x54>
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d00f      	beq.n	800ab2c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	015a      	lsls	r2, r3, #5
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	4413      	add	r3, r2
 800ab14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	68ba      	ldr	r2, [r7, #8]
 800ab1c:	0151      	lsls	r1, r2, #5
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	440a      	add	r2, r1
 800ab22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ab2a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	015a      	lsls	r2, r3, #5
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	4413      	add	r3, r2
 800ab34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	68ba      	ldr	r2, [r7, #8]
 800ab3c:	0151      	lsls	r1, r2, #5
 800ab3e:	68fa      	ldr	r2, [r7, #12]
 800ab40:	440a      	add	r2, r1
 800ab42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ab4a:	6013      	str	r3, [r2, #0]
 800ab4c:	e02b      	b.n	800aba6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	015a      	lsls	r2, r3, #5
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	4413      	add	r3, r2
 800ab56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	db12      	blt.n	800ab86 <USB_EPSetStall+0xae>
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d00f      	beq.n	800ab86 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	015a      	lsls	r2, r3, #5
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	4413      	add	r3, r2
 800ab6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	68ba      	ldr	r2, [r7, #8]
 800ab76:	0151      	lsls	r1, r2, #5
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	440a      	add	r2, r1
 800ab7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ab84:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	015a      	lsls	r2, r3, #5
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	4413      	add	r3, r2
 800ab8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	68ba      	ldr	r2, [r7, #8]
 800ab96:	0151      	lsls	r1, r2, #5
 800ab98:	68fa      	ldr	r2, [r7, #12]
 800ab9a:	440a      	add	r2, r1
 800ab9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aba0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aba4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aba6:	2300      	movs	r3, #0
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3714      	adds	r7, #20
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b085      	sub	sp, #20
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	785b      	ldrb	r3, [r3, #1]
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d128      	bne.n	800ac22 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	015a      	lsls	r2, r3, #5
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	4413      	add	r3, r2
 800abd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	68ba      	ldr	r2, [r7, #8]
 800abe0:	0151      	lsls	r1, r2, #5
 800abe2:	68fa      	ldr	r2, [r7, #12]
 800abe4:	440a      	add	r2, r1
 800abe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800abee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	791b      	ldrb	r3, [r3, #4]
 800abf4:	2b03      	cmp	r3, #3
 800abf6:	d003      	beq.n	800ac00 <USB_EPClearStall+0x4c>
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	791b      	ldrb	r3, [r3, #4]
 800abfc:	2b02      	cmp	r3, #2
 800abfe:	d138      	bne.n	800ac72 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	015a      	lsls	r2, r3, #5
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	4413      	add	r3, r2
 800ac08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	68ba      	ldr	r2, [r7, #8]
 800ac10:	0151      	lsls	r1, r2, #5
 800ac12:	68fa      	ldr	r2, [r7, #12]
 800ac14:	440a      	add	r2, r1
 800ac16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac1e:	6013      	str	r3, [r2, #0]
 800ac20:	e027      	b.n	800ac72 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	015a      	lsls	r2, r3, #5
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	4413      	add	r3, r2
 800ac2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	68ba      	ldr	r2, [r7, #8]
 800ac32:	0151      	lsls	r1, r2, #5
 800ac34:	68fa      	ldr	r2, [r7, #12]
 800ac36:	440a      	add	r2, r1
 800ac38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ac40:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	791b      	ldrb	r3, [r3, #4]
 800ac46:	2b03      	cmp	r3, #3
 800ac48:	d003      	beq.n	800ac52 <USB_EPClearStall+0x9e>
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	791b      	ldrb	r3, [r3, #4]
 800ac4e:	2b02      	cmp	r3, #2
 800ac50:	d10f      	bne.n	800ac72 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	015a      	lsls	r2, r3, #5
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	4413      	add	r3, r2
 800ac5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	68ba      	ldr	r2, [r7, #8]
 800ac62:	0151      	lsls	r1, r2, #5
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	440a      	add	r2, r1
 800ac68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac70:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ac72:	2300      	movs	r3, #0
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3714      	adds	r7, #20
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr

0800ac80 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b085      	sub	sp, #20
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	460b      	mov	r3, r1
 800ac8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac9e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800aca2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	78fb      	ldrb	r3, [r7, #3]
 800acae:	011b      	lsls	r3, r3, #4
 800acb0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800acb4:	68f9      	ldr	r1, [r7, #12]
 800acb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800acba:	4313      	orrs	r3, r2
 800acbc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800acbe:	2300      	movs	r3, #0
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3714      	adds	r7, #20
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800accc:	b480      	push	{r7}
 800acce:	b085      	sub	sp, #20
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	68fa      	ldr	r2, [r7, #12]
 800ace2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ace6:	f023 0303 	bic.w	r3, r3, #3
 800acea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	68fa      	ldr	r2, [r7, #12]
 800acf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800acfa:	f023 0302 	bic.w	r3, r3, #2
 800acfe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad00:	2300      	movs	r3, #0
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3714      	adds	r7, #20
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr

0800ad0e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ad0e:	b480      	push	{r7}
 800ad10:	b085      	sub	sp, #20
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	68fa      	ldr	r2, [r7, #12]
 800ad24:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ad28:	f023 0303 	bic.w	r3, r3, #3
 800ad2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	68fa      	ldr	r2, [r7, #12]
 800ad38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ad3c:	f043 0302 	orr.w	r3, r3, #2
 800ad40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad42:	2300      	movs	r3, #0
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3714      	adds	r7, #20
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr

0800ad50 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b085      	sub	sp, #20
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	695b      	ldr	r3, [r3, #20]
 800ad5c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	699b      	ldr	r3, [r3, #24]
 800ad62:	68fa      	ldr	r2, [r7, #12]
 800ad64:	4013      	ands	r3, r2
 800ad66:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ad68:	68fb      	ldr	r3, [r7, #12]
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3714      	adds	r7, #20
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad74:	4770      	bx	lr

0800ad76 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad76:	b480      	push	{r7}
 800ad78:	b085      	sub	sp, #20
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad88:	699b      	ldr	r3, [r3, #24]
 800ad8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad92:	69db      	ldr	r3, [r3, #28]
 800ad94:	68ba      	ldr	r2, [r7, #8]
 800ad96:	4013      	ands	r3, r2
 800ad98:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	0c1b      	lsrs	r3, r3, #16
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3714      	adds	r7, #20
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr

0800adaa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800adaa:	b480      	push	{r7}
 800adac:	b085      	sub	sp, #20
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adbc:	699b      	ldr	r3, [r3, #24]
 800adbe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adc6:	69db      	ldr	r3, [r3, #28]
 800adc8:	68ba      	ldr	r2, [r7, #8]
 800adca:	4013      	ands	r3, r2
 800adcc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	b29b      	uxth	r3, r3
}
 800add2:	4618      	mov	r0, r3
 800add4:	3714      	adds	r7, #20
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr

0800adde <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800adde:	b480      	push	{r7}
 800ade0:	b085      	sub	sp, #20
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
 800ade6:	460b      	mov	r3, r1
 800ade8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800adee:	78fb      	ldrb	r3, [r7, #3]
 800adf0:	015a      	lsls	r2, r3, #5
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	4413      	add	r3, r2
 800adf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adfa:	689b      	ldr	r3, [r3, #8]
 800adfc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae04:	695b      	ldr	r3, [r3, #20]
 800ae06:	68ba      	ldr	r2, [r7, #8]
 800ae08:	4013      	ands	r3, r2
 800ae0a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ae0c:	68bb      	ldr	r3, [r7, #8]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3714      	adds	r7, #20
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr

0800ae1a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ae1a:	b480      	push	{r7}
 800ae1c:	b087      	sub	sp, #28
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
 800ae22:	460b      	mov	r3, r1
 800ae24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae30:	691b      	ldr	r3, [r3, #16]
 800ae32:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae3c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ae3e:	78fb      	ldrb	r3, [r7, #3]
 800ae40:	f003 030f 	and.w	r3, r3, #15
 800ae44:	68fa      	ldr	r2, [r7, #12]
 800ae46:	fa22 f303 	lsr.w	r3, r2, r3
 800ae4a:	01db      	lsls	r3, r3, #7
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	693a      	ldr	r2, [r7, #16]
 800ae50:	4313      	orrs	r3, r2
 800ae52:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ae54:	78fb      	ldrb	r3, [r7, #3]
 800ae56:	015a      	lsls	r2, r3, #5
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	4413      	add	r3, r2
 800ae5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	693a      	ldr	r2, [r7, #16]
 800ae64:	4013      	ands	r3, r2
 800ae66:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ae68:	68bb      	ldr	r3, [r7, #8]
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	371c      	adds	r7, #28
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae74:	4770      	bx	lr

0800ae76 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ae76:	b480      	push	{r7}
 800ae78:	b083      	sub	sp, #12
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	695b      	ldr	r3, [r3, #20]
 800ae82:	f003 0301 	and.w	r3, r3, #1
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	370c      	adds	r7, #12
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr
	...

0800ae94 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b085      	sub	sp, #20
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeae:	4619      	mov	r1, r3
 800aeb0:	4b09      	ldr	r3, [pc, #36]	; (800aed8 <USB_ActivateSetup+0x44>)
 800aeb2:	4013      	ands	r3, r2
 800aeb4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	68fa      	ldr	r2, [r7, #12]
 800aec0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aec8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aeca:	2300      	movs	r3, #0
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3714      	adds	r7, #20
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr
 800aed8:	fffff800 	.word	0xfffff800

0800aedc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800aedc:	b480      	push	{r7}
 800aede:	b087      	sub	sp, #28
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	460b      	mov	r3, r1
 800aee6:	607a      	str	r2, [r7, #4]
 800aee8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	333c      	adds	r3, #60	; 0x3c
 800aef2:	3304      	adds	r3, #4
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	4a26      	ldr	r2, [pc, #152]	; (800af94 <USB_EP0_OutStart+0xb8>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d90a      	bls.n	800af16 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af10:	d101      	bne.n	800af16 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800af12:	2300      	movs	r3, #0
 800af14:	e037      	b.n	800af86 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af1c:	461a      	mov	r2, r3
 800af1e:	2300      	movs	r3, #0
 800af20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af28:	691b      	ldr	r3, [r3, #16]
 800af2a:	697a      	ldr	r2, [r7, #20]
 800af2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af3c:	691b      	ldr	r3, [r3, #16]
 800af3e:	697a      	ldr	r2, [r7, #20]
 800af40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af44:	f043 0318 	orr.w	r3, r3, #24
 800af48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af50:	691b      	ldr	r3, [r3, #16]
 800af52:	697a      	ldr	r2, [r7, #20]
 800af54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af58:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800af5c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800af5e:	7afb      	ldrb	r3, [r7, #11]
 800af60:	2b01      	cmp	r3, #1
 800af62:	d10f      	bne.n	800af84 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af6a:	461a      	mov	r2, r3
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	697a      	ldr	r2, [r7, #20]
 800af7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af7e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800af82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af84:	2300      	movs	r3, #0
}
 800af86:	4618      	mov	r0, r3
 800af88:	371c      	adds	r7, #28
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr
 800af92:	bf00      	nop
 800af94:	4f54300a 	.word	0x4f54300a

0800af98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800af98:	b480      	push	{r7}
 800af9a:	b085      	sub	sp, #20
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800afa0:	2300      	movs	r3, #0
 800afa2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	3301      	adds	r3, #1
 800afa8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	4a13      	ldr	r2, [pc, #76]	; (800affc <USB_CoreReset+0x64>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d901      	bls.n	800afb6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800afb2:	2303      	movs	r3, #3
 800afb4:	e01b      	b.n	800afee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	691b      	ldr	r3, [r3, #16]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	daf2      	bge.n	800afa4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800afbe:	2300      	movs	r3, #0
 800afc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	691b      	ldr	r3, [r3, #16]
 800afc6:	f043 0201 	orr.w	r2, r3, #1
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	3301      	adds	r3, #1
 800afd2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	4a09      	ldr	r2, [pc, #36]	; (800affc <USB_CoreReset+0x64>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d901      	bls.n	800afe0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800afdc:	2303      	movs	r3, #3
 800afde:	e006      	b.n	800afee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	691b      	ldr	r3, [r3, #16]
 800afe4:	f003 0301 	and.w	r3, r3, #1
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d0f0      	beq.n	800afce <USB_CoreReset+0x36>

  return HAL_OK;
 800afec:	2300      	movs	r3, #0
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3714      	adds	r7, #20
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr
 800affa:	bf00      	nop
 800affc:	00030d40 	.word	0x00030d40

0800b000 <HiL_Init_MSGQ>:
#include "HiL_MSGQ.h"

extern osMessageQueueId_t USB_MSGQ_Rx;
//extern osMessageQueueId_t USB_MSGQ_Tx;		//Not currently in use.

uint8_t HiL_Init_MSGQ (void) {
 800b000:	b580      	push	{r7, lr}
 800b002:	af00      	add	r7, sp, #0

	USB_MSGQ_Rx = osMessageQueueNew(HiL_USB_MSQG_len, sizeof(MSGQ_obj), NULL);
 800b004:	2200      	movs	r2, #0
 800b006:	2104      	movs	r1, #4
 800b008:	200a      	movs	r0, #10
 800b00a:	f002 fdfd 	bl	800dc08 <osMessageQueueNew>
 800b00e:	4603      	mov	r3, r0
 800b010:	4a05      	ldr	r2, [pc, #20]	; (800b028 <HiL_Init_MSGQ+0x28>)
 800b012:	6013      	str	r3, [r2, #0]
  if (USB_MSGQ_Rx == NULL) {
 800b014:	4b04      	ldr	r3, [pc, #16]	; (800b028 <HiL_Init_MSGQ+0x28>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d101      	bne.n	800b020 <HiL_Init_MSGQ+0x20>
	  return -1;
 800b01c:	23ff      	movs	r3, #255	; 0xff
 800b01e:	e000      	b.n	800b022 <HiL_Init_MSGQ+0x22>
  }
//  USB_MSGQ_Tx = osMessageQueueNew(HiL_USB_MSQG_len, sizeof(MSGQ_obj), NULL);
//    if (USB_MSGQ_Tx == NULL) {
//  	  return -1;
//    }
  return 0;
 800b020:	2300      	movs	r3, #0
}
 800b022:	4618      	mov	r0, r3
 800b024:	bd80      	pop	{r7, pc}
 800b026:	bf00      	nop
 800b028:	20000784 	.word	0x20000784

0800b02c <HAL_TIM_IC_CaptureCallback>:
extern SPI_HandleTypeDef hspi1;
extern void MX_SPI1_Init();



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {						// Timer callback code on interrupts from rising edges
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b082      	sub	sp, #8
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	4a10      	ldr	r2, [pc, #64]	; (800b07c <HAL_TIM_IC_CaptureCallback+0x50>)
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d11a      	bne.n	800b074 <HAL_TIM_IC_CaptureCallback+0x48>
		// Used for duty cycle measurements

		// APB2 Timer Clock. With 96 MHz, 16 bit res -> Reload/wraparound freq @ 1464 Hz
												  // -> Tested lowest reliably measureable pwm freq is 1.7 kHz

		Cnt_full = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) + 1;			//+1 to avoid possible division by 0 in duty cycle calculation.
 800b03e:	2100      	movs	r1, #0
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f7fc fd33 	bl	8007aac <HAL_TIM_ReadCapturedValue>
 800b046:	4603      	mov	r3, r0
 800b048:	3301      	adds	r3, #1
 800b04a:	4a0d      	ldr	r2, [pc, #52]	; (800b080 <HAL_TIM_IC_CaptureCallback+0x54>)
 800b04c:	6013      	str	r3, [r2, #0]
		Cnt_high = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800b04e:	2104      	movs	r1, #4
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f7fc fd2b 	bl	8007aac <HAL_TIM_ReadCapturedValue>
 800b056:	4603      	mov	r3, r0
 800b058:	4a0a      	ldr	r2, [pc, #40]	; (800b084 <HAL_TIM_IC_CaptureCallback+0x58>)
 800b05a:	6013      	str	r3, [r2, #0]

		Duty =  100 * Cnt_high / Cnt_full;
 800b05c:	4b09      	ldr	r3, [pc, #36]	; (800b084 <HAL_TIM_IC_CaptureCallback+0x58>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2264      	movs	r2, #100	; 0x64
 800b062:	fb03 f202 	mul.w	r2, r3, r2
 800b066:	4b06      	ldr	r3, [pc, #24]	; (800b080 <HAL_TIM_IC_CaptureCallback+0x54>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b06e:	b2da      	uxtb	r2, r3
 800b070:	4b05      	ldr	r3, [pc, #20]	; (800b088 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800b072:	701a      	strb	r2, [r3, #0]
	}
}
 800b074:	bf00      	nop
 800b076:	3708      	adds	r7, #8
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}
 800b07c:	40010000 	.word	0x40010000
 800b080:	2000086c 	.word	0x2000086c
 800b084:	20000870 	.word	0x20000870
 800b088:	20000874 	.word	0x20000874

0800b08c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	460b      	mov	r3, r1
 800b096:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == UART7)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a08      	ldr	r2, [pc, #32]	; (800b0c0 <HAL_UARTEx_RxEventCallback+0x34>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d10a      	bne.n	800b0b8 <HAL_UARTEx_RxEventCallback+0x2c>
	{
		memcpy(uart_main_buffer,uart_rx_buffer,Size);
 800b0a2:	887b      	ldrh	r3, [r7, #2]
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	4907      	ldr	r1, [pc, #28]	; (800b0c4 <HAL_UARTEx_RxEventCallback+0x38>)
 800b0a8:	4807      	ldr	r0, [pc, #28]	; (800b0c8 <HAL_UARTEx_RxEventCallback+0x3c>)
 800b0aa:	f006 fdff 	bl	8011cac <memcpy>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart7, uart_rx_buffer, HIL_UART_BUFFER_SIZE);
 800b0ae:	2280      	movs	r2, #128	; 0x80
 800b0b0:	4904      	ldr	r1, [pc, #16]	; (800b0c4 <HAL_UARTEx_RxEventCallback+0x38>)
 800b0b2:	4806      	ldr	r0, [pc, #24]	; (800b0cc <HAL_UARTEx_RxEventCallback+0x40>)
 800b0b4:	f7fe fb04 	bl	80096c0 <HAL_UARTEx_ReceiveToIdle_DMA>
	}

}
 800b0b8:	bf00      	nop
 800b0ba:	3708      	adds	r7, #8
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	40007800 	.word	0x40007800
 800b0c4:	20000790 	.word	0x20000790
 800b0c8:	2000000c 	.word	0x2000000c
 800b0cc:	2000063c 	.word	0x2000063c

0800b0d0 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b082      	sub	sp, #8
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
	//printf("hello from spi complete\n\r");
	//printf("error %ld\n\r", hspi->ErrorCode);
	osSemaphoreRelease(LightOnSemHandle);
 800b0d8:	4b04      	ldr	r3, [pc, #16]	; (800b0ec <HAL_SPI_RxCpltCallback+0x1c>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f002 fd3b 	bl	800db58 <osSemaphoreRelease>

}
 800b0e2:	bf00      	nop
 800b0e4:	3708      	adds	r7, #8
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
 800b0ea:	bf00      	nop
 800b0ec:	20000730 	.word	0x20000730

0800b0f0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	80fb      	strh	r3, [r7, #6]
	//Used to handle reset of the MCU board that is being tested. Without it, bit shift occurs in SPI-communication.


	if(GPIO_Pin & HiL_595_Reset_Pin){
 800b0fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	da15      	bge.n	800b12e <HAL_GPIO_EXTI_Callback+0x3e>


		HAL_SPI_DMAStop(&hspi1);
 800b102:	480d      	ldr	r0, [pc, #52]	; (800b138 <HAL_GPIO_EXTI_Callback+0x48>)
 800b104:	f7fb fa0e 	bl	8006524 <HAL_SPI_DMAStop>

		__HAL_RCC_SPI1_FORCE_RESET();
 800b108:	4b0c      	ldr	r3, [pc, #48]	; (800b13c <HAL_GPIO_EXTI_Callback+0x4c>)
 800b10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b10c:	4a0b      	ldr	r2, [pc, #44]	; (800b13c <HAL_GPIO_EXTI_Callback+0x4c>)
 800b10e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b112:	6253      	str	r3, [r2, #36]	; 0x24
		__HAL_RCC_SPI1_RELEASE_RESET();
 800b114:	4b09      	ldr	r3, [pc, #36]	; (800b13c <HAL_GPIO_EXTI_Callback+0x4c>)
 800b116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b118:	4a08      	ldr	r2, [pc, #32]	; (800b13c <HAL_GPIO_EXTI_Callback+0x4c>)
 800b11a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b11e:	6253      	str	r3, [r2, #36]	; 0x24

		MX_SPI1_Init();			//Requires that function declaration in main is NOT static!
 800b120:	f7f5 fc48 	bl	80009b4 <MX_SPI1_Init>
		HAL_SPI_Receive_DMA(&hspi1, temp_light_state, sizeof(temp_light_state));
 800b124:	2203      	movs	r2, #3
 800b126:	4906      	ldr	r1, [pc, #24]	; (800b140 <HAL_GPIO_EXTI_Callback+0x50>)
 800b128:	4803      	ldr	r0, [pc, #12]	; (800b138 <HAL_GPIO_EXTI_Callback+0x48>)
 800b12a:	f7fa ff4b 	bl	8005fc4 <HAL_SPI_Receive_DMA>

	}
}
 800b12e:	bf00      	nop
 800b130:	3708      	adds	r7, #8
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	200004c8 	.word	0x200004c8
 800b13c:	40023800 	.word	0x40023800
 800b140:	2000078c 	.word	0x2000078c

0800b144 <HiL_controller_copy_array>:

static uint8_t recieved_data[HiL_MSGQ_Buf_arr_len];
	   uint8_t controller_reply[2];

void HiL_controller_copy_array(uint8_t* to_be_copied)
{
 800b144:	b480      	push	{r7}
 800b146:	b085      	sub	sp, #20
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i<HiL_MSGQ_Buf_arr_len; i++)
 800b14c:	2300      	movs	r3, #0
 800b14e:	73fb      	strb	r3, [r7, #15]
 800b150:	e009      	b.n	800b166 <HiL_controller_copy_array+0x22>
	{
		recieved_data[i] = to_be_copied[i];
 800b152:	7bfb      	ldrb	r3, [r7, #15]
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	441a      	add	r2, r3
 800b158:	7bfb      	ldrb	r3, [r7, #15]
 800b15a:	7811      	ldrb	r1, [r2, #0]
 800b15c:	4a07      	ldr	r2, [pc, #28]	; (800b17c <HiL_controller_copy_array+0x38>)
 800b15e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i<HiL_MSGQ_Buf_arr_len; i++)
 800b160:	7bfb      	ldrb	r3, [r7, #15]
 800b162:	3301      	adds	r3, #1
 800b164:	73fb      	strb	r3, [r7, #15]
 800b166:	7bfb      	ldrb	r3, [r7, #15]
 800b168:	2b03      	cmp	r3, #3
 800b16a:	d9f2      	bls.n	800b152 <HiL_controller_copy_array+0xe>
	}
}
 800b16c:	bf00      	nop
 800b16e:	bf00      	nop
 800b170:	3714      	adds	r7, #20
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr
 800b17a:	bf00      	nop
 800b17c:	20000878 	.word	0x20000878

0800b180 <HiL_controller_read_message>:

//parses message, and tries to execute commands.
void HiL_controller_read_message(uint8_t* recieved_data)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b082      	sub	sp, #8
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
	//reset status array
	controller_reply[CONTROLLER_VALUE1] = 0;
 800b188:	4b32      	ldr	r3, [pc, #200]	; (800b254 <HiL_controller_read_message+0xd4>)
 800b18a:	2200      	movs	r2, #0
 800b18c:	701a      	strb	r2, [r3, #0]
	controller_reply[CONTROLLER_VALUE2] = 0;
 800b18e:	4b31      	ldr	r3, [pc, #196]	; (800b254 <HiL_controller_read_message+0xd4>)
 800b190:	2200      	movs	r2, #0
 800b192:	705a      	strb	r2, [r3, #1]

	// gets newest instruction
	HiL_controller_copy_array(recieved_data);
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f7ff ffd5 	bl	800b144 <HiL_controller_copy_array>

	// identify the message content
	switch(recieved_data[CONTROLLER_REQUEST])
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	781b      	ldrb	r3, [r3, #0]
 800b19e:	2b03      	cmp	r3, #3
 800b1a0:	d847      	bhi.n	800b232 <HiL_controller_read_message+0xb2>
 800b1a2:	a201      	add	r2, pc, #4	; (adr r2, 800b1a8 <HiL_controller_read_message+0x28>)
 800b1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1a8:	0800b1b9 	.word	0x0800b1b9
 800b1ac:	0800b1bf 	.word	0x0800b1bf
 800b1b0:	0800b1ed 	.word	0x0800b1ed
 800b1b4:	0800b21b 	.word	0x0800b21b
	{

		case CONTROLLER_REQUEST_GET: 

			HiL_controller_send_message();
 800b1b8:	f000 f84e 	bl	800b258 <HiL_controller_send_message>
			break;
 800b1bc:	e045      	b.n	800b24a <HiL_controller_read_message+0xca>


		case CONTROLLER_REQUEST_ACTUATE:
			
			controller_reply[CONTROLLER_VALUE1] =  HiL_mcu_commands_binary_action(
													recieved_data[CONTROLLER_OBJECT],
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	3301      	adds	r3, #1
			controller_reply[CONTROLLER_VALUE1] =  HiL_mcu_commands_binary_action(
 800b1c2:	781a      	ldrb	r2, [r3, #0]
													recieved_data[CONTROLLER_ACTION1]);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	3302      	adds	r3, #2
			controller_reply[CONTROLLER_VALUE1] =  HiL_mcu_commands_binary_action(
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	4610      	mov	r0, r2
 800b1ce:	f000 f90f 	bl	800b3f0 <HiL_mcu_commands_binary_action>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	461a      	mov	r2, r3
 800b1d6:	4b1f      	ldr	r3, [pc, #124]	; (800b254 <HiL_controller_read_message+0xd4>)
 800b1d8:	701a      	strb	r2, [r3, #0]
			
			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800b1da:	4b1e      	ldr	r3, [pc, #120]	; (800b254 <HiL_controller_read_message+0xd4>)
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	4a1d      	ldr	r2, [pc, #116]	; (800b254 <HiL_controller_read_message+0xd4>)
 800b1e0:	7852      	ldrb	r2, [r2, #1]
 800b1e2:	4611      	mov	r1, r2
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f000 f8c9 	bl	800b37c <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);			
			break;
 800b1ea:	e02e      	b.n	800b24a <HiL_controller_read_message+0xca>

		case CONTROLLER_REQUEST_POTENTIOMETER:
	

			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_potentiometer_emulator(
													recieved_data[CONTROLLER_ACTION1],
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	3302      	adds	r3, #2
			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_potentiometer_emulator(
 800b1f0:	781a      	ldrb	r2, [r3, #0]
													recieved_data[CONTROLLER_ACTION2]);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	3303      	adds	r3, #3
			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_potentiometer_emulator(
 800b1f6:	781b      	ldrb	r3, [r3, #0]
 800b1f8:	4619      	mov	r1, r3
 800b1fa:	4610      	mov	r0, r2
 800b1fc:	f000 f8d4 	bl	800b3a8 <HiL_mcu_commands_potentiometer_emulator>
 800b200:	4603      	mov	r3, r0
 800b202:	461a      	mov	r2, r3
 800b204:	4b13      	ldr	r3, [pc, #76]	; (800b254 <HiL_controller_read_message+0xd4>)
 800b206:	701a      	strb	r2, [r3, #0]

			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800b208:	4b12      	ldr	r3, [pc, #72]	; (800b254 <HiL_controller_read_message+0xd4>)
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	4a11      	ldr	r2, [pc, #68]	; (800b254 <HiL_controller_read_message+0xd4>)
 800b20e:	7852      	ldrb	r2, [r2, #1]
 800b210:	4611      	mov	r1, r2
 800b212:	4618      	mov	r0, r3
 800b214:	f000 f8b2 	bl	800b37c <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);

			break;
 800b218:	e017      	b.n	800b24a <HiL_controller_read_message+0xca>
			

		case CONTROLLER_REQUEST_SHT20:
			
			controller_reply[CONTROLLER_VALUE1] = CONTROLLER_ERROR_NO_SUPPORT;
 800b21a:	4b0e      	ldr	r3, [pc, #56]	; (800b254 <HiL_controller_read_message+0xd4>)
 800b21c:	2202      	movs	r2, #2
 800b21e:	701a      	strb	r2, [r3, #0]

			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800b220:	4b0c      	ldr	r3, [pc, #48]	; (800b254 <HiL_controller_read_message+0xd4>)
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	4a0b      	ldr	r2, [pc, #44]	; (800b254 <HiL_controller_read_message+0xd4>)
 800b226:	7852      	ldrb	r2, [r2, #1]
 800b228:	4611      	mov	r1, r2
 800b22a:	4618      	mov	r0, r3
 800b22c:	f000 f8a6 	bl	800b37c <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);
			
			break;
 800b230:	e00b      	b.n	800b24a <HiL_controller_read_message+0xca>


		default: 

			// Reply with error
			controller_reply[CONTROLLER_VALUE1] = CONTROLLER_ERROR_UNSPECIFIED;
 800b232:	4b08      	ldr	r3, [pc, #32]	; (800b254 <HiL_controller_read_message+0xd4>)
 800b234:	2201      	movs	r2, #1
 800b236:	701a      	strb	r2, [r3, #0]

			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800b238:	4b06      	ldr	r3, [pc, #24]	; (800b254 <HiL_controller_read_message+0xd4>)
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	4a05      	ldr	r2, [pc, #20]	; (800b254 <HiL_controller_read_message+0xd4>)
 800b23e:	7852      	ldrb	r2, [r2, #1]
 800b240:	4611      	mov	r1, r2
 800b242:	4618      	mov	r0, r3
 800b244:	f000 f89a 	bl	800b37c <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);
			
	}	
}
 800b248:	bf00      	nop
 800b24a:	bf00      	nop
 800b24c:	3708      	adds	r7, #8
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}
 800b252:	bf00      	nop
 800b254:	2000087c 	.word	0x2000087c

0800b258 <HiL_controller_send_message>:

void HiL_controller_send_message()
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
	
	switch(recieved_data[CONTROLLER_GET_GROUP])
 800b25e:	4b44      	ldr	r3, [pc, #272]	; (800b370 <HiL_controller_send_message+0x118>)
 800b260:	785b      	ldrb	r3, [r3, #1]
 800b262:	2b04      	cmp	r3, #4
 800b264:	d878      	bhi.n	800b358 <HiL_controller_send_message+0x100>
 800b266:	a201      	add	r2, pc, #4	; (adr r2, 800b26c <HiL_controller_send_message+0x14>)
 800b268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b26c:	0800b281 	.word	0x0800b281
 800b270:	0800b2a5 	.word	0x0800b2a5
 800b274:	0800b359 	.word	0x0800b359
 800b278:	0800b2c3 	.word	0x0800b2c3
 800b27c:	0800b2ff 	.word	0x0800b2ff
	{
		
		case CONTROLLER_GET_GROUP_BINARY:
			
			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_binary_status(recieved_data[CONTROLLER_GET_OBJECT]);
 800b280:	4b3b      	ldr	r3, [pc, #236]	; (800b370 <HiL_controller_send_message+0x118>)
 800b282:	789b      	ldrb	r3, [r3, #2]
 800b284:	4618      	mov	r0, r3
 800b286:	f000 f95d 	bl	800b544 <HiL_mcu_commands_binary_status>
 800b28a:	4603      	mov	r3, r0
 800b28c:	461a      	mov	r2, r3
 800b28e:	4b39      	ldr	r3, [pc, #228]	; (800b374 <HiL_controller_send_message+0x11c>)
 800b290:	701a      	strb	r2, [r3, #0]
			
			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800b292:	4b38      	ldr	r3, [pc, #224]	; (800b374 <HiL_controller_send_message+0x11c>)
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	4a37      	ldr	r2, [pc, #220]	; (800b374 <HiL_controller_send_message+0x11c>)
 800b298:	7852      	ldrb	r2, [r2, #1]
 800b29a:	4611      	mov	r1, r2
 800b29c:	4618      	mov	r0, r3
 800b29e:	f000 f86d 	bl	800b37c <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);
			break;
 800b2a2:	e061      	b.n	800b368 <HiL_controller_send_message+0x110>

		case CONTROLLER_GET_GROUP_PWM:


			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_PWM_measure();
 800b2a4:	f000 f9d8 	bl	800b658 <HiL_mcu_commands_PWM_measure>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	4b31      	ldr	r3, [pc, #196]	; (800b374 <HiL_controller_send_message+0x11c>)
 800b2ae:	701a      	strb	r2, [r3, #0]

			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800b2b0:	4b30      	ldr	r3, [pc, #192]	; (800b374 <HiL_controller_send_message+0x11c>)
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	4a2f      	ldr	r2, [pc, #188]	; (800b374 <HiL_controller_send_message+0x11c>)
 800b2b6:	7852      	ldrb	r2, [r2, #1]
 800b2b8:	4611      	mov	r1, r2
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f000 f85e 	bl	800b37c <HiL_gateway_transmit_message>
										 controller_reply[CONTROLLER_VALUE2]);

			break;
 800b2c0:	e052      	b.n	800b368 <HiL_controller_send_message+0x110>

		case CONTROLLER_GET_GROUP_DATA_STREAMS:

			if (recieved_data[CONTROLLER_GET_OBJECT] == DATA_STREAM_OBJECTS_UART)
 800b2c2:	4b2b      	ldr	r3, [pc, #172]	; (800b370 <HiL_controller_send_message+0x118>)
 800b2c4:	789b      	ldrb	r3, [r3, #2]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d119      	bne.n	800b2fe <HiL_controller_send_message+0xa6>
			{

				uint16_t function_return = HiL_mcu_commands_UART_handler(recieved_data[CONTROLLER_GET_ACTION]);
 800b2ca:	4b29      	ldr	r3, [pc, #164]	; (800b370 <HiL_controller_send_message+0x118>)
 800b2cc:	78db      	ldrb	r3, [r3, #3]
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f000 f9e0 	bl	800b694 <HiL_mcu_commands_UART_handler>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	807b      	strh	r3, [r7, #2]

				controller_reply[CONTROLLER_VALUE1] =  function_return       & 0xff;
 800b2d8:	887b      	ldrh	r3, [r7, #2]
 800b2da:	b2da      	uxtb	r2, r3
 800b2dc:	4b25      	ldr	r3, [pc, #148]	; (800b374 <HiL_controller_send_message+0x11c>)
 800b2de:	701a      	strb	r2, [r3, #0]
				controller_reply[CONTROLLER_VALUE2] = (function_return >> 8) & 0xff;
 800b2e0:	887b      	ldrh	r3, [r7, #2]
 800b2e2:	0a1b      	lsrs	r3, r3, #8
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	b2da      	uxtb	r2, r3
 800b2e8:	4b22      	ldr	r3, [pc, #136]	; (800b374 <HiL_controller_send_message+0x11c>)
 800b2ea:	705a      	strb	r2, [r3, #1]

				HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800b2ec:	4b21      	ldr	r3, [pc, #132]	; (800b374 <HiL_controller_send_message+0x11c>)
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	4a20      	ldr	r2, [pc, #128]	; (800b374 <HiL_controller_send_message+0x11c>)
 800b2f2:	7852      	ldrb	r2, [r2, #1]
 800b2f4:	4611      	mov	r1, r2
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f000 f840 	bl	800b37c <HiL_gateway_transmit_message>
										     controller_reply[CONTROLLER_VALUE2]);

				break;
 800b2fc:	e034      	b.n	800b368 <HiL_controller_send_message+0x110>

		case CONTROLLER_GET_GROUP_TRAFFIC_LIGHTS:

			{

			uint32_t light_state_variable  = light_state[0];
 800b2fe:	4b1e      	ldr	r3, [pc, #120]	; (800b378 <HiL_controller_send_message+0x120>)
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	607b      	str	r3, [r7, #4]
					 light_state_variable |= light_state[1] << 6;
 800b304:	4b1c      	ldr	r3, [pc, #112]	; (800b378 <HiL_controller_send_message+0x120>)
 800b306:	785b      	ldrb	r3, [r3, #1]
 800b308:	019b      	lsls	r3, r3, #6
 800b30a:	461a      	mov	r2, r3
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	4313      	orrs	r3, r2
 800b310:	607b      	str	r3, [r7, #4]
					 light_state_variable |= light_state[2] << 12;
 800b312:	4b19      	ldr	r3, [pc, #100]	; (800b378 <HiL_controller_send_message+0x120>)
 800b314:	789b      	ldrb	r3, [r3, #2]
 800b316:	031b      	lsls	r3, r3, #12
 800b318:	461a      	mov	r2, r3
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	4313      	orrs	r3, r2
 800b31e:	607b      	str	r3, [r7, #4]

			if (recieved_data[CONTROLLER_GET_OBJECT] == 1)
 800b320:	4b13      	ldr	r3, [pc, #76]	; (800b370 <HiL_controller_send_message+0x118>)
 800b322:	789b      	ldrb	r3, [r3, #2]
 800b324:	2b01      	cmp	r3, #1
 800b326:	d102      	bne.n	800b32e <HiL_controller_send_message+0xd6>
			{
				light_state_variable = light_state_variable >> 9;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	0a5b      	lsrs	r3, r3, #9
 800b32c:	607b      	str	r3, [r7, #4]
			}
					//Compacting the data to take away the don't care conditions.
			controller_reply[CONTROLLER_VALUE1] = light_state_variable & 0xff;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	b2da      	uxtb	r2, r3
 800b332:	4b10      	ldr	r3, [pc, #64]	; (800b374 <HiL_controller_send_message+0x11c>)
 800b334:	701a      	strb	r2, [r3, #0]
			controller_reply[CONTROLLER_VALUE2] = (light_state_variable >> 8) & 1;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	0a1b      	lsrs	r3, r3, #8
 800b33a:	b2db      	uxtb	r3, r3
 800b33c:	f003 0301 	and.w	r3, r3, #1
 800b340:	b2da      	uxtb	r2, r3
 800b342:	4b0c      	ldr	r3, [pc, #48]	; (800b374 <HiL_controller_send_message+0x11c>)
 800b344:	705a      	strb	r2, [r3, #1]


			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800b346:	4b0b      	ldr	r3, [pc, #44]	; (800b374 <HiL_controller_send_message+0x11c>)
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	4a0a      	ldr	r2, [pc, #40]	; (800b374 <HiL_controller_send_message+0x11c>)
 800b34c:	7852      	ldrb	r2, [r2, #1]
 800b34e:	4611      	mov	r1, r2
 800b350:	4618      	mov	r0, r3
 800b352:	f000 f813 	bl	800b37c <HiL_gateway_transmit_message>
										 controller_reply[CONTROLLER_VALUE2]);

				break;
 800b356:	e007      	b.n	800b368 <HiL_controller_send_message+0x110>



		default:
			// Reply with error
			controller_reply[CONTROLLER_VALUE1] = CONTROLLER_ERROR_NO_SUPPORT;
 800b358:	4b06      	ldr	r3, [pc, #24]	; (800b374 <HiL_controller_send_message+0x11c>)
 800b35a:	2202      	movs	r2, #2
 800b35c:	701a      	strb	r2, [r3, #0]
			HiL_gateway_transmit_message(0,32);
 800b35e:	2120      	movs	r1, #32
 800b360:	2000      	movs	r0, #0
 800b362:	f000 f80b 	bl	800b37c <HiL_gateway_transmit_message>
	}
}
 800b366:	bf00      	nop
 800b368:	bf00      	nop
 800b36a:	3708      	adds	r7, #8
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}
 800b370:	20000878 	.word	0x20000878
 800b374:	2000087c 	.word	0x2000087c
 800b378:	20000788 	.word	0x20000788

0800b37c <HiL_gateway_transmit_message>:


#include "HiL_gateway.h"

void HiL_gateway_transmit_message(uint8_t value1, uint8_t value2)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
 800b382:	4603      	mov	r3, r0
 800b384:	460a      	mov	r2, r1
 800b386:	71fb      	strb	r3, [r7, #7]
 800b388:	4613      	mov	r3, r2
 800b38a:	71bb      	strb	r3, [r7, #6]
	uint8_t values[2];
	values[0] = value1;
 800b38c:	79fb      	ldrb	r3, [r7, #7]
 800b38e:	733b      	strb	r3, [r7, #12]
	values[1] = value2;
 800b390:	79bb      	ldrb	r3, [r7, #6]
 800b392:	737b      	strb	r3, [r7, #13]

	//Using USB communication:
	CDC_Transmit_FS(values, sizeof(values));		// Transmit what's been recieved in our msg queue
 800b394:	f107 030c 	add.w	r3, r7, #12
 800b398:	2102      	movs	r1, #2
 800b39a:	4618      	mov	r0, r3
 800b39c:	f005 ff82 	bl	80112a4 <CDC_Transmit_FS>
}
 800b3a0:	bf00      	nop
 800b3a2:	3710      	adds	r7, #16
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <HiL_mcu_commands_potentiometer_emulator>:
uint8_t uart_main_buffer_pointer = 0;



uint8_t HiL_mcu_commands_potentiometer_emulator(uint8_t value1, uint8_t value2)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	460a      	mov	r2, r1
 800b3b2:	71fb      	strb	r3, [r7, #7]
 800b3b4:	4613      	mov	r3, r2
 800b3b6:	71bb      	strb	r3, [r7, #6]

	uint16_t desired_output_voltage = value1 + (value2 << 8);
 800b3b8:	79fb      	ldrb	r3, [r7, #7]
 800b3ba:	b29a      	uxth	r2, r3
 800b3bc:	79bb      	ldrb	r3, [r7, #6]
 800b3be:	b29b      	uxth	r3, r3
 800b3c0:	021b      	lsls	r3, r3, #8
 800b3c2:	b29b      	uxth	r3, r3
 800b3c4:	4413      	add	r3, r2
 800b3c6:	81fb      	strh	r3, [r7, #14]

	if( (desired_output_voltage < 0) || (desired_output_voltage > 4095) ){
 800b3c8:	89fb      	ldrh	r3, [r7, #14]
 800b3ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3ce:	d301      	bcc.n	800b3d4 <HiL_mcu_commands_potentiometer_emulator+0x2c>
		return 3; //error: out of bounds
 800b3d0:	2303      	movs	r3, #3
 800b3d2:	e006      	b.n	800b3e2 <HiL_mcu_commands_potentiometer_emulator+0x3a>
	}

	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, desired_output_voltage);
 800b3d4:	89fb      	ldrh	r3, [r7, #14]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	2100      	movs	r1, #0
 800b3da:	4804      	ldr	r0, [pc, #16]	; (800b3ec <HiL_mcu_commands_potentiometer_emulator+0x44>)
 800b3dc:	f7f6 fe3a 	bl	8002054 <HAL_DAC_SetValue>
	return 0;
 800b3e0:	2300      	movs	r3, #0
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3710      	adds	r7, #16
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
 800b3ea:	bf00      	nop
 800b3ec:	200003b0 	.word	0x200003b0

0800b3f0 <HiL_mcu_commands_binary_action>:


uint8_t HiL_mcu_commands_binary_action (uint8_t binary_object, uint8_t desired_state)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b084      	sub	sp, #16
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	460a      	mov	r2, r1
 800b3fa:	71fb      	strb	r3, [r7, #7]
 800b3fc:	4613      	mov	r3, r2
 800b3fe:	71bb      	strb	r3, [r7, #6]

	GPIO_PinState pin_state;
	
	if (desired_state == ON)
 800b400:	79bb      	ldrb	r3, [r7, #6]
 800b402:	2b01      	cmp	r3, #1
 800b404:	d102      	bne.n	800b40c <HiL_mcu_commands_binary_action+0x1c>
	{
		pin_state = GPIO_PIN_SET;
 800b406:	2301      	movs	r3, #1
 800b408:	73fb      	strb	r3, [r7, #15]
 800b40a:	e007      	b.n	800b41c <HiL_mcu_commands_binary_action+0x2c>
	}
	else if (desired_state == OFF)
 800b40c:	79bb      	ldrb	r3, [r7, #6]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d102      	bne.n	800b418 <HiL_mcu_commands_binary_action+0x28>
	{
		pin_state = GPIO_PIN_RESET;
 800b412:	2300      	movs	r3, #0
 800b414:	73fb      	strb	r3, [r7, #15]
 800b416:	e001      	b.n	800b41c <HiL_mcu_commands_binary_action+0x2c>
	}
	else
	{
		return CONTROLLER_ERROR_BAD_REQUEST; // Invalid state indication
 800b418:	2303      	movs	r3, #3
 800b41a:	e082      	b.n	800b522 <HiL_mcu_commands_binary_action+0x132>
	}

	switch (binary_object)
 800b41c:	79fb      	ldrb	r3, [r7, #7]
 800b41e:	2b0c      	cmp	r3, #12
 800b420:	d87c      	bhi.n	800b51c <HiL_mcu_commands_binary_action+0x12c>
 800b422:	a201      	add	r2, pc, #4	; (adr r2, 800b428 <HiL_mcu_commands_binary_action+0x38>)
 800b424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b428:	0800b45d 	.word	0x0800b45d
 800b42c:	0800b46d 	.word	0x0800b46d
 800b430:	0800b47d 	.word	0x0800b47d
 800b434:	0800b48b 	.word	0x0800b48b
 800b438:	0800b49b 	.word	0x0800b49b
 800b43c:	0800b4a9 	.word	0x0800b4a9
 800b440:	0800b4b7 	.word	0x0800b4b7
 800b444:	0800b4c5 	.word	0x0800b4c5
 800b448:	0800b4d3 	.word	0x0800b4d3
 800b44c:	0800b4e1 	.word	0x0800b4e1
 800b450:	0800b4f1 	.word	0x0800b4f1
 800b454:	0800b4ff 	.word	0x0800b4ff
 800b458:	0800b50f 	.word	0x0800b50f
	{

		case HiL_SW5:
			HAL_GPIO_WritePin(HiL_SW5_GPIO_Port, HiL_SW5_Pin, pin_state);
 800b45c:	7bfb      	ldrb	r3, [r7, #15]
 800b45e:	461a      	mov	r2, r3
 800b460:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b464:	4831      	ldr	r0, [pc, #196]	; (800b52c <HiL_mcu_commands_binary_action+0x13c>)
 800b466:	f7f7 ff71 	bl	800334c <HAL_GPIO_WritePin>
			break;
 800b46a:	e059      	b.n	800b520 <HiL_mcu_commands_binary_action+0x130>

		case HiL_SW6:
			HAL_GPIO_WritePin(HiL_SW6_GPIO_Port, HiL_SW6_Pin, pin_state);
 800b46c:	7bfb      	ldrb	r3, [r7, #15]
 800b46e:	461a      	mov	r2, r3
 800b470:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b474:	482d      	ldr	r0, [pc, #180]	; (800b52c <HiL_mcu_commands_binary_action+0x13c>)
 800b476:	f7f7 ff69 	bl	800334c <HAL_GPIO_WritePin>
			break;
 800b47a:	e051      	b.n	800b520 <HiL_mcu_commands_binary_action+0x130>

		case HiL_SW7:
			HAL_GPIO_WritePin(HiL_SW7_GPIO_Port, HiL_SW7_Pin, pin_state);
 800b47c:	7bfb      	ldrb	r3, [r7, #15]
 800b47e:	461a      	mov	r2, r3
 800b480:	2110      	movs	r1, #16
 800b482:	482a      	ldr	r0, [pc, #168]	; (800b52c <HiL_mcu_commands_binary_action+0x13c>)
 800b484:	f7f7 ff62 	bl	800334c <HAL_GPIO_WritePin>
			break;
 800b488:	e04a      	b.n	800b520 <HiL_mcu_commands_binary_action+0x130>

		case HiL_SW8:
			HAL_GPIO_WritePin(HiL_SW8_GPIO_Port, HiL_SW8_Pin, pin_state);
 800b48a:	7bfb      	ldrb	r3, [r7, #15]
 800b48c:	461a      	mov	r2, r3
 800b48e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b492:	4826      	ldr	r0, [pc, #152]	; (800b52c <HiL_mcu_commands_binary_action+0x13c>)
 800b494:	f7f7 ff5a 	bl	800334c <HAL_GPIO_WritePin>
			break;
 800b498:	e042      	b.n	800b520 <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_A:
			HAL_GPIO_WritePin(HiL_button3_A_GPIO_Port, HiL_button3_A_Pin, pin_state);
 800b49a:	7bfb      	ldrb	r3, [r7, #15]
 800b49c:	461a      	mov	r2, r3
 800b49e:	2108      	movs	r1, #8
 800b4a0:	4823      	ldr	r0, [pc, #140]	; (800b530 <HiL_mcu_commands_binary_action+0x140>)
 800b4a2:	f7f7 ff53 	bl	800334c <HAL_GPIO_WritePin>
			break;
 800b4a6:	e03b      	b.n	800b520 <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_B:
			HAL_GPIO_WritePin(HiL_button3_B_GPIO_Port, HiL_button3_B_Pin, pin_state);
 800b4a8:	7bfb      	ldrb	r3, [r7, #15]
 800b4aa:	461a      	mov	r2, r3
 800b4ac:	2104      	movs	r1, #4
 800b4ae:	4820      	ldr	r0, [pc, #128]	; (800b530 <HiL_mcu_commands_binary_action+0x140>)
 800b4b0:	f7f7 ff4c 	bl	800334c <HAL_GPIO_WritePin>
			break;
 800b4b4:	e034      	b.n	800b520 <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_C:
			HAL_GPIO_WritePin(HiL_button3_C_GPIO_Port, HiL_button3_C_Pin, pin_state);
 800b4b6:	7bfb      	ldrb	r3, [r7, #15]
 800b4b8:	461a      	mov	r2, r3
 800b4ba:	2110      	movs	r1, #16
 800b4bc:	481d      	ldr	r0, [pc, #116]	; (800b534 <HiL_mcu_commands_binary_action+0x144>)
 800b4be:	f7f7 ff45 	bl	800334c <HAL_GPIO_WritePin>
			break;
 800b4c2:	e02d      	b.n	800b520 <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_D:
			HAL_GPIO_WritePin(HiL_button3_D_GPIO_Port, HiL_button3_D_Pin, pin_state);
 800b4c4:	7bfb      	ldrb	r3, [r7, #15]
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	2120      	movs	r1, #32
 800b4ca:	481a      	ldr	r0, [pc, #104]	; (800b534 <HiL_mcu_commands_binary_action+0x144>)
 800b4cc:	f7f7 ff3e 	bl	800334c <HAL_GPIO_WritePin>
			break;
 800b4d0:	e026      	b.n	800b520 <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_center:
			HAL_GPIO_WritePin(HiL_button3_center_GPIO_Port, HiL_button3_center_Pin, pin_state);
 800b4d2:	7bfb      	ldrb	r3, [r7, #15]
 800b4d4:	461a      	mov	r2, r3
 800b4d6:	2140      	movs	r1, #64	; 0x40
 800b4d8:	4816      	ldr	r0, [pc, #88]	; (800b534 <HiL_mcu_commands_binary_action+0x144>)
 800b4da:	f7f7 ff37 	bl	800334c <HAL_GPIO_WritePin>
			break;
 800b4de:	e01f      	b.n	800b520 <HiL_mcu_commands_binary_action+0x130>

		case HiL_TL1_Car:
			HAL_GPIO_WritePin(HiL_TL1_Car_GPIO_Port, HiL_TL1_Car_Pin, pin_state);
 800b4e0:	7bfb      	ldrb	r3, [r7, #15]
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b4e8:	4813      	ldr	r0, [pc, #76]	; (800b538 <HiL_mcu_commands_binary_action+0x148>)
 800b4ea:	f7f7 ff2f 	bl	800334c <HAL_GPIO_WritePin>
			break;
 800b4ee:	e017      	b.n	800b520 <HiL_mcu_commands_binary_action+0x130>

		case HiL_TL2_Car:
			HAL_GPIO_WritePin(HiL_TL2_Car_GPIO_Port, HiL_TL2_Car_Pin, pin_state);
 800b4f0:	7bfb      	ldrb	r3, [r7, #15]
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	2180      	movs	r1, #128	; 0x80
 800b4f6:	4811      	ldr	r0, [pc, #68]	; (800b53c <HiL_mcu_commands_binary_action+0x14c>)
 800b4f8:	f7f7 ff28 	bl	800334c <HAL_GPIO_WritePin>
			break;
 800b4fc:	e010      	b.n	800b520 <HiL_mcu_commands_binary_action+0x130>

		case HiL_TL3_Car:
			HAL_GPIO_WritePin(HiL_TL3_Car_GPIO_Port, HiL_TL3_Car_Pin, pin_state);
 800b4fe:	7bfb      	ldrb	r3, [r7, #15]
 800b500:	461a      	mov	r2, r3
 800b502:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b506:	480e      	ldr	r0, [pc, #56]	; (800b540 <HiL_mcu_commands_binary_action+0x150>)
 800b508:	f7f7 ff20 	bl	800334c <HAL_GPIO_WritePin>
			break;
 800b50c:	e008      	b.n	800b520 <HiL_mcu_commands_binary_action+0x130>

		case HiL_TL4_Car:
			HAL_GPIO_WritePin(HiL_TL4_Car_GPIO_Port, HiL_TL4_Car_Pin, pin_state);
 800b50e:	7bfb      	ldrb	r3, [r7, #15]
 800b510:	461a      	mov	r2, r3
 800b512:	2104      	movs	r1, #4
 800b514:	4807      	ldr	r0, [pc, #28]	; (800b534 <HiL_mcu_commands_binary_action+0x144>)
 800b516:	f7f7 ff19 	bl	800334c <HAL_GPIO_WritePin>
			break;
 800b51a:	e001      	b.n	800b520 <HiL_mcu_commands_binary_action+0x130>


		default:
			return CONTROLLER_ERROR_NO_SUPPORT; // Switch not currently supported
 800b51c:	2302      	movs	r3, #2
 800b51e:	e000      	b.n	800b522 <HiL_mcu_commands_binary_action+0x132>

	}

	return 0; // Function returned successfully 
 800b520:	2300      	movs	r3, #0
	
}
 800b522:	4618      	mov	r0, r3
 800b524:	3710      	adds	r7, #16
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	40020400 	.word	0x40020400
 800b530:	40021800 	.word	0x40021800
 800b534:	40020c00 	.word	0x40020c00
 800b538:	40020800 	.word	0x40020800
 800b53c:	40021400 	.word	0x40021400
 800b540:	40020000 	.word	0x40020000

0800b544 <HiL_mcu_commands_binary_status>:

uint8_t HiL_mcu_commands_binary_status (uint8_t binary_object)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b082      	sub	sp, #8
 800b548:	af00      	add	r7, sp, #0
 800b54a:	4603      	mov	r3, r0
 800b54c:	71fb      	strb	r3, [r7, #7]
	switch (binary_object)
 800b54e:	79fb      	ldrb	r3, [r7, #7]
 800b550:	2b0c      	cmp	r3, #12
 800b552:	d870      	bhi.n	800b636 <HiL_mcu_commands_binary_status+0xf2>
 800b554:	a201      	add	r2, pc, #4	; (adr r2, 800b55c <HiL_mcu_commands_binary_status+0x18>)
 800b556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b55a:	bf00      	nop
 800b55c:	0800b591 	.word	0x0800b591
 800b560:	0800b59f 	.word	0x0800b59f
 800b564:	0800b5ad 	.word	0x0800b5ad
 800b568:	0800b5b9 	.word	0x0800b5b9
 800b56c:	0800b5c7 	.word	0x0800b5c7
 800b570:	0800b5d3 	.word	0x0800b5d3
 800b574:	0800b5df 	.word	0x0800b5df
 800b578:	0800b5eb 	.word	0x0800b5eb
 800b57c:	0800b5f7 	.word	0x0800b5f7
 800b580:	0800b603 	.word	0x0800b603
 800b584:	0800b611 	.word	0x0800b611
 800b588:	0800b61d 	.word	0x0800b61d
 800b58c:	0800b62b 	.word	0x0800b62b
	{

		case HiL_SW5:
			return HAL_GPIO_ReadPin(HiL_SW5_GPIO_Port, HiL_SW5_Pin);
 800b590:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b594:	482a      	ldr	r0, [pc, #168]	; (800b640 <HiL_mcu_commands_binary_status+0xfc>)
 800b596:	f7f7 fec1 	bl	800331c <HAL_GPIO_ReadPin>
 800b59a:	4603      	mov	r3, r0
 800b59c:	e04c      	b.n	800b638 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_SW6:
			return HAL_GPIO_ReadPin(HiL_SW6_GPIO_Port, HiL_SW6_Pin);
 800b59e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b5a2:	4827      	ldr	r0, [pc, #156]	; (800b640 <HiL_mcu_commands_binary_status+0xfc>)
 800b5a4:	f7f7 feba 	bl	800331c <HAL_GPIO_ReadPin>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	e045      	b.n	800b638 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_SW7:
			return HAL_GPIO_ReadPin(HiL_SW7_GPIO_Port, HiL_SW7_Pin);
 800b5ac:	2110      	movs	r1, #16
 800b5ae:	4824      	ldr	r0, [pc, #144]	; (800b640 <HiL_mcu_commands_binary_status+0xfc>)
 800b5b0:	f7f7 feb4 	bl	800331c <HAL_GPIO_ReadPin>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	e03f      	b.n	800b638 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_SW8:
			return HAL_GPIO_ReadPin(HiL_SW8_GPIO_Port, HiL_SW8_Pin);
 800b5b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b5bc:	4820      	ldr	r0, [pc, #128]	; (800b640 <HiL_mcu_commands_binary_status+0xfc>)
 800b5be:	f7f7 fead 	bl	800331c <HAL_GPIO_ReadPin>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	e038      	b.n	800b638 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_A:
			return HAL_GPIO_ReadPin(HiL_button3_A_GPIO_Port, HiL_button3_A_Pin);
 800b5c6:	2108      	movs	r1, #8
 800b5c8:	481e      	ldr	r0, [pc, #120]	; (800b644 <HiL_mcu_commands_binary_status+0x100>)
 800b5ca:	f7f7 fea7 	bl	800331c <HAL_GPIO_ReadPin>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	e032      	b.n	800b638 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_B:
			return HAL_GPIO_ReadPin(HiL_button3_B_GPIO_Port, HiL_button3_B_Pin);
 800b5d2:	2104      	movs	r1, #4
 800b5d4:	481b      	ldr	r0, [pc, #108]	; (800b644 <HiL_mcu_commands_binary_status+0x100>)
 800b5d6:	f7f7 fea1 	bl	800331c <HAL_GPIO_ReadPin>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	e02c      	b.n	800b638 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_C:
			return HAL_GPIO_ReadPin(HiL_button3_C_GPIO_Port, HiL_button3_C_Pin);
 800b5de:	2110      	movs	r1, #16
 800b5e0:	4819      	ldr	r0, [pc, #100]	; (800b648 <HiL_mcu_commands_binary_status+0x104>)
 800b5e2:	f7f7 fe9b 	bl	800331c <HAL_GPIO_ReadPin>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	e026      	b.n	800b638 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_D:
			return HAL_GPIO_ReadPin(HiL_button3_D_GPIO_Port, HiL_button3_D_Pin);
 800b5ea:	2120      	movs	r1, #32
 800b5ec:	4816      	ldr	r0, [pc, #88]	; (800b648 <HiL_mcu_commands_binary_status+0x104>)
 800b5ee:	f7f7 fe95 	bl	800331c <HAL_GPIO_ReadPin>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	e020      	b.n	800b638 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_center:
			return HAL_GPIO_ReadPin(HiL_button3_center_GPIO_Port, HiL_button3_center_Pin);
 800b5f6:	2140      	movs	r1, #64	; 0x40
 800b5f8:	4813      	ldr	r0, [pc, #76]	; (800b648 <HiL_mcu_commands_binary_status+0x104>)
 800b5fa:	f7f7 fe8f 	bl	800331c <HAL_GPIO_ReadPin>
 800b5fe:	4603      	mov	r3, r0
 800b600:	e01a      	b.n	800b638 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_TL1_Car:
			return HAL_GPIO_ReadPin(HiL_TL1_Car_GPIO_Port, HiL_TL1_Car_Pin);
 800b602:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b606:	4811      	ldr	r0, [pc, #68]	; (800b64c <HiL_mcu_commands_binary_status+0x108>)
 800b608:	f7f7 fe88 	bl	800331c <HAL_GPIO_ReadPin>
 800b60c:	4603      	mov	r3, r0
 800b60e:	e013      	b.n	800b638 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_TL2_Car:
			return HAL_GPIO_ReadPin(HiL_TL2_Car_GPIO_Port, HiL_TL2_Car_Pin);
 800b610:	2180      	movs	r1, #128	; 0x80
 800b612:	480f      	ldr	r0, [pc, #60]	; (800b650 <HiL_mcu_commands_binary_status+0x10c>)
 800b614:	f7f7 fe82 	bl	800331c <HAL_GPIO_ReadPin>
 800b618:	4603      	mov	r3, r0
 800b61a:	e00d      	b.n	800b638 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_TL3_Car:
			return HAL_GPIO_ReadPin(HiL_TL3_Car_GPIO_Port, HiL_TL3_Car_Pin);
 800b61c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b620:	480c      	ldr	r0, [pc, #48]	; (800b654 <HiL_mcu_commands_binary_status+0x110>)
 800b622:	f7f7 fe7b 	bl	800331c <HAL_GPIO_ReadPin>
 800b626:	4603      	mov	r3, r0
 800b628:	e006      	b.n	800b638 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_TL4_Car:
			return HAL_GPIO_ReadPin(HiL_TL4_Car_GPIO_Port, HiL_TL4_Car_Pin);
 800b62a:	2104      	movs	r1, #4
 800b62c:	4806      	ldr	r0, [pc, #24]	; (800b648 <HiL_mcu_commands_binary_status+0x104>)
 800b62e:	f7f7 fe75 	bl	800331c <HAL_GPIO_ReadPin>
 800b632:	4603      	mov	r3, r0
 800b634:	e000      	b.n	800b638 <HiL_mcu_commands_binary_status+0xf4>

		default:
			return CONTROLLER_ERROR_NO_SUPPORT; // Switch not currently supported
 800b636:	2302      	movs	r3, #2

	}
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3708      	adds	r7, #8
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	40020400 	.word	0x40020400
 800b644:	40021800 	.word	0x40021800
 800b648:	40020c00 	.word	0x40020c00
 800b64c:	40020800 	.word	0x40020800
 800b650:	40021400 	.word	0x40021400
 800b654:	40020000 	.word	0x40020000

0800b658 <HiL_mcu_commands_PWM_measure>:

uint8_t HiL_mcu_commands_PWM_measure ()
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	af00      	add	r7, sp, #0
													// Start timers and interrupts
		HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); // Primary channel - rising edge - rinse and repeat
 800b65c:	2100      	movs	r1, #0
 800b65e:	480b      	ldr	r0, [pc, #44]	; (800b68c <HiL_mcu_commands_PWM_measure+0x34>)
 800b660:	f7fb fd4e 	bl	8007100 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);    // Secondary channel - falling edge - stop second counter
 800b664:	2104      	movs	r1, #4
 800b666:	4809      	ldr	r0, [pc, #36]	; (800b68c <HiL_mcu_commands_PWM_measure+0x34>)
 800b668:	f7fb fbd4 	bl	8006e14 <HAL_TIM_IC_Start>

		osDelay(1);									//	Wait for PWM-period to complete. Smallest tick time is currently 1 millisecond. IS1300 PWM freq is 8 kHz, so this is slow enough.
 800b66c:	2001      	movs	r0, #1
 800b66e:	f002 f943 	bl	800d8f8 <osDelay>

												   	// Stop timers and interrupts
		HAL_TIM_IC_Stop_IT(&htim1, TIM_CHANNEL_1);  // Primary channel - rising edge - rinse and repeat
 800b672:	2100      	movs	r1, #0
 800b674:	4805      	ldr	r0, [pc, #20]	; (800b68c <HiL_mcu_commands_PWM_measure+0x34>)
 800b676:	f7fb fe93 	bl	80073a0 <HAL_TIM_IC_Stop_IT>
		HAL_TIM_IC_Stop(&htim1, TIM_CHANNEL_2);     // Secondary channel - falling edge - stop second counter
 800b67a:	2104      	movs	r1, #4
 800b67c:	4803      	ldr	r0, [pc, #12]	; (800b68c <HiL_mcu_commands_PWM_measure+0x34>)
 800b67e:	f7fb fccd 	bl	800701c <HAL_TIM_IC_Stop>

		return Duty;
 800b682:	4b03      	ldr	r3, [pc, #12]	; (800b690 <HiL_mcu_commands_PWM_measure+0x38>)
 800b684:	781b      	ldrb	r3, [r3, #0]
}
 800b686:	4618      	mov	r0, r3
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	bf00      	nop
 800b68c:	200005f0 	.word	0x200005f0
 800b690:	20000874 	.word	0x20000874

0800b694 <HiL_mcu_commands_UART_handler>:


uint16_t HiL_mcu_commands_UART_handler (uint8_t controller_get_action)
{
 800b694:	b480      	push	{r7}
 800b696:	b085      	sub	sp, #20
 800b698:	af00      	add	r7, sp, #0
 800b69a:	4603      	mov	r3, r0
 800b69c:	71fb      	strb	r3, [r7, #7]
	if (controller_get_action == 0)
 800b69e:	79fb      	ldrb	r3, [r7, #7]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d104      	bne.n	800b6ae <HiL_mcu_commands_UART_handler+0x1a>
	{
		uart_main_buffer_pointer = 0;
 800b6a4:	4b10      	ldr	r3, [pc, #64]	; (800b6e8 <HiL_mcu_commands_UART_handler+0x54>)
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	701a      	strb	r2, [r3, #0]
		return 0<<12; // transaction status: all good
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	e016      	b.n	800b6dc <HiL_mcu_commands_UART_handler+0x48>
	}
	else
	{
		uint16_t return_value = uart_main_buffer[uart_main_buffer_pointer];
 800b6ae:	4b0e      	ldr	r3, [pc, #56]	; (800b6e8 <HiL_mcu_commands_UART_handler+0x54>)
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	4b0d      	ldr	r3, [pc, #52]	; (800b6ec <HiL_mcu_commands_UART_handler+0x58>)
 800b6b6:	5c9b      	ldrb	r3, [r3, r2]
 800b6b8:	81fb      	strh	r3, [r7, #14]

		if (return_value != 0)
 800b6ba:	89fb      	ldrh	r3, [r7, #14]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d00c      	beq.n	800b6da <HiL_mcu_commands_UART_handler+0x46>
		{
			uart_main_buffer_pointer = (uart_main_buffer_pointer < HIL_UART_BUFFER_SIZE ? uart_main_buffer_pointer+1 : 0);
 800b6c0:	4b09      	ldr	r3, [pc, #36]	; (800b6e8 <HiL_mcu_commands_UART_handler+0x54>)
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	b25b      	sxtb	r3, r3
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	db04      	blt.n	800b6d4 <HiL_mcu_commands_UART_handler+0x40>
 800b6ca:	4b07      	ldr	r3, [pc, #28]	; (800b6e8 <HiL_mcu_commands_UART_handler+0x54>)
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	b2db      	uxtb	r3, r3
 800b6d2:	e000      	b.n	800b6d6 <HiL_mcu_commands_UART_handler+0x42>
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	4a04      	ldr	r2, [pc, #16]	; (800b6e8 <HiL_mcu_commands_UART_handler+0x54>)
 800b6d8:	7013      	strb	r3, [r2, #0]
		}

		return return_value;
 800b6da:	89fb      	ldrh	r3, [r7, #14]
	}

}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3714      	adds	r7, #20
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr
 800b6e8:	2000087e 	.word	0x2000087e
 800b6ec:	2000000c 	.word	0x2000000c

0800b6f0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	460b      	mov	r3, r1
 800b6fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b6fc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b700:	f006 fac4 	bl	8011c8c <malloc>
 800b704:	4603      	mov	r3, r0
 800b706:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d109      	bne.n	800b722 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	32b0      	adds	r2, #176	; 0xb0
 800b718:	2100      	movs	r1, #0
 800b71a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b71e:	2302      	movs	r3, #2
 800b720:	e0d4      	b.n	800b8cc <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b722:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b726:	2100      	movs	r1, #0
 800b728:	68f8      	ldr	r0, [r7, #12]
 800b72a:	f006 facd 	bl	8011cc8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	32b0      	adds	r2, #176	; 0xb0
 800b738:	68f9      	ldr	r1, [r7, #12]
 800b73a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	32b0      	adds	r2, #176	; 0xb0
 800b748:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	7c1b      	ldrb	r3, [r3, #16]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d138      	bne.n	800b7cc <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b75a:	4b5e      	ldr	r3, [pc, #376]	; (800b8d4 <USBD_CDC_Init+0x1e4>)
 800b75c:	7819      	ldrb	r1, [r3, #0]
 800b75e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b762:	2202      	movs	r2, #2
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f006 f8c2 	bl	80118ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b76a:	4b5a      	ldr	r3, [pc, #360]	; (800b8d4 <USBD_CDC_Init+0x1e4>)
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	f003 020f 	and.w	r2, r3, #15
 800b772:	6879      	ldr	r1, [r7, #4]
 800b774:	4613      	mov	r3, r2
 800b776:	009b      	lsls	r3, r3, #2
 800b778:	4413      	add	r3, r2
 800b77a:	009b      	lsls	r3, r3, #2
 800b77c:	440b      	add	r3, r1
 800b77e:	3324      	adds	r3, #36	; 0x24
 800b780:	2201      	movs	r2, #1
 800b782:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b784:	4b54      	ldr	r3, [pc, #336]	; (800b8d8 <USBD_CDC_Init+0x1e8>)
 800b786:	7819      	ldrb	r1, [r3, #0]
 800b788:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b78c:	2202      	movs	r2, #2
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f006 f8ad 	bl	80118ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b794:	4b50      	ldr	r3, [pc, #320]	; (800b8d8 <USBD_CDC_Init+0x1e8>)
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	f003 020f 	and.w	r2, r3, #15
 800b79c:	6879      	ldr	r1, [r7, #4]
 800b79e:	4613      	mov	r3, r2
 800b7a0:	009b      	lsls	r3, r3, #2
 800b7a2:	4413      	add	r3, r2
 800b7a4:	009b      	lsls	r3, r3, #2
 800b7a6:	440b      	add	r3, r1
 800b7a8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b7b0:	4b4a      	ldr	r3, [pc, #296]	; (800b8dc <USBD_CDC_Init+0x1ec>)
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	f003 020f 	and.w	r2, r3, #15
 800b7b8:	6879      	ldr	r1, [r7, #4]
 800b7ba:	4613      	mov	r3, r2
 800b7bc:	009b      	lsls	r3, r3, #2
 800b7be:	4413      	add	r3, r2
 800b7c0:	009b      	lsls	r3, r3, #2
 800b7c2:	440b      	add	r3, r1
 800b7c4:	3326      	adds	r3, #38	; 0x26
 800b7c6:	2210      	movs	r2, #16
 800b7c8:	801a      	strh	r2, [r3, #0]
 800b7ca:	e035      	b.n	800b838 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b7cc:	4b41      	ldr	r3, [pc, #260]	; (800b8d4 <USBD_CDC_Init+0x1e4>)
 800b7ce:	7819      	ldrb	r1, [r3, #0]
 800b7d0:	2340      	movs	r3, #64	; 0x40
 800b7d2:	2202      	movs	r2, #2
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f006 f88a 	bl	80118ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b7da:	4b3e      	ldr	r3, [pc, #248]	; (800b8d4 <USBD_CDC_Init+0x1e4>)
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	f003 020f 	and.w	r2, r3, #15
 800b7e2:	6879      	ldr	r1, [r7, #4]
 800b7e4:	4613      	mov	r3, r2
 800b7e6:	009b      	lsls	r3, r3, #2
 800b7e8:	4413      	add	r3, r2
 800b7ea:	009b      	lsls	r3, r3, #2
 800b7ec:	440b      	add	r3, r1
 800b7ee:	3324      	adds	r3, #36	; 0x24
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b7f4:	4b38      	ldr	r3, [pc, #224]	; (800b8d8 <USBD_CDC_Init+0x1e8>)
 800b7f6:	7819      	ldrb	r1, [r3, #0]
 800b7f8:	2340      	movs	r3, #64	; 0x40
 800b7fa:	2202      	movs	r2, #2
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f006 f876 	bl	80118ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b802:	4b35      	ldr	r3, [pc, #212]	; (800b8d8 <USBD_CDC_Init+0x1e8>)
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	f003 020f 	and.w	r2, r3, #15
 800b80a:	6879      	ldr	r1, [r7, #4]
 800b80c:	4613      	mov	r3, r2
 800b80e:	009b      	lsls	r3, r3, #2
 800b810:	4413      	add	r3, r2
 800b812:	009b      	lsls	r3, r3, #2
 800b814:	440b      	add	r3, r1
 800b816:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b81a:	2201      	movs	r2, #1
 800b81c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b81e:	4b2f      	ldr	r3, [pc, #188]	; (800b8dc <USBD_CDC_Init+0x1ec>)
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	f003 020f 	and.w	r2, r3, #15
 800b826:	6879      	ldr	r1, [r7, #4]
 800b828:	4613      	mov	r3, r2
 800b82a:	009b      	lsls	r3, r3, #2
 800b82c:	4413      	add	r3, r2
 800b82e:	009b      	lsls	r3, r3, #2
 800b830:	440b      	add	r3, r1
 800b832:	3326      	adds	r3, #38	; 0x26
 800b834:	2210      	movs	r2, #16
 800b836:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b838:	4b28      	ldr	r3, [pc, #160]	; (800b8dc <USBD_CDC_Init+0x1ec>)
 800b83a:	7819      	ldrb	r1, [r3, #0]
 800b83c:	2308      	movs	r3, #8
 800b83e:	2203      	movs	r2, #3
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f006 f854 	bl	80118ee <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b846:	4b25      	ldr	r3, [pc, #148]	; (800b8dc <USBD_CDC_Init+0x1ec>)
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	f003 020f 	and.w	r2, r3, #15
 800b84e:	6879      	ldr	r1, [r7, #4]
 800b850:	4613      	mov	r3, r2
 800b852:	009b      	lsls	r3, r3, #2
 800b854:	4413      	add	r3, r2
 800b856:	009b      	lsls	r3, r3, #2
 800b858:	440b      	add	r3, r1
 800b85a:	3324      	adds	r3, #36	; 0x24
 800b85c:	2201      	movs	r2, #1
 800b85e:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2200      	movs	r2, #0
 800b864:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b86e:	687a      	ldr	r2, [r7, #4]
 800b870:	33b0      	adds	r3, #176	; 0xb0
 800b872:	009b      	lsls	r3, r3, #2
 800b874:	4413      	add	r3, r2
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	2200      	movs	r2, #0
 800b880:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2200      	movs	r2, #0
 800b888:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b892:	2b00      	cmp	r3, #0
 800b894:	d101      	bne.n	800b89a <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800b896:	2302      	movs	r3, #2
 800b898:	e018      	b.n	800b8cc <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	7c1b      	ldrb	r3, [r3, #16]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d10a      	bne.n	800b8b8 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b8a2:	4b0d      	ldr	r3, [pc, #52]	; (800b8d8 <USBD_CDC_Init+0x1e8>)
 800b8a4:	7819      	ldrb	r1, [r3, #0]
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b8ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f006 f90b 	bl	8011acc <USBD_LL_PrepareReceive>
 800b8b6:	e008      	b.n	800b8ca <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b8b8:	4b07      	ldr	r3, [pc, #28]	; (800b8d8 <USBD_CDC_Init+0x1e8>)
 800b8ba:	7819      	ldrb	r1, [r3, #0]
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b8c2:	2340      	movs	r3, #64	; 0x40
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f006 f901 	bl	8011acc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b8ca:	2300      	movs	r3, #0
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3710      	adds	r7, #16
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}
 800b8d4:	20000113 	.word	0x20000113
 800b8d8:	20000114 	.word	0x20000114
 800b8dc:	20000115 	.word	0x20000115

0800b8e0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b8ec:	4b3a      	ldr	r3, [pc, #232]	; (800b9d8 <USBD_CDC_DeInit+0xf8>)
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f006 f821 	bl	801193a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b8f8:	4b37      	ldr	r3, [pc, #220]	; (800b9d8 <USBD_CDC_DeInit+0xf8>)
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	f003 020f 	and.w	r2, r3, #15
 800b900:	6879      	ldr	r1, [r7, #4]
 800b902:	4613      	mov	r3, r2
 800b904:	009b      	lsls	r3, r3, #2
 800b906:	4413      	add	r3, r2
 800b908:	009b      	lsls	r3, r3, #2
 800b90a:	440b      	add	r3, r1
 800b90c:	3324      	adds	r3, #36	; 0x24
 800b90e:	2200      	movs	r2, #0
 800b910:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b912:	4b32      	ldr	r3, [pc, #200]	; (800b9dc <USBD_CDC_DeInit+0xfc>)
 800b914:	781b      	ldrb	r3, [r3, #0]
 800b916:	4619      	mov	r1, r3
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f006 f80e 	bl	801193a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b91e:	4b2f      	ldr	r3, [pc, #188]	; (800b9dc <USBD_CDC_DeInit+0xfc>)
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	f003 020f 	and.w	r2, r3, #15
 800b926:	6879      	ldr	r1, [r7, #4]
 800b928:	4613      	mov	r3, r2
 800b92a:	009b      	lsls	r3, r3, #2
 800b92c:	4413      	add	r3, r2
 800b92e:	009b      	lsls	r3, r3, #2
 800b930:	440b      	add	r3, r1
 800b932:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b936:	2200      	movs	r2, #0
 800b938:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b93a:	4b29      	ldr	r3, [pc, #164]	; (800b9e0 <USBD_CDC_DeInit+0x100>)
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	4619      	mov	r1, r3
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f005 fffa 	bl	801193a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b946:	4b26      	ldr	r3, [pc, #152]	; (800b9e0 <USBD_CDC_DeInit+0x100>)
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	f003 020f 	and.w	r2, r3, #15
 800b94e:	6879      	ldr	r1, [r7, #4]
 800b950:	4613      	mov	r3, r2
 800b952:	009b      	lsls	r3, r3, #2
 800b954:	4413      	add	r3, r2
 800b956:	009b      	lsls	r3, r3, #2
 800b958:	440b      	add	r3, r1
 800b95a:	3324      	adds	r3, #36	; 0x24
 800b95c:	2200      	movs	r2, #0
 800b95e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b960:	4b1f      	ldr	r3, [pc, #124]	; (800b9e0 <USBD_CDC_DeInit+0x100>)
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	f003 020f 	and.w	r2, r3, #15
 800b968:	6879      	ldr	r1, [r7, #4]
 800b96a:	4613      	mov	r3, r2
 800b96c:	009b      	lsls	r3, r3, #2
 800b96e:	4413      	add	r3, r2
 800b970:	009b      	lsls	r3, r3, #2
 800b972:	440b      	add	r3, r1
 800b974:	3326      	adds	r3, #38	; 0x26
 800b976:	2200      	movs	r2, #0
 800b978:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	32b0      	adds	r2, #176	; 0xb0
 800b984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d01f      	beq.n	800b9cc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	33b0      	adds	r3, #176	; 0xb0
 800b996:	009b      	lsls	r3, r3, #2
 800b998:	4413      	add	r3, r2
 800b99a:	685b      	ldr	r3, [r3, #4]
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	32b0      	adds	r2, #176	; 0xb0
 800b9aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f006 f974 	bl	8011c9c <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	32b0      	adds	r2, #176	; 0xb0
 800b9be:	2100      	movs	r1, #0
 800b9c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b9cc:	2300      	movs	r3, #0
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3708      	adds	r7, #8
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
 800b9d6:	bf00      	nop
 800b9d8:	20000113 	.word	0x20000113
 800b9dc:	20000114 	.word	0x20000114
 800b9e0:	20000115 	.word	0x20000115

0800b9e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b086      	sub	sp, #24
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	32b0      	adds	r2, #176	; 0xb0
 800b9f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9fc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ba02:	2300      	movs	r3, #0
 800ba04:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba06:	2300      	movs	r3, #0
 800ba08:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d101      	bne.n	800ba14 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ba10:	2303      	movs	r3, #3
 800ba12:	e0bf      	b.n	800bb94 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	781b      	ldrb	r3, [r3, #0]
 800ba18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d050      	beq.n	800bac2 <USBD_CDC_Setup+0xde>
 800ba20:	2b20      	cmp	r3, #32
 800ba22:	f040 80af 	bne.w	800bb84 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	88db      	ldrh	r3, [r3, #6]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d03a      	beq.n	800baa4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	781b      	ldrb	r3, [r3, #0]
 800ba32:	b25b      	sxtb	r3, r3
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	da1b      	bge.n	800ba70 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ba3e:	687a      	ldr	r2, [r7, #4]
 800ba40:	33b0      	adds	r3, #176	; 0xb0
 800ba42:	009b      	lsls	r3, r3, #2
 800ba44:	4413      	add	r3, r2
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	689b      	ldr	r3, [r3, #8]
 800ba4a:	683a      	ldr	r2, [r7, #0]
 800ba4c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ba4e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ba50:	683a      	ldr	r2, [r7, #0]
 800ba52:	88d2      	ldrh	r2, [r2, #6]
 800ba54:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	88db      	ldrh	r3, [r3, #6]
 800ba5a:	2b07      	cmp	r3, #7
 800ba5c:	bf28      	it	cs
 800ba5e:	2307      	movcs	r3, #7
 800ba60:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	89fa      	ldrh	r2, [r7, #14]
 800ba66:	4619      	mov	r1, r3
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f001 fdad 	bl	800d5c8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ba6e:	e090      	b.n	800bb92 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	785a      	ldrb	r2, [r3, #1]
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	88db      	ldrh	r3, [r3, #6]
 800ba7e:	2b3f      	cmp	r3, #63	; 0x3f
 800ba80:	d803      	bhi.n	800ba8a <USBD_CDC_Setup+0xa6>
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	88db      	ldrh	r3, [r3, #6]
 800ba86:	b2da      	uxtb	r2, r3
 800ba88:	e000      	b.n	800ba8c <USBD_CDC_Setup+0xa8>
 800ba8a:	2240      	movs	r2, #64	; 0x40
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ba92:	6939      	ldr	r1, [r7, #16]
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f001 fdbf 	bl	800d620 <USBD_CtlPrepareRx>
      break;
 800baa2:	e076      	b.n	800bb92 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	33b0      	adds	r3, #176	; 0xb0
 800baae:	009b      	lsls	r3, r3, #2
 800bab0:	4413      	add	r3, r2
 800bab2:	685b      	ldr	r3, [r3, #4]
 800bab4:	689b      	ldr	r3, [r3, #8]
 800bab6:	683a      	ldr	r2, [r7, #0]
 800bab8:	7850      	ldrb	r0, [r2, #1]
 800baba:	2200      	movs	r2, #0
 800babc:	6839      	ldr	r1, [r7, #0]
 800babe:	4798      	blx	r3
      break;
 800bac0:	e067      	b.n	800bb92 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	785b      	ldrb	r3, [r3, #1]
 800bac6:	2b0b      	cmp	r3, #11
 800bac8:	d851      	bhi.n	800bb6e <USBD_CDC_Setup+0x18a>
 800baca:	a201      	add	r2, pc, #4	; (adr r2, 800bad0 <USBD_CDC_Setup+0xec>)
 800bacc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bad0:	0800bb01 	.word	0x0800bb01
 800bad4:	0800bb7d 	.word	0x0800bb7d
 800bad8:	0800bb6f 	.word	0x0800bb6f
 800badc:	0800bb6f 	.word	0x0800bb6f
 800bae0:	0800bb6f 	.word	0x0800bb6f
 800bae4:	0800bb6f 	.word	0x0800bb6f
 800bae8:	0800bb6f 	.word	0x0800bb6f
 800baec:	0800bb6f 	.word	0x0800bb6f
 800baf0:	0800bb6f 	.word	0x0800bb6f
 800baf4:	0800bb6f 	.word	0x0800bb6f
 800baf8:	0800bb2b 	.word	0x0800bb2b
 800bafc:	0800bb55 	.word	0x0800bb55
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb06:	b2db      	uxtb	r3, r3
 800bb08:	2b03      	cmp	r3, #3
 800bb0a:	d107      	bne.n	800bb1c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bb0c:	f107 030a 	add.w	r3, r7, #10
 800bb10:	2202      	movs	r2, #2
 800bb12:	4619      	mov	r1, r3
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f001 fd57 	bl	800d5c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bb1a:	e032      	b.n	800bb82 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bb1c:	6839      	ldr	r1, [r7, #0]
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f001 fce1 	bl	800d4e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800bb24:	2303      	movs	r3, #3
 800bb26:	75fb      	strb	r3, [r7, #23]
          break;
 800bb28:	e02b      	b.n	800bb82 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	2b03      	cmp	r3, #3
 800bb34:	d107      	bne.n	800bb46 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bb36:	f107 030d 	add.w	r3, r7, #13
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	4619      	mov	r1, r3
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f001 fd42 	bl	800d5c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bb44:	e01d      	b.n	800bb82 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bb46:	6839      	ldr	r1, [r7, #0]
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f001 fccc 	bl	800d4e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800bb4e:	2303      	movs	r3, #3
 800bb50:	75fb      	strb	r3, [r7, #23]
          break;
 800bb52:	e016      	b.n	800bb82 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb5a:	b2db      	uxtb	r3, r3
 800bb5c:	2b03      	cmp	r3, #3
 800bb5e:	d00f      	beq.n	800bb80 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bb60:	6839      	ldr	r1, [r7, #0]
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f001 fcbf 	bl	800d4e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800bb68:	2303      	movs	r3, #3
 800bb6a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bb6c:	e008      	b.n	800bb80 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bb6e:	6839      	ldr	r1, [r7, #0]
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f001 fcb8 	bl	800d4e6 <USBD_CtlError>
          ret = USBD_FAIL;
 800bb76:	2303      	movs	r3, #3
 800bb78:	75fb      	strb	r3, [r7, #23]
          break;
 800bb7a:	e002      	b.n	800bb82 <USBD_CDC_Setup+0x19e>
          break;
 800bb7c:	bf00      	nop
 800bb7e:	e008      	b.n	800bb92 <USBD_CDC_Setup+0x1ae>
          break;
 800bb80:	bf00      	nop
      }
      break;
 800bb82:	e006      	b.n	800bb92 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800bb84:	6839      	ldr	r1, [r7, #0]
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f001 fcad 	bl	800d4e6 <USBD_CtlError>
      ret = USBD_FAIL;
 800bb8c:	2303      	movs	r3, #3
 800bb8e:	75fb      	strb	r3, [r7, #23]
      break;
 800bb90:	bf00      	nop
  }

  return (uint8_t)ret;
 800bb92:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3718      	adds	r7, #24
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}

0800bb9c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b084      	sub	sp, #16
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	460b      	mov	r3, r1
 800bba6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bbae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	32b0      	adds	r2, #176	; 0xb0
 800bbba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d101      	bne.n	800bbc6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800bbc2:	2303      	movs	r3, #3
 800bbc4:	e065      	b.n	800bc92 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	32b0      	adds	r2, #176	; 0xb0
 800bbd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbd4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bbd6:	78fb      	ldrb	r3, [r7, #3]
 800bbd8:	f003 020f 	and.w	r2, r3, #15
 800bbdc:	6879      	ldr	r1, [r7, #4]
 800bbde:	4613      	mov	r3, r2
 800bbe0:	009b      	lsls	r3, r3, #2
 800bbe2:	4413      	add	r3, r2
 800bbe4:	009b      	lsls	r3, r3, #2
 800bbe6:	440b      	add	r3, r1
 800bbe8:	3318      	adds	r3, #24
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d02f      	beq.n	800bc50 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800bbf0:	78fb      	ldrb	r3, [r7, #3]
 800bbf2:	f003 020f 	and.w	r2, r3, #15
 800bbf6:	6879      	ldr	r1, [r7, #4]
 800bbf8:	4613      	mov	r3, r2
 800bbfa:	009b      	lsls	r3, r3, #2
 800bbfc:	4413      	add	r3, r2
 800bbfe:	009b      	lsls	r3, r3, #2
 800bc00:	440b      	add	r3, r1
 800bc02:	3318      	adds	r3, #24
 800bc04:	681a      	ldr	r2, [r3, #0]
 800bc06:	78fb      	ldrb	r3, [r7, #3]
 800bc08:	f003 010f 	and.w	r1, r3, #15
 800bc0c:	68f8      	ldr	r0, [r7, #12]
 800bc0e:	460b      	mov	r3, r1
 800bc10:	00db      	lsls	r3, r3, #3
 800bc12:	440b      	add	r3, r1
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	4403      	add	r3, r0
 800bc18:	3348      	adds	r3, #72	; 0x48
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	fbb2 f1f3 	udiv	r1, r2, r3
 800bc20:	fb01 f303 	mul.w	r3, r1, r3
 800bc24:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d112      	bne.n	800bc50 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800bc2a:	78fb      	ldrb	r3, [r7, #3]
 800bc2c:	f003 020f 	and.w	r2, r3, #15
 800bc30:	6879      	ldr	r1, [r7, #4]
 800bc32:	4613      	mov	r3, r2
 800bc34:	009b      	lsls	r3, r3, #2
 800bc36:	4413      	add	r3, r2
 800bc38:	009b      	lsls	r3, r3, #2
 800bc3a:	440b      	add	r3, r1
 800bc3c:	3318      	adds	r3, #24
 800bc3e:	2200      	movs	r2, #0
 800bc40:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bc42:	78f9      	ldrb	r1, [r7, #3]
 800bc44:	2300      	movs	r3, #0
 800bc46:	2200      	movs	r2, #0
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f005 ff1e 	bl	8011a8a <USBD_LL_Transmit>
 800bc4e:	e01f      	b.n	800bc90 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	2200      	movs	r2, #0
 800bc54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bc5e:	687a      	ldr	r2, [r7, #4]
 800bc60:	33b0      	adds	r3, #176	; 0xb0
 800bc62:	009b      	lsls	r3, r3, #2
 800bc64:	4413      	add	r3, r2
 800bc66:	685b      	ldr	r3, [r3, #4]
 800bc68:	691b      	ldr	r3, [r3, #16]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d010      	beq.n	800bc90 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bc74:	687a      	ldr	r2, [r7, #4]
 800bc76:	33b0      	adds	r3, #176	; 0xb0
 800bc78:	009b      	lsls	r3, r3, #2
 800bc7a:	4413      	add	r3, r2
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	691b      	ldr	r3, [r3, #16]
 800bc80:	68ba      	ldr	r2, [r7, #8]
 800bc82:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bc86:	68ba      	ldr	r2, [r7, #8]
 800bc88:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bc8c:	78fa      	ldrb	r2, [r7, #3]
 800bc8e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bc90:	2300      	movs	r3, #0
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3710      	adds	r7, #16
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}

0800bc9a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bc9a:	b580      	push	{r7, lr}
 800bc9c:	b084      	sub	sp, #16
 800bc9e:	af00      	add	r7, sp, #0
 800bca0:	6078      	str	r0, [r7, #4]
 800bca2:	460b      	mov	r3, r1
 800bca4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	32b0      	adds	r2, #176	; 0xb0
 800bcb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcb4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	32b0      	adds	r2, #176	; 0xb0
 800bcc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d101      	bne.n	800bccc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800bcc8:	2303      	movs	r3, #3
 800bcca:	e01a      	b.n	800bd02 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bccc:	78fb      	ldrb	r3, [r7, #3]
 800bcce:	4619      	mov	r1, r3
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f005 ff1c 	bl	8011b0e <USBD_LL_GetRxDataSize>
 800bcd6:	4602      	mov	r2, r0
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bce4:	687a      	ldr	r2, [r7, #4]
 800bce6:	33b0      	adds	r3, #176	; 0xb0
 800bce8:	009b      	lsls	r3, r3, #2
 800bcea:	4413      	add	r3, r2
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	68db      	ldr	r3, [r3, #12]
 800bcf0:	68fa      	ldr	r2, [r7, #12]
 800bcf2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bcf6:	68fa      	ldr	r2, [r7, #12]
 800bcf8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bcfc:	4611      	mov	r1, r2
 800bcfe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bd00:	2300      	movs	r3, #0
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3710      	adds	r7, #16
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}

0800bd0a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bd0a:	b580      	push	{r7, lr}
 800bd0c:	b084      	sub	sp, #16
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	32b0      	adds	r2, #176	; 0xb0
 800bd1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd20:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d101      	bne.n	800bd2c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bd28:	2303      	movs	r3, #3
 800bd2a:	e025      	b.n	800bd78 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bd32:	687a      	ldr	r2, [r7, #4]
 800bd34:	33b0      	adds	r3, #176	; 0xb0
 800bd36:	009b      	lsls	r3, r3, #2
 800bd38:	4413      	add	r3, r2
 800bd3a:	685b      	ldr	r3, [r3, #4]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d01a      	beq.n	800bd76 <USBD_CDC_EP0_RxReady+0x6c>
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bd46:	2bff      	cmp	r3, #255	; 0xff
 800bd48:	d015      	beq.n	800bd76 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bd50:	687a      	ldr	r2, [r7, #4]
 800bd52:	33b0      	adds	r3, #176	; 0xb0
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	4413      	add	r3, r2
 800bd58:	685b      	ldr	r3, [r3, #4]
 800bd5a:	689b      	ldr	r3, [r3, #8]
 800bd5c:	68fa      	ldr	r2, [r7, #12]
 800bd5e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800bd62:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800bd64:	68fa      	ldr	r2, [r7, #12]
 800bd66:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bd6a:	b292      	uxth	r2, r2
 800bd6c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	22ff      	movs	r2, #255	; 0xff
 800bd72:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800bd76:	2300      	movs	r3, #0
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3710      	adds	r7, #16
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b086      	sub	sp, #24
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bd88:	2182      	movs	r1, #130	; 0x82
 800bd8a:	4818      	ldr	r0, [pc, #96]	; (800bdec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bd8c:	f000 fd49 	bl	800c822 <USBD_GetEpDesc>
 800bd90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bd92:	2101      	movs	r1, #1
 800bd94:	4815      	ldr	r0, [pc, #84]	; (800bdec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bd96:	f000 fd44 	bl	800c822 <USBD_GetEpDesc>
 800bd9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bd9c:	2181      	movs	r1, #129	; 0x81
 800bd9e:	4813      	ldr	r0, [pc, #76]	; (800bdec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bda0:	f000 fd3f 	bl	800c822 <USBD_GetEpDesc>
 800bda4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d002      	beq.n	800bdb2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	2210      	movs	r2, #16
 800bdb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d006      	beq.n	800bdc6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bdc0:	711a      	strb	r2, [r3, #4]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d006      	beq.n	800bdda <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	2200      	movs	r2, #0
 800bdd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bdd4:	711a      	strb	r2, [r3, #4]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2243      	movs	r2, #67	; 0x43
 800bdde:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bde0:	4b02      	ldr	r3, [pc, #8]	; (800bdec <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3718      	adds	r7, #24
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	200000d0 	.word	0x200000d0

0800bdf0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b086      	sub	sp, #24
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bdf8:	2182      	movs	r1, #130	; 0x82
 800bdfa:	4818      	ldr	r0, [pc, #96]	; (800be5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bdfc:	f000 fd11 	bl	800c822 <USBD_GetEpDesc>
 800be00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800be02:	2101      	movs	r1, #1
 800be04:	4815      	ldr	r0, [pc, #84]	; (800be5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800be06:	f000 fd0c 	bl	800c822 <USBD_GetEpDesc>
 800be0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800be0c:	2181      	movs	r1, #129	; 0x81
 800be0e:	4813      	ldr	r0, [pc, #76]	; (800be5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800be10:	f000 fd07 	bl	800c822 <USBD_GetEpDesc>
 800be14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d002      	beq.n	800be22 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	2210      	movs	r2, #16
 800be20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d006      	beq.n	800be36 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	2200      	movs	r2, #0
 800be2c:	711a      	strb	r2, [r3, #4]
 800be2e:	2200      	movs	r2, #0
 800be30:	f042 0202 	orr.w	r2, r2, #2
 800be34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d006      	beq.n	800be4a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	2200      	movs	r2, #0
 800be40:	711a      	strb	r2, [r3, #4]
 800be42:	2200      	movs	r2, #0
 800be44:	f042 0202 	orr.w	r2, r2, #2
 800be48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2243      	movs	r2, #67	; 0x43
 800be4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800be50:	4b02      	ldr	r3, [pc, #8]	; (800be5c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800be52:	4618      	mov	r0, r3
 800be54:	3718      	adds	r7, #24
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}
 800be5a:	bf00      	nop
 800be5c:	200000d0 	.word	0x200000d0

0800be60 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b086      	sub	sp, #24
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800be68:	2182      	movs	r1, #130	; 0x82
 800be6a:	4818      	ldr	r0, [pc, #96]	; (800becc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800be6c:	f000 fcd9 	bl	800c822 <USBD_GetEpDesc>
 800be70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800be72:	2101      	movs	r1, #1
 800be74:	4815      	ldr	r0, [pc, #84]	; (800becc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800be76:	f000 fcd4 	bl	800c822 <USBD_GetEpDesc>
 800be7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800be7c:	2181      	movs	r1, #129	; 0x81
 800be7e:	4813      	ldr	r0, [pc, #76]	; (800becc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800be80:	f000 fccf 	bl	800c822 <USBD_GetEpDesc>
 800be84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d002      	beq.n	800be92 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	2210      	movs	r2, #16
 800be90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d006      	beq.n	800bea6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	2200      	movs	r2, #0
 800be9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bea0:	711a      	strb	r2, [r3, #4]
 800bea2:	2200      	movs	r2, #0
 800bea4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d006      	beq.n	800beba <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2200      	movs	r2, #0
 800beb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800beb4:	711a      	strb	r2, [r3, #4]
 800beb6:	2200      	movs	r2, #0
 800beb8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2243      	movs	r2, #67	; 0x43
 800bebe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bec0:	4b02      	ldr	r3, [pc, #8]	; (800becc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3718      	adds	r7, #24
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
 800beca:	bf00      	nop
 800becc:	200000d0 	.word	0x200000d0

0800bed0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b083      	sub	sp, #12
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	220a      	movs	r2, #10
 800bedc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bede:	4b03      	ldr	r3, [pc, #12]	; (800beec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	370c      	adds	r7, #12
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr
 800beec:	2000008c 	.word	0x2000008c

0800bef0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b083      	sub	sp, #12
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d101      	bne.n	800bf04 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bf00:	2303      	movs	r3, #3
 800bf02:	e009      	b.n	800bf18 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	33b0      	adds	r3, #176	; 0xb0
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	4413      	add	r3, r2
 800bf12:	683a      	ldr	r2, [r7, #0]
 800bf14:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800bf16:	2300      	movs	r3, #0
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	370c      	adds	r7, #12
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf22:	4770      	bx	lr

0800bf24 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bf24:	b480      	push	{r7}
 800bf26:	b087      	sub	sp, #28
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	60f8      	str	r0, [r7, #12]
 800bf2c:	60b9      	str	r1, [r7, #8]
 800bf2e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	32b0      	adds	r2, #176	; 0xb0
 800bf3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf3e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d101      	bne.n	800bf4a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bf46:	2303      	movs	r3, #3
 800bf48:	e008      	b.n	800bf5c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	68ba      	ldr	r2, [r7, #8]
 800bf4e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	687a      	ldr	r2, [r7, #4]
 800bf56:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800bf5a:	2300      	movs	r3, #0
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	371c      	adds	r7, #28
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr

0800bf68 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b085      	sub	sp, #20
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	32b0      	adds	r2, #176	; 0xb0
 800bf7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf80:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d101      	bne.n	800bf8c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800bf88:	2303      	movs	r3, #3
 800bf8a:	e004      	b.n	800bf96 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	683a      	ldr	r2, [r7, #0]
 800bf90:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800bf94:	2300      	movs	r3, #0
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3714      	adds	r7, #20
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr
	...

0800bfa4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	32b0      	adds	r2, #176	; 0xb0
 800bfb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfba:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d101      	bne.n	800bfca <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bfc6:	2303      	movs	r3, #3
 800bfc8:	e025      	b.n	800c016 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d11f      	bne.n	800c014 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800bfdc:	4b10      	ldr	r3, [pc, #64]	; (800c020 <USBD_CDC_TransmitPacket+0x7c>)
 800bfde:	781b      	ldrb	r3, [r3, #0]
 800bfe0:	f003 020f 	and.w	r2, r3, #15
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	4613      	mov	r3, r2
 800bfee:	009b      	lsls	r3, r3, #2
 800bff0:	4413      	add	r3, r2
 800bff2:	009b      	lsls	r3, r3, #2
 800bff4:	4403      	add	r3, r0
 800bff6:	3318      	adds	r3, #24
 800bff8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800bffa:	4b09      	ldr	r3, [pc, #36]	; (800c020 <USBD_CDC_TransmitPacket+0x7c>)
 800bffc:	7819      	ldrb	r1, [r3, #0]
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f005 fd3d 	bl	8011a8a <USBD_LL_Transmit>

    ret = USBD_OK;
 800c010:	2300      	movs	r3, #0
 800c012:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c014:	7bfb      	ldrb	r3, [r7, #15]
}
 800c016:	4618      	mov	r0, r3
 800c018:	3710      	adds	r7, #16
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
 800c01e:	bf00      	nop
 800c020:	20000113 	.word	0x20000113

0800c024 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	32b0      	adds	r2, #176	; 0xb0
 800c036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c03a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	32b0      	adds	r2, #176	; 0xb0
 800c046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d101      	bne.n	800c052 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c04e:	2303      	movs	r3, #3
 800c050:	e018      	b.n	800c084 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	7c1b      	ldrb	r3, [r3, #16]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d10a      	bne.n	800c070 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c05a:	4b0c      	ldr	r3, [pc, #48]	; (800c08c <USBD_CDC_ReceivePacket+0x68>)
 800c05c:	7819      	ldrb	r1, [r3, #0]
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c064:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f005 fd2f 	bl	8011acc <USBD_LL_PrepareReceive>
 800c06e:	e008      	b.n	800c082 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c070:	4b06      	ldr	r3, [pc, #24]	; (800c08c <USBD_CDC_ReceivePacket+0x68>)
 800c072:	7819      	ldrb	r1, [r3, #0]
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c07a:	2340      	movs	r3, #64	; 0x40
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f005 fd25 	bl	8011acc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c082:	2300      	movs	r3, #0
}
 800c084:	4618      	mov	r0, r3
 800c086:	3710      	adds	r7, #16
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}
 800c08c:	20000114 	.word	0x20000114

0800c090 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b086      	sub	sp, #24
 800c094:	af00      	add	r7, sp, #0
 800c096:	60f8      	str	r0, [r7, #12]
 800c098:	60b9      	str	r1, [r7, #8]
 800c09a:	4613      	mov	r3, r2
 800c09c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d101      	bne.n	800c0a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c0a4:	2303      	movs	r3, #3
 800c0a6:	e01f      	b.n	800c0e8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d003      	beq.n	800c0ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	68ba      	ldr	r2, [r7, #8]
 800c0ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	2201      	movs	r2, #1
 800c0d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	79fa      	ldrb	r2, [r7, #7]
 800c0da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c0dc:	68f8      	ldr	r0, [r7, #12]
 800c0de:	f005 fb9f 	bl	8011820 <USBD_LL_Init>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c0e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3718      	adds	r7, #24
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b084      	sub	sp, #16
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d101      	bne.n	800c108 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c104:	2303      	movs	r3, #3
 800c106:	e025      	b.n	800c154 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	683a      	ldr	r2, [r7, #0]
 800c10c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	32ae      	adds	r2, #174	; 0xae
 800c11a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c120:	2b00      	cmp	r3, #0
 800c122:	d00f      	beq.n	800c144 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	32ae      	adds	r2, #174	; 0xae
 800c12e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c134:	f107 020e 	add.w	r2, r7, #14
 800c138:	4610      	mov	r0, r2
 800c13a:	4798      	blx	r3
 800c13c:	4602      	mov	r2, r0
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c14a:	1c5a      	adds	r2, r3, #1
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c152:	2300      	movs	r3, #0
}
 800c154:	4618      	mov	r0, r3
 800c156:	3710      	adds	r7, #16
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}

0800c15c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b082      	sub	sp, #8
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f005 fba7 	bl	80118b8 <USBD_LL_Start>
 800c16a:	4603      	mov	r3, r0
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3708      	adds	r7, #8
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}

0800c174 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c174:	b480      	push	{r7}
 800c176:	b083      	sub	sp, #12
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c17c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c17e:	4618      	mov	r0, r3
 800c180:	370c      	adds	r7, #12
 800c182:	46bd      	mov	sp, r7
 800c184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c188:	4770      	bx	lr

0800c18a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c18a:	b580      	push	{r7, lr}
 800c18c:	b084      	sub	sp, #16
 800c18e:	af00      	add	r7, sp, #0
 800c190:	6078      	str	r0, [r7, #4]
 800c192:	460b      	mov	r3, r1
 800c194:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c196:	2300      	movs	r3, #0
 800c198:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d009      	beq.n	800c1b8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	78fa      	ldrb	r2, [r7, #3]
 800c1ae:	4611      	mov	r1, r2
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	4798      	blx	r3
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b084      	sub	sp, #16
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
 800c1ca:	460b      	mov	r3, r1
 800c1cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1d8:	685b      	ldr	r3, [r3, #4]
 800c1da:	78fa      	ldrb	r2, [r7, #3]
 800c1dc:	4611      	mov	r1, r2
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	4798      	blx	r3
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d001      	beq.n	800c1ec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c1e8:	2303      	movs	r3, #3
 800c1ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c1ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3710      	adds	r7, #16
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}

0800c1f6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c1f6:	b580      	push	{r7, lr}
 800c1f8:	b084      	sub	sp, #16
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
 800c1fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c206:	6839      	ldr	r1, [r7, #0]
 800c208:	4618      	mov	r0, r3
 800c20a:	f001 f932 	bl	800d472 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2201      	movs	r2, #1
 800c212:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c21c:	461a      	mov	r2, r3
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c22a:	f003 031f 	and.w	r3, r3, #31
 800c22e:	2b02      	cmp	r3, #2
 800c230:	d01a      	beq.n	800c268 <USBD_LL_SetupStage+0x72>
 800c232:	2b02      	cmp	r3, #2
 800c234:	d822      	bhi.n	800c27c <USBD_LL_SetupStage+0x86>
 800c236:	2b00      	cmp	r3, #0
 800c238:	d002      	beq.n	800c240 <USBD_LL_SetupStage+0x4a>
 800c23a:	2b01      	cmp	r3, #1
 800c23c:	d00a      	beq.n	800c254 <USBD_LL_SetupStage+0x5e>
 800c23e:	e01d      	b.n	800c27c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c246:	4619      	mov	r1, r3
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	f000 fb5f 	bl	800c90c <USBD_StdDevReq>
 800c24e:	4603      	mov	r3, r0
 800c250:	73fb      	strb	r3, [r7, #15]
      break;
 800c252:	e020      	b.n	800c296 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c25a:	4619      	mov	r1, r3
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f000 fbc7 	bl	800c9f0 <USBD_StdItfReq>
 800c262:	4603      	mov	r3, r0
 800c264:	73fb      	strb	r3, [r7, #15]
      break;
 800c266:	e016      	b.n	800c296 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c26e:	4619      	mov	r1, r3
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f000 fc29 	bl	800cac8 <USBD_StdEPReq>
 800c276:	4603      	mov	r3, r0
 800c278:	73fb      	strb	r3, [r7, #15]
      break;
 800c27a:	e00c      	b.n	800c296 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c282:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c286:	b2db      	uxtb	r3, r3
 800c288:	4619      	mov	r1, r3
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f005 fb74 	bl	8011978 <USBD_LL_StallEP>
 800c290:	4603      	mov	r3, r0
 800c292:	73fb      	strb	r3, [r7, #15]
      break;
 800c294:	bf00      	nop
  }

  return ret;
 800c296:	7bfb      	ldrb	r3, [r7, #15]
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3710      	adds	r7, #16
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b086      	sub	sp, #24
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	60f8      	str	r0, [r7, #12]
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	607a      	str	r2, [r7, #4]
 800c2ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c2b2:	7afb      	ldrb	r3, [r7, #11]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d16e      	bne.n	800c396 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c2be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c2c6:	2b03      	cmp	r3, #3
 800c2c8:	f040 8098 	bne.w	800c3fc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	689a      	ldr	r2, [r3, #8]
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	68db      	ldr	r3, [r3, #12]
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d913      	bls.n	800c300 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	689a      	ldr	r2, [r3, #8]
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	68db      	ldr	r3, [r3, #12]
 800c2e0:	1ad2      	subs	r2, r2, r3
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	68da      	ldr	r2, [r3, #12]
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	689b      	ldr	r3, [r3, #8]
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	bf28      	it	cs
 800c2f2:	4613      	movcs	r3, r2
 800c2f4:	461a      	mov	r2, r3
 800c2f6:	6879      	ldr	r1, [r7, #4]
 800c2f8:	68f8      	ldr	r0, [r7, #12]
 800c2fa:	f001 f9ae 	bl	800d65a <USBD_CtlContinueRx>
 800c2fe:	e07d      	b.n	800c3fc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c306:	f003 031f 	and.w	r3, r3, #31
 800c30a:	2b02      	cmp	r3, #2
 800c30c:	d014      	beq.n	800c338 <USBD_LL_DataOutStage+0x98>
 800c30e:	2b02      	cmp	r3, #2
 800c310:	d81d      	bhi.n	800c34e <USBD_LL_DataOutStage+0xae>
 800c312:	2b00      	cmp	r3, #0
 800c314:	d002      	beq.n	800c31c <USBD_LL_DataOutStage+0x7c>
 800c316:	2b01      	cmp	r3, #1
 800c318:	d003      	beq.n	800c322 <USBD_LL_DataOutStage+0x82>
 800c31a:	e018      	b.n	800c34e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c31c:	2300      	movs	r3, #0
 800c31e:	75bb      	strb	r3, [r7, #22]
            break;
 800c320:	e018      	b.n	800c354 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c328:	b2db      	uxtb	r3, r3
 800c32a:	4619      	mov	r1, r3
 800c32c:	68f8      	ldr	r0, [r7, #12]
 800c32e:	f000 fa5e 	bl	800c7ee <USBD_CoreFindIF>
 800c332:	4603      	mov	r3, r0
 800c334:	75bb      	strb	r3, [r7, #22]
            break;
 800c336:	e00d      	b.n	800c354 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c33e:	b2db      	uxtb	r3, r3
 800c340:	4619      	mov	r1, r3
 800c342:	68f8      	ldr	r0, [r7, #12]
 800c344:	f000 fa60 	bl	800c808 <USBD_CoreFindEP>
 800c348:	4603      	mov	r3, r0
 800c34a:	75bb      	strb	r3, [r7, #22]
            break;
 800c34c:	e002      	b.n	800c354 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c34e:	2300      	movs	r3, #0
 800c350:	75bb      	strb	r3, [r7, #22]
            break;
 800c352:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c354:	7dbb      	ldrb	r3, [r7, #22]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d119      	bne.n	800c38e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c360:	b2db      	uxtb	r3, r3
 800c362:	2b03      	cmp	r3, #3
 800c364:	d113      	bne.n	800c38e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c366:	7dba      	ldrb	r2, [r7, #22]
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	32ae      	adds	r2, #174	; 0xae
 800c36c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c370:	691b      	ldr	r3, [r3, #16]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d00b      	beq.n	800c38e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c376:	7dba      	ldrb	r2, [r7, #22]
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c37e:	7dba      	ldrb	r2, [r7, #22]
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	32ae      	adds	r2, #174	; 0xae
 800c384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c388:	691b      	ldr	r3, [r3, #16]
 800c38a:	68f8      	ldr	r0, [r7, #12]
 800c38c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c38e:	68f8      	ldr	r0, [r7, #12]
 800c390:	f001 f974 	bl	800d67c <USBD_CtlSendStatus>
 800c394:	e032      	b.n	800c3fc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c396:	7afb      	ldrb	r3, [r7, #11]
 800c398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c39c:	b2db      	uxtb	r3, r3
 800c39e:	4619      	mov	r1, r3
 800c3a0:	68f8      	ldr	r0, [r7, #12]
 800c3a2:	f000 fa31 	bl	800c808 <USBD_CoreFindEP>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c3aa:	7dbb      	ldrb	r3, [r7, #22]
 800c3ac:	2bff      	cmp	r3, #255	; 0xff
 800c3ae:	d025      	beq.n	800c3fc <USBD_LL_DataOutStage+0x15c>
 800c3b0:	7dbb      	ldrb	r3, [r7, #22]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d122      	bne.n	800c3fc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3bc:	b2db      	uxtb	r3, r3
 800c3be:	2b03      	cmp	r3, #3
 800c3c0:	d117      	bne.n	800c3f2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c3c2:	7dba      	ldrb	r2, [r7, #22]
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	32ae      	adds	r2, #174	; 0xae
 800c3c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3cc:	699b      	ldr	r3, [r3, #24]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d00f      	beq.n	800c3f2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c3d2:	7dba      	ldrb	r2, [r7, #22]
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c3da:	7dba      	ldrb	r2, [r7, #22]
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	32ae      	adds	r2, #174	; 0xae
 800c3e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3e4:	699b      	ldr	r3, [r3, #24]
 800c3e6:	7afa      	ldrb	r2, [r7, #11]
 800c3e8:	4611      	mov	r1, r2
 800c3ea:	68f8      	ldr	r0, [r7, #12]
 800c3ec:	4798      	blx	r3
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c3f2:	7dfb      	ldrb	r3, [r7, #23]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d001      	beq.n	800c3fc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c3f8:	7dfb      	ldrb	r3, [r7, #23]
 800c3fa:	e000      	b.n	800c3fe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c3fc:	2300      	movs	r3, #0
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	3718      	adds	r7, #24
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}

0800c406 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c406:	b580      	push	{r7, lr}
 800c408:	b086      	sub	sp, #24
 800c40a:	af00      	add	r7, sp, #0
 800c40c:	60f8      	str	r0, [r7, #12]
 800c40e:	460b      	mov	r3, r1
 800c410:	607a      	str	r2, [r7, #4]
 800c412:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c414:	7afb      	ldrb	r3, [r7, #11]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d16f      	bne.n	800c4fa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	3314      	adds	r3, #20
 800c41e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c426:	2b02      	cmp	r3, #2
 800c428:	d15a      	bne.n	800c4e0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	689a      	ldr	r2, [r3, #8]
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	68db      	ldr	r3, [r3, #12]
 800c432:	429a      	cmp	r2, r3
 800c434:	d914      	bls.n	800c460 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	689a      	ldr	r2, [r3, #8]
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	68db      	ldr	r3, [r3, #12]
 800c43e:	1ad2      	subs	r2, r2, r3
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	689b      	ldr	r3, [r3, #8]
 800c448:	461a      	mov	r2, r3
 800c44a:	6879      	ldr	r1, [r7, #4]
 800c44c:	68f8      	ldr	r0, [r7, #12]
 800c44e:	f001 f8d6 	bl	800d5fe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c452:	2300      	movs	r3, #0
 800c454:	2200      	movs	r2, #0
 800c456:	2100      	movs	r1, #0
 800c458:	68f8      	ldr	r0, [r7, #12]
 800c45a:	f005 fb37 	bl	8011acc <USBD_LL_PrepareReceive>
 800c45e:	e03f      	b.n	800c4e0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c460:	693b      	ldr	r3, [r7, #16]
 800c462:	68da      	ldr	r2, [r3, #12]
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	689b      	ldr	r3, [r3, #8]
 800c468:	429a      	cmp	r2, r3
 800c46a:	d11c      	bne.n	800c4a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	685a      	ldr	r2, [r3, #4]
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c474:	429a      	cmp	r2, r3
 800c476:	d316      	bcc.n	800c4a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	685a      	ldr	r2, [r3, #4]
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c482:	429a      	cmp	r2, r3
 800c484:	d20f      	bcs.n	800c4a6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c486:	2200      	movs	r2, #0
 800c488:	2100      	movs	r1, #0
 800c48a:	68f8      	ldr	r0, [r7, #12]
 800c48c:	f001 f8b7 	bl	800d5fe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	2200      	movs	r2, #0
 800c494:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c498:	2300      	movs	r3, #0
 800c49a:	2200      	movs	r2, #0
 800c49c:	2100      	movs	r1, #0
 800c49e:	68f8      	ldr	r0, [r7, #12]
 800c4a0:	f005 fb14 	bl	8011acc <USBD_LL_PrepareReceive>
 800c4a4:	e01c      	b.n	800c4e0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4ac:	b2db      	uxtb	r3, r3
 800c4ae:	2b03      	cmp	r3, #3
 800c4b0:	d10f      	bne.n	800c4d2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4b8:	68db      	ldr	r3, [r3, #12]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d009      	beq.n	800c4d2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4cc:	68db      	ldr	r3, [r3, #12]
 800c4ce:	68f8      	ldr	r0, [r7, #12]
 800c4d0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4d2:	2180      	movs	r1, #128	; 0x80
 800c4d4:	68f8      	ldr	r0, [r7, #12]
 800c4d6:	f005 fa4f 	bl	8011978 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c4da:	68f8      	ldr	r0, [r7, #12]
 800c4dc:	f001 f8e1 	bl	800d6a2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d03a      	beq.n	800c560 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c4ea:	68f8      	ldr	r0, [r7, #12]
 800c4ec:	f7ff fe42 	bl	800c174 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c4f8:	e032      	b.n	800c560 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c4fa:	7afb      	ldrb	r3, [r7, #11]
 800c4fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c500:	b2db      	uxtb	r3, r3
 800c502:	4619      	mov	r1, r3
 800c504:	68f8      	ldr	r0, [r7, #12]
 800c506:	f000 f97f 	bl	800c808 <USBD_CoreFindEP>
 800c50a:	4603      	mov	r3, r0
 800c50c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c50e:	7dfb      	ldrb	r3, [r7, #23]
 800c510:	2bff      	cmp	r3, #255	; 0xff
 800c512:	d025      	beq.n	800c560 <USBD_LL_DataInStage+0x15a>
 800c514:	7dfb      	ldrb	r3, [r7, #23]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d122      	bne.n	800c560 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c520:	b2db      	uxtb	r3, r3
 800c522:	2b03      	cmp	r3, #3
 800c524:	d11c      	bne.n	800c560 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c526:	7dfa      	ldrb	r2, [r7, #23]
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	32ae      	adds	r2, #174	; 0xae
 800c52c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c530:	695b      	ldr	r3, [r3, #20]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d014      	beq.n	800c560 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c536:	7dfa      	ldrb	r2, [r7, #23]
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c53e:	7dfa      	ldrb	r2, [r7, #23]
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	32ae      	adds	r2, #174	; 0xae
 800c544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c548:	695b      	ldr	r3, [r3, #20]
 800c54a:	7afa      	ldrb	r2, [r7, #11]
 800c54c:	4611      	mov	r1, r2
 800c54e:	68f8      	ldr	r0, [r7, #12]
 800c550:	4798      	blx	r3
 800c552:	4603      	mov	r3, r0
 800c554:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c556:	7dbb      	ldrb	r3, [r7, #22]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d001      	beq.n	800c560 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c55c:	7dbb      	ldrb	r3, [r7, #22]
 800c55e:	e000      	b.n	800c562 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c560:	2300      	movs	r3, #0
}
 800c562:	4618      	mov	r0, r3
 800c564:	3718      	adds	r7, #24
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}

0800c56a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b084      	sub	sp, #16
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c572:	2300      	movs	r3, #0
 800c574:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2201      	movs	r2, #1
 800c57a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2200      	movs	r2, #0
 800c582:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2200      	movs	r2, #0
 800c58a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2200      	movs	r2, #0
 800c590:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2200      	movs	r2, #0
 800c598:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d014      	beq.n	800c5d0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5ac:	685b      	ldr	r3, [r3, #4]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d00e      	beq.n	800c5d0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5b8:	685b      	ldr	r3, [r3, #4]
 800c5ba:	687a      	ldr	r2, [r7, #4]
 800c5bc:	6852      	ldr	r2, [r2, #4]
 800c5be:	b2d2      	uxtb	r2, r2
 800c5c0:	4611      	mov	r1, r2
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	4798      	blx	r3
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d001      	beq.n	800c5d0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c5cc:	2303      	movs	r3, #3
 800c5ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c5d0:	2340      	movs	r3, #64	; 0x40
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	2100      	movs	r1, #0
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f005 f989 	bl	80118ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2201      	movs	r2, #1
 800c5e0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2240      	movs	r2, #64	; 0x40
 800c5e8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c5ec:	2340      	movs	r3, #64	; 0x40
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	2180      	movs	r1, #128	; 0x80
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f005 f97b 	bl	80118ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2240      	movs	r2, #64	; 0x40
 800c602:	621a      	str	r2, [r3, #32]

  return ret;
 800c604:	7bfb      	ldrb	r3, [r7, #15]
}
 800c606:	4618      	mov	r0, r3
 800c608:	3710      	adds	r7, #16
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}

0800c60e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c60e:	b480      	push	{r7}
 800c610:	b083      	sub	sp, #12
 800c612:	af00      	add	r7, sp, #0
 800c614:	6078      	str	r0, [r7, #4]
 800c616:	460b      	mov	r3, r1
 800c618:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	78fa      	ldrb	r2, [r7, #3]
 800c61e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c620:	2300      	movs	r3, #0
}
 800c622:	4618      	mov	r0, r3
 800c624:	370c      	adds	r7, #12
 800c626:	46bd      	mov	sp, r7
 800c628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62c:	4770      	bx	lr

0800c62e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c62e:	b480      	push	{r7}
 800c630:	b083      	sub	sp, #12
 800c632:	af00      	add	r7, sp, #0
 800c634:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c63c:	b2da      	uxtb	r2, r3
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2204      	movs	r2, #4
 800c648:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c64c:	2300      	movs	r3, #0
}
 800c64e:	4618      	mov	r0, r3
 800c650:	370c      	adds	r7, #12
 800c652:	46bd      	mov	sp, r7
 800c654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c658:	4770      	bx	lr

0800c65a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c65a:	b480      	push	{r7}
 800c65c:	b083      	sub	sp, #12
 800c65e:	af00      	add	r7, sp, #0
 800c660:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c668:	b2db      	uxtb	r3, r3
 800c66a:	2b04      	cmp	r3, #4
 800c66c:	d106      	bne.n	800c67c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c674:	b2da      	uxtb	r2, r3
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c67c:	2300      	movs	r3, #0
}
 800c67e:	4618      	mov	r0, r3
 800c680:	370c      	adds	r7, #12
 800c682:	46bd      	mov	sp, r7
 800c684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c688:	4770      	bx	lr

0800c68a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c68a:	b580      	push	{r7, lr}
 800c68c:	b082      	sub	sp, #8
 800c68e:	af00      	add	r7, sp, #0
 800c690:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c698:	b2db      	uxtb	r3, r3
 800c69a:	2b03      	cmp	r3, #3
 800c69c:	d110      	bne.n	800c6c0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d00b      	beq.n	800c6c0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6ae:	69db      	ldr	r3, [r3, #28]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d005      	beq.n	800c6c0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6ba:	69db      	ldr	r3, [r3, #28]
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c6c0:	2300      	movs	r3, #0
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3708      	adds	r7, #8
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}

0800c6ca <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c6ca:	b580      	push	{r7, lr}
 800c6cc:	b082      	sub	sp, #8
 800c6ce:	af00      	add	r7, sp, #0
 800c6d0:	6078      	str	r0, [r7, #4]
 800c6d2:	460b      	mov	r3, r1
 800c6d4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	32ae      	adds	r2, #174	; 0xae
 800c6e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d101      	bne.n	800c6ec <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c6e8:	2303      	movs	r3, #3
 800c6ea:	e01c      	b.n	800c726 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6f2:	b2db      	uxtb	r3, r3
 800c6f4:	2b03      	cmp	r3, #3
 800c6f6:	d115      	bne.n	800c724 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	32ae      	adds	r2, #174	; 0xae
 800c702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c706:	6a1b      	ldr	r3, [r3, #32]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d00b      	beq.n	800c724 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	32ae      	adds	r2, #174	; 0xae
 800c716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c71a:	6a1b      	ldr	r3, [r3, #32]
 800c71c:	78fa      	ldrb	r2, [r7, #3]
 800c71e:	4611      	mov	r1, r2
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c724:	2300      	movs	r3, #0
}
 800c726:	4618      	mov	r0, r3
 800c728:	3708      	adds	r7, #8
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}

0800c72e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c72e:	b580      	push	{r7, lr}
 800c730:	b082      	sub	sp, #8
 800c732:	af00      	add	r7, sp, #0
 800c734:	6078      	str	r0, [r7, #4]
 800c736:	460b      	mov	r3, r1
 800c738:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	32ae      	adds	r2, #174	; 0xae
 800c744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d101      	bne.n	800c750 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c74c:	2303      	movs	r3, #3
 800c74e:	e01c      	b.n	800c78a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c756:	b2db      	uxtb	r3, r3
 800c758:	2b03      	cmp	r3, #3
 800c75a:	d115      	bne.n	800c788 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	32ae      	adds	r2, #174	; 0xae
 800c766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d00b      	beq.n	800c788 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	32ae      	adds	r2, #174	; 0xae
 800c77a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c780:	78fa      	ldrb	r2, [r7, #3]
 800c782:	4611      	mov	r1, r2
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c788:	2300      	movs	r3, #0
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	3708      	adds	r7, #8
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}

0800c792 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c792:	b480      	push	{r7}
 800c794:	b083      	sub	sp, #12
 800c796:	af00      	add	r7, sp, #0
 800c798:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c79a:	2300      	movs	r3, #0
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	370c      	adds	r7, #12
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr

0800c7a8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b084      	sub	sp, #16
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d00e      	beq.n	800c7e4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7cc:	685b      	ldr	r3, [r3, #4]
 800c7ce:	687a      	ldr	r2, [r7, #4]
 800c7d0:	6852      	ldr	r2, [r2, #4]
 800c7d2:	b2d2      	uxtb	r2, r2
 800c7d4:	4611      	mov	r1, r2
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	4798      	blx	r3
 800c7da:	4603      	mov	r3, r0
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d001      	beq.n	800c7e4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c7e0:	2303      	movs	r3, #3
 800c7e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c7e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3710      	adds	r7, #16
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}

0800c7ee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c7ee:	b480      	push	{r7}
 800c7f0:	b083      	sub	sp, #12
 800c7f2:	af00      	add	r7, sp, #0
 800c7f4:	6078      	str	r0, [r7, #4]
 800c7f6:	460b      	mov	r3, r1
 800c7f8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c7fa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	370c      	adds	r7, #12
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr

0800c808 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c808:	b480      	push	{r7}
 800c80a:	b083      	sub	sp, #12
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	460b      	mov	r3, r1
 800c812:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c814:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c816:	4618      	mov	r0, r3
 800c818:	370c      	adds	r7, #12
 800c81a:	46bd      	mov	sp, r7
 800c81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c820:	4770      	bx	lr

0800c822 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c822:	b580      	push	{r7, lr}
 800c824:	b086      	sub	sp, #24
 800c826:	af00      	add	r7, sp, #0
 800c828:	6078      	str	r0, [r7, #4]
 800c82a:	460b      	mov	r3, r1
 800c82c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c836:	2300      	movs	r3, #0
 800c838:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	885b      	ldrh	r3, [r3, #2]
 800c83e:	b29a      	uxth	r2, r3
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	b29b      	uxth	r3, r3
 800c846:	429a      	cmp	r2, r3
 800c848:	d920      	bls.n	800c88c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	781b      	ldrb	r3, [r3, #0]
 800c84e:	b29b      	uxth	r3, r3
 800c850:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c852:	e013      	b.n	800c87c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c854:	f107 030a 	add.w	r3, r7, #10
 800c858:	4619      	mov	r1, r3
 800c85a:	6978      	ldr	r0, [r7, #20]
 800c85c:	f000 f81b 	bl	800c896 <USBD_GetNextDesc>
 800c860:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	785b      	ldrb	r3, [r3, #1]
 800c866:	2b05      	cmp	r3, #5
 800c868:	d108      	bne.n	800c87c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	789b      	ldrb	r3, [r3, #2]
 800c872:	78fa      	ldrb	r2, [r7, #3]
 800c874:	429a      	cmp	r2, r3
 800c876:	d008      	beq.n	800c88a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c878:	2300      	movs	r3, #0
 800c87a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	885b      	ldrh	r3, [r3, #2]
 800c880:	b29a      	uxth	r2, r3
 800c882:	897b      	ldrh	r3, [r7, #10]
 800c884:	429a      	cmp	r2, r3
 800c886:	d8e5      	bhi.n	800c854 <USBD_GetEpDesc+0x32>
 800c888:	e000      	b.n	800c88c <USBD_GetEpDesc+0x6a>
          break;
 800c88a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c88c:	693b      	ldr	r3, [r7, #16]
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3718      	adds	r7, #24
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}

0800c896 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c896:	b480      	push	{r7}
 800c898:	b085      	sub	sp, #20
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	6078      	str	r0, [r7, #4]
 800c89e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	881a      	ldrh	r2, [r3, #0]
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	781b      	ldrb	r3, [r3, #0]
 800c8ac:	b29b      	uxth	r3, r3
 800c8ae:	4413      	add	r3, r2
 800c8b0:	b29a      	uxth	r2, r3
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	781b      	ldrb	r3, [r3, #0]
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	4413      	add	r3, r2
 800c8c0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c8c2:	68fb      	ldr	r3, [r7, #12]
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3714      	adds	r7, #20
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ce:	4770      	bx	lr

0800c8d0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b087      	sub	sp, #28
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c8ee:	8a3b      	ldrh	r3, [r7, #16]
 800c8f0:	021b      	lsls	r3, r3, #8
 800c8f2:	b21a      	sxth	r2, r3
 800c8f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c8f8:	4313      	orrs	r3, r2
 800c8fa:	b21b      	sxth	r3, r3
 800c8fc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c8fe:	89fb      	ldrh	r3, [r7, #14]
}
 800c900:	4618      	mov	r0, r3
 800c902:	371c      	adds	r7, #28
 800c904:	46bd      	mov	sp, r7
 800c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90a:	4770      	bx	lr

0800c90c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b084      	sub	sp, #16
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c916:	2300      	movs	r3, #0
 800c918:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c922:	2b40      	cmp	r3, #64	; 0x40
 800c924:	d005      	beq.n	800c932 <USBD_StdDevReq+0x26>
 800c926:	2b40      	cmp	r3, #64	; 0x40
 800c928:	d857      	bhi.n	800c9da <USBD_StdDevReq+0xce>
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d00f      	beq.n	800c94e <USBD_StdDevReq+0x42>
 800c92e:	2b20      	cmp	r3, #32
 800c930:	d153      	bne.n	800c9da <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	32ae      	adds	r2, #174	; 0xae
 800c93c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c940:	689b      	ldr	r3, [r3, #8]
 800c942:	6839      	ldr	r1, [r7, #0]
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	4798      	blx	r3
 800c948:	4603      	mov	r3, r0
 800c94a:	73fb      	strb	r3, [r7, #15]
      break;
 800c94c:	e04a      	b.n	800c9e4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	785b      	ldrb	r3, [r3, #1]
 800c952:	2b09      	cmp	r3, #9
 800c954:	d83b      	bhi.n	800c9ce <USBD_StdDevReq+0xc2>
 800c956:	a201      	add	r2, pc, #4	; (adr r2, 800c95c <USBD_StdDevReq+0x50>)
 800c958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c95c:	0800c9b1 	.word	0x0800c9b1
 800c960:	0800c9c5 	.word	0x0800c9c5
 800c964:	0800c9cf 	.word	0x0800c9cf
 800c968:	0800c9bb 	.word	0x0800c9bb
 800c96c:	0800c9cf 	.word	0x0800c9cf
 800c970:	0800c98f 	.word	0x0800c98f
 800c974:	0800c985 	.word	0x0800c985
 800c978:	0800c9cf 	.word	0x0800c9cf
 800c97c:	0800c9a7 	.word	0x0800c9a7
 800c980:	0800c999 	.word	0x0800c999
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c984:	6839      	ldr	r1, [r7, #0]
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f000 fa3c 	bl	800ce04 <USBD_GetDescriptor>
          break;
 800c98c:	e024      	b.n	800c9d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c98e:	6839      	ldr	r1, [r7, #0]
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f000 fbcb 	bl	800d12c <USBD_SetAddress>
          break;
 800c996:	e01f      	b.n	800c9d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c998:	6839      	ldr	r1, [r7, #0]
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f000 fc0a 	bl	800d1b4 <USBD_SetConfig>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	73fb      	strb	r3, [r7, #15]
          break;
 800c9a4:	e018      	b.n	800c9d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c9a6:	6839      	ldr	r1, [r7, #0]
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 fcad 	bl	800d308 <USBD_GetConfig>
          break;
 800c9ae:	e013      	b.n	800c9d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c9b0:	6839      	ldr	r1, [r7, #0]
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f000 fcde 	bl	800d374 <USBD_GetStatus>
          break;
 800c9b8:	e00e      	b.n	800c9d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c9ba:	6839      	ldr	r1, [r7, #0]
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f000 fd0d 	bl	800d3dc <USBD_SetFeature>
          break;
 800c9c2:	e009      	b.n	800c9d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c9c4:	6839      	ldr	r1, [r7, #0]
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f000 fd31 	bl	800d42e <USBD_ClrFeature>
          break;
 800c9cc:	e004      	b.n	800c9d8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c9ce:	6839      	ldr	r1, [r7, #0]
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f000 fd88 	bl	800d4e6 <USBD_CtlError>
          break;
 800c9d6:	bf00      	nop
      }
      break;
 800c9d8:	e004      	b.n	800c9e4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c9da:	6839      	ldr	r1, [r7, #0]
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f000 fd82 	bl	800d4e6 <USBD_CtlError>
      break;
 800c9e2:	bf00      	nop
  }

  return ret;
 800c9e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3710      	adds	r7, #16
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}
 800c9ee:	bf00      	nop

0800c9f0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b084      	sub	sp, #16
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca06:	2b40      	cmp	r3, #64	; 0x40
 800ca08:	d005      	beq.n	800ca16 <USBD_StdItfReq+0x26>
 800ca0a:	2b40      	cmp	r3, #64	; 0x40
 800ca0c:	d852      	bhi.n	800cab4 <USBD_StdItfReq+0xc4>
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d001      	beq.n	800ca16 <USBD_StdItfReq+0x26>
 800ca12:	2b20      	cmp	r3, #32
 800ca14:	d14e      	bne.n	800cab4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca1c:	b2db      	uxtb	r3, r3
 800ca1e:	3b01      	subs	r3, #1
 800ca20:	2b02      	cmp	r3, #2
 800ca22:	d840      	bhi.n	800caa6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	889b      	ldrh	r3, [r3, #4]
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	2b01      	cmp	r3, #1
 800ca2c:	d836      	bhi.n	800ca9c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	889b      	ldrh	r3, [r3, #4]
 800ca32:	b2db      	uxtb	r3, r3
 800ca34:	4619      	mov	r1, r3
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	f7ff fed9 	bl	800c7ee <USBD_CoreFindIF>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ca40:	7bbb      	ldrb	r3, [r7, #14]
 800ca42:	2bff      	cmp	r3, #255	; 0xff
 800ca44:	d01d      	beq.n	800ca82 <USBD_StdItfReq+0x92>
 800ca46:	7bbb      	ldrb	r3, [r7, #14]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d11a      	bne.n	800ca82 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ca4c:	7bba      	ldrb	r2, [r7, #14]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	32ae      	adds	r2, #174	; 0xae
 800ca52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca56:	689b      	ldr	r3, [r3, #8]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d00f      	beq.n	800ca7c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ca5c:	7bba      	ldrb	r2, [r7, #14]
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ca64:	7bba      	ldrb	r2, [r7, #14]
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	32ae      	adds	r2, #174	; 0xae
 800ca6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca6e:	689b      	ldr	r3, [r3, #8]
 800ca70:	6839      	ldr	r1, [r7, #0]
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	4798      	blx	r3
 800ca76:	4603      	mov	r3, r0
 800ca78:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ca7a:	e004      	b.n	800ca86 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ca7c:	2303      	movs	r3, #3
 800ca7e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ca80:	e001      	b.n	800ca86 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ca82:	2303      	movs	r3, #3
 800ca84:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	88db      	ldrh	r3, [r3, #6]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d110      	bne.n	800cab0 <USBD_StdItfReq+0xc0>
 800ca8e:	7bfb      	ldrb	r3, [r7, #15]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d10d      	bne.n	800cab0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f000 fdf1 	bl	800d67c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ca9a:	e009      	b.n	800cab0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ca9c:	6839      	ldr	r1, [r7, #0]
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f000 fd21 	bl	800d4e6 <USBD_CtlError>
          break;
 800caa4:	e004      	b.n	800cab0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800caa6:	6839      	ldr	r1, [r7, #0]
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f000 fd1c 	bl	800d4e6 <USBD_CtlError>
          break;
 800caae:	e000      	b.n	800cab2 <USBD_StdItfReq+0xc2>
          break;
 800cab0:	bf00      	nop
      }
      break;
 800cab2:	e004      	b.n	800cabe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800cab4:	6839      	ldr	r1, [r7, #0]
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f000 fd15 	bl	800d4e6 <USBD_CtlError>
      break;
 800cabc:	bf00      	nop
  }

  return ret;
 800cabe:	7bfb      	ldrb	r3, [r7, #15]
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3710      	adds	r7, #16
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}

0800cac8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b084      	sub	sp, #16
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800cad2:	2300      	movs	r3, #0
 800cad4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	889b      	ldrh	r3, [r3, #4]
 800cada:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cae4:	2b40      	cmp	r3, #64	; 0x40
 800cae6:	d007      	beq.n	800caf8 <USBD_StdEPReq+0x30>
 800cae8:	2b40      	cmp	r3, #64	; 0x40
 800caea:	f200 817f 	bhi.w	800cdec <USBD_StdEPReq+0x324>
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d02a      	beq.n	800cb48 <USBD_StdEPReq+0x80>
 800caf2:	2b20      	cmp	r3, #32
 800caf4:	f040 817a 	bne.w	800cdec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800caf8:	7bbb      	ldrb	r3, [r7, #14]
 800cafa:	4619      	mov	r1, r3
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f7ff fe83 	bl	800c808 <USBD_CoreFindEP>
 800cb02:	4603      	mov	r3, r0
 800cb04:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cb06:	7b7b      	ldrb	r3, [r7, #13]
 800cb08:	2bff      	cmp	r3, #255	; 0xff
 800cb0a:	f000 8174 	beq.w	800cdf6 <USBD_StdEPReq+0x32e>
 800cb0e:	7b7b      	ldrb	r3, [r7, #13]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	f040 8170 	bne.w	800cdf6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800cb16:	7b7a      	ldrb	r2, [r7, #13]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800cb1e:	7b7a      	ldrb	r2, [r7, #13]
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	32ae      	adds	r2, #174	; 0xae
 800cb24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb28:	689b      	ldr	r3, [r3, #8]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	f000 8163 	beq.w	800cdf6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800cb30:	7b7a      	ldrb	r2, [r7, #13]
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	32ae      	adds	r2, #174	; 0xae
 800cb36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb3a:	689b      	ldr	r3, [r3, #8]
 800cb3c:	6839      	ldr	r1, [r7, #0]
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	4798      	blx	r3
 800cb42:	4603      	mov	r3, r0
 800cb44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cb46:	e156      	b.n	800cdf6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	785b      	ldrb	r3, [r3, #1]
 800cb4c:	2b03      	cmp	r3, #3
 800cb4e:	d008      	beq.n	800cb62 <USBD_StdEPReq+0x9a>
 800cb50:	2b03      	cmp	r3, #3
 800cb52:	f300 8145 	bgt.w	800cde0 <USBD_StdEPReq+0x318>
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	f000 809b 	beq.w	800cc92 <USBD_StdEPReq+0x1ca>
 800cb5c:	2b01      	cmp	r3, #1
 800cb5e:	d03c      	beq.n	800cbda <USBD_StdEPReq+0x112>
 800cb60:	e13e      	b.n	800cde0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb68:	b2db      	uxtb	r3, r3
 800cb6a:	2b02      	cmp	r3, #2
 800cb6c:	d002      	beq.n	800cb74 <USBD_StdEPReq+0xac>
 800cb6e:	2b03      	cmp	r3, #3
 800cb70:	d016      	beq.n	800cba0 <USBD_StdEPReq+0xd8>
 800cb72:	e02c      	b.n	800cbce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb74:	7bbb      	ldrb	r3, [r7, #14]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d00d      	beq.n	800cb96 <USBD_StdEPReq+0xce>
 800cb7a:	7bbb      	ldrb	r3, [r7, #14]
 800cb7c:	2b80      	cmp	r3, #128	; 0x80
 800cb7e:	d00a      	beq.n	800cb96 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cb80:	7bbb      	ldrb	r3, [r7, #14]
 800cb82:	4619      	mov	r1, r3
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f004 fef7 	bl	8011978 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb8a:	2180      	movs	r1, #128	; 0x80
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f004 fef3 	bl	8011978 <USBD_LL_StallEP>
 800cb92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cb94:	e020      	b.n	800cbd8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800cb96:	6839      	ldr	r1, [r7, #0]
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f000 fca4 	bl	800d4e6 <USBD_CtlError>
              break;
 800cb9e:	e01b      	b.n	800cbd8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	885b      	ldrh	r3, [r3, #2]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d10e      	bne.n	800cbc6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cba8:	7bbb      	ldrb	r3, [r7, #14]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d00b      	beq.n	800cbc6 <USBD_StdEPReq+0xfe>
 800cbae:	7bbb      	ldrb	r3, [r7, #14]
 800cbb0:	2b80      	cmp	r3, #128	; 0x80
 800cbb2:	d008      	beq.n	800cbc6 <USBD_StdEPReq+0xfe>
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	88db      	ldrh	r3, [r3, #6]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d104      	bne.n	800cbc6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cbbc:	7bbb      	ldrb	r3, [r7, #14]
 800cbbe:	4619      	mov	r1, r3
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f004 fed9 	bl	8011978 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f000 fd58 	bl	800d67c <USBD_CtlSendStatus>

              break;
 800cbcc:	e004      	b.n	800cbd8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cbce:	6839      	ldr	r1, [r7, #0]
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f000 fc88 	bl	800d4e6 <USBD_CtlError>
              break;
 800cbd6:	bf00      	nop
          }
          break;
 800cbd8:	e107      	b.n	800cdea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbe0:	b2db      	uxtb	r3, r3
 800cbe2:	2b02      	cmp	r3, #2
 800cbe4:	d002      	beq.n	800cbec <USBD_StdEPReq+0x124>
 800cbe6:	2b03      	cmp	r3, #3
 800cbe8:	d016      	beq.n	800cc18 <USBD_StdEPReq+0x150>
 800cbea:	e04b      	b.n	800cc84 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cbec:	7bbb      	ldrb	r3, [r7, #14]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d00d      	beq.n	800cc0e <USBD_StdEPReq+0x146>
 800cbf2:	7bbb      	ldrb	r3, [r7, #14]
 800cbf4:	2b80      	cmp	r3, #128	; 0x80
 800cbf6:	d00a      	beq.n	800cc0e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cbf8:	7bbb      	ldrb	r3, [r7, #14]
 800cbfa:	4619      	mov	r1, r3
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f004 febb 	bl	8011978 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc02:	2180      	movs	r1, #128	; 0x80
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	f004 feb7 	bl	8011978 <USBD_LL_StallEP>
 800cc0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cc0c:	e040      	b.n	800cc90 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800cc0e:	6839      	ldr	r1, [r7, #0]
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f000 fc68 	bl	800d4e6 <USBD_CtlError>
              break;
 800cc16:	e03b      	b.n	800cc90 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	885b      	ldrh	r3, [r3, #2]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d136      	bne.n	800cc8e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cc20:	7bbb      	ldrb	r3, [r7, #14]
 800cc22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d004      	beq.n	800cc34 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cc2a:	7bbb      	ldrb	r3, [r7, #14]
 800cc2c:	4619      	mov	r1, r3
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f004 fec1 	bl	80119b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f000 fd21 	bl	800d67c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800cc3a:	7bbb      	ldrb	r3, [r7, #14]
 800cc3c:	4619      	mov	r1, r3
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f7ff fde2 	bl	800c808 <USBD_CoreFindEP>
 800cc44:	4603      	mov	r3, r0
 800cc46:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cc48:	7b7b      	ldrb	r3, [r7, #13]
 800cc4a:	2bff      	cmp	r3, #255	; 0xff
 800cc4c:	d01f      	beq.n	800cc8e <USBD_StdEPReq+0x1c6>
 800cc4e:	7b7b      	ldrb	r3, [r7, #13]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d11c      	bne.n	800cc8e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cc54:	7b7a      	ldrb	r2, [r7, #13]
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cc5c:	7b7a      	ldrb	r2, [r7, #13]
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	32ae      	adds	r2, #174	; 0xae
 800cc62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc66:	689b      	ldr	r3, [r3, #8]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d010      	beq.n	800cc8e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cc6c:	7b7a      	ldrb	r2, [r7, #13]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	32ae      	adds	r2, #174	; 0xae
 800cc72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc76:	689b      	ldr	r3, [r3, #8]
 800cc78:	6839      	ldr	r1, [r7, #0]
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	4798      	blx	r3
 800cc7e:	4603      	mov	r3, r0
 800cc80:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800cc82:	e004      	b.n	800cc8e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cc84:	6839      	ldr	r1, [r7, #0]
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f000 fc2d 	bl	800d4e6 <USBD_CtlError>
              break;
 800cc8c:	e000      	b.n	800cc90 <USBD_StdEPReq+0x1c8>
              break;
 800cc8e:	bf00      	nop
          }
          break;
 800cc90:	e0ab      	b.n	800cdea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc98:	b2db      	uxtb	r3, r3
 800cc9a:	2b02      	cmp	r3, #2
 800cc9c:	d002      	beq.n	800cca4 <USBD_StdEPReq+0x1dc>
 800cc9e:	2b03      	cmp	r3, #3
 800cca0:	d032      	beq.n	800cd08 <USBD_StdEPReq+0x240>
 800cca2:	e097      	b.n	800cdd4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cca4:	7bbb      	ldrb	r3, [r7, #14]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d007      	beq.n	800ccba <USBD_StdEPReq+0x1f2>
 800ccaa:	7bbb      	ldrb	r3, [r7, #14]
 800ccac:	2b80      	cmp	r3, #128	; 0x80
 800ccae:	d004      	beq.n	800ccba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ccb0:	6839      	ldr	r1, [r7, #0]
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f000 fc17 	bl	800d4e6 <USBD_CtlError>
                break;
 800ccb8:	e091      	b.n	800cdde <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ccba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	da0b      	bge.n	800ccda <USBD_StdEPReq+0x212>
 800ccc2:	7bbb      	ldrb	r3, [r7, #14]
 800ccc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ccc8:	4613      	mov	r3, r2
 800ccca:	009b      	lsls	r3, r3, #2
 800cccc:	4413      	add	r3, r2
 800ccce:	009b      	lsls	r3, r3, #2
 800ccd0:	3310      	adds	r3, #16
 800ccd2:	687a      	ldr	r2, [r7, #4]
 800ccd4:	4413      	add	r3, r2
 800ccd6:	3304      	adds	r3, #4
 800ccd8:	e00b      	b.n	800ccf2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ccda:	7bbb      	ldrb	r3, [r7, #14]
 800ccdc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cce0:	4613      	mov	r3, r2
 800cce2:	009b      	lsls	r3, r3, #2
 800cce4:	4413      	add	r3, r2
 800cce6:	009b      	lsls	r3, r3, #2
 800cce8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ccec:	687a      	ldr	r2, [r7, #4]
 800ccee:	4413      	add	r3, r2
 800ccf0:	3304      	adds	r3, #4
 800ccf2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	2202      	movs	r2, #2
 800ccfe:	4619      	mov	r1, r3
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f000 fc61 	bl	800d5c8 <USBD_CtlSendData>
              break;
 800cd06:	e06a      	b.n	800cdde <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cd08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	da11      	bge.n	800cd34 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cd10:	7bbb      	ldrb	r3, [r7, #14]
 800cd12:	f003 020f 	and.w	r2, r3, #15
 800cd16:	6879      	ldr	r1, [r7, #4]
 800cd18:	4613      	mov	r3, r2
 800cd1a:	009b      	lsls	r3, r3, #2
 800cd1c:	4413      	add	r3, r2
 800cd1e:	009b      	lsls	r3, r3, #2
 800cd20:	440b      	add	r3, r1
 800cd22:	3324      	adds	r3, #36	; 0x24
 800cd24:	881b      	ldrh	r3, [r3, #0]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d117      	bne.n	800cd5a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cd2a:	6839      	ldr	r1, [r7, #0]
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	f000 fbda 	bl	800d4e6 <USBD_CtlError>
                  break;
 800cd32:	e054      	b.n	800cdde <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cd34:	7bbb      	ldrb	r3, [r7, #14]
 800cd36:	f003 020f 	and.w	r2, r3, #15
 800cd3a:	6879      	ldr	r1, [r7, #4]
 800cd3c:	4613      	mov	r3, r2
 800cd3e:	009b      	lsls	r3, r3, #2
 800cd40:	4413      	add	r3, r2
 800cd42:	009b      	lsls	r3, r3, #2
 800cd44:	440b      	add	r3, r1
 800cd46:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cd4a:	881b      	ldrh	r3, [r3, #0]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d104      	bne.n	800cd5a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cd50:	6839      	ldr	r1, [r7, #0]
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	f000 fbc7 	bl	800d4e6 <USBD_CtlError>
                  break;
 800cd58:	e041      	b.n	800cdde <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	da0b      	bge.n	800cd7a <USBD_StdEPReq+0x2b2>
 800cd62:	7bbb      	ldrb	r3, [r7, #14]
 800cd64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd68:	4613      	mov	r3, r2
 800cd6a:	009b      	lsls	r3, r3, #2
 800cd6c:	4413      	add	r3, r2
 800cd6e:	009b      	lsls	r3, r3, #2
 800cd70:	3310      	adds	r3, #16
 800cd72:	687a      	ldr	r2, [r7, #4]
 800cd74:	4413      	add	r3, r2
 800cd76:	3304      	adds	r3, #4
 800cd78:	e00b      	b.n	800cd92 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cd7a:	7bbb      	ldrb	r3, [r7, #14]
 800cd7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd80:	4613      	mov	r3, r2
 800cd82:	009b      	lsls	r3, r3, #2
 800cd84:	4413      	add	r3, r2
 800cd86:	009b      	lsls	r3, r3, #2
 800cd88:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cd8c:	687a      	ldr	r2, [r7, #4]
 800cd8e:	4413      	add	r3, r2
 800cd90:	3304      	adds	r3, #4
 800cd92:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cd94:	7bbb      	ldrb	r3, [r7, #14]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d002      	beq.n	800cda0 <USBD_StdEPReq+0x2d8>
 800cd9a:	7bbb      	ldrb	r3, [r7, #14]
 800cd9c:	2b80      	cmp	r3, #128	; 0x80
 800cd9e:	d103      	bne.n	800cda8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	2200      	movs	r2, #0
 800cda4:	601a      	str	r2, [r3, #0]
 800cda6:	e00e      	b.n	800cdc6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cda8:	7bbb      	ldrb	r3, [r7, #14]
 800cdaa:	4619      	mov	r1, r3
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f004 fe21 	bl	80119f4 <USBD_LL_IsStallEP>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d003      	beq.n	800cdc0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	2201      	movs	r2, #1
 800cdbc:	601a      	str	r2, [r3, #0]
 800cdbe:	e002      	b.n	800cdc6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	2202      	movs	r2, #2
 800cdca:	4619      	mov	r1, r3
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f000 fbfb 	bl	800d5c8 <USBD_CtlSendData>
              break;
 800cdd2:	e004      	b.n	800cdde <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800cdd4:	6839      	ldr	r1, [r7, #0]
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f000 fb85 	bl	800d4e6 <USBD_CtlError>
              break;
 800cddc:	bf00      	nop
          }
          break;
 800cdde:	e004      	b.n	800cdea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800cde0:	6839      	ldr	r1, [r7, #0]
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f000 fb7f 	bl	800d4e6 <USBD_CtlError>
          break;
 800cde8:	bf00      	nop
      }
      break;
 800cdea:	e005      	b.n	800cdf8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800cdec:	6839      	ldr	r1, [r7, #0]
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f000 fb79 	bl	800d4e6 <USBD_CtlError>
      break;
 800cdf4:	e000      	b.n	800cdf8 <USBD_StdEPReq+0x330>
      break;
 800cdf6:	bf00      	nop
  }

  return ret;
 800cdf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3710      	adds	r7, #16
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
	...

0800ce04 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b084      	sub	sp, #16
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ce12:	2300      	movs	r3, #0
 800ce14:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ce16:	2300      	movs	r3, #0
 800ce18:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	885b      	ldrh	r3, [r3, #2]
 800ce1e:	0a1b      	lsrs	r3, r3, #8
 800ce20:	b29b      	uxth	r3, r3
 800ce22:	3b01      	subs	r3, #1
 800ce24:	2b0e      	cmp	r3, #14
 800ce26:	f200 8152 	bhi.w	800d0ce <USBD_GetDescriptor+0x2ca>
 800ce2a:	a201      	add	r2, pc, #4	; (adr r2, 800ce30 <USBD_GetDescriptor+0x2c>)
 800ce2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce30:	0800cea1 	.word	0x0800cea1
 800ce34:	0800ceb9 	.word	0x0800ceb9
 800ce38:	0800cef9 	.word	0x0800cef9
 800ce3c:	0800d0cf 	.word	0x0800d0cf
 800ce40:	0800d0cf 	.word	0x0800d0cf
 800ce44:	0800d06f 	.word	0x0800d06f
 800ce48:	0800d09b 	.word	0x0800d09b
 800ce4c:	0800d0cf 	.word	0x0800d0cf
 800ce50:	0800d0cf 	.word	0x0800d0cf
 800ce54:	0800d0cf 	.word	0x0800d0cf
 800ce58:	0800d0cf 	.word	0x0800d0cf
 800ce5c:	0800d0cf 	.word	0x0800d0cf
 800ce60:	0800d0cf 	.word	0x0800d0cf
 800ce64:	0800d0cf 	.word	0x0800d0cf
 800ce68:	0800ce6d 	.word	0x0800ce6d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce72:	69db      	ldr	r3, [r3, #28]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d00b      	beq.n	800ce90 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce7e:	69db      	ldr	r3, [r3, #28]
 800ce80:	687a      	ldr	r2, [r7, #4]
 800ce82:	7c12      	ldrb	r2, [r2, #16]
 800ce84:	f107 0108 	add.w	r1, r7, #8
 800ce88:	4610      	mov	r0, r2
 800ce8a:	4798      	blx	r3
 800ce8c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ce8e:	e126      	b.n	800d0de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ce90:	6839      	ldr	r1, [r7, #0]
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f000 fb27 	bl	800d4e6 <USBD_CtlError>
        err++;
 800ce98:	7afb      	ldrb	r3, [r7, #11]
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	72fb      	strb	r3, [r7, #11]
      break;
 800ce9e:	e11e      	b.n	800d0de <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	687a      	ldr	r2, [r7, #4]
 800ceaa:	7c12      	ldrb	r2, [r2, #16]
 800ceac:	f107 0108 	add.w	r1, r7, #8
 800ceb0:	4610      	mov	r0, r2
 800ceb2:	4798      	blx	r3
 800ceb4:	60f8      	str	r0, [r7, #12]
      break;
 800ceb6:	e112      	b.n	800d0de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	7c1b      	ldrb	r3, [r3, #16]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d10d      	bne.n	800cedc <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cec8:	f107 0208 	add.w	r2, r7, #8
 800cecc:	4610      	mov	r0, r2
 800cece:	4798      	blx	r3
 800ced0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	3301      	adds	r3, #1
 800ced6:	2202      	movs	r2, #2
 800ced8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ceda:	e100      	b.n	800d0de <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee4:	f107 0208 	add.w	r2, r7, #8
 800cee8:	4610      	mov	r0, r2
 800ceea:	4798      	blx	r3
 800ceec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	3301      	adds	r3, #1
 800cef2:	2202      	movs	r2, #2
 800cef4:	701a      	strb	r2, [r3, #0]
      break;
 800cef6:	e0f2      	b.n	800d0de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	885b      	ldrh	r3, [r3, #2]
 800cefc:	b2db      	uxtb	r3, r3
 800cefe:	2b05      	cmp	r3, #5
 800cf00:	f200 80ac 	bhi.w	800d05c <USBD_GetDescriptor+0x258>
 800cf04:	a201      	add	r2, pc, #4	; (adr r2, 800cf0c <USBD_GetDescriptor+0x108>)
 800cf06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf0a:	bf00      	nop
 800cf0c:	0800cf25 	.word	0x0800cf25
 800cf10:	0800cf59 	.word	0x0800cf59
 800cf14:	0800cf8d 	.word	0x0800cf8d
 800cf18:	0800cfc1 	.word	0x0800cfc1
 800cf1c:	0800cff5 	.word	0x0800cff5
 800cf20:	0800d029 	.word	0x0800d029
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d00b      	beq.n	800cf48 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf36:	685b      	ldr	r3, [r3, #4]
 800cf38:	687a      	ldr	r2, [r7, #4]
 800cf3a:	7c12      	ldrb	r2, [r2, #16]
 800cf3c:	f107 0108 	add.w	r1, r7, #8
 800cf40:	4610      	mov	r0, r2
 800cf42:	4798      	blx	r3
 800cf44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf46:	e091      	b.n	800d06c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cf48:	6839      	ldr	r1, [r7, #0]
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f000 facb 	bl	800d4e6 <USBD_CtlError>
            err++;
 800cf50:	7afb      	ldrb	r3, [r7, #11]
 800cf52:	3301      	adds	r3, #1
 800cf54:	72fb      	strb	r3, [r7, #11]
          break;
 800cf56:	e089      	b.n	800d06c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf5e:	689b      	ldr	r3, [r3, #8]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d00b      	beq.n	800cf7c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf6a:	689b      	ldr	r3, [r3, #8]
 800cf6c:	687a      	ldr	r2, [r7, #4]
 800cf6e:	7c12      	ldrb	r2, [r2, #16]
 800cf70:	f107 0108 	add.w	r1, r7, #8
 800cf74:	4610      	mov	r0, r2
 800cf76:	4798      	blx	r3
 800cf78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf7a:	e077      	b.n	800d06c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cf7c:	6839      	ldr	r1, [r7, #0]
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f000 fab1 	bl	800d4e6 <USBD_CtlError>
            err++;
 800cf84:	7afb      	ldrb	r3, [r7, #11]
 800cf86:	3301      	adds	r3, #1
 800cf88:	72fb      	strb	r3, [r7, #11]
          break;
 800cf8a:	e06f      	b.n	800d06c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf92:	68db      	ldr	r3, [r3, #12]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d00b      	beq.n	800cfb0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf9e:	68db      	ldr	r3, [r3, #12]
 800cfa0:	687a      	ldr	r2, [r7, #4]
 800cfa2:	7c12      	ldrb	r2, [r2, #16]
 800cfa4:	f107 0108 	add.w	r1, r7, #8
 800cfa8:	4610      	mov	r0, r2
 800cfaa:	4798      	blx	r3
 800cfac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfae:	e05d      	b.n	800d06c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cfb0:	6839      	ldr	r1, [r7, #0]
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f000 fa97 	bl	800d4e6 <USBD_CtlError>
            err++;
 800cfb8:	7afb      	ldrb	r3, [r7, #11]
 800cfba:	3301      	adds	r3, #1
 800cfbc:	72fb      	strb	r3, [r7, #11]
          break;
 800cfbe:	e055      	b.n	800d06c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfc6:	691b      	ldr	r3, [r3, #16]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d00b      	beq.n	800cfe4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfd2:	691b      	ldr	r3, [r3, #16]
 800cfd4:	687a      	ldr	r2, [r7, #4]
 800cfd6:	7c12      	ldrb	r2, [r2, #16]
 800cfd8:	f107 0108 	add.w	r1, r7, #8
 800cfdc:	4610      	mov	r0, r2
 800cfde:	4798      	blx	r3
 800cfe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfe2:	e043      	b.n	800d06c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cfe4:	6839      	ldr	r1, [r7, #0]
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f000 fa7d 	bl	800d4e6 <USBD_CtlError>
            err++;
 800cfec:	7afb      	ldrb	r3, [r7, #11]
 800cfee:	3301      	adds	r3, #1
 800cff0:	72fb      	strb	r3, [r7, #11]
          break;
 800cff2:	e03b      	b.n	800d06c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cffa:	695b      	ldr	r3, [r3, #20]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d00b      	beq.n	800d018 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d006:	695b      	ldr	r3, [r3, #20]
 800d008:	687a      	ldr	r2, [r7, #4]
 800d00a:	7c12      	ldrb	r2, [r2, #16]
 800d00c:	f107 0108 	add.w	r1, r7, #8
 800d010:	4610      	mov	r0, r2
 800d012:	4798      	blx	r3
 800d014:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d016:	e029      	b.n	800d06c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d018:	6839      	ldr	r1, [r7, #0]
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f000 fa63 	bl	800d4e6 <USBD_CtlError>
            err++;
 800d020:	7afb      	ldrb	r3, [r7, #11]
 800d022:	3301      	adds	r3, #1
 800d024:	72fb      	strb	r3, [r7, #11]
          break;
 800d026:	e021      	b.n	800d06c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d02e:	699b      	ldr	r3, [r3, #24]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d00b      	beq.n	800d04c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d03a:	699b      	ldr	r3, [r3, #24]
 800d03c:	687a      	ldr	r2, [r7, #4]
 800d03e:	7c12      	ldrb	r2, [r2, #16]
 800d040:	f107 0108 	add.w	r1, r7, #8
 800d044:	4610      	mov	r0, r2
 800d046:	4798      	blx	r3
 800d048:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d04a:	e00f      	b.n	800d06c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d04c:	6839      	ldr	r1, [r7, #0]
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	f000 fa49 	bl	800d4e6 <USBD_CtlError>
            err++;
 800d054:	7afb      	ldrb	r3, [r7, #11]
 800d056:	3301      	adds	r3, #1
 800d058:	72fb      	strb	r3, [r7, #11]
          break;
 800d05a:	e007      	b.n	800d06c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d05c:	6839      	ldr	r1, [r7, #0]
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f000 fa41 	bl	800d4e6 <USBD_CtlError>
          err++;
 800d064:	7afb      	ldrb	r3, [r7, #11]
 800d066:	3301      	adds	r3, #1
 800d068:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d06a:	bf00      	nop
      }
      break;
 800d06c:	e037      	b.n	800d0de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	7c1b      	ldrb	r3, [r3, #16]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d109      	bne.n	800d08a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d07c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d07e:	f107 0208 	add.w	r2, r7, #8
 800d082:	4610      	mov	r0, r2
 800d084:	4798      	blx	r3
 800d086:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d088:	e029      	b.n	800d0de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d08a:	6839      	ldr	r1, [r7, #0]
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f000 fa2a 	bl	800d4e6 <USBD_CtlError>
        err++;
 800d092:	7afb      	ldrb	r3, [r7, #11]
 800d094:	3301      	adds	r3, #1
 800d096:	72fb      	strb	r3, [r7, #11]
      break;
 800d098:	e021      	b.n	800d0de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	7c1b      	ldrb	r3, [r3, #16]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d10d      	bne.n	800d0be <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0aa:	f107 0208 	add.w	r2, r7, #8
 800d0ae:	4610      	mov	r0, r2
 800d0b0:	4798      	blx	r3
 800d0b2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	3301      	adds	r3, #1
 800d0b8:	2207      	movs	r2, #7
 800d0ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d0bc:	e00f      	b.n	800d0de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d0be:	6839      	ldr	r1, [r7, #0]
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f000 fa10 	bl	800d4e6 <USBD_CtlError>
        err++;
 800d0c6:	7afb      	ldrb	r3, [r7, #11]
 800d0c8:	3301      	adds	r3, #1
 800d0ca:	72fb      	strb	r3, [r7, #11]
      break;
 800d0cc:	e007      	b.n	800d0de <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d0ce:	6839      	ldr	r1, [r7, #0]
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f000 fa08 	bl	800d4e6 <USBD_CtlError>
      err++;
 800d0d6:	7afb      	ldrb	r3, [r7, #11]
 800d0d8:	3301      	adds	r3, #1
 800d0da:	72fb      	strb	r3, [r7, #11]
      break;
 800d0dc:	bf00      	nop
  }

  if (err != 0U)
 800d0de:	7afb      	ldrb	r3, [r7, #11]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d11e      	bne.n	800d122 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	88db      	ldrh	r3, [r3, #6]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d016      	beq.n	800d11a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d0ec:	893b      	ldrh	r3, [r7, #8]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d00e      	beq.n	800d110 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	88da      	ldrh	r2, [r3, #6]
 800d0f6:	893b      	ldrh	r3, [r7, #8]
 800d0f8:	4293      	cmp	r3, r2
 800d0fa:	bf28      	it	cs
 800d0fc:	4613      	movcs	r3, r2
 800d0fe:	b29b      	uxth	r3, r3
 800d100:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d102:	893b      	ldrh	r3, [r7, #8]
 800d104:	461a      	mov	r2, r3
 800d106:	68f9      	ldr	r1, [r7, #12]
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	f000 fa5d 	bl	800d5c8 <USBD_CtlSendData>
 800d10e:	e009      	b.n	800d124 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d110:	6839      	ldr	r1, [r7, #0]
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f000 f9e7 	bl	800d4e6 <USBD_CtlError>
 800d118:	e004      	b.n	800d124 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f000 faae 	bl	800d67c <USBD_CtlSendStatus>
 800d120:	e000      	b.n	800d124 <USBD_GetDescriptor+0x320>
    return;
 800d122:	bf00      	nop
  }
}
 800d124:	3710      	adds	r7, #16
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}
 800d12a:	bf00      	nop

0800d12c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b084      	sub	sp, #16
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	889b      	ldrh	r3, [r3, #4]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d131      	bne.n	800d1a2 <USBD_SetAddress+0x76>
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	88db      	ldrh	r3, [r3, #6]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d12d      	bne.n	800d1a2 <USBD_SetAddress+0x76>
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	885b      	ldrh	r3, [r3, #2]
 800d14a:	2b7f      	cmp	r3, #127	; 0x7f
 800d14c:	d829      	bhi.n	800d1a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	885b      	ldrh	r3, [r3, #2]
 800d152:	b2db      	uxtb	r3, r3
 800d154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d158:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d160:	b2db      	uxtb	r3, r3
 800d162:	2b03      	cmp	r3, #3
 800d164:	d104      	bne.n	800d170 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d166:	6839      	ldr	r1, [r7, #0]
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f000 f9bc 	bl	800d4e6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d16e:	e01d      	b.n	800d1ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	7bfa      	ldrb	r2, [r7, #15]
 800d174:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d178:	7bfb      	ldrb	r3, [r7, #15]
 800d17a:	4619      	mov	r1, r3
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f004 fc65 	bl	8011a4c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 fa7a 	bl	800d67c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d188:	7bfb      	ldrb	r3, [r7, #15]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d004      	beq.n	800d198 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2202      	movs	r2, #2
 800d192:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d196:	e009      	b.n	800d1ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2201      	movs	r2, #1
 800d19c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1a0:	e004      	b.n	800d1ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d1a2:	6839      	ldr	r1, [r7, #0]
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f000 f99e 	bl	800d4e6 <USBD_CtlError>
  }
}
 800d1aa:	bf00      	nop
 800d1ac:	bf00      	nop
 800d1ae:	3710      	adds	r7, #16
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}

0800d1b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b084      	sub	sp, #16
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
 800d1bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	885b      	ldrh	r3, [r3, #2]
 800d1c6:	b2da      	uxtb	r2, r3
 800d1c8:	4b4e      	ldr	r3, [pc, #312]	; (800d304 <USBD_SetConfig+0x150>)
 800d1ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d1cc:	4b4d      	ldr	r3, [pc, #308]	; (800d304 <USBD_SetConfig+0x150>)
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	2b01      	cmp	r3, #1
 800d1d2:	d905      	bls.n	800d1e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d1d4:	6839      	ldr	r1, [r7, #0]
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f000 f985 	bl	800d4e6 <USBD_CtlError>
    return USBD_FAIL;
 800d1dc:	2303      	movs	r3, #3
 800d1de:	e08c      	b.n	800d2fa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1e6:	b2db      	uxtb	r3, r3
 800d1e8:	2b02      	cmp	r3, #2
 800d1ea:	d002      	beq.n	800d1f2 <USBD_SetConfig+0x3e>
 800d1ec:	2b03      	cmp	r3, #3
 800d1ee:	d029      	beq.n	800d244 <USBD_SetConfig+0x90>
 800d1f0:	e075      	b.n	800d2de <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d1f2:	4b44      	ldr	r3, [pc, #272]	; (800d304 <USBD_SetConfig+0x150>)
 800d1f4:	781b      	ldrb	r3, [r3, #0]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d020      	beq.n	800d23c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d1fa:	4b42      	ldr	r3, [pc, #264]	; (800d304 <USBD_SetConfig+0x150>)
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	461a      	mov	r2, r3
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d204:	4b3f      	ldr	r3, [pc, #252]	; (800d304 <USBD_SetConfig+0x150>)
 800d206:	781b      	ldrb	r3, [r3, #0]
 800d208:	4619      	mov	r1, r3
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f7fe ffbd 	bl	800c18a <USBD_SetClassConfig>
 800d210:	4603      	mov	r3, r0
 800d212:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d214:	7bfb      	ldrb	r3, [r7, #15]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d008      	beq.n	800d22c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d21a:	6839      	ldr	r1, [r7, #0]
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f000 f962 	bl	800d4e6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2202      	movs	r2, #2
 800d226:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d22a:	e065      	b.n	800d2f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f000 fa25 	bl	800d67c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2203      	movs	r2, #3
 800d236:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d23a:	e05d      	b.n	800d2f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f000 fa1d 	bl	800d67c <USBD_CtlSendStatus>
      break;
 800d242:	e059      	b.n	800d2f8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d244:	4b2f      	ldr	r3, [pc, #188]	; (800d304 <USBD_SetConfig+0x150>)
 800d246:	781b      	ldrb	r3, [r3, #0]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d112      	bne.n	800d272 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2202      	movs	r2, #2
 800d250:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d254:	4b2b      	ldr	r3, [pc, #172]	; (800d304 <USBD_SetConfig+0x150>)
 800d256:	781b      	ldrb	r3, [r3, #0]
 800d258:	461a      	mov	r2, r3
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d25e:	4b29      	ldr	r3, [pc, #164]	; (800d304 <USBD_SetConfig+0x150>)
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	4619      	mov	r1, r3
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f7fe ffac 	bl	800c1c2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f000 fa06 	bl	800d67c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d270:	e042      	b.n	800d2f8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d272:	4b24      	ldr	r3, [pc, #144]	; (800d304 <USBD_SetConfig+0x150>)
 800d274:	781b      	ldrb	r3, [r3, #0]
 800d276:	461a      	mov	r2, r3
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	685b      	ldr	r3, [r3, #4]
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d02a      	beq.n	800d2d6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	685b      	ldr	r3, [r3, #4]
 800d284:	b2db      	uxtb	r3, r3
 800d286:	4619      	mov	r1, r3
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f7fe ff9a 	bl	800c1c2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d28e:	4b1d      	ldr	r3, [pc, #116]	; (800d304 <USBD_SetConfig+0x150>)
 800d290:	781b      	ldrb	r3, [r3, #0]
 800d292:	461a      	mov	r2, r3
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d298:	4b1a      	ldr	r3, [pc, #104]	; (800d304 <USBD_SetConfig+0x150>)
 800d29a:	781b      	ldrb	r3, [r3, #0]
 800d29c:	4619      	mov	r1, r3
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f7fe ff73 	bl	800c18a <USBD_SetClassConfig>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d2a8:	7bfb      	ldrb	r3, [r7, #15]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d00f      	beq.n	800d2ce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d2ae:	6839      	ldr	r1, [r7, #0]
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	f000 f918 	bl	800d4e6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	685b      	ldr	r3, [r3, #4]
 800d2ba:	b2db      	uxtb	r3, r3
 800d2bc:	4619      	mov	r1, r3
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f7fe ff7f 	bl	800c1c2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2202      	movs	r2, #2
 800d2c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d2cc:	e014      	b.n	800d2f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f000 f9d4 	bl	800d67c <USBD_CtlSendStatus>
      break;
 800d2d4:	e010      	b.n	800d2f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	f000 f9d0 	bl	800d67c <USBD_CtlSendStatus>
      break;
 800d2dc:	e00c      	b.n	800d2f8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d2de:	6839      	ldr	r1, [r7, #0]
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f000 f900 	bl	800d4e6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d2e6:	4b07      	ldr	r3, [pc, #28]	; (800d304 <USBD_SetConfig+0x150>)
 800d2e8:	781b      	ldrb	r3, [r3, #0]
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f7fe ff68 	bl	800c1c2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d2f2:	2303      	movs	r3, #3
 800d2f4:	73fb      	strb	r3, [r7, #15]
      break;
 800d2f6:	bf00      	nop
  }

  return ret;
 800d2f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3710      	adds	r7, #16
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}
 800d302:	bf00      	nop
 800d304:	2000087f 	.word	0x2000087f

0800d308 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b082      	sub	sp, #8
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	88db      	ldrh	r3, [r3, #6]
 800d316:	2b01      	cmp	r3, #1
 800d318:	d004      	beq.n	800d324 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d31a:	6839      	ldr	r1, [r7, #0]
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f000 f8e2 	bl	800d4e6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d322:	e023      	b.n	800d36c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d32a:	b2db      	uxtb	r3, r3
 800d32c:	2b02      	cmp	r3, #2
 800d32e:	dc02      	bgt.n	800d336 <USBD_GetConfig+0x2e>
 800d330:	2b00      	cmp	r3, #0
 800d332:	dc03      	bgt.n	800d33c <USBD_GetConfig+0x34>
 800d334:	e015      	b.n	800d362 <USBD_GetConfig+0x5a>
 800d336:	2b03      	cmp	r3, #3
 800d338:	d00b      	beq.n	800d352 <USBD_GetConfig+0x4a>
 800d33a:	e012      	b.n	800d362 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2200      	movs	r2, #0
 800d340:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	3308      	adds	r3, #8
 800d346:	2201      	movs	r2, #1
 800d348:	4619      	mov	r1, r3
 800d34a:	6878      	ldr	r0, [r7, #4]
 800d34c:	f000 f93c 	bl	800d5c8 <USBD_CtlSendData>
        break;
 800d350:	e00c      	b.n	800d36c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	3304      	adds	r3, #4
 800d356:	2201      	movs	r2, #1
 800d358:	4619      	mov	r1, r3
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f000 f934 	bl	800d5c8 <USBD_CtlSendData>
        break;
 800d360:	e004      	b.n	800d36c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d362:	6839      	ldr	r1, [r7, #0]
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f000 f8be 	bl	800d4e6 <USBD_CtlError>
        break;
 800d36a:	bf00      	nop
}
 800d36c:	bf00      	nop
 800d36e:	3708      	adds	r7, #8
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}

0800d374 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b082      	sub	sp, #8
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d384:	b2db      	uxtb	r3, r3
 800d386:	3b01      	subs	r3, #1
 800d388:	2b02      	cmp	r3, #2
 800d38a:	d81e      	bhi.n	800d3ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	88db      	ldrh	r3, [r3, #6]
 800d390:	2b02      	cmp	r3, #2
 800d392:	d004      	beq.n	800d39e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d394:	6839      	ldr	r1, [r7, #0]
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f000 f8a5 	bl	800d4e6 <USBD_CtlError>
        break;
 800d39c:	e01a      	b.n	800d3d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2201      	movs	r2, #1
 800d3a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d005      	beq.n	800d3ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	68db      	ldr	r3, [r3, #12]
 800d3b2:	f043 0202 	orr.w	r2, r3, #2
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	330c      	adds	r3, #12
 800d3be:	2202      	movs	r2, #2
 800d3c0:	4619      	mov	r1, r3
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f000 f900 	bl	800d5c8 <USBD_CtlSendData>
      break;
 800d3c8:	e004      	b.n	800d3d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d3ca:	6839      	ldr	r1, [r7, #0]
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f000 f88a 	bl	800d4e6 <USBD_CtlError>
      break;
 800d3d2:	bf00      	nop
  }
}
 800d3d4:	bf00      	nop
 800d3d6:	3708      	adds	r7, #8
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}

0800d3dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b082      	sub	sp, #8
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
 800d3e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	885b      	ldrh	r3, [r3, #2]
 800d3ea:	2b01      	cmp	r3, #1
 800d3ec:	d107      	bne.n	800d3fe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2201      	movs	r2, #1
 800d3f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f000 f940 	bl	800d67c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d3fc:	e013      	b.n	800d426 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	885b      	ldrh	r3, [r3, #2]
 800d402:	2b02      	cmp	r3, #2
 800d404:	d10b      	bne.n	800d41e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	889b      	ldrh	r3, [r3, #4]
 800d40a:	0a1b      	lsrs	r3, r3, #8
 800d40c:	b29b      	uxth	r3, r3
 800d40e:	b2da      	uxtb	r2, r3
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	f000 f930 	bl	800d67c <USBD_CtlSendStatus>
}
 800d41c:	e003      	b.n	800d426 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d41e:	6839      	ldr	r1, [r7, #0]
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	f000 f860 	bl	800d4e6 <USBD_CtlError>
}
 800d426:	bf00      	nop
 800d428:	3708      	adds	r7, #8
 800d42a:	46bd      	mov	sp, r7
 800d42c:	bd80      	pop	{r7, pc}

0800d42e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d42e:	b580      	push	{r7, lr}
 800d430:	b082      	sub	sp, #8
 800d432:	af00      	add	r7, sp, #0
 800d434:	6078      	str	r0, [r7, #4]
 800d436:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d43e:	b2db      	uxtb	r3, r3
 800d440:	3b01      	subs	r3, #1
 800d442:	2b02      	cmp	r3, #2
 800d444:	d80b      	bhi.n	800d45e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	885b      	ldrh	r3, [r3, #2]
 800d44a:	2b01      	cmp	r3, #1
 800d44c:	d10c      	bne.n	800d468 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2200      	movs	r2, #0
 800d452:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f000 f910 	bl	800d67c <USBD_CtlSendStatus>
      }
      break;
 800d45c:	e004      	b.n	800d468 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d45e:	6839      	ldr	r1, [r7, #0]
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	f000 f840 	bl	800d4e6 <USBD_CtlError>
      break;
 800d466:	e000      	b.n	800d46a <USBD_ClrFeature+0x3c>
      break;
 800d468:	bf00      	nop
  }
}
 800d46a:	bf00      	nop
 800d46c:	3708      	adds	r7, #8
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}

0800d472 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d472:	b580      	push	{r7, lr}
 800d474:	b084      	sub	sp, #16
 800d476:	af00      	add	r7, sp, #0
 800d478:	6078      	str	r0, [r7, #4]
 800d47a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	781a      	ldrb	r2, [r3, #0]
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	3301      	adds	r3, #1
 800d48c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	781a      	ldrb	r2, [r3, #0]
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	3301      	adds	r3, #1
 800d49a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d49c:	68f8      	ldr	r0, [r7, #12]
 800d49e:	f7ff fa17 	bl	800c8d0 <SWAPBYTE>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	461a      	mov	r2, r3
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	3301      	adds	r3, #1
 800d4ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	3301      	adds	r3, #1
 800d4b4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d4b6:	68f8      	ldr	r0, [r7, #12]
 800d4b8:	f7ff fa0a 	bl	800c8d0 <SWAPBYTE>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	461a      	mov	r2, r3
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	3301      	adds	r3, #1
 800d4ce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d4d0:	68f8      	ldr	r0, [r7, #12]
 800d4d2:	f7ff f9fd 	bl	800c8d0 <SWAPBYTE>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	461a      	mov	r2, r3
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	80da      	strh	r2, [r3, #6]
}
 800d4de:	bf00      	nop
 800d4e0:	3710      	adds	r7, #16
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}

0800d4e6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4e6:	b580      	push	{r7, lr}
 800d4e8:	b082      	sub	sp, #8
 800d4ea:	af00      	add	r7, sp, #0
 800d4ec:	6078      	str	r0, [r7, #4]
 800d4ee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d4f0:	2180      	movs	r1, #128	; 0x80
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f004 fa40 	bl	8011978 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d4f8:	2100      	movs	r1, #0
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f004 fa3c 	bl	8011978 <USBD_LL_StallEP>
}
 800d500:	bf00      	nop
 800d502:	3708      	adds	r7, #8
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}

0800d508 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b086      	sub	sp, #24
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	60f8      	str	r0, [r7, #12]
 800d510:	60b9      	str	r1, [r7, #8]
 800d512:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d514:	2300      	movs	r3, #0
 800d516:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d036      	beq.n	800d58c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d522:	6938      	ldr	r0, [r7, #16]
 800d524:	f000 f836 	bl	800d594 <USBD_GetLen>
 800d528:	4603      	mov	r3, r0
 800d52a:	3301      	adds	r3, #1
 800d52c:	b29b      	uxth	r3, r3
 800d52e:	005b      	lsls	r3, r3, #1
 800d530:	b29a      	uxth	r2, r3
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d536:	7dfb      	ldrb	r3, [r7, #23]
 800d538:	68ba      	ldr	r2, [r7, #8]
 800d53a:	4413      	add	r3, r2
 800d53c:	687a      	ldr	r2, [r7, #4]
 800d53e:	7812      	ldrb	r2, [r2, #0]
 800d540:	701a      	strb	r2, [r3, #0]
  idx++;
 800d542:	7dfb      	ldrb	r3, [r7, #23]
 800d544:	3301      	adds	r3, #1
 800d546:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d548:	7dfb      	ldrb	r3, [r7, #23]
 800d54a:	68ba      	ldr	r2, [r7, #8]
 800d54c:	4413      	add	r3, r2
 800d54e:	2203      	movs	r2, #3
 800d550:	701a      	strb	r2, [r3, #0]
  idx++;
 800d552:	7dfb      	ldrb	r3, [r7, #23]
 800d554:	3301      	adds	r3, #1
 800d556:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d558:	e013      	b.n	800d582 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d55a:	7dfb      	ldrb	r3, [r7, #23]
 800d55c:	68ba      	ldr	r2, [r7, #8]
 800d55e:	4413      	add	r3, r2
 800d560:	693a      	ldr	r2, [r7, #16]
 800d562:	7812      	ldrb	r2, [r2, #0]
 800d564:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d566:	693b      	ldr	r3, [r7, #16]
 800d568:	3301      	adds	r3, #1
 800d56a:	613b      	str	r3, [r7, #16]
    idx++;
 800d56c:	7dfb      	ldrb	r3, [r7, #23]
 800d56e:	3301      	adds	r3, #1
 800d570:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d572:	7dfb      	ldrb	r3, [r7, #23]
 800d574:	68ba      	ldr	r2, [r7, #8]
 800d576:	4413      	add	r3, r2
 800d578:	2200      	movs	r2, #0
 800d57a:	701a      	strb	r2, [r3, #0]
    idx++;
 800d57c:	7dfb      	ldrb	r3, [r7, #23]
 800d57e:	3301      	adds	r3, #1
 800d580:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d582:	693b      	ldr	r3, [r7, #16]
 800d584:	781b      	ldrb	r3, [r3, #0]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d1e7      	bne.n	800d55a <USBD_GetString+0x52>
 800d58a:	e000      	b.n	800d58e <USBD_GetString+0x86>
    return;
 800d58c:	bf00      	nop
  }
}
 800d58e:	3718      	adds	r7, #24
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}

0800d594 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d594:	b480      	push	{r7}
 800d596:	b085      	sub	sp, #20
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d59c:	2300      	movs	r3, #0
 800d59e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d5a4:	e005      	b.n	800d5b2 <USBD_GetLen+0x1e>
  {
    len++;
 800d5a6:	7bfb      	ldrb	r3, [r7, #15]
 800d5a8:	3301      	adds	r3, #1
 800d5aa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	3301      	adds	r3, #1
 800d5b0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	781b      	ldrb	r3, [r3, #0]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d1f5      	bne.n	800d5a6 <USBD_GetLen+0x12>
  }

  return len;
 800d5ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3714      	adds	r7, #20
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c6:	4770      	bx	lr

0800d5c8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b084      	sub	sp, #16
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	60f8      	str	r0, [r7, #12]
 800d5d0:	60b9      	str	r1, [r7, #8]
 800d5d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	2202      	movs	r2, #2
 800d5d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	687a      	ldr	r2, [r7, #4]
 800d5e0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	687a      	ldr	r2, [r7, #4]
 800d5e6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	68ba      	ldr	r2, [r7, #8]
 800d5ec:	2100      	movs	r1, #0
 800d5ee:	68f8      	ldr	r0, [r7, #12]
 800d5f0:	f004 fa4b 	bl	8011a8a <USBD_LL_Transmit>

  return USBD_OK;
 800d5f4:	2300      	movs	r3, #0
}
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	3710      	adds	r7, #16
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}

0800d5fe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d5fe:	b580      	push	{r7, lr}
 800d600:	b084      	sub	sp, #16
 800d602:	af00      	add	r7, sp, #0
 800d604:	60f8      	str	r0, [r7, #12]
 800d606:	60b9      	str	r1, [r7, #8]
 800d608:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	68ba      	ldr	r2, [r7, #8]
 800d60e:	2100      	movs	r1, #0
 800d610:	68f8      	ldr	r0, [r7, #12]
 800d612:	f004 fa3a 	bl	8011a8a <USBD_LL_Transmit>

  return USBD_OK;
 800d616:	2300      	movs	r3, #0
}
 800d618:	4618      	mov	r0, r3
 800d61a:	3710      	adds	r7, #16
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}

0800d620 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b084      	sub	sp, #16
 800d624:	af00      	add	r7, sp, #0
 800d626:	60f8      	str	r0, [r7, #12]
 800d628:	60b9      	str	r1, [r7, #8]
 800d62a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2203      	movs	r2, #3
 800d630:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	687a      	ldr	r2, [r7, #4]
 800d638:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	687a      	ldr	r2, [r7, #4]
 800d640:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	68ba      	ldr	r2, [r7, #8]
 800d648:	2100      	movs	r1, #0
 800d64a:	68f8      	ldr	r0, [r7, #12]
 800d64c:	f004 fa3e 	bl	8011acc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d650:	2300      	movs	r3, #0
}
 800d652:	4618      	mov	r0, r3
 800d654:	3710      	adds	r7, #16
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}

0800d65a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d65a:	b580      	push	{r7, lr}
 800d65c:	b084      	sub	sp, #16
 800d65e:	af00      	add	r7, sp, #0
 800d660:	60f8      	str	r0, [r7, #12]
 800d662:	60b9      	str	r1, [r7, #8]
 800d664:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	68ba      	ldr	r2, [r7, #8]
 800d66a:	2100      	movs	r1, #0
 800d66c:	68f8      	ldr	r0, [r7, #12]
 800d66e:	f004 fa2d 	bl	8011acc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d672:	2300      	movs	r3, #0
}
 800d674:	4618      	mov	r0, r3
 800d676:	3710      	adds	r7, #16
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}

0800d67c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b082      	sub	sp, #8
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2204      	movs	r2, #4
 800d688:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d68c:	2300      	movs	r3, #0
 800d68e:	2200      	movs	r2, #0
 800d690:	2100      	movs	r1, #0
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f004 f9f9 	bl	8011a8a <USBD_LL_Transmit>

  return USBD_OK;
 800d698:	2300      	movs	r3, #0
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3708      	adds	r7, #8
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}

0800d6a2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d6a2:	b580      	push	{r7, lr}
 800d6a4:	b082      	sub	sp, #8
 800d6a6:	af00      	add	r7, sp, #0
 800d6a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2205      	movs	r2, #5
 800d6ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	2100      	movs	r1, #0
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f004 fa07 	bl	8011acc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d6be:	2300      	movs	r3, #0
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3708      	adds	r7, #8
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d6c8:	b480      	push	{r7}
 800d6ca:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800d6cc:	bf00      	nop
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d4:	4770      	bx	lr
	...

0800d6d8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d6d8:	b480      	push	{r7}
 800d6da:	b085      	sub	sp, #20
 800d6dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d6de:	f3ef 8305 	mrs	r3, IPSR
 800d6e2:	60bb      	str	r3, [r7, #8]
  return(result);
 800d6e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d10f      	bne.n	800d70a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d6ea:	f3ef 8310 	mrs	r3, PRIMASK
 800d6ee:	607b      	str	r3, [r7, #4]
  return(result);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d105      	bne.n	800d702 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d6f6:	f3ef 8311 	mrs	r3, BASEPRI
 800d6fa:	603b      	str	r3, [r7, #0]
  return(result);
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d007      	beq.n	800d712 <osKernelInitialize+0x3a>
 800d702:	4b0e      	ldr	r3, [pc, #56]	; (800d73c <osKernelInitialize+0x64>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	2b02      	cmp	r3, #2
 800d708:	d103      	bne.n	800d712 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800d70a:	f06f 0305 	mvn.w	r3, #5
 800d70e:	60fb      	str	r3, [r7, #12]
 800d710:	e00c      	b.n	800d72c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d712:	4b0a      	ldr	r3, [pc, #40]	; (800d73c <osKernelInitialize+0x64>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d105      	bne.n	800d726 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d71a:	4b08      	ldr	r3, [pc, #32]	; (800d73c <osKernelInitialize+0x64>)
 800d71c:	2201      	movs	r2, #1
 800d71e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d720:	2300      	movs	r3, #0
 800d722:	60fb      	str	r3, [r7, #12]
 800d724:	e002      	b.n	800d72c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800d726:	f04f 33ff 	mov.w	r3, #4294967295
 800d72a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d72c:	68fb      	ldr	r3, [r7, #12]
}
 800d72e:	4618      	mov	r0, r3
 800d730:	3714      	adds	r7, #20
 800d732:	46bd      	mov	sp, r7
 800d734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d738:	4770      	bx	lr
 800d73a:	bf00      	nop
 800d73c:	20000880 	.word	0x20000880

0800d740 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d740:	b580      	push	{r7, lr}
 800d742:	b084      	sub	sp, #16
 800d744:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d746:	f3ef 8305 	mrs	r3, IPSR
 800d74a:	60bb      	str	r3, [r7, #8]
  return(result);
 800d74c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d10f      	bne.n	800d772 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d752:	f3ef 8310 	mrs	r3, PRIMASK
 800d756:	607b      	str	r3, [r7, #4]
  return(result);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d105      	bne.n	800d76a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d75e:	f3ef 8311 	mrs	r3, BASEPRI
 800d762:	603b      	str	r3, [r7, #0]
  return(result);
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d007      	beq.n	800d77a <osKernelStart+0x3a>
 800d76a:	4b0f      	ldr	r3, [pc, #60]	; (800d7a8 <osKernelStart+0x68>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	2b02      	cmp	r3, #2
 800d770:	d103      	bne.n	800d77a <osKernelStart+0x3a>
    stat = osErrorISR;
 800d772:	f06f 0305 	mvn.w	r3, #5
 800d776:	60fb      	str	r3, [r7, #12]
 800d778:	e010      	b.n	800d79c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d77a:	4b0b      	ldr	r3, [pc, #44]	; (800d7a8 <osKernelStart+0x68>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	2b01      	cmp	r3, #1
 800d780:	d109      	bne.n	800d796 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d782:	f7ff ffa1 	bl	800d6c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d786:	4b08      	ldr	r3, [pc, #32]	; (800d7a8 <osKernelStart+0x68>)
 800d788:	2202      	movs	r2, #2
 800d78a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d78c:	f001 fedc 	bl	800f548 <vTaskStartScheduler>
      stat = osOK;
 800d790:	2300      	movs	r3, #0
 800d792:	60fb      	str	r3, [r7, #12]
 800d794:	e002      	b.n	800d79c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800d796:	f04f 33ff 	mov.w	r3, #4294967295
 800d79a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d79c:	68fb      	ldr	r3, [r7, #12]
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3710      	adds	r7, #16
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	20000880 	.word	0x20000880

0800d7ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b090      	sub	sp, #64	; 0x40
 800d7b0:	af04      	add	r7, sp, #16
 800d7b2:	60f8      	str	r0, [r7, #12]
 800d7b4:	60b9      	str	r1, [r7, #8]
 800d7b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7bc:	f3ef 8305 	mrs	r3, IPSR
 800d7c0:	61fb      	str	r3, [r7, #28]
  return(result);
 800d7c2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	f040 8090 	bne.w	800d8ea <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d7ca:	f3ef 8310 	mrs	r3, PRIMASK
 800d7ce:	61bb      	str	r3, [r7, #24]
  return(result);
 800d7d0:	69bb      	ldr	r3, [r7, #24]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d105      	bne.n	800d7e2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d7d6:	f3ef 8311 	mrs	r3, BASEPRI
 800d7da:	617b      	str	r3, [r7, #20]
  return(result);
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d003      	beq.n	800d7ea <osThreadNew+0x3e>
 800d7e2:	4b44      	ldr	r3, [pc, #272]	; (800d8f4 <osThreadNew+0x148>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	2b02      	cmp	r3, #2
 800d7e8:	d07f      	beq.n	800d8ea <osThreadNew+0x13e>
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d07c      	beq.n	800d8ea <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800d7f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d7f4:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800d7f6:	2318      	movs	r3, #24
 800d7f8:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800d7fe:	f04f 33ff 	mov.w	r3, #4294967295
 800d802:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d045      	beq.n	800d896 <osThreadNew+0xea>
      if (attr->name != NULL) {
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d002      	beq.n	800d818 <osThreadNew+0x6c>
        name = attr->name;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	699b      	ldr	r3, [r3, #24]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d002      	beq.n	800d826 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	699b      	ldr	r3, [r3, #24]
 800d824:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d008      	beq.n	800d83e <osThreadNew+0x92>
 800d82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82e:	2b38      	cmp	r3, #56	; 0x38
 800d830:	d805      	bhi.n	800d83e <osThreadNew+0x92>
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	685b      	ldr	r3, [r3, #4]
 800d836:	f003 0301 	and.w	r3, r3, #1
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d001      	beq.n	800d842 <osThreadNew+0x96>
        return (NULL);
 800d83e:	2300      	movs	r3, #0
 800d840:	e054      	b.n	800d8ec <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	695b      	ldr	r3, [r3, #20]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d003      	beq.n	800d852 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	695b      	ldr	r3, [r3, #20]
 800d84e:	089b      	lsrs	r3, r3, #2
 800d850:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	689b      	ldr	r3, [r3, #8]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d00e      	beq.n	800d878 <osThreadNew+0xcc>
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	68db      	ldr	r3, [r3, #12]
 800d85e:	2bbb      	cmp	r3, #187	; 0xbb
 800d860:	d90a      	bls.n	800d878 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d866:	2b00      	cmp	r3, #0
 800d868:	d006      	beq.n	800d878 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	695b      	ldr	r3, [r3, #20]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d002      	beq.n	800d878 <osThreadNew+0xcc>
        mem = 1;
 800d872:	2301      	movs	r3, #1
 800d874:	623b      	str	r3, [r7, #32]
 800d876:	e010      	b.n	800d89a <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	689b      	ldr	r3, [r3, #8]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d10c      	bne.n	800d89a <osThreadNew+0xee>
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	68db      	ldr	r3, [r3, #12]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d108      	bne.n	800d89a <osThreadNew+0xee>
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	691b      	ldr	r3, [r3, #16]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d104      	bne.n	800d89a <osThreadNew+0xee>
          mem = 0;
 800d890:	2300      	movs	r3, #0
 800d892:	623b      	str	r3, [r7, #32]
 800d894:	e001      	b.n	800d89a <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800d896:	2300      	movs	r3, #0
 800d898:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d89a:	6a3b      	ldr	r3, [r7, #32]
 800d89c:	2b01      	cmp	r3, #1
 800d89e:	d110      	bne.n	800d8c2 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800d8a4:	687a      	ldr	r2, [r7, #4]
 800d8a6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d8a8:	9202      	str	r2, [sp, #8]
 800d8aa:	9301      	str	r3, [sp, #4]
 800d8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ae:	9300      	str	r3, [sp, #0]
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d8b6:	68f8      	ldr	r0, [r7, #12]
 800d8b8:	f001 fc50 	bl	800f15c <xTaskCreateStatic>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	613b      	str	r3, [r7, #16]
 800d8c0:	e013      	b.n	800d8ea <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800d8c2:	6a3b      	ldr	r3, [r7, #32]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d110      	bne.n	800d8ea <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ca:	b29a      	uxth	r2, r3
 800d8cc:	f107 0310 	add.w	r3, r7, #16
 800d8d0:	9301      	str	r3, [sp, #4]
 800d8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d4:	9300      	str	r3, [sp, #0]
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d8da:	68f8      	ldr	r0, [r7, #12]
 800d8dc:	f001 fca1 	bl	800f222 <xTaskCreate>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	2b01      	cmp	r3, #1
 800d8e4:	d001      	beq.n	800d8ea <osThreadNew+0x13e>
          hTask = NULL;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d8ea:	693b      	ldr	r3, [r7, #16]
}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	3730      	adds	r7, #48	; 0x30
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}
 800d8f4:	20000880 	.word	0x20000880

0800d8f8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b086      	sub	sp, #24
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d900:	f3ef 8305 	mrs	r3, IPSR
 800d904:	613b      	str	r3, [r7, #16]
  return(result);
 800d906:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d10f      	bne.n	800d92c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d90c:	f3ef 8310 	mrs	r3, PRIMASK
 800d910:	60fb      	str	r3, [r7, #12]
  return(result);
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d105      	bne.n	800d924 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d918:	f3ef 8311 	mrs	r3, BASEPRI
 800d91c:	60bb      	str	r3, [r7, #8]
  return(result);
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d007      	beq.n	800d934 <osDelay+0x3c>
 800d924:	4b0a      	ldr	r3, [pc, #40]	; (800d950 <osDelay+0x58>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	2b02      	cmp	r3, #2
 800d92a:	d103      	bne.n	800d934 <osDelay+0x3c>
    stat = osErrorISR;
 800d92c:	f06f 0305 	mvn.w	r3, #5
 800d930:	617b      	str	r3, [r7, #20]
 800d932:	e007      	b.n	800d944 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800d934:	2300      	movs	r3, #0
 800d936:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d002      	beq.n	800d944 <osDelay+0x4c>
      vTaskDelay(ticks);
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	f001 fdcc 	bl	800f4dc <vTaskDelay>
    }
  }

  return (stat);
 800d944:	697b      	ldr	r3, [r7, #20]
}
 800d946:	4618      	mov	r0, r3
 800d948:	3718      	adds	r7, #24
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}
 800d94e:	bf00      	nop
 800d950:	20000880 	.word	0x20000880

0800d954 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800d954:	b580      	push	{r7, lr}
 800d956:	b08c      	sub	sp, #48	; 0x30
 800d958:	af02      	add	r7, sp, #8
 800d95a:	60f8      	str	r0, [r7, #12]
 800d95c:	60b9      	str	r1, [r7, #8]
 800d95e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800d960:	2300      	movs	r3, #0
 800d962:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d964:	f3ef 8305 	mrs	r3, IPSR
 800d968:	61bb      	str	r3, [r7, #24]
  return(result);
 800d96a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	f040 8086 	bne.w	800da7e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d972:	f3ef 8310 	mrs	r3, PRIMASK
 800d976:	617b      	str	r3, [r7, #20]
  return(result);
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d105      	bne.n	800d98a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d97e:	f3ef 8311 	mrs	r3, BASEPRI
 800d982:	613b      	str	r3, [r7, #16]
  return(result);
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d003      	beq.n	800d992 <osSemaphoreNew+0x3e>
 800d98a:	4b3f      	ldr	r3, [pc, #252]	; (800da88 <osSemaphoreNew+0x134>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	2b02      	cmp	r3, #2
 800d990:	d075      	beq.n	800da7e <osSemaphoreNew+0x12a>
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d072      	beq.n	800da7e <osSemaphoreNew+0x12a>
 800d998:	68ba      	ldr	r2, [r7, #8]
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	429a      	cmp	r2, r3
 800d99e:	d86e      	bhi.n	800da7e <osSemaphoreNew+0x12a>
    mem = -1;
 800d9a0:	f04f 33ff 	mov.w	r3, #4294967295
 800d9a4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d015      	beq.n	800d9d8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	689b      	ldr	r3, [r3, #8]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d006      	beq.n	800d9c2 <osSemaphoreNew+0x6e>
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	68db      	ldr	r3, [r3, #12]
 800d9b8:	2b4f      	cmp	r3, #79	; 0x4f
 800d9ba:	d902      	bls.n	800d9c2 <osSemaphoreNew+0x6e>
        mem = 1;
 800d9bc:	2301      	movs	r3, #1
 800d9be:	623b      	str	r3, [r7, #32]
 800d9c0:	e00c      	b.n	800d9dc <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	689b      	ldr	r3, [r3, #8]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d108      	bne.n	800d9dc <osSemaphoreNew+0x88>
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	68db      	ldr	r3, [r3, #12]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d104      	bne.n	800d9dc <osSemaphoreNew+0x88>
          mem = 0;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	623b      	str	r3, [r7, #32]
 800d9d6:	e001      	b.n	800d9dc <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800d9d8:	2300      	movs	r3, #0
 800d9da:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800d9dc:	6a3b      	ldr	r3, [r7, #32]
 800d9de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9e2:	d04c      	beq.n	800da7e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	2b01      	cmp	r3, #1
 800d9e8:	d128      	bne.n	800da3c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800d9ea:	6a3b      	ldr	r3, [r7, #32]
 800d9ec:	2b01      	cmp	r3, #1
 800d9ee:	d10a      	bne.n	800da06 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	689b      	ldr	r3, [r3, #8]
 800d9f4:	2203      	movs	r2, #3
 800d9f6:	9200      	str	r2, [sp, #0]
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	2100      	movs	r1, #0
 800d9fc:	2001      	movs	r0, #1
 800d9fe:	f000 fbc1 	bl	800e184 <xQueueGenericCreateStatic>
 800da02:	6278      	str	r0, [r7, #36]	; 0x24
 800da04:	e005      	b.n	800da12 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800da06:	2203      	movs	r2, #3
 800da08:	2100      	movs	r1, #0
 800da0a:	2001      	movs	r0, #1
 800da0c:	f000 fc3c 	bl	800e288 <xQueueGenericCreate>
 800da10:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800da12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da14:	2b00      	cmp	r3, #0
 800da16:	d022      	beq.n	800da5e <osSemaphoreNew+0x10a>
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d01f      	beq.n	800da5e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800da1e:	2300      	movs	r3, #0
 800da20:	2200      	movs	r2, #0
 800da22:	2100      	movs	r1, #0
 800da24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da26:	f000 fd07 	bl	800e438 <xQueueGenericSend>
 800da2a:	4603      	mov	r3, r0
 800da2c:	2b01      	cmp	r3, #1
 800da2e:	d016      	beq.n	800da5e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800da30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da32:	f001 f9bd 	bl	800edb0 <vQueueDelete>
            hSemaphore = NULL;
 800da36:	2300      	movs	r3, #0
 800da38:	627b      	str	r3, [r7, #36]	; 0x24
 800da3a:	e010      	b.n	800da5e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800da3c:	6a3b      	ldr	r3, [r7, #32]
 800da3e:	2b01      	cmp	r3, #1
 800da40:	d108      	bne.n	800da54 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	689b      	ldr	r3, [r3, #8]
 800da46:	461a      	mov	r2, r3
 800da48:	68b9      	ldr	r1, [r7, #8]
 800da4a:	68f8      	ldr	r0, [r7, #12]
 800da4c:	f000 fc81 	bl	800e352 <xQueueCreateCountingSemaphoreStatic>
 800da50:	6278      	str	r0, [r7, #36]	; 0x24
 800da52:	e004      	b.n	800da5e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800da54:	68b9      	ldr	r1, [r7, #8]
 800da56:	68f8      	ldr	r0, [r7, #12]
 800da58:	f000 fcb6 	bl	800e3c8 <xQueueCreateCountingSemaphore>
 800da5c:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800da5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da60:	2b00      	cmp	r3, #0
 800da62:	d00c      	beq.n	800da7e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d003      	beq.n	800da72 <osSemaphoreNew+0x11e>
          name = attr->name;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	61fb      	str	r3, [r7, #28]
 800da70:	e001      	b.n	800da76 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800da72:	2300      	movs	r3, #0
 800da74:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800da76:	69f9      	ldr	r1, [r7, #28]
 800da78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da7a:	f001 fae7 	bl	800f04c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800da7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800da80:	4618      	mov	r0, r3
 800da82:	3728      	adds	r7, #40	; 0x28
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}
 800da88:	20000880 	.word	0x20000880

0800da8c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b088      	sub	sp, #32
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800da9a:	2300      	movs	r3, #0
 800da9c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800da9e:	69bb      	ldr	r3, [r7, #24]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d103      	bne.n	800daac <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800daa4:	f06f 0303 	mvn.w	r3, #3
 800daa8:	61fb      	str	r3, [r7, #28]
 800daaa:	e04b      	b.n	800db44 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800daac:	f3ef 8305 	mrs	r3, IPSR
 800dab0:	617b      	str	r3, [r7, #20]
  return(result);
 800dab2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d10f      	bne.n	800dad8 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dab8:	f3ef 8310 	mrs	r3, PRIMASK
 800dabc:	613b      	str	r3, [r7, #16]
  return(result);
 800dabe:	693b      	ldr	r3, [r7, #16]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d105      	bne.n	800dad0 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dac4:	f3ef 8311 	mrs	r3, BASEPRI
 800dac8:	60fb      	str	r3, [r7, #12]
  return(result);
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d026      	beq.n	800db1e <osSemaphoreAcquire+0x92>
 800dad0:	4b1f      	ldr	r3, [pc, #124]	; (800db50 <osSemaphoreAcquire+0xc4>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	2b02      	cmp	r3, #2
 800dad6:	d122      	bne.n	800db1e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d003      	beq.n	800dae6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800dade:	f06f 0303 	mvn.w	r3, #3
 800dae2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800dae4:	e02d      	b.n	800db42 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800dae6:	2300      	movs	r3, #0
 800dae8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800daea:	f107 0308 	add.w	r3, r7, #8
 800daee:	461a      	mov	r2, r3
 800daf0:	2100      	movs	r1, #0
 800daf2:	69b8      	ldr	r0, [r7, #24]
 800daf4:	f001 f8d6 	bl	800eca4 <xQueueReceiveFromISR>
 800daf8:	4603      	mov	r3, r0
 800dafa:	2b01      	cmp	r3, #1
 800dafc:	d003      	beq.n	800db06 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800dafe:	f06f 0302 	mvn.w	r3, #2
 800db02:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800db04:	e01d      	b.n	800db42 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d01a      	beq.n	800db42 <osSemaphoreAcquire+0xb6>
 800db0c:	4b11      	ldr	r3, [pc, #68]	; (800db54 <osSemaphoreAcquire+0xc8>)
 800db0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db12:	601a      	str	r2, [r3, #0]
 800db14:	f3bf 8f4f 	dsb	sy
 800db18:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800db1c:	e011      	b.n	800db42 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800db1e:	6839      	ldr	r1, [r7, #0]
 800db20:	69b8      	ldr	r0, [r7, #24]
 800db22:	f000 ffab 	bl	800ea7c <xQueueSemaphoreTake>
 800db26:	4603      	mov	r3, r0
 800db28:	2b01      	cmp	r3, #1
 800db2a:	d00b      	beq.n	800db44 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d003      	beq.n	800db3a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800db32:	f06f 0301 	mvn.w	r3, #1
 800db36:	61fb      	str	r3, [r7, #28]
 800db38:	e004      	b.n	800db44 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800db3a:	f06f 0302 	mvn.w	r3, #2
 800db3e:	61fb      	str	r3, [r7, #28]
 800db40:	e000      	b.n	800db44 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800db42:	bf00      	nop
      }
    }
  }

  return (stat);
 800db44:	69fb      	ldr	r3, [r7, #28]
}
 800db46:	4618      	mov	r0, r3
 800db48:	3720      	adds	r7, #32
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}
 800db4e:	bf00      	nop
 800db50:	20000880 	.word	0x20000880
 800db54:	e000ed04 	.word	0xe000ed04

0800db58 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800db58:	b580      	push	{r7, lr}
 800db5a:	b088      	sub	sp, #32
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800db64:	2300      	movs	r3, #0
 800db66:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800db68:	69bb      	ldr	r3, [r7, #24]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d103      	bne.n	800db76 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800db6e:	f06f 0303 	mvn.w	r3, #3
 800db72:	61fb      	str	r3, [r7, #28]
 800db74:	e03e      	b.n	800dbf4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db76:	f3ef 8305 	mrs	r3, IPSR
 800db7a:	617b      	str	r3, [r7, #20]
  return(result);
 800db7c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d10f      	bne.n	800dba2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db82:	f3ef 8310 	mrs	r3, PRIMASK
 800db86:	613b      	str	r3, [r7, #16]
  return(result);
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d105      	bne.n	800db9a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800db8e:	f3ef 8311 	mrs	r3, BASEPRI
 800db92:	60fb      	str	r3, [r7, #12]
  return(result);
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d01e      	beq.n	800dbd8 <osSemaphoreRelease+0x80>
 800db9a:	4b19      	ldr	r3, [pc, #100]	; (800dc00 <osSemaphoreRelease+0xa8>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	2b02      	cmp	r3, #2
 800dba0:	d11a      	bne.n	800dbd8 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800dba2:	2300      	movs	r3, #0
 800dba4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800dba6:	f107 0308 	add.w	r3, r7, #8
 800dbaa:	4619      	mov	r1, r3
 800dbac:	69b8      	ldr	r0, [r7, #24]
 800dbae:	f000 fde9 	bl	800e784 <xQueueGiveFromISR>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	2b01      	cmp	r3, #1
 800dbb6:	d003      	beq.n	800dbc0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800dbb8:	f06f 0302 	mvn.w	r3, #2
 800dbbc:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800dbbe:	e018      	b.n	800dbf2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d015      	beq.n	800dbf2 <osSemaphoreRelease+0x9a>
 800dbc6:	4b0f      	ldr	r3, [pc, #60]	; (800dc04 <osSemaphoreRelease+0xac>)
 800dbc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbcc:	601a      	str	r2, [r3, #0]
 800dbce:	f3bf 8f4f 	dsb	sy
 800dbd2:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800dbd6:	e00c      	b.n	800dbf2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800dbd8:	2300      	movs	r3, #0
 800dbda:	2200      	movs	r2, #0
 800dbdc:	2100      	movs	r1, #0
 800dbde:	69b8      	ldr	r0, [r7, #24]
 800dbe0:	f000 fc2a 	bl	800e438 <xQueueGenericSend>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	2b01      	cmp	r3, #1
 800dbe8:	d004      	beq.n	800dbf4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800dbea:	f06f 0302 	mvn.w	r3, #2
 800dbee:	61fb      	str	r3, [r7, #28]
 800dbf0:	e000      	b.n	800dbf4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800dbf2:	bf00      	nop
    }
  }

  return (stat);
 800dbf4:	69fb      	ldr	r3, [r7, #28]
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3720      	adds	r7, #32
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}
 800dbfe:	bf00      	nop
 800dc00:	20000880 	.word	0x20000880
 800dc04:	e000ed04 	.word	0xe000ed04

0800dc08 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b08c      	sub	sp, #48	; 0x30
 800dc0c:	af02      	add	r7, sp, #8
 800dc0e:	60f8      	str	r0, [r7, #12]
 800dc10:	60b9      	str	r1, [r7, #8]
 800dc12:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800dc14:	2300      	movs	r3, #0
 800dc16:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc18:	f3ef 8305 	mrs	r3, IPSR
 800dc1c:	61bb      	str	r3, [r7, #24]
  return(result);
 800dc1e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d16f      	bne.n	800dd04 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc24:	f3ef 8310 	mrs	r3, PRIMASK
 800dc28:	617b      	str	r3, [r7, #20]
  return(result);
 800dc2a:	697b      	ldr	r3, [r7, #20]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d105      	bne.n	800dc3c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dc30:	f3ef 8311 	mrs	r3, BASEPRI
 800dc34:	613b      	str	r3, [r7, #16]
  return(result);
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d003      	beq.n	800dc44 <osMessageQueueNew+0x3c>
 800dc3c:	4b34      	ldr	r3, [pc, #208]	; (800dd10 <osMessageQueueNew+0x108>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	2b02      	cmp	r3, #2
 800dc42:	d05f      	beq.n	800dd04 <osMessageQueueNew+0xfc>
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d05c      	beq.n	800dd04 <osMessageQueueNew+0xfc>
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d059      	beq.n	800dd04 <osMessageQueueNew+0xfc>
    mem = -1;
 800dc50:	f04f 33ff 	mov.w	r3, #4294967295
 800dc54:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d029      	beq.n	800dcb0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	689b      	ldr	r3, [r3, #8]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d012      	beq.n	800dc8a <osMessageQueueNew+0x82>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	68db      	ldr	r3, [r3, #12]
 800dc68:	2b4f      	cmp	r3, #79	; 0x4f
 800dc6a:	d90e      	bls.n	800dc8a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d00a      	beq.n	800dc8a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	695a      	ldr	r2, [r3, #20]
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	68b9      	ldr	r1, [r7, #8]
 800dc7c:	fb01 f303 	mul.w	r3, r1, r3
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d302      	bcc.n	800dc8a <osMessageQueueNew+0x82>
        mem = 1;
 800dc84:	2301      	movs	r3, #1
 800dc86:	623b      	str	r3, [r7, #32]
 800dc88:	e014      	b.n	800dcb4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	689b      	ldr	r3, [r3, #8]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d110      	bne.n	800dcb4 <osMessageQueueNew+0xac>
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	68db      	ldr	r3, [r3, #12]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d10c      	bne.n	800dcb4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d108      	bne.n	800dcb4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	695b      	ldr	r3, [r3, #20]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d104      	bne.n	800dcb4 <osMessageQueueNew+0xac>
          mem = 0;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	623b      	str	r3, [r7, #32]
 800dcae:	e001      	b.n	800dcb4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800dcb4:	6a3b      	ldr	r3, [r7, #32]
 800dcb6:	2b01      	cmp	r3, #1
 800dcb8:	d10b      	bne.n	800dcd2 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	691a      	ldr	r2, [r3, #16]
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	689b      	ldr	r3, [r3, #8]
 800dcc2:	2100      	movs	r1, #0
 800dcc4:	9100      	str	r1, [sp, #0]
 800dcc6:	68b9      	ldr	r1, [r7, #8]
 800dcc8:	68f8      	ldr	r0, [r7, #12]
 800dcca:	f000 fa5b 	bl	800e184 <xQueueGenericCreateStatic>
 800dcce:	6278      	str	r0, [r7, #36]	; 0x24
 800dcd0:	e008      	b.n	800dce4 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800dcd2:	6a3b      	ldr	r3, [r7, #32]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d105      	bne.n	800dce4 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800dcd8:	2200      	movs	r2, #0
 800dcda:	68b9      	ldr	r1, [r7, #8]
 800dcdc:	68f8      	ldr	r0, [r7, #12]
 800dcde:	f000 fad3 	bl	800e288 <xQueueGenericCreate>
 800dce2:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800dce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d00c      	beq.n	800dd04 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d003      	beq.n	800dcf8 <osMessageQueueNew+0xf0>
        name = attr->name;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	61fb      	str	r3, [r7, #28]
 800dcf6:	e001      	b.n	800dcfc <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800dcfc:	69f9      	ldr	r1, [r7, #28]
 800dcfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd00:	f001 f9a4 	bl	800f04c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800dd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	3728      	adds	r7, #40	; 0x28
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}
 800dd0e:	bf00      	nop
 800dd10:	20000880 	.word	0x20000880

0800dd14 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b08a      	sub	sp, #40	; 0x28
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	60f8      	str	r0, [r7, #12]
 800dd1c:	60b9      	str	r1, [r7, #8]
 800dd1e:	603b      	str	r3, [r7, #0]
 800dd20:	4613      	mov	r3, r2
 800dd22:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dd28:	2300      	movs	r3, #0
 800dd2a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd2c:	f3ef 8305 	mrs	r3, IPSR
 800dd30:	61fb      	str	r3, [r7, #28]
  return(result);
 800dd32:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d10f      	bne.n	800dd58 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd38:	f3ef 8310 	mrs	r3, PRIMASK
 800dd3c:	61bb      	str	r3, [r7, #24]
  return(result);
 800dd3e:	69bb      	ldr	r3, [r7, #24]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d105      	bne.n	800dd50 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dd44:	f3ef 8311 	mrs	r3, BASEPRI
 800dd48:	617b      	str	r3, [r7, #20]
  return(result);
 800dd4a:	697b      	ldr	r3, [r7, #20]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d02c      	beq.n	800ddaa <osMessageQueuePut+0x96>
 800dd50:	4b28      	ldr	r3, [pc, #160]	; (800ddf4 <osMessageQueuePut+0xe0>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	2b02      	cmp	r3, #2
 800dd56:	d128      	bne.n	800ddaa <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dd58:	6a3b      	ldr	r3, [r7, #32]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d005      	beq.n	800dd6a <osMessageQueuePut+0x56>
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d002      	beq.n	800dd6a <osMessageQueuePut+0x56>
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d003      	beq.n	800dd72 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800dd6a:	f06f 0303 	mvn.w	r3, #3
 800dd6e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dd70:	e039      	b.n	800dde6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800dd72:	2300      	movs	r3, #0
 800dd74:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800dd76:	f107 0210 	add.w	r2, r7, #16
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	68b9      	ldr	r1, [r7, #8]
 800dd7e:	6a38      	ldr	r0, [r7, #32]
 800dd80:	f000 fc60 	bl	800e644 <xQueueGenericSendFromISR>
 800dd84:	4603      	mov	r3, r0
 800dd86:	2b01      	cmp	r3, #1
 800dd88:	d003      	beq.n	800dd92 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800dd8a:	f06f 0302 	mvn.w	r3, #2
 800dd8e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dd90:	e029      	b.n	800dde6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800dd92:	693b      	ldr	r3, [r7, #16]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d026      	beq.n	800dde6 <osMessageQueuePut+0xd2>
 800dd98:	4b17      	ldr	r3, [pc, #92]	; (800ddf8 <osMessageQueuePut+0xe4>)
 800dd9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd9e:	601a      	str	r2, [r3, #0]
 800dda0:	f3bf 8f4f 	dsb	sy
 800dda4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dda8:	e01d      	b.n	800dde6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ddaa:	6a3b      	ldr	r3, [r7, #32]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d002      	beq.n	800ddb6 <osMessageQueuePut+0xa2>
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d103      	bne.n	800ddbe <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800ddb6:	f06f 0303 	mvn.w	r3, #3
 800ddba:	627b      	str	r3, [r7, #36]	; 0x24
 800ddbc:	e014      	b.n	800dde8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	683a      	ldr	r2, [r7, #0]
 800ddc2:	68b9      	ldr	r1, [r7, #8]
 800ddc4:	6a38      	ldr	r0, [r7, #32]
 800ddc6:	f000 fb37 	bl	800e438 <xQueueGenericSend>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	2b01      	cmp	r3, #1
 800ddce:	d00b      	beq.n	800dde8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d003      	beq.n	800ddde <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800ddd6:	f06f 0301 	mvn.w	r3, #1
 800ddda:	627b      	str	r3, [r7, #36]	; 0x24
 800dddc:	e004      	b.n	800dde8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800ddde:	f06f 0302 	mvn.w	r3, #2
 800dde2:	627b      	str	r3, [r7, #36]	; 0x24
 800dde4:	e000      	b.n	800dde8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dde6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800dde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	3728      	adds	r7, #40	; 0x28
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}
 800ddf2:	bf00      	nop
 800ddf4:	20000880 	.word	0x20000880
 800ddf8:	e000ed04 	.word	0xe000ed04

0800ddfc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b08a      	sub	sp, #40	; 0x28
 800de00:	af00      	add	r7, sp, #0
 800de02:	60f8      	str	r0, [r7, #12]
 800de04:	60b9      	str	r1, [r7, #8]
 800de06:	607a      	str	r2, [r7, #4]
 800de08:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800de0e:	2300      	movs	r3, #0
 800de10:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de12:	f3ef 8305 	mrs	r3, IPSR
 800de16:	61fb      	str	r3, [r7, #28]
  return(result);
 800de18:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d10f      	bne.n	800de3e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de1e:	f3ef 8310 	mrs	r3, PRIMASK
 800de22:	61bb      	str	r3, [r7, #24]
  return(result);
 800de24:	69bb      	ldr	r3, [r7, #24]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d105      	bne.n	800de36 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800de2a:	f3ef 8311 	mrs	r3, BASEPRI
 800de2e:	617b      	str	r3, [r7, #20]
  return(result);
 800de30:	697b      	ldr	r3, [r7, #20]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d02c      	beq.n	800de90 <osMessageQueueGet+0x94>
 800de36:	4b28      	ldr	r3, [pc, #160]	; (800ded8 <osMessageQueueGet+0xdc>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	2b02      	cmp	r3, #2
 800de3c:	d128      	bne.n	800de90 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800de3e:	6a3b      	ldr	r3, [r7, #32]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d005      	beq.n	800de50 <osMessageQueueGet+0x54>
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d002      	beq.n	800de50 <osMessageQueueGet+0x54>
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d003      	beq.n	800de58 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800de50:	f06f 0303 	mvn.w	r3, #3
 800de54:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800de56:	e038      	b.n	800deca <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800de58:	2300      	movs	r3, #0
 800de5a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800de5c:	f107 0310 	add.w	r3, r7, #16
 800de60:	461a      	mov	r2, r3
 800de62:	68b9      	ldr	r1, [r7, #8]
 800de64:	6a38      	ldr	r0, [r7, #32]
 800de66:	f000 ff1d 	bl	800eca4 <xQueueReceiveFromISR>
 800de6a:	4603      	mov	r3, r0
 800de6c:	2b01      	cmp	r3, #1
 800de6e:	d003      	beq.n	800de78 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800de70:	f06f 0302 	mvn.w	r3, #2
 800de74:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800de76:	e028      	b.n	800deca <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800de78:	693b      	ldr	r3, [r7, #16]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d025      	beq.n	800deca <osMessageQueueGet+0xce>
 800de7e:	4b17      	ldr	r3, [pc, #92]	; (800dedc <osMessageQueueGet+0xe0>)
 800de80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de84:	601a      	str	r2, [r3, #0]
 800de86:	f3bf 8f4f 	dsb	sy
 800de8a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800de8e:	e01c      	b.n	800deca <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800de90:	6a3b      	ldr	r3, [r7, #32]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d002      	beq.n	800de9c <osMessageQueueGet+0xa0>
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d103      	bne.n	800dea4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800de9c:	f06f 0303 	mvn.w	r3, #3
 800dea0:	627b      	str	r3, [r7, #36]	; 0x24
 800dea2:	e013      	b.n	800decc <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800dea4:	683a      	ldr	r2, [r7, #0]
 800dea6:	68b9      	ldr	r1, [r7, #8]
 800dea8:	6a38      	ldr	r0, [r7, #32]
 800deaa:	f000 fd01 	bl	800e8b0 <xQueueReceive>
 800deae:	4603      	mov	r3, r0
 800deb0:	2b01      	cmp	r3, #1
 800deb2:	d00b      	beq.n	800decc <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d003      	beq.n	800dec2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800deba:	f06f 0301 	mvn.w	r3, #1
 800debe:	627b      	str	r3, [r7, #36]	; 0x24
 800dec0:	e004      	b.n	800decc <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800dec2:	f06f 0302 	mvn.w	r3, #2
 800dec6:	627b      	str	r3, [r7, #36]	; 0x24
 800dec8:	e000      	b.n	800decc <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800deca:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800decc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dece:	4618      	mov	r0, r3
 800ded0:	3728      	adds	r7, #40	; 0x28
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
 800ded6:	bf00      	nop
 800ded8:	20000880 	.word	0x20000880
 800dedc:	e000ed04 	.word	0xe000ed04

0800dee0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dee0:	b480      	push	{r7}
 800dee2:	b085      	sub	sp, #20
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	60f8      	str	r0, [r7, #12]
 800dee8:	60b9      	str	r1, [r7, #8]
 800deea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	4a07      	ldr	r2, [pc, #28]	; (800df0c <vApplicationGetIdleTaskMemory+0x2c>)
 800def0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	4a06      	ldr	r2, [pc, #24]	; (800df10 <vApplicationGetIdleTaskMemory+0x30>)
 800def6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800defe:	601a      	str	r2, [r3, #0]
}
 800df00:	bf00      	nop
 800df02:	3714      	adds	r7, #20
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr
 800df0c:	20000884 	.word	0x20000884
 800df10:	20000940 	.word	0x20000940

0800df14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800df14:	b480      	push	{r7}
 800df16:	b085      	sub	sp, #20
 800df18:	af00      	add	r7, sp, #0
 800df1a:	60f8      	str	r0, [r7, #12]
 800df1c:	60b9      	str	r1, [r7, #8]
 800df1e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	4a07      	ldr	r2, [pc, #28]	; (800df40 <vApplicationGetTimerTaskMemory+0x2c>)
 800df24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	4a06      	ldr	r2, [pc, #24]	; (800df44 <vApplicationGetTimerTaskMemory+0x30>)
 800df2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df32:	601a      	str	r2, [r3, #0]
}
 800df34:	bf00      	nop
 800df36:	3714      	adds	r7, #20
 800df38:	46bd      	mov	sp, r7
 800df3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3e:	4770      	bx	lr
 800df40:	20000d40 	.word	0x20000d40
 800df44:	20000dfc 	.word	0x20000dfc

0800df48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800df48:	b480      	push	{r7}
 800df4a:	b083      	sub	sp, #12
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f103 0208 	add.w	r2, r3, #8
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f04f 32ff 	mov.w	r2, #4294967295
 800df60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f103 0208 	add.w	r2, r3, #8
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	f103 0208 	add.w	r2, r3, #8
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2200      	movs	r2, #0
 800df7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800df7c:	bf00      	nop
 800df7e:	370c      	adds	r7, #12
 800df80:	46bd      	mov	sp, r7
 800df82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df86:	4770      	bx	lr

0800df88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800df88:	b480      	push	{r7}
 800df8a:	b083      	sub	sp, #12
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2200      	movs	r2, #0
 800df94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800df96:	bf00      	nop
 800df98:	370c      	adds	r7, #12
 800df9a:	46bd      	mov	sp, r7
 800df9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa0:	4770      	bx	lr

0800dfa2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dfa2:	b480      	push	{r7}
 800dfa4:	b085      	sub	sp, #20
 800dfa6:	af00      	add	r7, sp, #0
 800dfa8:	6078      	str	r0, [r7, #4]
 800dfaa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	685b      	ldr	r3, [r3, #4]
 800dfb0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	68fa      	ldr	r2, [r7, #12]
 800dfb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	689a      	ldr	r2, [r3, #8]
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	689b      	ldr	r3, [r3, #8]
 800dfc4:	683a      	ldr	r2, [r7, #0]
 800dfc6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	683a      	ldr	r2, [r7, #0]
 800dfcc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	687a      	ldr	r2, [r7, #4]
 800dfd2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	1c5a      	adds	r2, r3, #1
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	601a      	str	r2, [r3, #0]
}
 800dfde:	bf00      	nop
 800dfe0:	3714      	adds	r7, #20
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe8:	4770      	bx	lr

0800dfea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dfea:	b480      	push	{r7}
 800dfec:	b085      	sub	sp, #20
 800dfee:	af00      	add	r7, sp, #0
 800dff0:	6078      	str	r0, [r7, #4]
 800dff2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dffa:	68bb      	ldr	r3, [r7, #8]
 800dffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e000:	d103      	bne.n	800e00a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	691b      	ldr	r3, [r3, #16]
 800e006:	60fb      	str	r3, [r7, #12]
 800e008:	e00c      	b.n	800e024 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	3308      	adds	r3, #8
 800e00e:	60fb      	str	r3, [r7, #12]
 800e010:	e002      	b.n	800e018 <vListInsert+0x2e>
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	685b      	ldr	r3, [r3, #4]
 800e016:	60fb      	str	r3, [r7, #12]
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	685b      	ldr	r3, [r3, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	68ba      	ldr	r2, [r7, #8]
 800e020:	429a      	cmp	r2, r3
 800e022:	d2f6      	bcs.n	800e012 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	685a      	ldr	r2, [r3, #4]
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	685b      	ldr	r3, [r3, #4]
 800e030:	683a      	ldr	r2, [r7, #0]
 800e032:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	68fa      	ldr	r2, [r7, #12]
 800e038:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	683a      	ldr	r2, [r7, #0]
 800e03e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	687a      	ldr	r2, [r7, #4]
 800e044:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	1c5a      	adds	r2, r3, #1
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	601a      	str	r2, [r3, #0]
}
 800e050:	bf00      	nop
 800e052:	3714      	adds	r7, #20
 800e054:	46bd      	mov	sp, r7
 800e056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05a:	4770      	bx	lr

0800e05c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e05c:	b480      	push	{r7}
 800e05e:	b085      	sub	sp, #20
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	691b      	ldr	r3, [r3, #16]
 800e068:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	685b      	ldr	r3, [r3, #4]
 800e06e:	687a      	ldr	r2, [r7, #4]
 800e070:	6892      	ldr	r2, [r2, #8]
 800e072:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	689b      	ldr	r3, [r3, #8]
 800e078:	687a      	ldr	r2, [r7, #4]
 800e07a:	6852      	ldr	r2, [r2, #4]
 800e07c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	685b      	ldr	r3, [r3, #4]
 800e082:	687a      	ldr	r2, [r7, #4]
 800e084:	429a      	cmp	r2, r3
 800e086:	d103      	bne.n	800e090 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	689a      	ldr	r2, [r3, #8]
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2200      	movs	r2, #0
 800e094:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	1e5a      	subs	r2, r3, #1
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	681b      	ldr	r3, [r3, #0]
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	3714      	adds	r7, #20
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ae:	4770      	bx	lr

0800e0b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b084      	sub	sp, #16
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
 800e0b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d10c      	bne.n	800e0de <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0c8:	b672      	cpsid	i
 800e0ca:	f383 8811 	msr	BASEPRI, r3
 800e0ce:	f3bf 8f6f 	isb	sy
 800e0d2:	f3bf 8f4f 	dsb	sy
 800e0d6:	b662      	cpsie	i
 800e0d8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e0da:	bf00      	nop
 800e0dc:	e7fe      	b.n	800e0dc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800e0de:	f002 fcf5 	bl	8010acc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	681a      	ldr	r2, [r3, #0]
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0ea:	68f9      	ldr	r1, [r7, #12]
 800e0ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e0ee:	fb01 f303 	mul.w	r3, r1, r3
 800e0f2:	441a      	add	r2, r3
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	681a      	ldr	r2, [r3, #0]
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	681a      	ldr	r2, [r3, #0]
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e10e:	3b01      	subs	r3, #1
 800e110:	68f9      	ldr	r1, [r7, #12]
 800e112:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e114:	fb01 f303 	mul.w	r3, r1, r3
 800e118:	441a      	add	r2, r3
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	22ff      	movs	r2, #255	; 0xff
 800e122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	22ff      	movs	r2, #255	; 0xff
 800e12a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d114      	bne.n	800e15e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	691b      	ldr	r3, [r3, #16]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d01a      	beq.n	800e172 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	3310      	adds	r3, #16
 800e140:	4618      	mov	r0, r3
 800e142:	f001 fca9 	bl	800fa98 <xTaskRemoveFromEventList>
 800e146:	4603      	mov	r3, r0
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d012      	beq.n	800e172 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e14c:	4b0c      	ldr	r3, [pc, #48]	; (800e180 <xQueueGenericReset+0xd0>)
 800e14e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e152:	601a      	str	r2, [r3, #0]
 800e154:	f3bf 8f4f 	dsb	sy
 800e158:	f3bf 8f6f 	isb	sy
 800e15c:	e009      	b.n	800e172 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	3310      	adds	r3, #16
 800e162:	4618      	mov	r0, r3
 800e164:	f7ff fef0 	bl	800df48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	3324      	adds	r3, #36	; 0x24
 800e16c:	4618      	mov	r0, r3
 800e16e:	f7ff feeb 	bl	800df48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e172:	f002 fcdf 	bl	8010b34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e176:	2301      	movs	r3, #1
}
 800e178:	4618      	mov	r0, r3
 800e17a:	3710      	adds	r7, #16
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}
 800e180:	e000ed04 	.word	0xe000ed04

0800e184 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e184:	b580      	push	{r7, lr}
 800e186:	b08e      	sub	sp, #56	; 0x38
 800e188:	af02      	add	r7, sp, #8
 800e18a:	60f8      	str	r0, [r7, #12]
 800e18c:	60b9      	str	r1, [r7, #8]
 800e18e:	607a      	str	r2, [r7, #4]
 800e190:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d10c      	bne.n	800e1b2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800e198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e19c:	b672      	cpsid	i
 800e19e:	f383 8811 	msr	BASEPRI, r3
 800e1a2:	f3bf 8f6f 	isb	sy
 800e1a6:	f3bf 8f4f 	dsb	sy
 800e1aa:	b662      	cpsie	i
 800e1ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e1ae:	bf00      	nop
 800e1b0:	e7fe      	b.n	800e1b0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d10c      	bne.n	800e1d2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800e1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1bc:	b672      	cpsid	i
 800e1be:	f383 8811 	msr	BASEPRI, r3
 800e1c2:	f3bf 8f6f 	isb	sy
 800e1c6:	f3bf 8f4f 	dsb	sy
 800e1ca:	b662      	cpsie	i
 800e1cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e1ce:	bf00      	nop
 800e1d0:	e7fe      	b.n	800e1d0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d002      	beq.n	800e1de <xQueueGenericCreateStatic+0x5a>
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d001      	beq.n	800e1e2 <xQueueGenericCreateStatic+0x5e>
 800e1de:	2301      	movs	r3, #1
 800e1e0:	e000      	b.n	800e1e4 <xQueueGenericCreateStatic+0x60>
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d10c      	bne.n	800e202 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800e1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ec:	b672      	cpsid	i
 800e1ee:	f383 8811 	msr	BASEPRI, r3
 800e1f2:	f3bf 8f6f 	isb	sy
 800e1f6:	f3bf 8f4f 	dsb	sy
 800e1fa:	b662      	cpsie	i
 800e1fc:	623b      	str	r3, [r7, #32]
}
 800e1fe:	bf00      	nop
 800e200:	e7fe      	b.n	800e200 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d102      	bne.n	800e20e <xQueueGenericCreateStatic+0x8a>
 800e208:	68bb      	ldr	r3, [r7, #8]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d101      	bne.n	800e212 <xQueueGenericCreateStatic+0x8e>
 800e20e:	2301      	movs	r3, #1
 800e210:	e000      	b.n	800e214 <xQueueGenericCreateStatic+0x90>
 800e212:	2300      	movs	r3, #0
 800e214:	2b00      	cmp	r3, #0
 800e216:	d10c      	bne.n	800e232 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800e218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e21c:	b672      	cpsid	i
 800e21e:	f383 8811 	msr	BASEPRI, r3
 800e222:	f3bf 8f6f 	isb	sy
 800e226:	f3bf 8f4f 	dsb	sy
 800e22a:	b662      	cpsie	i
 800e22c:	61fb      	str	r3, [r7, #28]
}
 800e22e:	bf00      	nop
 800e230:	e7fe      	b.n	800e230 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e232:	2350      	movs	r3, #80	; 0x50
 800e234:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	2b50      	cmp	r3, #80	; 0x50
 800e23a:	d00c      	beq.n	800e256 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800e23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e240:	b672      	cpsid	i
 800e242:	f383 8811 	msr	BASEPRI, r3
 800e246:	f3bf 8f6f 	isb	sy
 800e24a:	f3bf 8f4f 	dsb	sy
 800e24e:	b662      	cpsie	i
 800e250:	61bb      	str	r3, [r7, #24]
}
 800e252:	bf00      	nop
 800e254:	e7fe      	b.n	800e254 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e256:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d00d      	beq.n	800e27e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e264:	2201      	movs	r2, #1
 800e266:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e26a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e270:	9300      	str	r3, [sp, #0]
 800e272:	4613      	mov	r3, r2
 800e274:	687a      	ldr	r2, [r7, #4]
 800e276:	68b9      	ldr	r1, [r7, #8]
 800e278:	68f8      	ldr	r0, [r7, #12]
 800e27a:	f000 f847 	bl	800e30c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e280:	4618      	mov	r0, r3
 800e282:	3730      	adds	r7, #48	; 0x30
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}

0800e288 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b08a      	sub	sp, #40	; 0x28
 800e28c:	af02      	add	r7, sp, #8
 800e28e:	60f8      	str	r0, [r7, #12]
 800e290:	60b9      	str	r1, [r7, #8]
 800e292:	4613      	mov	r3, r2
 800e294:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d10c      	bne.n	800e2b6 <xQueueGenericCreate+0x2e>
	__asm volatile
 800e29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2a0:	b672      	cpsid	i
 800e2a2:	f383 8811 	msr	BASEPRI, r3
 800e2a6:	f3bf 8f6f 	isb	sy
 800e2aa:	f3bf 8f4f 	dsb	sy
 800e2ae:	b662      	cpsie	i
 800e2b0:	613b      	str	r3, [r7, #16]
}
 800e2b2:	bf00      	nop
 800e2b4:	e7fe      	b.n	800e2b4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d102      	bne.n	800e2c2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e2bc:	2300      	movs	r3, #0
 800e2be:	61fb      	str	r3, [r7, #28]
 800e2c0:	e004      	b.n	800e2cc <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	68ba      	ldr	r2, [r7, #8]
 800e2c6:	fb02 f303 	mul.w	r3, r2, r3
 800e2ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e2cc:	69fb      	ldr	r3, [r7, #28]
 800e2ce:	3350      	adds	r3, #80	; 0x50
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	f002 fd27 	bl	8010d24 <pvPortMalloc>
 800e2d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e2d8:	69bb      	ldr	r3, [r7, #24]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d011      	beq.n	800e302 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e2de:	69bb      	ldr	r3, [r7, #24]
 800e2e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e2e2:	697b      	ldr	r3, [r7, #20]
 800e2e4:	3350      	adds	r3, #80	; 0x50
 800e2e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e2e8:	69bb      	ldr	r3, [r7, #24]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e2f0:	79fa      	ldrb	r2, [r7, #7]
 800e2f2:	69bb      	ldr	r3, [r7, #24]
 800e2f4:	9300      	str	r3, [sp, #0]
 800e2f6:	4613      	mov	r3, r2
 800e2f8:	697a      	ldr	r2, [r7, #20]
 800e2fa:	68b9      	ldr	r1, [r7, #8]
 800e2fc:	68f8      	ldr	r0, [r7, #12]
 800e2fe:	f000 f805 	bl	800e30c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e302:	69bb      	ldr	r3, [r7, #24]
	}
 800e304:	4618      	mov	r0, r3
 800e306:	3720      	adds	r7, #32
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}

0800e30c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b084      	sub	sp, #16
 800e310:	af00      	add	r7, sp, #0
 800e312:	60f8      	str	r0, [r7, #12]
 800e314:	60b9      	str	r1, [r7, #8]
 800e316:	607a      	str	r2, [r7, #4]
 800e318:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d103      	bne.n	800e328 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e320:	69bb      	ldr	r3, [r7, #24]
 800e322:	69ba      	ldr	r2, [r7, #24]
 800e324:	601a      	str	r2, [r3, #0]
 800e326:	e002      	b.n	800e32e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e328:	69bb      	ldr	r3, [r7, #24]
 800e32a:	687a      	ldr	r2, [r7, #4]
 800e32c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e32e:	69bb      	ldr	r3, [r7, #24]
 800e330:	68fa      	ldr	r2, [r7, #12]
 800e332:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e334:	69bb      	ldr	r3, [r7, #24]
 800e336:	68ba      	ldr	r2, [r7, #8]
 800e338:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e33a:	2101      	movs	r1, #1
 800e33c:	69b8      	ldr	r0, [r7, #24]
 800e33e:	f7ff feb7 	bl	800e0b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e342:	69bb      	ldr	r3, [r7, #24]
 800e344:	78fa      	ldrb	r2, [r7, #3]
 800e346:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e34a:	bf00      	nop
 800e34c:	3710      	adds	r7, #16
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}

0800e352 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e352:	b580      	push	{r7, lr}
 800e354:	b08a      	sub	sp, #40	; 0x28
 800e356:	af02      	add	r7, sp, #8
 800e358:	60f8      	str	r0, [r7, #12]
 800e35a:	60b9      	str	r1, [r7, #8]
 800e35c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d10c      	bne.n	800e37e <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800e364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e368:	b672      	cpsid	i
 800e36a:	f383 8811 	msr	BASEPRI, r3
 800e36e:	f3bf 8f6f 	isb	sy
 800e372:	f3bf 8f4f 	dsb	sy
 800e376:	b662      	cpsie	i
 800e378:	61bb      	str	r3, [r7, #24]
}
 800e37a:	bf00      	nop
 800e37c:	e7fe      	b.n	800e37c <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e37e:	68ba      	ldr	r2, [r7, #8]
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	429a      	cmp	r2, r3
 800e384:	d90c      	bls.n	800e3a0 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 800e386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e38a:	b672      	cpsid	i
 800e38c:	f383 8811 	msr	BASEPRI, r3
 800e390:	f3bf 8f6f 	isb	sy
 800e394:	f3bf 8f4f 	dsb	sy
 800e398:	b662      	cpsie	i
 800e39a:	617b      	str	r3, [r7, #20]
}
 800e39c:	bf00      	nop
 800e39e:	e7fe      	b.n	800e39e <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e3a0:	2302      	movs	r3, #2
 800e3a2:	9300      	str	r3, [sp, #0]
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	2100      	movs	r1, #0
 800e3aa:	68f8      	ldr	r0, [r7, #12]
 800e3ac:	f7ff feea 	bl	800e184 <xQueueGenericCreateStatic>
 800e3b0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e3b2:	69fb      	ldr	r3, [r7, #28]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d002      	beq.n	800e3be <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e3b8:	69fb      	ldr	r3, [r7, #28]
 800e3ba:	68ba      	ldr	r2, [r7, #8]
 800e3bc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e3be:	69fb      	ldr	r3, [r7, #28]
	}
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	3720      	adds	r7, #32
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}

0800e3c8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b086      	sub	sp, #24
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
 800e3d0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d10c      	bne.n	800e3f2 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800e3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3dc:	b672      	cpsid	i
 800e3de:	f383 8811 	msr	BASEPRI, r3
 800e3e2:	f3bf 8f6f 	isb	sy
 800e3e6:	f3bf 8f4f 	dsb	sy
 800e3ea:	b662      	cpsie	i
 800e3ec:	613b      	str	r3, [r7, #16]
}
 800e3ee:	bf00      	nop
 800e3f0:	e7fe      	b.n	800e3f0 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e3f2:	683a      	ldr	r2, [r7, #0]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	429a      	cmp	r2, r3
 800e3f8:	d90c      	bls.n	800e414 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 800e3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3fe:	b672      	cpsid	i
 800e400:	f383 8811 	msr	BASEPRI, r3
 800e404:	f3bf 8f6f 	isb	sy
 800e408:	f3bf 8f4f 	dsb	sy
 800e40c:	b662      	cpsie	i
 800e40e:	60fb      	str	r3, [r7, #12]
}
 800e410:	bf00      	nop
 800e412:	e7fe      	b.n	800e412 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e414:	2202      	movs	r2, #2
 800e416:	2100      	movs	r1, #0
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f7ff ff35 	bl	800e288 <xQueueGenericCreate>
 800e41e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e420:	697b      	ldr	r3, [r7, #20]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d002      	beq.n	800e42c <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e426:	697b      	ldr	r3, [r7, #20]
 800e428:	683a      	ldr	r2, [r7, #0]
 800e42a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e42c:	697b      	ldr	r3, [r7, #20]
	}
 800e42e:	4618      	mov	r0, r3
 800e430:	3718      	adds	r7, #24
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
	...

0800e438 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b08e      	sub	sp, #56	; 0x38
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	60f8      	str	r0, [r7, #12]
 800e440:	60b9      	str	r1, [r7, #8]
 800e442:	607a      	str	r2, [r7, #4]
 800e444:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e446:	2300      	movs	r3, #0
 800e448:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e450:	2b00      	cmp	r3, #0
 800e452:	d10c      	bne.n	800e46e <xQueueGenericSend+0x36>
	__asm volatile
 800e454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e458:	b672      	cpsid	i
 800e45a:	f383 8811 	msr	BASEPRI, r3
 800e45e:	f3bf 8f6f 	isb	sy
 800e462:	f3bf 8f4f 	dsb	sy
 800e466:	b662      	cpsie	i
 800e468:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e46a:	bf00      	nop
 800e46c:	e7fe      	b.n	800e46c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d103      	bne.n	800e47c <xQueueGenericSend+0x44>
 800e474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d101      	bne.n	800e480 <xQueueGenericSend+0x48>
 800e47c:	2301      	movs	r3, #1
 800e47e:	e000      	b.n	800e482 <xQueueGenericSend+0x4a>
 800e480:	2300      	movs	r3, #0
 800e482:	2b00      	cmp	r3, #0
 800e484:	d10c      	bne.n	800e4a0 <xQueueGenericSend+0x68>
	__asm volatile
 800e486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e48a:	b672      	cpsid	i
 800e48c:	f383 8811 	msr	BASEPRI, r3
 800e490:	f3bf 8f6f 	isb	sy
 800e494:	f3bf 8f4f 	dsb	sy
 800e498:	b662      	cpsie	i
 800e49a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e49c:	bf00      	nop
 800e49e:	e7fe      	b.n	800e49e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	2b02      	cmp	r3, #2
 800e4a4:	d103      	bne.n	800e4ae <xQueueGenericSend+0x76>
 800e4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4aa:	2b01      	cmp	r3, #1
 800e4ac:	d101      	bne.n	800e4b2 <xQueueGenericSend+0x7a>
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	e000      	b.n	800e4b4 <xQueueGenericSend+0x7c>
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d10c      	bne.n	800e4d2 <xQueueGenericSend+0x9a>
	__asm volatile
 800e4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4bc:	b672      	cpsid	i
 800e4be:	f383 8811 	msr	BASEPRI, r3
 800e4c2:	f3bf 8f6f 	isb	sy
 800e4c6:	f3bf 8f4f 	dsb	sy
 800e4ca:	b662      	cpsie	i
 800e4cc:	623b      	str	r3, [r7, #32]
}
 800e4ce:	bf00      	nop
 800e4d0:	e7fe      	b.n	800e4d0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e4d2:	f001 fcab 	bl	800fe2c <xTaskGetSchedulerState>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d102      	bne.n	800e4e2 <xQueueGenericSend+0xaa>
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d101      	bne.n	800e4e6 <xQueueGenericSend+0xae>
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	e000      	b.n	800e4e8 <xQueueGenericSend+0xb0>
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d10c      	bne.n	800e506 <xQueueGenericSend+0xce>
	__asm volatile
 800e4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f0:	b672      	cpsid	i
 800e4f2:	f383 8811 	msr	BASEPRI, r3
 800e4f6:	f3bf 8f6f 	isb	sy
 800e4fa:	f3bf 8f4f 	dsb	sy
 800e4fe:	b662      	cpsie	i
 800e500:	61fb      	str	r3, [r7, #28]
}
 800e502:	bf00      	nop
 800e504:	e7fe      	b.n	800e504 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e506:	f002 fae1 	bl	8010acc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e50c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e512:	429a      	cmp	r2, r3
 800e514:	d302      	bcc.n	800e51c <xQueueGenericSend+0xe4>
 800e516:	683b      	ldr	r3, [r7, #0]
 800e518:	2b02      	cmp	r3, #2
 800e51a:	d129      	bne.n	800e570 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e51c:	683a      	ldr	r2, [r7, #0]
 800e51e:	68b9      	ldr	r1, [r7, #8]
 800e520:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e522:	f000 fc82 	bl	800ee2a <prvCopyDataToQueue>
 800e526:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d010      	beq.n	800e552 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e532:	3324      	adds	r3, #36	; 0x24
 800e534:	4618      	mov	r0, r3
 800e536:	f001 faaf 	bl	800fa98 <xTaskRemoveFromEventList>
 800e53a:	4603      	mov	r3, r0
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d013      	beq.n	800e568 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e540:	4b3f      	ldr	r3, [pc, #252]	; (800e640 <xQueueGenericSend+0x208>)
 800e542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e546:	601a      	str	r2, [r3, #0]
 800e548:	f3bf 8f4f 	dsb	sy
 800e54c:	f3bf 8f6f 	isb	sy
 800e550:	e00a      	b.n	800e568 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e554:	2b00      	cmp	r3, #0
 800e556:	d007      	beq.n	800e568 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e558:	4b39      	ldr	r3, [pc, #228]	; (800e640 <xQueueGenericSend+0x208>)
 800e55a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e55e:	601a      	str	r2, [r3, #0]
 800e560:	f3bf 8f4f 	dsb	sy
 800e564:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e568:	f002 fae4 	bl	8010b34 <vPortExitCritical>
				return pdPASS;
 800e56c:	2301      	movs	r3, #1
 800e56e:	e063      	b.n	800e638 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d103      	bne.n	800e57e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e576:	f002 fadd 	bl	8010b34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e57a:	2300      	movs	r3, #0
 800e57c:	e05c      	b.n	800e638 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e57e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e580:	2b00      	cmp	r3, #0
 800e582:	d106      	bne.n	800e592 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e584:	f107 0314 	add.w	r3, r7, #20
 800e588:	4618      	mov	r0, r3
 800e58a:	f001 faeb 	bl	800fb64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e58e:	2301      	movs	r3, #1
 800e590:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e592:	f002 facf 	bl	8010b34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e596:	f001 f84b 	bl	800f630 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e59a:	f002 fa97 	bl	8010acc <vPortEnterCritical>
 800e59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e5a4:	b25b      	sxtb	r3, r3
 800e5a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5aa:	d103      	bne.n	800e5b4 <xQueueGenericSend+0x17c>
 800e5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e5ba:	b25b      	sxtb	r3, r3
 800e5bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5c0:	d103      	bne.n	800e5ca <xQueueGenericSend+0x192>
 800e5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e5ca:	f002 fab3 	bl	8010b34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e5ce:	1d3a      	adds	r2, r7, #4
 800e5d0:	f107 0314 	add.w	r3, r7, #20
 800e5d4:	4611      	mov	r1, r2
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f001 fada 	bl	800fb90 <xTaskCheckForTimeOut>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d124      	bne.n	800e62c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e5e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e5e4:	f000 fd19 	bl	800f01a <prvIsQueueFull>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d018      	beq.n	800e620 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5f0:	3310      	adds	r3, #16
 800e5f2:	687a      	ldr	r2, [r7, #4]
 800e5f4:	4611      	mov	r1, r2
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f001 f9fa 	bl	800f9f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e5fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e5fe:	f000 fca4 	bl	800ef4a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e602:	f001 f823 	bl	800f64c <xTaskResumeAll>
 800e606:	4603      	mov	r3, r0
 800e608:	2b00      	cmp	r3, #0
 800e60a:	f47f af7c 	bne.w	800e506 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800e60e:	4b0c      	ldr	r3, [pc, #48]	; (800e640 <xQueueGenericSend+0x208>)
 800e610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e614:	601a      	str	r2, [r3, #0]
 800e616:	f3bf 8f4f 	dsb	sy
 800e61a:	f3bf 8f6f 	isb	sy
 800e61e:	e772      	b.n	800e506 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e622:	f000 fc92 	bl	800ef4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e626:	f001 f811 	bl	800f64c <xTaskResumeAll>
 800e62a:	e76c      	b.n	800e506 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e62c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e62e:	f000 fc8c 	bl	800ef4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e632:	f001 f80b 	bl	800f64c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e636:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e638:	4618      	mov	r0, r3
 800e63a:	3738      	adds	r7, #56	; 0x38
 800e63c:	46bd      	mov	sp, r7
 800e63e:	bd80      	pop	{r7, pc}
 800e640:	e000ed04 	.word	0xe000ed04

0800e644 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b08e      	sub	sp, #56	; 0x38
 800e648:	af00      	add	r7, sp, #0
 800e64a:	60f8      	str	r0, [r7, #12]
 800e64c:	60b9      	str	r1, [r7, #8]
 800e64e:	607a      	str	r2, [r7, #4]
 800e650:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d10c      	bne.n	800e676 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800e65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e660:	b672      	cpsid	i
 800e662:	f383 8811 	msr	BASEPRI, r3
 800e666:	f3bf 8f6f 	isb	sy
 800e66a:	f3bf 8f4f 	dsb	sy
 800e66e:	b662      	cpsie	i
 800e670:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e672:	bf00      	nop
 800e674:	e7fe      	b.n	800e674 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e676:	68bb      	ldr	r3, [r7, #8]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d103      	bne.n	800e684 <xQueueGenericSendFromISR+0x40>
 800e67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e67e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e680:	2b00      	cmp	r3, #0
 800e682:	d101      	bne.n	800e688 <xQueueGenericSendFromISR+0x44>
 800e684:	2301      	movs	r3, #1
 800e686:	e000      	b.n	800e68a <xQueueGenericSendFromISR+0x46>
 800e688:	2300      	movs	r3, #0
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d10c      	bne.n	800e6a8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800e68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e692:	b672      	cpsid	i
 800e694:	f383 8811 	msr	BASEPRI, r3
 800e698:	f3bf 8f6f 	isb	sy
 800e69c:	f3bf 8f4f 	dsb	sy
 800e6a0:	b662      	cpsie	i
 800e6a2:	623b      	str	r3, [r7, #32]
}
 800e6a4:	bf00      	nop
 800e6a6:	e7fe      	b.n	800e6a6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	2b02      	cmp	r3, #2
 800e6ac:	d103      	bne.n	800e6b6 <xQueueGenericSendFromISR+0x72>
 800e6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6b2:	2b01      	cmp	r3, #1
 800e6b4:	d101      	bne.n	800e6ba <xQueueGenericSendFromISR+0x76>
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	e000      	b.n	800e6bc <xQueueGenericSendFromISR+0x78>
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d10c      	bne.n	800e6da <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800e6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c4:	b672      	cpsid	i
 800e6c6:	f383 8811 	msr	BASEPRI, r3
 800e6ca:	f3bf 8f6f 	isb	sy
 800e6ce:	f3bf 8f4f 	dsb	sy
 800e6d2:	b662      	cpsie	i
 800e6d4:	61fb      	str	r3, [r7, #28]
}
 800e6d6:	bf00      	nop
 800e6d8:	e7fe      	b.n	800e6d8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e6da:	f002 fadf 	bl	8010c9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e6de:	f3ef 8211 	mrs	r2, BASEPRI
 800e6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6e6:	b672      	cpsid	i
 800e6e8:	f383 8811 	msr	BASEPRI, r3
 800e6ec:	f3bf 8f6f 	isb	sy
 800e6f0:	f3bf 8f4f 	dsb	sy
 800e6f4:	b662      	cpsie	i
 800e6f6:	61ba      	str	r2, [r7, #24]
 800e6f8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e6fa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e6fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e706:	429a      	cmp	r2, r3
 800e708:	d302      	bcc.n	800e710 <xQueueGenericSendFromISR+0xcc>
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	2b02      	cmp	r3, #2
 800e70e:	d12c      	bne.n	800e76a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e712:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e71a:	683a      	ldr	r2, [r7, #0]
 800e71c:	68b9      	ldr	r1, [r7, #8]
 800e71e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e720:	f000 fb83 	bl	800ee2a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e724:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e72c:	d112      	bne.n	800e754 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e732:	2b00      	cmp	r3, #0
 800e734:	d016      	beq.n	800e764 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e738:	3324      	adds	r3, #36	; 0x24
 800e73a:	4618      	mov	r0, r3
 800e73c:	f001 f9ac 	bl	800fa98 <xTaskRemoveFromEventList>
 800e740:	4603      	mov	r3, r0
 800e742:	2b00      	cmp	r3, #0
 800e744:	d00e      	beq.n	800e764 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d00b      	beq.n	800e764 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2201      	movs	r2, #1
 800e750:	601a      	str	r2, [r3, #0]
 800e752:	e007      	b.n	800e764 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e754:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e758:	3301      	adds	r3, #1
 800e75a:	b2db      	uxtb	r3, r3
 800e75c:	b25a      	sxtb	r2, r3
 800e75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e764:	2301      	movs	r3, #1
 800e766:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800e768:	e001      	b.n	800e76e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e76a:	2300      	movs	r3, #0
 800e76c:	637b      	str	r3, [r7, #52]	; 0x34
 800e76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e770:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e772:	693b      	ldr	r3, [r7, #16]
 800e774:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e778:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e77a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e77c:	4618      	mov	r0, r3
 800e77e:	3738      	adds	r7, #56	; 0x38
 800e780:	46bd      	mov	sp, r7
 800e782:	bd80      	pop	{r7, pc}

0800e784 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b08e      	sub	sp, #56	; 0x38
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
 800e78c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e794:	2b00      	cmp	r3, #0
 800e796:	d10c      	bne.n	800e7b2 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800e798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e79c:	b672      	cpsid	i
 800e79e:	f383 8811 	msr	BASEPRI, r3
 800e7a2:	f3bf 8f6f 	isb	sy
 800e7a6:	f3bf 8f4f 	dsb	sy
 800e7aa:	b662      	cpsie	i
 800e7ac:	623b      	str	r3, [r7, #32]
}
 800e7ae:	bf00      	nop
 800e7b0:	e7fe      	b.n	800e7b0 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d00c      	beq.n	800e7d4 <xQueueGiveFromISR+0x50>
	__asm volatile
 800e7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7be:	b672      	cpsid	i
 800e7c0:	f383 8811 	msr	BASEPRI, r3
 800e7c4:	f3bf 8f6f 	isb	sy
 800e7c8:	f3bf 8f4f 	dsb	sy
 800e7cc:	b662      	cpsie	i
 800e7ce:	61fb      	str	r3, [r7, #28]
}
 800e7d0:	bf00      	nop
 800e7d2:	e7fe      	b.n	800e7d2 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d103      	bne.n	800e7e4 <xQueueGiveFromISR+0x60>
 800e7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7de:	689b      	ldr	r3, [r3, #8]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d101      	bne.n	800e7e8 <xQueueGiveFromISR+0x64>
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	e000      	b.n	800e7ea <xQueueGiveFromISR+0x66>
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d10c      	bne.n	800e808 <xQueueGiveFromISR+0x84>
	__asm volatile
 800e7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7f2:	b672      	cpsid	i
 800e7f4:	f383 8811 	msr	BASEPRI, r3
 800e7f8:	f3bf 8f6f 	isb	sy
 800e7fc:	f3bf 8f4f 	dsb	sy
 800e800:	b662      	cpsie	i
 800e802:	61bb      	str	r3, [r7, #24]
}
 800e804:	bf00      	nop
 800e806:	e7fe      	b.n	800e806 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e808:	f002 fa48 	bl	8010c9c <vPortValidateInterruptPriority>
	__asm volatile
 800e80c:	f3ef 8211 	mrs	r2, BASEPRI
 800e810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e814:	b672      	cpsid	i
 800e816:	f383 8811 	msr	BASEPRI, r3
 800e81a:	f3bf 8f6f 	isb	sy
 800e81e:	f3bf 8f4f 	dsb	sy
 800e822:	b662      	cpsie	i
 800e824:	617a      	str	r2, [r7, #20]
 800e826:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e828:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e82a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e830:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e836:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e838:	429a      	cmp	r2, r3
 800e83a:	d22b      	bcs.n	800e894 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e83e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e848:	1c5a      	adds	r2, r3, #1
 800e84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e84c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e84e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e852:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e856:	d112      	bne.n	800e87e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d016      	beq.n	800e88e <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e862:	3324      	adds	r3, #36	; 0x24
 800e864:	4618      	mov	r0, r3
 800e866:	f001 f917 	bl	800fa98 <xTaskRemoveFromEventList>
 800e86a:	4603      	mov	r3, r0
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d00e      	beq.n	800e88e <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d00b      	beq.n	800e88e <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e876:	683b      	ldr	r3, [r7, #0]
 800e878:	2201      	movs	r2, #1
 800e87a:	601a      	str	r2, [r3, #0]
 800e87c:	e007      	b.n	800e88e <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e87e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e882:	3301      	adds	r3, #1
 800e884:	b2db      	uxtb	r3, r3
 800e886:	b25a      	sxtb	r2, r3
 800e888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e88a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e88e:	2301      	movs	r3, #1
 800e890:	637b      	str	r3, [r7, #52]	; 0x34
 800e892:	e001      	b.n	800e898 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e894:	2300      	movs	r3, #0
 800e896:	637b      	str	r3, [r7, #52]	; 0x34
 800e898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e89a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	f383 8811 	msr	BASEPRI, r3
}
 800e8a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e8a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	3738      	adds	r7, #56	; 0x38
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}
	...

0800e8b0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b08c      	sub	sp, #48	; 0x30
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	60f8      	str	r0, [r7, #12]
 800e8b8:	60b9      	str	r1, [r7, #8]
 800e8ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e8bc:	2300      	movs	r3, #0
 800e8be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d10c      	bne.n	800e8e4 <xQueueReceive+0x34>
	__asm volatile
 800e8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ce:	b672      	cpsid	i
 800e8d0:	f383 8811 	msr	BASEPRI, r3
 800e8d4:	f3bf 8f6f 	isb	sy
 800e8d8:	f3bf 8f4f 	dsb	sy
 800e8dc:	b662      	cpsie	i
 800e8de:	623b      	str	r3, [r7, #32]
}
 800e8e0:	bf00      	nop
 800e8e2:	e7fe      	b.n	800e8e2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e8e4:	68bb      	ldr	r3, [r7, #8]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d103      	bne.n	800e8f2 <xQueueReceive+0x42>
 800e8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d101      	bne.n	800e8f6 <xQueueReceive+0x46>
 800e8f2:	2301      	movs	r3, #1
 800e8f4:	e000      	b.n	800e8f8 <xQueueReceive+0x48>
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d10c      	bne.n	800e916 <xQueueReceive+0x66>
	__asm volatile
 800e8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e900:	b672      	cpsid	i
 800e902:	f383 8811 	msr	BASEPRI, r3
 800e906:	f3bf 8f6f 	isb	sy
 800e90a:	f3bf 8f4f 	dsb	sy
 800e90e:	b662      	cpsie	i
 800e910:	61fb      	str	r3, [r7, #28]
}
 800e912:	bf00      	nop
 800e914:	e7fe      	b.n	800e914 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e916:	f001 fa89 	bl	800fe2c <xTaskGetSchedulerState>
 800e91a:	4603      	mov	r3, r0
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d102      	bne.n	800e926 <xQueueReceive+0x76>
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d101      	bne.n	800e92a <xQueueReceive+0x7a>
 800e926:	2301      	movs	r3, #1
 800e928:	e000      	b.n	800e92c <xQueueReceive+0x7c>
 800e92a:	2300      	movs	r3, #0
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d10c      	bne.n	800e94a <xQueueReceive+0x9a>
	__asm volatile
 800e930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e934:	b672      	cpsid	i
 800e936:	f383 8811 	msr	BASEPRI, r3
 800e93a:	f3bf 8f6f 	isb	sy
 800e93e:	f3bf 8f4f 	dsb	sy
 800e942:	b662      	cpsie	i
 800e944:	61bb      	str	r3, [r7, #24]
}
 800e946:	bf00      	nop
 800e948:	e7fe      	b.n	800e948 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e94a:	f002 f8bf 	bl	8010acc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e952:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e956:	2b00      	cmp	r3, #0
 800e958:	d01f      	beq.n	800e99a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e95a:	68b9      	ldr	r1, [r7, #8]
 800e95c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e95e:	f000 face 	bl	800eefe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e964:	1e5a      	subs	r2, r3, #1
 800e966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e968:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e96c:	691b      	ldr	r3, [r3, #16]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d00f      	beq.n	800e992 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e974:	3310      	adds	r3, #16
 800e976:	4618      	mov	r0, r3
 800e978:	f001 f88e 	bl	800fa98 <xTaskRemoveFromEventList>
 800e97c:	4603      	mov	r3, r0
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d007      	beq.n	800e992 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e982:	4b3d      	ldr	r3, [pc, #244]	; (800ea78 <xQueueReceive+0x1c8>)
 800e984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e988:	601a      	str	r2, [r3, #0]
 800e98a:	f3bf 8f4f 	dsb	sy
 800e98e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e992:	f002 f8cf 	bl	8010b34 <vPortExitCritical>
				return pdPASS;
 800e996:	2301      	movs	r3, #1
 800e998:	e069      	b.n	800ea6e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d103      	bne.n	800e9a8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e9a0:	f002 f8c8 	bl	8010b34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	e062      	b.n	800ea6e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d106      	bne.n	800e9bc <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e9ae:	f107 0310 	add.w	r3, r7, #16
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f001 f8d6 	bl	800fb64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e9b8:	2301      	movs	r3, #1
 800e9ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e9bc:	f002 f8ba 	bl	8010b34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e9c0:	f000 fe36 	bl	800f630 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e9c4:	f002 f882 	bl	8010acc <vPortEnterCritical>
 800e9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e9ce:	b25b      	sxtb	r3, r3
 800e9d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9d4:	d103      	bne.n	800e9de <xQueueReceive+0x12e>
 800e9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d8:	2200      	movs	r2, #0
 800e9da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e9e4:	b25b      	sxtb	r3, r3
 800e9e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9ea:	d103      	bne.n	800e9f4 <xQueueReceive+0x144>
 800e9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e9f4:	f002 f89e 	bl	8010b34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e9f8:	1d3a      	adds	r2, r7, #4
 800e9fa:	f107 0310 	add.w	r3, r7, #16
 800e9fe:	4611      	mov	r1, r2
 800ea00:	4618      	mov	r0, r3
 800ea02:	f001 f8c5 	bl	800fb90 <xTaskCheckForTimeOut>
 800ea06:	4603      	mov	r3, r0
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d123      	bne.n	800ea54 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ea0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea0e:	f000 faee 	bl	800efee <prvIsQueueEmpty>
 800ea12:	4603      	mov	r3, r0
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d017      	beq.n	800ea48 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ea18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea1a:	3324      	adds	r3, #36	; 0x24
 800ea1c:	687a      	ldr	r2, [r7, #4]
 800ea1e:	4611      	mov	r1, r2
 800ea20:	4618      	mov	r0, r3
 800ea22:	f000 ffe5 	bl	800f9f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ea26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea28:	f000 fa8f 	bl	800ef4a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ea2c:	f000 fe0e 	bl	800f64c <xTaskResumeAll>
 800ea30:	4603      	mov	r3, r0
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d189      	bne.n	800e94a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800ea36:	4b10      	ldr	r3, [pc, #64]	; (800ea78 <xQueueReceive+0x1c8>)
 800ea38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea3c:	601a      	str	r2, [r3, #0]
 800ea3e:	f3bf 8f4f 	dsb	sy
 800ea42:	f3bf 8f6f 	isb	sy
 800ea46:	e780      	b.n	800e94a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ea48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea4a:	f000 fa7e 	bl	800ef4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ea4e:	f000 fdfd 	bl	800f64c <xTaskResumeAll>
 800ea52:	e77a      	b.n	800e94a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ea54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea56:	f000 fa78 	bl	800ef4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ea5a:	f000 fdf7 	bl	800f64c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ea5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea60:	f000 fac5 	bl	800efee <prvIsQueueEmpty>
 800ea64:	4603      	mov	r3, r0
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	f43f af6f 	beq.w	800e94a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ea6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ea6e:	4618      	mov	r0, r3
 800ea70:	3730      	adds	r7, #48	; 0x30
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}
 800ea76:	bf00      	nop
 800ea78:	e000ed04 	.word	0xe000ed04

0800ea7c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b08e      	sub	sp, #56	; 0x38
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
 800ea84:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ea86:	2300      	movs	r3, #0
 800ea88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ea8e:	2300      	movs	r3, #0
 800ea90:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ea92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d10c      	bne.n	800eab2 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800ea98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea9c:	b672      	cpsid	i
 800ea9e:	f383 8811 	msr	BASEPRI, r3
 800eaa2:	f3bf 8f6f 	isb	sy
 800eaa6:	f3bf 8f4f 	dsb	sy
 800eaaa:	b662      	cpsie	i
 800eaac:	623b      	str	r3, [r7, #32]
}
 800eaae:	bf00      	nop
 800eab0:	e7fe      	b.n	800eab0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800eab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d00c      	beq.n	800ead4 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800eaba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eabe:	b672      	cpsid	i
 800eac0:	f383 8811 	msr	BASEPRI, r3
 800eac4:	f3bf 8f6f 	isb	sy
 800eac8:	f3bf 8f4f 	dsb	sy
 800eacc:	b662      	cpsie	i
 800eace:	61fb      	str	r3, [r7, #28]
}
 800ead0:	bf00      	nop
 800ead2:	e7fe      	b.n	800ead2 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ead4:	f001 f9aa 	bl	800fe2c <xTaskGetSchedulerState>
 800ead8:	4603      	mov	r3, r0
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d102      	bne.n	800eae4 <xQueueSemaphoreTake+0x68>
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d101      	bne.n	800eae8 <xQueueSemaphoreTake+0x6c>
 800eae4:	2301      	movs	r3, #1
 800eae6:	e000      	b.n	800eaea <xQueueSemaphoreTake+0x6e>
 800eae8:	2300      	movs	r3, #0
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d10c      	bne.n	800eb08 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800eaee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaf2:	b672      	cpsid	i
 800eaf4:	f383 8811 	msr	BASEPRI, r3
 800eaf8:	f3bf 8f6f 	isb	sy
 800eafc:	f3bf 8f4f 	dsb	sy
 800eb00:	b662      	cpsie	i
 800eb02:	61bb      	str	r3, [r7, #24]
}
 800eb04:	bf00      	nop
 800eb06:	e7fe      	b.n	800eb06 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eb08:	f001 ffe0 	bl	8010acc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800eb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb10:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800eb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d024      	beq.n	800eb62 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800eb18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb1a:	1e5a      	subs	r2, r3, #1
 800eb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb1e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eb20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d104      	bne.n	800eb32 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800eb28:	f001 fafe 	bl	8010128 <pvTaskIncrementMutexHeldCount>
 800eb2c:	4602      	mov	r2, r0
 800eb2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb30:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb34:	691b      	ldr	r3, [r3, #16]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d00f      	beq.n	800eb5a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb3c:	3310      	adds	r3, #16
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f000 ffaa 	bl	800fa98 <xTaskRemoveFromEventList>
 800eb44:	4603      	mov	r3, r0
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d007      	beq.n	800eb5a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800eb4a:	4b55      	ldr	r3, [pc, #340]	; (800eca0 <xQueueSemaphoreTake+0x224>)
 800eb4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb50:	601a      	str	r2, [r3, #0]
 800eb52:	f3bf 8f4f 	dsb	sy
 800eb56:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800eb5a:	f001 ffeb 	bl	8010b34 <vPortExitCritical>
				return pdPASS;
 800eb5e:	2301      	movs	r3, #1
 800eb60:	e099      	b.n	800ec96 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d113      	bne.n	800eb90 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800eb68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d00c      	beq.n	800eb88 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800eb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb72:	b672      	cpsid	i
 800eb74:	f383 8811 	msr	BASEPRI, r3
 800eb78:	f3bf 8f6f 	isb	sy
 800eb7c:	f3bf 8f4f 	dsb	sy
 800eb80:	b662      	cpsie	i
 800eb82:	617b      	str	r3, [r7, #20]
}
 800eb84:	bf00      	nop
 800eb86:	e7fe      	b.n	800eb86 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800eb88:	f001 ffd4 	bl	8010b34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	e082      	b.n	800ec96 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eb90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d106      	bne.n	800eba4 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eb96:	f107 030c 	add.w	r3, r7, #12
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f000 ffe2 	bl	800fb64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eba0:	2301      	movs	r3, #1
 800eba2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eba4:	f001 ffc6 	bl	8010b34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eba8:	f000 fd42 	bl	800f630 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ebac:	f001 ff8e 	bl	8010acc <vPortEnterCritical>
 800ebb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ebb6:	b25b      	sxtb	r3, r3
 800ebb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebbc:	d103      	bne.n	800ebc6 <xQueueSemaphoreTake+0x14a>
 800ebbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ebc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ebcc:	b25b      	sxtb	r3, r3
 800ebce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebd2:	d103      	bne.n	800ebdc <xQueueSemaphoreTake+0x160>
 800ebd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ebdc:	f001 ffaa 	bl	8010b34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ebe0:	463a      	mov	r2, r7
 800ebe2:	f107 030c 	add.w	r3, r7, #12
 800ebe6:	4611      	mov	r1, r2
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f000 ffd1 	bl	800fb90 <xTaskCheckForTimeOut>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d132      	bne.n	800ec5a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ebf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ebf6:	f000 f9fa 	bl	800efee <prvIsQueueEmpty>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d026      	beq.n	800ec4e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ec00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d109      	bne.n	800ec1c <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800ec08:	f001 ff60 	bl	8010acc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ec0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec0e:	689b      	ldr	r3, [r3, #8]
 800ec10:	4618      	mov	r0, r3
 800ec12:	f001 f929 	bl	800fe68 <xTaskPriorityInherit>
 800ec16:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ec18:	f001 ff8c 	bl	8010b34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ec1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec1e:	3324      	adds	r3, #36	; 0x24
 800ec20:	683a      	ldr	r2, [r7, #0]
 800ec22:	4611      	mov	r1, r2
 800ec24:	4618      	mov	r0, r3
 800ec26:	f000 fee3 	bl	800f9f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ec2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec2c:	f000 f98d 	bl	800ef4a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ec30:	f000 fd0c 	bl	800f64c <xTaskResumeAll>
 800ec34:	4603      	mov	r3, r0
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	f47f af66 	bne.w	800eb08 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800ec3c:	4b18      	ldr	r3, [pc, #96]	; (800eca0 <xQueueSemaphoreTake+0x224>)
 800ec3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec42:	601a      	str	r2, [r3, #0]
 800ec44:	f3bf 8f4f 	dsb	sy
 800ec48:	f3bf 8f6f 	isb	sy
 800ec4c:	e75c      	b.n	800eb08 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ec4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec50:	f000 f97b 	bl	800ef4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ec54:	f000 fcfa 	bl	800f64c <xTaskResumeAll>
 800ec58:	e756      	b.n	800eb08 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ec5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec5c:	f000 f975 	bl	800ef4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ec60:	f000 fcf4 	bl	800f64c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ec64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec66:	f000 f9c2 	bl	800efee <prvIsQueueEmpty>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	f43f af4b 	beq.w	800eb08 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ec72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d00d      	beq.n	800ec94 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800ec78:	f001 ff28 	bl	8010acc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ec7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec7e:	f000 f8bc 	bl	800edfa <prvGetDisinheritPriorityAfterTimeout>
 800ec82:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ec84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec86:	689b      	ldr	r3, [r3, #8]
 800ec88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f001 f9c6 	bl	801001c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ec90:	f001 ff50 	bl	8010b34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ec94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ec96:	4618      	mov	r0, r3
 800ec98:	3738      	adds	r7, #56	; 0x38
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	bd80      	pop	{r7, pc}
 800ec9e:	bf00      	nop
 800eca0:	e000ed04 	.word	0xe000ed04

0800eca4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b08e      	sub	sp, #56	; 0x38
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	60f8      	str	r0, [r7, #12]
 800ecac:	60b9      	str	r1, [r7, #8]
 800ecae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ecb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d10c      	bne.n	800ecd4 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800ecba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecbe:	b672      	cpsid	i
 800ecc0:	f383 8811 	msr	BASEPRI, r3
 800ecc4:	f3bf 8f6f 	isb	sy
 800ecc8:	f3bf 8f4f 	dsb	sy
 800eccc:	b662      	cpsie	i
 800ecce:	623b      	str	r3, [r7, #32]
}
 800ecd0:	bf00      	nop
 800ecd2:	e7fe      	b.n	800ecd2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d103      	bne.n	800ece2 <xQueueReceiveFromISR+0x3e>
 800ecda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d101      	bne.n	800ece6 <xQueueReceiveFromISR+0x42>
 800ece2:	2301      	movs	r3, #1
 800ece4:	e000      	b.n	800ece8 <xQueueReceiveFromISR+0x44>
 800ece6:	2300      	movs	r3, #0
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d10c      	bne.n	800ed06 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800ecec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecf0:	b672      	cpsid	i
 800ecf2:	f383 8811 	msr	BASEPRI, r3
 800ecf6:	f3bf 8f6f 	isb	sy
 800ecfa:	f3bf 8f4f 	dsb	sy
 800ecfe:	b662      	cpsie	i
 800ed00:	61fb      	str	r3, [r7, #28]
}
 800ed02:	bf00      	nop
 800ed04:	e7fe      	b.n	800ed04 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ed06:	f001 ffc9 	bl	8010c9c <vPortValidateInterruptPriority>
	__asm volatile
 800ed0a:	f3ef 8211 	mrs	r2, BASEPRI
 800ed0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed12:	b672      	cpsid	i
 800ed14:	f383 8811 	msr	BASEPRI, r3
 800ed18:	f3bf 8f6f 	isb	sy
 800ed1c:	f3bf 8f4f 	dsb	sy
 800ed20:	b662      	cpsie	i
 800ed22:	61ba      	str	r2, [r7, #24]
 800ed24:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ed26:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ed28:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ed2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed2e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ed30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d02f      	beq.n	800ed96 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ed36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ed3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ed40:	68b9      	ldr	r1, [r7, #8]
 800ed42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed44:	f000 f8db 	bl	800eefe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ed48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed4a:	1e5a      	subs	r2, r3, #1
 800ed4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed4e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ed50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ed54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed58:	d112      	bne.n	800ed80 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ed5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed5c:	691b      	ldr	r3, [r3, #16]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d016      	beq.n	800ed90 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed64:	3310      	adds	r3, #16
 800ed66:	4618      	mov	r0, r3
 800ed68:	f000 fe96 	bl	800fa98 <xTaskRemoveFromEventList>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d00e      	beq.n	800ed90 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d00b      	beq.n	800ed90 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2201      	movs	r2, #1
 800ed7c:	601a      	str	r2, [r3, #0]
 800ed7e:	e007      	b.n	800ed90 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ed80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed84:	3301      	adds	r3, #1
 800ed86:	b2db      	uxtb	r3, r3
 800ed88:	b25a      	sxtb	r2, r3
 800ed8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ed90:	2301      	movs	r3, #1
 800ed92:	637b      	str	r3, [r7, #52]	; 0x34
 800ed94:	e001      	b.n	800ed9a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800ed96:	2300      	movs	r3, #0
 800ed98:	637b      	str	r3, [r7, #52]	; 0x34
 800ed9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed9c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ed9e:	693b      	ldr	r3, [r7, #16]
 800eda0:	f383 8811 	msr	BASEPRI, r3
}
 800eda4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eda6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800eda8:	4618      	mov	r0, r3
 800edaa:	3738      	adds	r7, #56	; 0x38
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}

0800edb0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b084      	sub	sp, #16
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d10c      	bne.n	800eddc <vQueueDelete+0x2c>
	__asm volatile
 800edc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edc6:	b672      	cpsid	i
 800edc8:	f383 8811 	msr	BASEPRI, r3
 800edcc:	f3bf 8f6f 	isb	sy
 800edd0:	f3bf 8f4f 	dsb	sy
 800edd4:	b662      	cpsie	i
 800edd6:	60bb      	str	r3, [r7, #8]
}
 800edd8:	bf00      	nop
 800edda:	e7fe      	b.n	800edda <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800eddc:	68f8      	ldr	r0, [r7, #12]
 800edde:	f000 f95f 	bl	800f0a0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d102      	bne.n	800edf2 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800edec:	68f8      	ldr	r0, [r7, #12]
 800edee:	f002 f863 	bl	8010eb8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800edf2:	bf00      	nop
 800edf4:	3710      	adds	r7, #16
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}

0800edfa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800edfa:	b480      	push	{r7}
 800edfc:	b085      	sub	sp, #20
 800edfe:	af00      	add	r7, sp, #0
 800ee00:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d006      	beq.n	800ee18 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ee14:	60fb      	str	r3, [r7, #12]
 800ee16:	e001      	b.n	800ee1c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
	}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	3714      	adds	r7, #20
 800ee22:	46bd      	mov	sp, r7
 800ee24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee28:	4770      	bx	lr

0800ee2a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ee2a:	b580      	push	{r7, lr}
 800ee2c:	b086      	sub	sp, #24
 800ee2e:	af00      	add	r7, sp, #0
 800ee30:	60f8      	str	r0, [r7, #12]
 800ee32:	60b9      	str	r1, [r7, #8]
 800ee34:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ee36:	2300      	movs	r3, #0
 800ee38:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee3e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d10d      	bne.n	800ee64 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d14d      	bne.n	800eeec <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	689b      	ldr	r3, [r3, #8]
 800ee54:	4618      	mov	r0, r3
 800ee56:	f001 f86f 	bl	800ff38 <xTaskPriorityDisinherit>
 800ee5a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	2200      	movs	r2, #0
 800ee60:	609a      	str	r2, [r3, #8]
 800ee62:	e043      	b.n	800eeec <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d119      	bne.n	800ee9e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	6858      	ldr	r0, [r3, #4]
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee72:	461a      	mov	r2, r3
 800ee74:	68b9      	ldr	r1, [r7, #8]
 800ee76:	f002 ff19 	bl	8011cac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	685a      	ldr	r2, [r3, #4]
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee82:	441a      	add	r2, r3
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	685a      	ldr	r2, [r3, #4]
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	689b      	ldr	r3, [r3, #8]
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d32b      	bcc.n	800eeec <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	681a      	ldr	r2, [r3, #0]
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	605a      	str	r2, [r3, #4]
 800ee9c:	e026      	b.n	800eeec <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	68d8      	ldr	r0, [r3, #12]
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eea6:	461a      	mov	r2, r3
 800eea8:	68b9      	ldr	r1, [r7, #8]
 800eeaa:	f002 feff 	bl	8011cac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	68da      	ldr	r2, [r3, #12]
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eeb6:	425b      	negs	r3, r3
 800eeb8:	441a      	add	r2, r3
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	68da      	ldr	r2, [r3, #12]
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	429a      	cmp	r2, r3
 800eec8:	d207      	bcs.n	800eeda <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	689a      	ldr	r2, [r3, #8]
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eed2:	425b      	negs	r3, r3
 800eed4:	441a      	add	r2, r3
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	2b02      	cmp	r3, #2
 800eede:	d105      	bne.n	800eeec <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eee0:	693b      	ldr	r3, [r7, #16]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d002      	beq.n	800eeec <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800eee6:	693b      	ldr	r3, [r7, #16]
 800eee8:	3b01      	subs	r3, #1
 800eeea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800eeec:	693b      	ldr	r3, [r7, #16]
 800eeee:	1c5a      	adds	r2, r3, #1
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800eef4:	697b      	ldr	r3, [r7, #20]
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	3718      	adds	r7, #24
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}

0800eefe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800eefe:	b580      	push	{r7, lr}
 800ef00:	b082      	sub	sp, #8
 800ef02:	af00      	add	r7, sp, #0
 800ef04:	6078      	str	r0, [r7, #4]
 800ef06:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d018      	beq.n	800ef42 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	68da      	ldr	r2, [r3, #12]
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef18:	441a      	add	r2, r3
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	68da      	ldr	r2, [r3, #12]
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	689b      	ldr	r3, [r3, #8]
 800ef26:	429a      	cmp	r2, r3
 800ef28:	d303      	bcc.n	800ef32 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681a      	ldr	r2, [r3, #0]
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	68d9      	ldr	r1, [r3, #12]
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef3a:	461a      	mov	r2, r3
 800ef3c:	6838      	ldr	r0, [r7, #0]
 800ef3e:	f002 feb5 	bl	8011cac <memcpy>
	}
}
 800ef42:	bf00      	nop
 800ef44:	3708      	adds	r7, #8
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}

0800ef4a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ef4a:	b580      	push	{r7, lr}
 800ef4c:	b084      	sub	sp, #16
 800ef4e:	af00      	add	r7, sp, #0
 800ef50:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ef52:	f001 fdbb 	bl	8010acc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef5c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ef5e:	e011      	b.n	800ef84 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d012      	beq.n	800ef8e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	3324      	adds	r3, #36	; 0x24
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f000 fd93 	bl	800fa98 <xTaskRemoveFromEventList>
 800ef72:	4603      	mov	r3, r0
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d001      	beq.n	800ef7c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ef78:	f000 fe70 	bl	800fc5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ef7c:	7bfb      	ldrb	r3, [r7, #15]
 800ef7e:	3b01      	subs	r3, #1
 800ef80:	b2db      	uxtb	r3, r3
 800ef82:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ef84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	dce9      	bgt.n	800ef60 <prvUnlockQueue+0x16>
 800ef8c:	e000      	b.n	800ef90 <prvUnlockQueue+0x46>
					break;
 800ef8e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	22ff      	movs	r2, #255	; 0xff
 800ef94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ef98:	f001 fdcc 	bl	8010b34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ef9c:	f001 fd96 	bl	8010acc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800efa6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800efa8:	e011      	b.n	800efce <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	691b      	ldr	r3, [r3, #16]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d012      	beq.n	800efd8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	3310      	adds	r3, #16
 800efb6:	4618      	mov	r0, r3
 800efb8:	f000 fd6e 	bl	800fa98 <xTaskRemoveFromEventList>
 800efbc:	4603      	mov	r3, r0
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d001      	beq.n	800efc6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800efc2:	f000 fe4b 	bl	800fc5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800efc6:	7bbb      	ldrb	r3, [r7, #14]
 800efc8:	3b01      	subs	r3, #1
 800efca:	b2db      	uxtb	r3, r3
 800efcc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800efce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	dce9      	bgt.n	800efaa <prvUnlockQueue+0x60>
 800efd6:	e000      	b.n	800efda <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800efd8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	22ff      	movs	r2, #255	; 0xff
 800efde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800efe2:	f001 fda7 	bl	8010b34 <vPortExitCritical>
}
 800efe6:	bf00      	nop
 800efe8:	3710      	adds	r7, #16
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}

0800efee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800efee:	b580      	push	{r7, lr}
 800eff0:	b084      	sub	sp, #16
 800eff2:	af00      	add	r7, sp, #0
 800eff4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eff6:	f001 fd69 	bl	8010acc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800effe:	2b00      	cmp	r3, #0
 800f000:	d102      	bne.n	800f008 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f002:	2301      	movs	r3, #1
 800f004:	60fb      	str	r3, [r7, #12]
 800f006:	e001      	b.n	800f00c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f008:	2300      	movs	r3, #0
 800f00a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f00c:	f001 fd92 	bl	8010b34 <vPortExitCritical>

	return xReturn;
 800f010:	68fb      	ldr	r3, [r7, #12]
}
 800f012:	4618      	mov	r0, r3
 800f014:	3710      	adds	r7, #16
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}

0800f01a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f01a:	b580      	push	{r7, lr}
 800f01c:	b084      	sub	sp, #16
 800f01e:	af00      	add	r7, sp, #0
 800f020:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f022:	f001 fd53 	bl	8010acc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f02e:	429a      	cmp	r2, r3
 800f030:	d102      	bne.n	800f038 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f032:	2301      	movs	r3, #1
 800f034:	60fb      	str	r3, [r7, #12]
 800f036:	e001      	b.n	800f03c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f038:	2300      	movs	r3, #0
 800f03a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f03c:	f001 fd7a 	bl	8010b34 <vPortExitCritical>

	return xReturn;
 800f040:	68fb      	ldr	r3, [r7, #12]
}
 800f042:	4618      	mov	r0, r3
 800f044:	3710      	adds	r7, #16
 800f046:	46bd      	mov	sp, r7
 800f048:	bd80      	pop	{r7, pc}
	...

0800f04c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f04c:	b480      	push	{r7}
 800f04e:	b085      	sub	sp, #20
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
 800f054:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f056:	2300      	movs	r3, #0
 800f058:	60fb      	str	r3, [r7, #12]
 800f05a:	e014      	b.n	800f086 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f05c:	4a0f      	ldr	r2, [pc, #60]	; (800f09c <vQueueAddToRegistry+0x50>)
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d10b      	bne.n	800f080 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f068:	490c      	ldr	r1, [pc, #48]	; (800f09c <vQueueAddToRegistry+0x50>)
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	683a      	ldr	r2, [r7, #0]
 800f06e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f072:	4a0a      	ldr	r2, [pc, #40]	; (800f09c <vQueueAddToRegistry+0x50>)
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	00db      	lsls	r3, r3, #3
 800f078:	4413      	add	r3, r2
 800f07a:	687a      	ldr	r2, [r7, #4]
 800f07c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f07e:	e006      	b.n	800f08e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	3301      	adds	r3, #1
 800f084:	60fb      	str	r3, [r7, #12]
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	2b07      	cmp	r3, #7
 800f08a:	d9e7      	bls.n	800f05c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f08c:	bf00      	nop
 800f08e:	bf00      	nop
 800f090:	3714      	adds	r7, #20
 800f092:	46bd      	mov	sp, r7
 800f094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f098:	4770      	bx	lr
 800f09a:	bf00      	nop
 800f09c:	200015fc 	.word	0x200015fc

0800f0a0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f0a0:	b480      	push	{r7}
 800f0a2:	b085      	sub	sp, #20
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	60fb      	str	r3, [r7, #12]
 800f0ac:	e016      	b.n	800f0dc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f0ae:	4a10      	ldr	r2, [pc, #64]	; (800f0f0 <vQueueUnregisterQueue+0x50>)
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	00db      	lsls	r3, r3, #3
 800f0b4:	4413      	add	r3, r2
 800f0b6:	685b      	ldr	r3, [r3, #4]
 800f0b8:	687a      	ldr	r2, [r7, #4]
 800f0ba:	429a      	cmp	r2, r3
 800f0bc:	d10b      	bne.n	800f0d6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f0be:	4a0c      	ldr	r2, [pc, #48]	; (800f0f0 <vQueueUnregisterQueue+0x50>)
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	2100      	movs	r1, #0
 800f0c4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f0c8:	4a09      	ldr	r2, [pc, #36]	; (800f0f0 <vQueueUnregisterQueue+0x50>)
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	00db      	lsls	r3, r3, #3
 800f0ce:	4413      	add	r3, r2
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	605a      	str	r2, [r3, #4]
				break;
 800f0d4:	e006      	b.n	800f0e4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	3301      	adds	r3, #1
 800f0da:	60fb      	str	r3, [r7, #12]
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	2b07      	cmp	r3, #7
 800f0e0:	d9e5      	bls.n	800f0ae <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f0e2:	bf00      	nop
 800f0e4:	bf00      	nop
 800f0e6:	3714      	adds	r7, #20
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ee:	4770      	bx	lr
 800f0f0:	200015fc 	.word	0x200015fc

0800f0f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b086      	sub	sp, #24
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	60f8      	str	r0, [r7, #12]
 800f0fc:	60b9      	str	r1, [r7, #8]
 800f0fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f104:	f001 fce2 	bl	8010acc <vPortEnterCritical>
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f10e:	b25b      	sxtb	r3, r3
 800f110:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f114:	d103      	bne.n	800f11e <vQueueWaitForMessageRestricted+0x2a>
 800f116:	697b      	ldr	r3, [r7, #20]
 800f118:	2200      	movs	r2, #0
 800f11a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f11e:	697b      	ldr	r3, [r7, #20]
 800f120:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f124:	b25b      	sxtb	r3, r3
 800f126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f12a:	d103      	bne.n	800f134 <vQueueWaitForMessageRestricted+0x40>
 800f12c:	697b      	ldr	r3, [r7, #20]
 800f12e:	2200      	movs	r2, #0
 800f130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f134:	f001 fcfe 	bl	8010b34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f138:	697b      	ldr	r3, [r7, #20]
 800f13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d106      	bne.n	800f14e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	3324      	adds	r3, #36	; 0x24
 800f144:	687a      	ldr	r2, [r7, #4]
 800f146:	68b9      	ldr	r1, [r7, #8]
 800f148:	4618      	mov	r0, r3
 800f14a:	f000 fc77 	bl	800fa3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f14e:	6978      	ldr	r0, [r7, #20]
 800f150:	f7ff fefb 	bl	800ef4a <prvUnlockQueue>
	}
 800f154:	bf00      	nop
 800f156:	3718      	adds	r7, #24
 800f158:	46bd      	mov	sp, r7
 800f15a:	bd80      	pop	{r7, pc}

0800f15c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b08e      	sub	sp, #56	; 0x38
 800f160:	af04      	add	r7, sp, #16
 800f162:	60f8      	str	r0, [r7, #12]
 800f164:	60b9      	str	r1, [r7, #8]
 800f166:	607a      	str	r2, [r7, #4]
 800f168:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f16a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d10c      	bne.n	800f18a <xTaskCreateStatic+0x2e>
	__asm volatile
 800f170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f174:	b672      	cpsid	i
 800f176:	f383 8811 	msr	BASEPRI, r3
 800f17a:	f3bf 8f6f 	isb	sy
 800f17e:	f3bf 8f4f 	dsb	sy
 800f182:	b662      	cpsie	i
 800f184:	623b      	str	r3, [r7, #32]
}
 800f186:	bf00      	nop
 800f188:	e7fe      	b.n	800f188 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800f18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d10c      	bne.n	800f1aa <xTaskCreateStatic+0x4e>
	__asm volatile
 800f190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f194:	b672      	cpsid	i
 800f196:	f383 8811 	msr	BASEPRI, r3
 800f19a:	f3bf 8f6f 	isb	sy
 800f19e:	f3bf 8f4f 	dsb	sy
 800f1a2:	b662      	cpsie	i
 800f1a4:	61fb      	str	r3, [r7, #28]
}
 800f1a6:	bf00      	nop
 800f1a8:	e7fe      	b.n	800f1a8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f1aa:	23bc      	movs	r3, #188	; 0xbc
 800f1ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f1ae:	693b      	ldr	r3, [r7, #16]
 800f1b0:	2bbc      	cmp	r3, #188	; 0xbc
 800f1b2:	d00c      	beq.n	800f1ce <xTaskCreateStatic+0x72>
	__asm volatile
 800f1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1b8:	b672      	cpsid	i
 800f1ba:	f383 8811 	msr	BASEPRI, r3
 800f1be:	f3bf 8f6f 	isb	sy
 800f1c2:	f3bf 8f4f 	dsb	sy
 800f1c6:	b662      	cpsie	i
 800f1c8:	61bb      	str	r3, [r7, #24]
}
 800f1ca:	bf00      	nop
 800f1cc:	e7fe      	b.n	800f1cc <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f1ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d01e      	beq.n	800f214 <xTaskCreateStatic+0xb8>
 800f1d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d01b      	beq.n	800f214 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1de:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f1e4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e8:	2202      	movs	r2, #2
 800f1ea:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	9303      	str	r3, [sp, #12]
 800f1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f4:	9302      	str	r3, [sp, #8]
 800f1f6:	f107 0314 	add.w	r3, r7, #20
 800f1fa:	9301      	str	r3, [sp, #4]
 800f1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1fe:	9300      	str	r3, [sp, #0]
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	687a      	ldr	r2, [r7, #4]
 800f204:	68b9      	ldr	r1, [r7, #8]
 800f206:	68f8      	ldr	r0, [r7, #12]
 800f208:	f000 f850 	bl	800f2ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f20c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f20e:	f000 f8f5 	bl	800f3fc <prvAddNewTaskToReadyList>
 800f212:	e001      	b.n	800f218 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800f214:	2300      	movs	r3, #0
 800f216:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f218:	697b      	ldr	r3, [r7, #20]
	}
 800f21a:	4618      	mov	r0, r3
 800f21c:	3728      	adds	r7, #40	; 0x28
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}

0800f222 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f222:	b580      	push	{r7, lr}
 800f224:	b08c      	sub	sp, #48	; 0x30
 800f226:	af04      	add	r7, sp, #16
 800f228:	60f8      	str	r0, [r7, #12]
 800f22a:	60b9      	str	r1, [r7, #8]
 800f22c:	603b      	str	r3, [r7, #0]
 800f22e:	4613      	mov	r3, r2
 800f230:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f232:	88fb      	ldrh	r3, [r7, #6]
 800f234:	009b      	lsls	r3, r3, #2
 800f236:	4618      	mov	r0, r3
 800f238:	f001 fd74 	bl	8010d24 <pvPortMalloc>
 800f23c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f23e:	697b      	ldr	r3, [r7, #20]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d00e      	beq.n	800f262 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f244:	20bc      	movs	r0, #188	; 0xbc
 800f246:	f001 fd6d 	bl	8010d24 <pvPortMalloc>
 800f24a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f24c:	69fb      	ldr	r3, [r7, #28]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d003      	beq.n	800f25a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f252:	69fb      	ldr	r3, [r7, #28]
 800f254:	697a      	ldr	r2, [r7, #20]
 800f256:	631a      	str	r2, [r3, #48]	; 0x30
 800f258:	e005      	b.n	800f266 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f25a:	6978      	ldr	r0, [r7, #20]
 800f25c:	f001 fe2c 	bl	8010eb8 <vPortFree>
 800f260:	e001      	b.n	800f266 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f262:	2300      	movs	r3, #0
 800f264:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f266:	69fb      	ldr	r3, [r7, #28]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d017      	beq.n	800f29c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f26c:	69fb      	ldr	r3, [r7, #28]
 800f26e:	2200      	movs	r2, #0
 800f270:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f274:	88fa      	ldrh	r2, [r7, #6]
 800f276:	2300      	movs	r3, #0
 800f278:	9303      	str	r3, [sp, #12]
 800f27a:	69fb      	ldr	r3, [r7, #28]
 800f27c:	9302      	str	r3, [sp, #8]
 800f27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f280:	9301      	str	r3, [sp, #4]
 800f282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f284:	9300      	str	r3, [sp, #0]
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	68b9      	ldr	r1, [r7, #8]
 800f28a:	68f8      	ldr	r0, [r7, #12]
 800f28c:	f000 f80e 	bl	800f2ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f290:	69f8      	ldr	r0, [r7, #28]
 800f292:	f000 f8b3 	bl	800f3fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f296:	2301      	movs	r3, #1
 800f298:	61bb      	str	r3, [r7, #24]
 800f29a:	e002      	b.n	800f2a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f29c:	f04f 33ff 	mov.w	r3, #4294967295
 800f2a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f2a2:	69bb      	ldr	r3, [r7, #24]
	}
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	3720      	adds	r7, #32
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd80      	pop	{r7, pc}

0800f2ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b088      	sub	sp, #32
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	60f8      	str	r0, [r7, #12]
 800f2b4:	60b9      	str	r1, [r7, #8]
 800f2b6:	607a      	str	r2, [r7, #4]
 800f2b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	009b      	lsls	r3, r3, #2
 800f2c2:	461a      	mov	r2, r3
 800f2c4:	21a5      	movs	r1, #165	; 0xa5
 800f2c6:	f002 fcff 	bl	8011cc8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f2ce:	6879      	ldr	r1, [r7, #4]
 800f2d0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f2d4:	440b      	add	r3, r1
 800f2d6:	009b      	lsls	r3, r3, #2
 800f2d8:	4413      	add	r3, r2
 800f2da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f2dc:	69bb      	ldr	r3, [r7, #24]
 800f2de:	f023 0307 	bic.w	r3, r3, #7
 800f2e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f2e4:	69bb      	ldr	r3, [r7, #24]
 800f2e6:	f003 0307 	and.w	r3, r3, #7
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d00c      	beq.n	800f308 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800f2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2f2:	b672      	cpsid	i
 800f2f4:	f383 8811 	msr	BASEPRI, r3
 800f2f8:	f3bf 8f6f 	isb	sy
 800f2fc:	f3bf 8f4f 	dsb	sy
 800f300:	b662      	cpsie	i
 800f302:	617b      	str	r3, [r7, #20]
}
 800f304:	bf00      	nop
 800f306:	e7fe      	b.n	800f306 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d01f      	beq.n	800f34e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f30e:	2300      	movs	r3, #0
 800f310:	61fb      	str	r3, [r7, #28]
 800f312:	e012      	b.n	800f33a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f314:	68ba      	ldr	r2, [r7, #8]
 800f316:	69fb      	ldr	r3, [r7, #28]
 800f318:	4413      	add	r3, r2
 800f31a:	7819      	ldrb	r1, [r3, #0]
 800f31c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f31e:	69fb      	ldr	r3, [r7, #28]
 800f320:	4413      	add	r3, r2
 800f322:	3334      	adds	r3, #52	; 0x34
 800f324:	460a      	mov	r2, r1
 800f326:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f328:	68ba      	ldr	r2, [r7, #8]
 800f32a:	69fb      	ldr	r3, [r7, #28]
 800f32c:	4413      	add	r3, r2
 800f32e:	781b      	ldrb	r3, [r3, #0]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d006      	beq.n	800f342 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f334:	69fb      	ldr	r3, [r7, #28]
 800f336:	3301      	adds	r3, #1
 800f338:	61fb      	str	r3, [r7, #28]
 800f33a:	69fb      	ldr	r3, [r7, #28]
 800f33c:	2b0f      	cmp	r3, #15
 800f33e:	d9e9      	bls.n	800f314 <prvInitialiseNewTask+0x68>
 800f340:	e000      	b.n	800f344 <prvInitialiseNewTask+0x98>
			{
				break;
 800f342:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f346:	2200      	movs	r2, #0
 800f348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f34c:	e003      	b.n	800f356 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f350:	2200      	movs	r2, #0
 800f352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f358:	2b37      	cmp	r3, #55	; 0x37
 800f35a:	d901      	bls.n	800f360 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f35c:	2337      	movs	r3, #55	; 0x37
 800f35e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f362:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f364:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f36a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f36e:	2200      	movs	r2, #0
 800f370:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f374:	3304      	adds	r3, #4
 800f376:	4618      	mov	r0, r3
 800f378:	f7fe fe06 	bl	800df88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f37e:	3318      	adds	r3, #24
 800f380:	4618      	mov	r0, r3
 800f382:	f7fe fe01 	bl	800df88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f38a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f38e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f394:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f39a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f39e:	2200      	movs	r2, #0
 800f3a0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ae:	3354      	adds	r3, #84	; 0x54
 800f3b0:	2260      	movs	r2, #96	; 0x60
 800f3b2:	2100      	movs	r1, #0
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	f002 fc87 	bl	8011cc8 <memset>
 800f3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3bc:	4a0c      	ldr	r2, [pc, #48]	; (800f3f0 <prvInitialiseNewTask+0x144>)
 800f3be:	659a      	str	r2, [r3, #88]	; 0x58
 800f3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3c2:	4a0c      	ldr	r2, [pc, #48]	; (800f3f4 <prvInitialiseNewTask+0x148>)
 800f3c4:	65da      	str	r2, [r3, #92]	; 0x5c
 800f3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3c8:	4a0b      	ldr	r2, [pc, #44]	; (800f3f8 <prvInitialiseNewTask+0x14c>)
 800f3ca:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f3cc:	683a      	ldr	r2, [r7, #0]
 800f3ce:	68f9      	ldr	r1, [r7, #12]
 800f3d0:	69b8      	ldr	r0, [r7, #24]
 800f3d2:	f001 fa6d 	bl	80108b0 <pxPortInitialiseStack>
 800f3d6:	4602      	mov	r2, r0
 800f3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3da:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d002      	beq.n	800f3e8 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f3e8:	bf00      	nop
 800f3ea:	3720      	adds	r7, #32
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}
 800f3f0:	0801210c 	.word	0x0801210c
 800f3f4:	0801212c 	.word	0x0801212c
 800f3f8:	080120ec 	.word	0x080120ec

0800f3fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b082      	sub	sp, #8
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f404:	f001 fb62 	bl	8010acc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f408:	4b2d      	ldr	r3, [pc, #180]	; (800f4c0 <prvAddNewTaskToReadyList+0xc4>)
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	3301      	adds	r3, #1
 800f40e:	4a2c      	ldr	r2, [pc, #176]	; (800f4c0 <prvAddNewTaskToReadyList+0xc4>)
 800f410:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f412:	4b2c      	ldr	r3, [pc, #176]	; (800f4c4 <prvAddNewTaskToReadyList+0xc8>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d109      	bne.n	800f42e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f41a:	4a2a      	ldr	r2, [pc, #168]	; (800f4c4 <prvAddNewTaskToReadyList+0xc8>)
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f420:	4b27      	ldr	r3, [pc, #156]	; (800f4c0 <prvAddNewTaskToReadyList+0xc4>)
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	2b01      	cmp	r3, #1
 800f426:	d110      	bne.n	800f44a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f428:	f000 fc3c 	bl	800fca4 <prvInitialiseTaskLists>
 800f42c:	e00d      	b.n	800f44a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f42e:	4b26      	ldr	r3, [pc, #152]	; (800f4c8 <prvAddNewTaskToReadyList+0xcc>)
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d109      	bne.n	800f44a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f436:	4b23      	ldr	r3, [pc, #140]	; (800f4c4 <prvAddNewTaskToReadyList+0xc8>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f440:	429a      	cmp	r2, r3
 800f442:	d802      	bhi.n	800f44a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f444:	4a1f      	ldr	r2, [pc, #124]	; (800f4c4 <prvAddNewTaskToReadyList+0xc8>)
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f44a:	4b20      	ldr	r3, [pc, #128]	; (800f4cc <prvAddNewTaskToReadyList+0xd0>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	3301      	adds	r3, #1
 800f450:	4a1e      	ldr	r2, [pc, #120]	; (800f4cc <prvAddNewTaskToReadyList+0xd0>)
 800f452:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f454:	4b1d      	ldr	r3, [pc, #116]	; (800f4cc <prvAddNewTaskToReadyList+0xd0>)
 800f456:	681a      	ldr	r2, [r3, #0]
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f460:	4b1b      	ldr	r3, [pc, #108]	; (800f4d0 <prvAddNewTaskToReadyList+0xd4>)
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	429a      	cmp	r2, r3
 800f466:	d903      	bls.n	800f470 <prvAddNewTaskToReadyList+0x74>
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f46c:	4a18      	ldr	r2, [pc, #96]	; (800f4d0 <prvAddNewTaskToReadyList+0xd4>)
 800f46e:	6013      	str	r3, [r2, #0]
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f474:	4613      	mov	r3, r2
 800f476:	009b      	lsls	r3, r3, #2
 800f478:	4413      	add	r3, r2
 800f47a:	009b      	lsls	r3, r3, #2
 800f47c:	4a15      	ldr	r2, [pc, #84]	; (800f4d4 <prvAddNewTaskToReadyList+0xd8>)
 800f47e:	441a      	add	r2, r3
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	3304      	adds	r3, #4
 800f484:	4619      	mov	r1, r3
 800f486:	4610      	mov	r0, r2
 800f488:	f7fe fd8b 	bl	800dfa2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f48c:	f001 fb52 	bl	8010b34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f490:	4b0d      	ldr	r3, [pc, #52]	; (800f4c8 <prvAddNewTaskToReadyList+0xcc>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d00e      	beq.n	800f4b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f498:	4b0a      	ldr	r3, [pc, #40]	; (800f4c4 <prvAddNewTaskToReadyList+0xc8>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4a2:	429a      	cmp	r2, r3
 800f4a4:	d207      	bcs.n	800f4b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f4a6:	4b0c      	ldr	r3, [pc, #48]	; (800f4d8 <prvAddNewTaskToReadyList+0xdc>)
 800f4a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f4ac:	601a      	str	r2, [r3, #0]
 800f4ae:	f3bf 8f4f 	dsb	sy
 800f4b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f4b6:	bf00      	nop
 800f4b8:	3708      	adds	r7, #8
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}
 800f4be:	bf00      	nop
 800f4c0:	20001b10 	.word	0x20001b10
 800f4c4:	2000163c 	.word	0x2000163c
 800f4c8:	20001b1c 	.word	0x20001b1c
 800f4cc:	20001b2c 	.word	0x20001b2c
 800f4d0:	20001b18 	.word	0x20001b18
 800f4d4:	20001640 	.word	0x20001640
 800f4d8:	e000ed04 	.word	0xe000ed04

0800f4dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b084      	sub	sp, #16
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d019      	beq.n	800f522 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f4ee:	4b14      	ldr	r3, [pc, #80]	; (800f540 <vTaskDelay+0x64>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d00c      	beq.n	800f510 <vTaskDelay+0x34>
	__asm volatile
 800f4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4fa:	b672      	cpsid	i
 800f4fc:	f383 8811 	msr	BASEPRI, r3
 800f500:	f3bf 8f6f 	isb	sy
 800f504:	f3bf 8f4f 	dsb	sy
 800f508:	b662      	cpsie	i
 800f50a:	60bb      	str	r3, [r7, #8]
}
 800f50c:	bf00      	nop
 800f50e:	e7fe      	b.n	800f50e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800f510:	f000 f88e 	bl	800f630 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f514:	2100      	movs	r1, #0
 800f516:	6878      	ldr	r0, [r7, #4]
 800f518:	f000 fe1a 	bl	8010150 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f51c:	f000 f896 	bl	800f64c <xTaskResumeAll>
 800f520:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d107      	bne.n	800f538 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800f528:	4b06      	ldr	r3, [pc, #24]	; (800f544 <vTaskDelay+0x68>)
 800f52a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f52e:	601a      	str	r2, [r3, #0]
 800f530:	f3bf 8f4f 	dsb	sy
 800f534:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f538:	bf00      	nop
 800f53a:	3710      	adds	r7, #16
 800f53c:	46bd      	mov	sp, r7
 800f53e:	bd80      	pop	{r7, pc}
 800f540:	20001b38 	.word	0x20001b38
 800f544:	e000ed04 	.word	0xe000ed04

0800f548 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b08a      	sub	sp, #40	; 0x28
 800f54c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f54e:	2300      	movs	r3, #0
 800f550:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f552:	2300      	movs	r3, #0
 800f554:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f556:	463a      	mov	r2, r7
 800f558:	1d39      	adds	r1, r7, #4
 800f55a:	f107 0308 	add.w	r3, r7, #8
 800f55e:	4618      	mov	r0, r3
 800f560:	f7fe fcbe 	bl	800dee0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f564:	6839      	ldr	r1, [r7, #0]
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	68ba      	ldr	r2, [r7, #8]
 800f56a:	9202      	str	r2, [sp, #8]
 800f56c:	9301      	str	r3, [sp, #4]
 800f56e:	2300      	movs	r3, #0
 800f570:	9300      	str	r3, [sp, #0]
 800f572:	2300      	movs	r3, #0
 800f574:	460a      	mov	r2, r1
 800f576:	4926      	ldr	r1, [pc, #152]	; (800f610 <vTaskStartScheduler+0xc8>)
 800f578:	4826      	ldr	r0, [pc, #152]	; (800f614 <vTaskStartScheduler+0xcc>)
 800f57a:	f7ff fdef 	bl	800f15c <xTaskCreateStatic>
 800f57e:	4603      	mov	r3, r0
 800f580:	4a25      	ldr	r2, [pc, #148]	; (800f618 <vTaskStartScheduler+0xd0>)
 800f582:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f584:	4b24      	ldr	r3, [pc, #144]	; (800f618 <vTaskStartScheduler+0xd0>)
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d002      	beq.n	800f592 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f58c:	2301      	movs	r3, #1
 800f58e:	617b      	str	r3, [r7, #20]
 800f590:	e001      	b.n	800f596 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f592:	2300      	movs	r3, #0
 800f594:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f596:	697b      	ldr	r3, [r7, #20]
 800f598:	2b01      	cmp	r3, #1
 800f59a:	d102      	bne.n	800f5a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f59c:	f000 fe2c 	bl	80101f8 <xTimerCreateTimerTask>
 800f5a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f5a2:	697b      	ldr	r3, [r7, #20]
 800f5a4:	2b01      	cmp	r3, #1
 800f5a6:	d11d      	bne.n	800f5e4 <vTaskStartScheduler+0x9c>
	__asm volatile
 800f5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ac:	b672      	cpsid	i
 800f5ae:	f383 8811 	msr	BASEPRI, r3
 800f5b2:	f3bf 8f6f 	isb	sy
 800f5b6:	f3bf 8f4f 	dsb	sy
 800f5ba:	b662      	cpsie	i
 800f5bc:	613b      	str	r3, [r7, #16]
}
 800f5be:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f5c0:	4b16      	ldr	r3, [pc, #88]	; (800f61c <vTaskStartScheduler+0xd4>)
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	3354      	adds	r3, #84	; 0x54
 800f5c6:	4a16      	ldr	r2, [pc, #88]	; (800f620 <vTaskStartScheduler+0xd8>)
 800f5c8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f5ca:	4b16      	ldr	r3, [pc, #88]	; (800f624 <vTaskStartScheduler+0xdc>)
 800f5cc:	f04f 32ff 	mov.w	r2, #4294967295
 800f5d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f5d2:	4b15      	ldr	r3, [pc, #84]	; (800f628 <vTaskStartScheduler+0xe0>)
 800f5d4:	2201      	movs	r2, #1
 800f5d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f5d8:	4b14      	ldr	r3, [pc, #80]	; (800f62c <vTaskStartScheduler+0xe4>)
 800f5da:	2200      	movs	r2, #0
 800f5dc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f5de:	f001 f9f7 	bl	80109d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f5e2:	e010      	b.n	800f606 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5ea:	d10c      	bne.n	800f606 <vTaskStartScheduler+0xbe>
	__asm volatile
 800f5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5f0:	b672      	cpsid	i
 800f5f2:	f383 8811 	msr	BASEPRI, r3
 800f5f6:	f3bf 8f6f 	isb	sy
 800f5fa:	f3bf 8f4f 	dsb	sy
 800f5fe:	b662      	cpsie	i
 800f600:	60fb      	str	r3, [r7, #12]
}
 800f602:	bf00      	nop
 800f604:	e7fe      	b.n	800f604 <vTaskStartScheduler+0xbc>
}
 800f606:	bf00      	nop
 800f608:	3718      	adds	r7, #24
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bd80      	pop	{r7, pc}
 800f60e:	bf00      	nop
 800f610:	08011ff4 	.word	0x08011ff4
 800f614:	0800fc75 	.word	0x0800fc75
 800f618:	20001b34 	.word	0x20001b34
 800f61c:	2000163c 	.word	0x2000163c
 800f620:	20000190 	.word	0x20000190
 800f624:	20001b30 	.word	0x20001b30
 800f628:	20001b1c 	.word	0x20001b1c
 800f62c:	20001b14 	.word	0x20001b14

0800f630 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f630:	b480      	push	{r7}
 800f632:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f634:	4b04      	ldr	r3, [pc, #16]	; (800f648 <vTaskSuspendAll+0x18>)
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	3301      	adds	r3, #1
 800f63a:	4a03      	ldr	r2, [pc, #12]	; (800f648 <vTaskSuspendAll+0x18>)
 800f63c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f63e:	bf00      	nop
 800f640:	46bd      	mov	sp, r7
 800f642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f646:	4770      	bx	lr
 800f648:	20001b38 	.word	0x20001b38

0800f64c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b084      	sub	sp, #16
 800f650:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f652:	2300      	movs	r3, #0
 800f654:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f656:	2300      	movs	r3, #0
 800f658:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f65a:	4b43      	ldr	r3, [pc, #268]	; (800f768 <xTaskResumeAll+0x11c>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d10c      	bne.n	800f67c <xTaskResumeAll+0x30>
	__asm volatile
 800f662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f666:	b672      	cpsid	i
 800f668:	f383 8811 	msr	BASEPRI, r3
 800f66c:	f3bf 8f6f 	isb	sy
 800f670:	f3bf 8f4f 	dsb	sy
 800f674:	b662      	cpsie	i
 800f676:	603b      	str	r3, [r7, #0]
}
 800f678:	bf00      	nop
 800f67a:	e7fe      	b.n	800f67a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f67c:	f001 fa26 	bl	8010acc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f680:	4b39      	ldr	r3, [pc, #228]	; (800f768 <xTaskResumeAll+0x11c>)
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	3b01      	subs	r3, #1
 800f686:	4a38      	ldr	r2, [pc, #224]	; (800f768 <xTaskResumeAll+0x11c>)
 800f688:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f68a:	4b37      	ldr	r3, [pc, #220]	; (800f768 <xTaskResumeAll+0x11c>)
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d162      	bne.n	800f758 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f692:	4b36      	ldr	r3, [pc, #216]	; (800f76c <xTaskResumeAll+0x120>)
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d05e      	beq.n	800f758 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f69a:	e02f      	b.n	800f6fc <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f69c:	4b34      	ldr	r3, [pc, #208]	; (800f770 <xTaskResumeAll+0x124>)
 800f69e:	68db      	ldr	r3, [r3, #12]
 800f6a0:	68db      	ldr	r3, [r3, #12]
 800f6a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	3318      	adds	r3, #24
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	f7fe fcd7 	bl	800e05c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	3304      	adds	r3, #4
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	f7fe fcd2 	bl	800e05c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6bc:	4b2d      	ldr	r3, [pc, #180]	; (800f774 <xTaskResumeAll+0x128>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	429a      	cmp	r2, r3
 800f6c2:	d903      	bls.n	800f6cc <xTaskResumeAll+0x80>
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6c8:	4a2a      	ldr	r2, [pc, #168]	; (800f774 <xTaskResumeAll+0x128>)
 800f6ca:	6013      	str	r3, [r2, #0]
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6d0:	4613      	mov	r3, r2
 800f6d2:	009b      	lsls	r3, r3, #2
 800f6d4:	4413      	add	r3, r2
 800f6d6:	009b      	lsls	r3, r3, #2
 800f6d8:	4a27      	ldr	r2, [pc, #156]	; (800f778 <xTaskResumeAll+0x12c>)
 800f6da:	441a      	add	r2, r3
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	3304      	adds	r3, #4
 800f6e0:	4619      	mov	r1, r3
 800f6e2:	4610      	mov	r0, r2
 800f6e4:	f7fe fc5d 	bl	800dfa2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6ec:	4b23      	ldr	r3, [pc, #140]	; (800f77c <xTaskResumeAll+0x130>)
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6f2:	429a      	cmp	r2, r3
 800f6f4:	d302      	bcc.n	800f6fc <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800f6f6:	4b22      	ldr	r3, [pc, #136]	; (800f780 <xTaskResumeAll+0x134>)
 800f6f8:	2201      	movs	r2, #1
 800f6fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f6fc:	4b1c      	ldr	r3, [pc, #112]	; (800f770 <xTaskResumeAll+0x124>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d1cb      	bne.n	800f69c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d001      	beq.n	800f70e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f70a:	f000 fb6f 	bl	800fdec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f70e:	4b1d      	ldr	r3, [pc, #116]	; (800f784 <xTaskResumeAll+0x138>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d010      	beq.n	800f73c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f71a:	f000 f847 	bl	800f7ac <xTaskIncrementTick>
 800f71e:	4603      	mov	r3, r0
 800f720:	2b00      	cmp	r3, #0
 800f722:	d002      	beq.n	800f72a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800f724:	4b16      	ldr	r3, [pc, #88]	; (800f780 <xTaskResumeAll+0x134>)
 800f726:	2201      	movs	r2, #1
 800f728:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	3b01      	subs	r3, #1
 800f72e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d1f1      	bne.n	800f71a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800f736:	4b13      	ldr	r3, [pc, #76]	; (800f784 <xTaskResumeAll+0x138>)
 800f738:	2200      	movs	r2, #0
 800f73a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f73c:	4b10      	ldr	r3, [pc, #64]	; (800f780 <xTaskResumeAll+0x134>)
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d009      	beq.n	800f758 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f744:	2301      	movs	r3, #1
 800f746:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f748:	4b0f      	ldr	r3, [pc, #60]	; (800f788 <xTaskResumeAll+0x13c>)
 800f74a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f74e:	601a      	str	r2, [r3, #0]
 800f750:	f3bf 8f4f 	dsb	sy
 800f754:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f758:	f001 f9ec 	bl	8010b34 <vPortExitCritical>

	return xAlreadyYielded;
 800f75c:	68bb      	ldr	r3, [r7, #8]
}
 800f75e:	4618      	mov	r0, r3
 800f760:	3710      	adds	r7, #16
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}
 800f766:	bf00      	nop
 800f768:	20001b38 	.word	0x20001b38
 800f76c:	20001b10 	.word	0x20001b10
 800f770:	20001ad0 	.word	0x20001ad0
 800f774:	20001b18 	.word	0x20001b18
 800f778:	20001640 	.word	0x20001640
 800f77c:	2000163c 	.word	0x2000163c
 800f780:	20001b24 	.word	0x20001b24
 800f784:	20001b20 	.word	0x20001b20
 800f788:	e000ed04 	.word	0xe000ed04

0800f78c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f78c:	b480      	push	{r7}
 800f78e:	b083      	sub	sp, #12
 800f790:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f792:	4b05      	ldr	r3, [pc, #20]	; (800f7a8 <xTaskGetTickCount+0x1c>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f798:	687b      	ldr	r3, [r7, #4]
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	370c      	adds	r7, #12
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a4:	4770      	bx	lr
 800f7a6:	bf00      	nop
 800f7a8:	20001b14 	.word	0x20001b14

0800f7ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b086      	sub	sp, #24
 800f7b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7b6:	4b50      	ldr	r3, [pc, #320]	; (800f8f8 <xTaskIncrementTick+0x14c>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	f040 808b 	bne.w	800f8d6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f7c0:	4b4e      	ldr	r3, [pc, #312]	; (800f8fc <xTaskIncrementTick+0x150>)
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	3301      	adds	r3, #1
 800f7c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f7c8:	4a4c      	ldr	r2, [pc, #304]	; (800f8fc <xTaskIncrementTick+0x150>)
 800f7ca:	693b      	ldr	r3, [r7, #16]
 800f7cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f7ce:	693b      	ldr	r3, [r7, #16]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d122      	bne.n	800f81a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800f7d4:	4b4a      	ldr	r3, [pc, #296]	; (800f900 <xTaskIncrementTick+0x154>)
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d00c      	beq.n	800f7f8 <xTaskIncrementTick+0x4c>
	__asm volatile
 800f7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7e2:	b672      	cpsid	i
 800f7e4:	f383 8811 	msr	BASEPRI, r3
 800f7e8:	f3bf 8f6f 	isb	sy
 800f7ec:	f3bf 8f4f 	dsb	sy
 800f7f0:	b662      	cpsie	i
 800f7f2:	603b      	str	r3, [r7, #0]
}
 800f7f4:	bf00      	nop
 800f7f6:	e7fe      	b.n	800f7f6 <xTaskIncrementTick+0x4a>
 800f7f8:	4b41      	ldr	r3, [pc, #260]	; (800f900 <xTaskIncrementTick+0x154>)
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	60fb      	str	r3, [r7, #12]
 800f7fe:	4b41      	ldr	r3, [pc, #260]	; (800f904 <xTaskIncrementTick+0x158>)
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	4a3f      	ldr	r2, [pc, #252]	; (800f900 <xTaskIncrementTick+0x154>)
 800f804:	6013      	str	r3, [r2, #0]
 800f806:	4a3f      	ldr	r2, [pc, #252]	; (800f904 <xTaskIncrementTick+0x158>)
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	6013      	str	r3, [r2, #0]
 800f80c:	4b3e      	ldr	r3, [pc, #248]	; (800f908 <xTaskIncrementTick+0x15c>)
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	3301      	adds	r3, #1
 800f812:	4a3d      	ldr	r2, [pc, #244]	; (800f908 <xTaskIncrementTick+0x15c>)
 800f814:	6013      	str	r3, [r2, #0]
 800f816:	f000 fae9 	bl	800fdec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f81a:	4b3c      	ldr	r3, [pc, #240]	; (800f90c <xTaskIncrementTick+0x160>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	693a      	ldr	r2, [r7, #16]
 800f820:	429a      	cmp	r2, r3
 800f822:	d349      	bcc.n	800f8b8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f824:	4b36      	ldr	r3, [pc, #216]	; (800f900 <xTaskIncrementTick+0x154>)
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d104      	bne.n	800f838 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f82e:	4b37      	ldr	r3, [pc, #220]	; (800f90c <xTaskIncrementTick+0x160>)
 800f830:	f04f 32ff 	mov.w	r2, #4294967295
 800f834:	601a      	str	r2, [r3, #0]
					break;
 800f836:	e03f      	b.n	800f8b8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f838:	4b31      	ldr	r3, [pc, #196]	; (800f900 <xTaskIncrementTick+0x154>)
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	68db      	ldr	r3, [r3, #12]
 800f83e:	68db      	ldr	r3, [r3, #12]
 800f840:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	685b      	ldr	r3, [r3, #4]
 800f846:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f848:	693a      	ldr	r2, [r7, #16]
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	429a      	cmp	r2, r3
 800f84e:	d203      	bcs.n	800f858 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f850:	4a2e      	ldr	r2, [pc, #184]	; (800f90c <xTaskIncrementTick+0x160>)
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f856:	e02f      	b.n	800f8b8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f858:	68bb      	ldr	r3, [r7, #8]
 800f85a:	3304      	adds	r3, #4
 800f85c:	4618      	mov	r0, r3
 800f85e:	f7fe fbfd 	bl	800e05c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f866:	2b00      	cmp	r3, #0
 800f868:	d004      	beq.n	800f874 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f86a:	68bb      	ldr	r3, [r7, #8]
 800f86c:	3318      	adds	r3, #24
 800f86e:	4618      	mov	r0, r3
 800f870:	f7fe fbf4 	bl	800e05c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f874:	68bb      	ldr	r3, [r7, #8]
 800f876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f878:	4b25      	ldr	r3, [pc, #148]	; (800f910 <xTaskIncrementTick+0x164>)
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	429a      	cmp	r2, r3
 800f87e:	d903      	bls.n	800f888 <xTaskIncrementTick+0xdc>
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f884:	4a22      	ldr	r2, [pc, #136]	; (800f910 <xTaskIncrementTick+0x164>)
 800f886:	6013      	str	r3, [r2, #0]
 800f888:	68bb      	ldr	r3, [r7, #8]
 800f88a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f88c:	4613      	mov	r3, r2
 800f88e:	009b      	lsls	r3, r3, #2
 800f890:	4413      	add	r3, r2
 800f892:	009b      	lsls	r3, r3, #2
 800f894:	4a1f      	ldr	r2, [pc, #124]	; (800f914 <xTaskIncrementTick+0x168>)
 800f896:	441a      	add	r2, r3
 800f898:	68bb      	ldr	r3, [r7, #8]
 800f89a:	3304      	adds	r3, #4
 800f89c:	4619      	mov	r1, r3
 800f89e:	4610      	mov	r0, r2
 800f8a0:	f7fe fb7f 	bl	800dfa2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f8a4:	68bb      	ldr	r3, [r7, #8]
 800f8a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8a8:	4b1b      	ldr	r3, [pc, #108]	; (800f918 <xTaskIncrementTick+0x16c>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8ae:	429a      	cmp	r2, r3
 800f8b0:	d3b8      	bcc.n	800f824 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800f8b2:	2301      	movs	r3, #1
 800f8b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f8b6:	e7b5      	b.n	800f824 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f8b8:	4b17      	ldr	r3, [pc, #92]	; (800f918 <xTaskIncrementTick+0x16c>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8be:	4915      	ldr	r1, [pc, #84]	; (800f914 <xTaskIncrementTick+0x168>)
 800f8c0:	4613      	mov	r3, r2
 800f8c2:	009b      	lsls	r3, r3, #2
 800f8c4:	4413      	add	r3, r2
 800f8c6:	009b      	lsls	r3, r3, #2
 800f8c8:	440b      	add	r3, r1
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	2b01      	cmp	r3, #1
 800f8ce:	d907      	bls.n	800f8e0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800f8d0:	2301      	movs	r3, #1
 800f8d2:	617b      	str	r3, [r7, #20]
 800f8d4:	e004      	b.n	800f8e0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f8d6:	4b11      	ldr	r3, [pc, #68]	; (800f91c <xTaskIncrementTick+0x170>)
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	3301      	adds	r3, #1
 800f8dc:	4a0f      	ldr	r2, [pc, #60]	; (800f91c <xTaskIncrementTick+0x170>)
 800f8de:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f8e0:	4b0f      	ldr	r3, [pc, #60]	; (800f920 <xTaskIncrementTick+0x174>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d001      	beq.n	800f8ec <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800f8e8:	2301      	movs	r3, #1
 800f8ea:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f8ec:	697b      	ldr	r3, [r7, #20]
}
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	3718      	adds	r7, #24
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	bd80      	pop	{r7, pc}
 800f8f6:	bf00      	nop
 800f8f8:	20001b38 	.word	0x20001b38
 800f8fc:	20001b14 	.word	0x20001b14
 800f900:	20001ac8 	.word	0x20001ac8
 800f904:	20001acc 	.word	0x20001acc
 800f908:	20001b28 	.word	0x20001b28
 800f90c:	20001b30 	.word	0x20001b30
 800f910:	20001b18 	.word	0x20001b18
 800f914:	20001640 	.word	0x20001640
 800f918:	2000163c 	.word	0x2000163c
 800f91c:	20001b20 	.word	0x20001b20
 800f920:	20001b24 	.word	0x20001b24

0800f924 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f924:	b480      	push	{r7}
 800f926:	b085      	sub	sp, #20
 800f928:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f92a:	4b2b      	ldr	r3, [pc, #172]	; (800f9d8 <vTaskSwitchContext+0xb4>)
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d003      	beq.n	800f93a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f932:	4b2a      	ldr	r3, [pc, #168]	; (800f9dc <vTaskSwitchContext+0xb8>)
 800f934:	2201      	movs	r2, #1
 800f936:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f938:	e048      	b.n	800f9cc <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800f93a:	4b28      	ldr	r3, [pc, #160]	; (800f9dc <vTaskSwitchContext+0xb8>)
 800f93c:	2200      	movs	r2, #0
 800f93e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f940:	4b27      	ldr	r3, [pc, #156]	; (800f9e0 <vTaskSwitchContext+0xbc>)
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	60fb      	str	r3, [r7, #12]
 800f946:	e012      	b.n	800f96e <vTaskSwitchContext+0x4a>
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d10c      	bne.n	800f968 <vTaskSwitchContext+0x44>
	__asm volatile
 800f94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f952:	b672      	cpsid	i
 800f954:	f383 8811 	msr	BASEPRI, r3
 800f958:	f3bf 8f6f 	isb	sy
 800f95c:	f3bf 8f4f 	dsb	sy
 800f960:	b662      	cpsie	i
 800f962:	607b      	str	r3, [r7, #4]
}
 800f964:	bf00      	nop
 800f966:	e7fe      	b.n	800f966 <vTaskSwitchContext+0x42>
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	3b01      	subs	r3, #1
 800f96c:	60fb      	str	r3, [r7, #12]
 800f96e:	491d      	ldr	r1, [pc, #116]	; (800f9e4 <vTaskSwitchContext+0xc0>)
 800f970:	68fa      	ldr	r2, [r7, #12]
 800f972:	4613      	mov	r3, r2
 800f974:	009b      	lsls	r3, r3, #2
 800f976:	4413      	add	r3, r2
 800f978:	009b      	lsls	r3, r3, #2
 800f97a:	440b      	add	r3, r1
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d0e2      	beq.n	800f948 <vTaskSwitchContext+0x24>
 800f982:	68fa      	ldr	r2, [r7, #12]
 800f984:	4613      	mov	r3, r2
 800f986:	009b      	lsls	r3, r3, #2
 800f988:	4413      	add	r3, r2
 800f98a:	009b      	lsls	r3, r3, #2
 800f98c:	4a15      	ldr	r2, [pc, #84]	; (800f9e4 <vTaskSwitchContext+0xc0>)
 800f98e:	4413      	add	r3, r2
 800f990:	60bb      	str	r3, [r7, #8]
 800f992:	68bb      	ldr	r3, [r7, #8]
 800f994:	685b      	ldr	r3, [r3, #4]
 800f996:	685a      	ldr	r2, [r3, #4]
 800f998:	68bb      	ldr	r3, [r7, #8]
 800f99a:	605a      	str	r2, [r3, #4]
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	685a      	ldr	r2, [r3, #4]
 800f9a0:	68bb      	ldr	r3, [r7, #8]
 800f9a2:	3308      	adds	r3, #8
 800f9a4:	429a      	cmp	r2, r3
 800f9a6:	d104      	bne.n	800f9b2 <vTaskSwitchContext+0x8e>
 800f9a8:	68bb      	ldr	r3, [r7, #8]
 800f9aa:	685b      	ldr	r3, [r3, #4]
 800f9ac:	685a      	ldr	r2, [r3, #4]
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	605a      	str	r2, [r3, #4]
 800f9b2:	68bb      	ldr	r3, [r7, #8]
 800f9b4:	685b      	ldr	r3, [r3, #4]
 800f9b6:	68db      	ldr	r3, [r3, #12]
 800f9b8:	4a0b      	ldr	r2, [pc, #44]	; (800f9e8 <vTaskSwitchContext+0xc4>)
 800f9ba:	6013      	str	r3, [r2, #0]
 800f9bc:	4a08      	ldr	r2, [pc, #32]	; (800f9e0 <vTaskSwitchContext+0xbc>)
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f9c2:	4b09      	ldr	r3, [pc, #36]	; (800f9e8 <vTaskSwitchContext+0xc4>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	3354      	adds	r3, #84	; 0x54
 800f9c8:	4a08      	ldr	r2, [pc, #32]	; (800f9ec <vTaskSwitchContext+0xc8>)
 800f9ca:	6013      	str	r3, [r2, #0]
}
 800f9cc:	bf00      	nop
 800f9ce:	3714      	adds	r7, #20
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d6:	4770      	bx	lr
 800f9d8:	20001b38 	.word	0x20001b38
 800f9dc:	20001b24 	.word	0x20001b24
 800f9e0:	20001b18 	.word	0x20001b18
 800f9e4:	20001640 	.word	0x20001640
 800f9e8:	2000163c 	.word	0x2000163c
 800f9ec:	20000190 	.word	0x20000190

0800f9f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b084      	sub	sp, #16
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
 800f9f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d10c      	bne.n	800fa1a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800fa00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa04:	b672      	cpsid	i
 800fa06:	f383 8811 	msr	BASEPRI, r3
 800fa0a:	f3bf 8f6f 	isb	sy
 800fa0e:	f3bf 8f4f 	dsb	sy
 800fa12:	b662      	cpsie	i
 800fa14:	60fb      	str	r3, [r7, #12]
}
 800fa16:	bf00      	nop
 800fa18:	e7fe      	b.n	800fa18 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fa1a:	4b07      	ldr	r3, [pc, #28]	; (800fa38 <vTaskPlaceOnEventList+0x48>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	3318      	adds	r3, #24
 800fa20:	4619      	mov	r1, r3
 800fa22:	6878      	ldr	r0, [r7, #4]
 800fa24:	f7fe fae1 	bl	800dfea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fa28:	2101      	movs	r1, #1
 800fa2a:	6838      	ldr	r0, [r7, #0]
 800fa2c:	f000 fb90 	bl	8010150 <prvAddCurrentTaskToDelayedList>
}
 800fa30:	bf00      	nop
 800fa32:	3710      	adds	r7, #16
 800fa34:	46bd      	mov	sp, r7
 800fa36:	bd80      	pop	{r7, pc}
 800fa38:	2000163c 	.word	0x2000163c

0800fa3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b086      	sub	sp, #24
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	60f8      	str	r0, [r7, #12]
 800fa44:	60b9      	str	r1, [r7, #8]
 800fa46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d10c      	bne.n	800fa68 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800fa4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa52:	b672      	cpsid	i
 800fa54:	f383 8811 	msr	BASEPRI, r3
 800fa58:	f3bf 8f6f 	isb	sy
 800fa5c:	f3bf 8f4f 	dsb	sy
 800fa60:	b662      	cpsie	i
 800fa62:	617b      	str	r3, [r7, #20]
}
 800fa64:	bf00      	nop
 800fa66:	e7fe      	b.n	800fa66 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fa68:	4b0a      	ldr	r3, [pc, #40]	; (800fa94 <vTaskPlaceOnEventListRestricted+0x58>)
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	3318      	adds	r3, #24
 800fa6e:	4619      	mov	r1, r3
 800fa70:	68f8      	ldr	r0, [r7, #12]
 800fa72:	f7fe fa96 	bl	800dfa2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d002      	beq.n	800fa82 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800fa7c:	f04f 33ff 	mov.w	r3, #4294967295
 800fa80:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fa82:	6879      	ldr	r1, [r7, #4]
 800fa84:	68b8      	ldr	r0, [r7, #8]
 800fa86:	f000 fb63 	bl	8010150 <prvAddCurrentTaskToDelayedList>
	}
 800fa8a:	bf00      	nop
 800fa8c:	3718      	adds	r7, #24
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd80      	pop	{r7, pc}
 800fa92:	bf00      	nop
 800fa94:	2000163c 	.word	0x2000163c

0800fa98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b086      	sub	sp, #24
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	68db      	ldr	r3, [r3, #12]
 800faa4:	68db      	ldr	r3, [r3, #12]
 800faa6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800faa8:	693b      	ldr	r3, [r7, #16]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d10c      	bne.n	800fac8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800faae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fab2:	b672      	cpsid	i
 800fab4:	f383 8811 	msr	BASEPRI, r3
 800fab8:	f3bf 8f6f 	isb	sy
 800fabc:	f3bf 8f4f 	dsb	sy
 800fac0:	b662      	cpsie	i
 800fac2:	60fb      	str	r3, [r7, #12]
}
 800fac4:	bf00      	nop
 800fac6:	e7fe      	b.n	800fac6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fac8:	693b      	ldr	r3, [r7, #16]
 800faca:	3318      	adds	r3, #24
 800facc:	4618      	mov	r0, r3
 800face:	f7fe fac5 	bl	800e05c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fad2:	4b1e      	ldr	r3, [pc, #120]	; (800fb4c <xTaskRemoveFromEventList+0xb4>)
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d11d      	bne.n	800fb16 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fada:	693b      	ldr	r3, [r7, #16]
 800fadc:	3304      	adds	r3, #4
 800fade:	4618      	mov	r0, r3
 800fae0:	f7fe fabc 	bl	800e05c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fae4:	693b      	ldr	r3, [r7, #16]
 800fae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fae8:	4b19      	ldr	r3, [pc, #100]	; (800fb50 <xTaskRemoveFromEventList+0xb8>)
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	429a      	cmp	r2, r3
 800faee:	d903      	bls.n	800faf8 <xTaskRemoveFromEventList+0x60>
 800faf0:	693b      	ldr	r3, [r7, #16]
 800faf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faf4:	4a16      	ldr	r2, [pc, #88]	; (800fb50 <xTaskRemoveFromEventList+0xb8>)
 800faf6:	6013      	str	r3, [r2, #0]
 800faf8:	693b      	ldr	r3, [r7, #16]
 800fafa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fafc:	4613      	mov	r3, r2
 800fafe:	009b      	lsls	r3, r3, #2
 800fb00:	4413      	add	r3, r2
 800fb02:	009b      	lsls	r3, r3, #2
 800fb04:	4a13      	ldr	r2, [pc, #76]	; (800fb54 <xTaskRemoveFromEventList+0xbc>)
 800fb06:	441a      	add	r2, r3
 800fb08:	693b      	ldr	r3, [r7, #16]
 800fb0a:	3304      	adds	r3, #4
 800fb0c:	4619      	mov	r1, r3
 800fb0e:	4610      	mov	r0, r2
 800fb10:	f7fe fa47 	bl	800dfa2 <vListInsertEnd>
 800fb14:	e005      	b.n	800fb22 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fb16:	693b      	ldr	r3, [r7, #16]
 800fb18:	3318      	adds	r3, #24
 800fb1a:	4619      	mov	r1, r3
 800fb1c:	480e      	ldr	r0, [pc, #56]	; (800fb58 <xTaskRemoveFromEventList+0xc0>)
 800fb1e:	f7fe fa40 	bl	800dfa2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fb22:	693b      	ldr	r3, [r7, #16]
 800fb24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb26:	4b0d      	ldr	r3, [pc, #52]	; (800fb5c <xTaskRemoveFromEventList+0xc4>)
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb2c:	429a      	cmp	r2, r3
 800fb2e:	d905      	bls.n	800fb3c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fb30:	2301      	movs	r3, #1
 800fb32:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fb34:	4b0a      	ldr	r3, [pc, #40]	; (800fb60 <xTaskRemoveFromEventList+0xc8>)
 800fb36:	2201      	movs	r2, #1
 800fb38:	601a      	str	r2, [r3, #0]
 800fb3a:	e001      	b.n	800fb40 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fb40:	697b      	ldr	r3, [r7, #20]
}
 800fb42:	4618      	mov	r0, r3
 800fb44:	3718      	adds	r7, #24
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}
 800fb4a:	bf00      	nop
 800fb4c:	20001b38 	.word	0x20001b38
 800fb50:	20001b18 	.word	0x20001b18
 800fb54:	20001640 	.word	0x20001640
 800fb58:	20001ad0 	.word	0x20001ad0
 800fb5c:	2000163c 	.word	0x2000163c
 800fb60:	20001b24 	.word	0x20001b24

0800fb64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fb64:	b480      	push	{r7}
 800fb66:	b083      	sub	sp, #12
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fb6c:	4b06      	ldr	r3, [pc, #24]	; (800fb88 <vTaskInternalSetTimeOutState+0x24>)
 800fb6e:	681a      	ldr	r2, [r3, #0]
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fb74:	4b05      	ldr	r3, [pc, #20]	; (800fb8c <vTaskInternalSetTimeOutState+0x28>)
 800fb76:	681a      	ldr	r2, [r3, #0]
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	605a      	str	r2, [r3, #4]
}
 800fb7c:	bf00      	nop
 800fb7e:	370c      	adds	r7, #12
 800fb80:	46bd      	mov	sp, r7
 800fb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb86:	4770      	bx	lr
 800fb88:	20001b28 	.word	0x20001b28
 800fb8c:	20001b14 	.word	0x20001b14

0800fb90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b088      	sub	sp, #32
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
 800fb98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d10c      	bne.n	800fbba <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800fba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fba4:	b672      	cpsid	i
 800fba6:	f383 8811 	msr	BASEPRI, r3
 800fbaa:	f3bf 8f6f 	isb	sy
 800fbae:	f3bf 8f4f 	dsb	sy
 800fbb2:	b662      	cpsie	i
 800fbb4:	613b      	str	r3, [r7, #16]
}
 800fbb6:	bf00      	nop
 800fbb8:	e7fe      	b.n	800fbb8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800fbba:	683b      	ldr	r3, [r7, #0]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d10c      	bne.n	800fbda <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800fbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbc4:	b672      	cpsid	i
 800fbc6:	f383 8811 	msr	BASEPRI, r3
 800fbca:	f3bf 8f6f 	isb	sy
 800fbce:	f3bf 8f4f 	dsb	sy
 800fbd2:	b662      	cpsie	i
 800fbd4:	60fb      	str	r3, [r7, #12]
}
 800fbd6:	bf00      	nop
 800fbd8:	e7fe      	b.n	800fbd8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800fbda:	f000 ff77 	bl	8010acc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fbde:	4b1d      	ldr	r3, [pc, #116]	; (800fc54 <xTaskCheckForTimeOut+0xc4>)
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	685b      	ldr	r3, [r3, #4]
 800fbe8:	69ba      	ldr	r2, [r7, #24]
 800fbea:	1ad3      	subs	r3, r2, r3
 800fbec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fbee:	683b      	ldr	r3, [r7, #0]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbf6:	d102      	bne.n	800fbfe <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	61fb      	str	r3, [r7, #28]
 800fbfc:	e023      	b.n	800fc46 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	681a      	ldr	r2, [r3, #0]
 800fc02:	4b15      	ldr	r3, [pc, #84]	; (800fc58 <xTaskCheckForTimeOut+0xc8>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	429a      	cmp	r2, r3
 800fc08:	d007      	beq.n	800fc1a <xTaskCheckForTimeOut+0x8a>
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	685b      	ldr	r3, [r3, #4]
 800fc0e:	69ba      	ldr	r2, [r7, #24]
 800fc10:	429a      	cmp	r2, r3
 800fc12:	d302      	bcc.n	800fc1a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fc14:	2301      	movs	r3, #1
 800fc16:	61fb      	str	r3, [r7, #28]
 800fc18:	e015      	b.n	800fc46 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fc1a:	683b      	ldr	r3, [r7, #0]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	697a      	ldr	r2, [r7, #20]
 800fc20:	429a      	cmp	r2, r3
 800fc22:	d20b      	bcs.n	800fc3c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fc24:	683b      	ldr	r3, [r7, #0]
 800fc26:	681a      	ldr	r2, [r3, #0]
 800fc28:	697b      	ldr	r3, [r7, #20]
 800fc2a:	1ad2      	subs	r2, r2, r3
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f7ff ff97 	bl	800fb64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fc36:	2300      	movs	r3, #0
 800fc38:	61fb      	str	r3, [r7, #28]
 800fc3a:	e004      	b.n	800fc46 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	2200      	movs	r2, #0
 800fc40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fc42:	2301      	movs	r3, #1
 800fc44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fc46:	f000 ff75 	bl	8010b34 <vPortExitCritical>

	return xReturn;
 800fc4a:	69fb      	ldr	r3, [r7, #28]
}
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	3720      	adds	r7, #32
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}
 800fc54:	20001b14 	.word	0x20001b14
 800fc58:	20001b28 	.word	0x20001b28

0800fc5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fc5c:	b480      	push	{r7}
 800fc5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fc60:	4b03      	ldr	r3, [pc, #12]	; (800fc70 <vTaskMissedYield+0x14>)
 800fc62:	2201      	movs	r2, #1
 800fc64:	601a      	str	r2, [r3, #0]
}
 800fc66:	bf00      	nop
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6e:	4770      	bx	lr
 800fc70:	20001b24 	.word	0x20001b24

0800fc74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b082      	sub	sp, #8
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fc7c:	f000 f852 	bl	800fd24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fc80:	4b06      	ldr	r3, [pc, #24]	; (800fc9c <prvIdleTask+0x28>)
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	2b01      	cmp	r3, #1
 800fc86:	d9f9      	bls.n	800fc7c <prvIdleTask+0x8>
			{
				taskYIELD();
 800fc88:	4b05      	ldr	r3, [pc, #20]	; (800fca0 <prvIdleTask+0x2c>)
 800fc8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc8e:	601a      	str	r2, [r3, #0]
 800fc90:	f3bf 8f4f 	dsb	sy
 800fc94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fc98:	e7f0      	b.n	800fc7c <prvIdleTask+0x8>
 800fc9a:	bf00      	nop
 800fc9c:	20001640 	.word	0x20001640
 800fca0:	e000ed04 	.word	0xe000ed04

0800fca4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b082      	sub	sp, #8
 800fca8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fcaa:	2300      	movs	r3, #0
 800fcac:	607b      	str	r3, [r7, #4]
 800fcae:	e00c      	b.n	800fcca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fcb0:	687a      	ldr	r2, [r7, #4]
 800fcb2:	4613      	mov	r3, r2
 800fcb4:	009b      	lsls	r3, r3, #2
 800fcb6:	4413      	add	r3, r2
 800fcb8:	009b      	lsls	r3, r3, #2
 800fcba:	4a12      	ldr	r2, [pc, #72]	; (800fd04 <prvInitialiseTaskLists+0x60>)
 800fcbc:	4413      	add	r3, r2
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f7fe f942 	bl	800df48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	3301      	adds	r3, #1
 800fcc8:	607b      	str	r3, [r7, #4]
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	2b37      	cmp	r3, #55	; 0x37
 800fcce:	d9ef      	bls.n	800fcb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fcd0:	480d      	ldr	r0, [pc, #52]	; (800fd08 <prvInitialiseTaskLists+0x64>)
 800fcd2:	f7fe f939 	bl	800df48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fcd6:	480d      	ldr	r0, [pc, #52]	; (800fd0c <prvInitialiseTaskLists+0x68>)
 800fcd8:	f7fe f936 	bl	800df48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fcdc:	480c      	ldr	r0, [pc, #48]	; (800fd10 <prvInitialiseTaskLists+0x6c>)
 800fcde:	f7fe f933 	bl	800df48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fce2:	480c      	ldr	r0, [pc, #48]	; (800fd14 <prvInitialiseTaskLists+0x70>)
 800fce4:	f7fe f930 	bl	800df48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fce8:	480b      	ldr	r0, [pc, #44]	; (800fd18 <prvInitialiseTaskLists+0x74>)
 800fcea:	f7fe f92d 	bl	800df48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fcee:	4b0b      	ldr	r3, [pc, #44]	; (800fd1c <prvInitialiseTaskLists+0x78>)
 800fcf0:	4a05      	ldr	r2, [pc, #20]	; (800fd08 <prvInitialiseTaskLists+0x64>)
 800fcf2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fcf4:	4b0a      	ldr	r3, [pc, #40]	; (800fd20 <prvInitialiseTaskLists+0x7c>)
 800fcf6:	4a05      	ldr	r2, [pc, #20]	; (800fd0c <prvInitialiseTaskLists+0x68>)
 800fcf8:	601a      	str	r2, [r3, #0]
}
 800fcfa:	bf00      	nop
 800fcfc:	3708      	adds	r7, #8
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	bd80      	pop	{r7, pc}
 800fd02:	bf00      	nop
 800fd04:	20001640 	.word	0x20001640
 800fd08:	20001aa0 	.word	0x20001aa0
 800fd0c:	20001ab4 	.word	0x20001ab4
 800fd10:	20001ad0 	.word	0x20001ad0
 800fd14:	20001ae4 	.word	0x20001ae4
 800fd18:	20001afc 	.word	0x20001afc
 800fd1c:	20001ac8 	.word	0x20001ac8
 800fd20:	20001acc 	.word	0x20001acc

0800fd24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b082      	sub	sp, #8
 800fd28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fd2a:	e019      	b.n	800fd60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fd2c:	f000 fece 	bl	8010acc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd30:	4b10      	ldr	r3, [pc, #64]	; (800fd74 <prvCheckTasksWaitingTermination+0x50>)
 800fd32:	68db      	ldr	r3, [r3, #12]
 800fd34:	68db      	ldr	r3, [r3, #12]
 800fd36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	3304      	adds	r3, #4
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f7fe f98d 	bl	800e05c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fd42:	4b0d      	ldr	r3, [pc, #52]	; (800fd78 <prvCheckTasksWaitingTermination+0x54>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	3b01      	subs	r3, #1
 800fd48:	4a0b      	ldr	r2, [pc, #44]	; (800fd78 <prvCheckTasksWaitingTermination+0x54>)
 800fd4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fd4c:	4b0b      	ldr	r3, [pc, #44]	; (800fd7c <prvCheckTasksWaitingTermination+0x58>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	3b01      	subs	r3, #1
 800fd52:	4a0a      	ldr	r2, [pc, #40]	; (800fd7c <prvCheckTasksWaitingTermination+0x58>)
 800fd54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fd56:	f000 feed 	bl	8010b34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fd5a:	6878      	ldr	r0, [r7, #4]
 800fd5c:	f000 f810 	bl	800fd80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fd60:	4b06      	ldr	r3, [pc, #24]	; (800fd7c <prvCheckTasksWaitingTermination+0x58>)
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d1e1      	bne.n	800fd2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fd68:	bf00      	nop
 800fd6a:	bf00      	nop
 800fd6c:	3708      	adds	r7, #8
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}
 800fd72:	bf00      	nop
 800fd74:	20001ae4 	.word	0x20001ae4
 800fd78:	20001b10 	.word	0x20001b10
 800fd7c:	20001af8 	.word	0x20001af8

0800fd80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b084      	sub	sp, #16
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	3354      	adds	r3, #84	; 0x54
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f002 f891 	bl	8011eb4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d108      	bne.n	800fdae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fda0:	4618      	mov	r0, r3
 800fda2:	f001 f889 	bl	8010eb8 <vPortFree>
				vPortFree( pxTCB );
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f001 f886 	bl	8010eb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fdac:	e01a      	b.n	800fde4 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800fdb4:	2b01      	cmp	r3, #1
 800fdb6:	d103      	bne.n	800fdc0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fdb8:	6878      	ldr	r0, [r7, #4]
 800fdba:	f001 f87d 	bl	8010eb8 <vPortFree>
	}
 800fdbe:	e011      	b.n	800fde4 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800fdc6:	2b02      	cmp	r3, #2
 800fdc8:	d00c      	beq.n	800fde4 <prvDeleteTCB+0x64>
	__asm volatile
 800fdca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdce:	b672      	cpsid	i
 800fdd0:	f383 8811 	msr	BASEPRI, r3
 800fdd4:	f3bf 8f6f 	isb	sy
 800fdd8:	f3bf 8f4f 	dsb	sy
 800fddc:	b662      	cpsie	i
 800fdde:	60fb      	str	r3, [r7, #12]
}
 800fde0:	bf00      	nop
 800fde2:	e7fe      	b.n	800fde2 <prvDeleteTCB+0x62>
	}
 800fde4:	bf00      	nop
 800fde6:	3710      	adds	r7, #16
 800fde8:	46bd      	mov	sp, r7
 800fdea:	bd80      	pop	{r7, pc}

0800fdec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fdec:	b480      	push	{r7}
 800fdee:	b083      	sub	sp, #12
 800fdf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fdf2:	4b0c      	ldr	r3, [pc, #48]	; (800fe24 <prvResetNextTaskUnblockTime+0x38>)
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d104      	bne.n	800fe06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fdfc:	4b0a      	ldr	r3, [pc, #40]	; (800fe28 <prvResetNextTaskUnblockTime+0x3c>)
 800fdfe:	f04f 32ff 	mov.w	r2, #4294967295
 800fe02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fe04:	e008      	b.n	800fe18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe06:	4b07      	ldr	r3, [pc, #28]	; (800fe24 <prvResetNextTaskUnblockTime+0x38>)
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	68db      	ldr	r3, [r3, #12]
 800fe0c:	68db      	ldr	r3, [r3, #12]
 800fe0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	685b      	ldr	r3, [r3, #4]
 800fe14:	4a04      	ldr	r2, [pc, #16]	; (800fe28 <prvResetNextTaskUnblockTime+0x3c>)
 800fe16:	6013      	str	r3, [r2, #0]
}
 800fe18:	bf00      	nop
 800fe1a:	370c      	adds	r7, #12
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe22:	4770      	bx	lr
 800fe24:	20001ac8 	.word	0x20001ac8
 800fe28:	20001b30 	.word	0x20001b30

0800fe2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fe2c:	b480      	push	{r7}
 800fe2e:	b083      	sub	sp, #12
 800fe30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fe32:	4b0b      	ldr	r3, [pc, #44]	; (800fe60 <xTaskGetSchedulerState+0x34>)
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d102      	bne.n	800fe40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fe3a:	2301      	movs	r3, #1
 800fe3c:	607b      	str	r3, [r7, #4]
 800fe3e:	e008      	b.n	800fe52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe40:	4b08      	ldr	r3, [pc, #32]	; (800fe64 <xTaskGetSchedulerState+0x38>)
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d102      	bne.n	800fe4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fe48:	2302      	movs	r3, #2
 800fe4a:	607b      	str	r3, [r7, #4]
 800fe4c:	e001      	b.n	800fe52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fe4e:	2300      	movs	r3, #0
 800fe50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fe52:	687b      	ldr	r3, [r7, #4]
	}
 800fe54:	4618      	mov	r0, r3
 800fe56:	370c      	adds	r7, #12
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe5e:	4770      	bx	lr
 800fe60:	20001b1c 	.word	0x20001b1c
 800fe64:	20001b38 	.word	0x20001b38

0800fe68 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b084      	sub	sp, #16
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fe74:	2300      	movs	r3, #0
 800fe76:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d051      	beq.n	800ff22 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fe7e:	68bb      	ldr	r3, [r7, #8]
 800fe80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe82:	4b2a      	ldr	r3, [pc, #168]	; (800ff2c <xTaskPriorityInherit+0xc4>)
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe88:	429a      	cmp	r2, r3
 800fe8a:	d241      	bcs.n	800ff10 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	699b      	ldr	r3, [r3, #24]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	db06      	blt.n	800fea2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe94:	4b25      	ldr	r3, [pc, #148]	; (800ff2c <xTaskPriorityInherit+0xc4>)
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fe9e:	68bb      	ldr	r3, [r7, #8]
 800fea0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fea2:	68bb      	ldr	r3, [r7, #8]
 800fea4:	6959      	ldr	r1, [r3, #20]
 800fea6:	68bb      	ldr	r3, [r7, #8]
 800fea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800feaa:	4613      	mov	r3, r2
 800feac:	009b      	lsls	r3, r3, #2
 800feae:	4413      	add	r3, r2
 800feb0:	009b      	lsls	r3, r3, #2
 800feb2:	4a1f      	ldr	r2, [pc, #124]	; (800ff30 <xTaskPriorityInherit+0xc8>)
 800feb4:	4413      	add	r3, r2
 800feb6:	4299      	cmp	r1, r3
 800feb8:	d122      	bne.n	800ff00 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800feba:	68bb      	ldr	r3, [r7, #8]
 800febc:	3304      	adds	r3, #4
 800febe:	4618      	mov	r0, r3
 800fec0:	f7fe f8cc 	bl	800e05c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fec4:	4b19      	ldr	r3, [pc, #100]	; (800ff2c <xTaskPriorityInherit+0xc4>)
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800feca:	68bb      	ldr	r3, [r7, #8]
 800fecc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fece:	68bb      	ldr	r3, [r7, #8]
 800fed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fed2:	4b18      	ldr	r3, [pc, #96]	; (800ff34 <xTaskPriorityInherit+0xcc>)
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	429a      	cmp	r2, r3
 800fed8:	d903      	bls.n	800fee2 <xTaskPriorityInherit+0x7a>
 800feda:	68bb      	ldr	r3, [r7, #8]
 800fedc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fede:	4a15      	ldr	r2, [pc, #84]	; (800ff34 <xTaskPriorityInherit+0xcc>)
 800fee0:	6013      	str	r3, [r2, #0]
 800fee2:	68bb      	ldr	r3, [r7, #8]
 800fee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fee6:	4613      	mov	r3, r2
 800fee8:	009b      	lsls	r3, r3, #2
 800feea:	4413      	add	r3, r2
 800feec:	009b      	lsls	r3, r3, #2
 800feee:	4a10      	ldr	r2, [pc, #64]	; (800ff30 <xTaskPriorityInherit+0xc8>)
 800fef0:	441a      	add	r2, r3
 800fef2:	68bb      	ldr	r3, [r7, #8]
 800fef4:	3304      	adds	r3, #4
 800fef6:	4619      	mov	r1, r3
 800fef8:	4610      	mov	r0, r2
 800fefa:	f7fe f852 	bl	800dfa2 <vListInsertEnd>
 800fefe:	e004      	b.n	800ff0a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ff00:	4b0a      	ldr	r3, [pc, #40]	; (800ff2c <xTaskPriorityInherit+0xc4>)
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff06:	68bb      	ldr	r3, [r7, #8]
 800ff08:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ff0a:	2301      	movs	r3, #1
 800ff0c:	60fb      	str	r3, [r7, #12]
 800ff0e:	e008      	b.n	800ff22 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ff10:	68bb      	ldr	r3, [r7, #8]
 800ff12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ff14:	4b05      	ldr	r3, [pc, #20]	; (800ff2c <xTaskPriorityInherit+0xc4>)
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff1a:	429a      	cmp	r2, r3
 800ff1c:	d201      	bcs.n	800ff22 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ff1e:	2301      	movs	r3, #1
 800ff20:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ff22:	68fb      	ldr	r3, [r7, #12]
	}
 800ff24:	4618      	mov	r0, r3
 800ff26:	3710      	adds	r7, #16
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bd80      	pop	{r7, pc}
 800ff2c:	2000163c 	.word	0x2000163c
 800ff30:	20001640 	.word	0x20001640
 800ff34:	20001b18 	.word	0x20001b18

0800ff38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b086      	sub	sp, #24
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ff44:	2300      	movs	r3, #0
 800ff46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d05a      	beq.n	8010004 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ff4e:	4b30      	ldr	r3, [pc, #192]	; (8010010 <xTaskPriorityDisinherit+0xd8>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	693a      	ldr	r2, [r7, #16]
 800ff54:	429a      	cmp	r2, r3
 800ff56:	d00c      	beq.n	800ff72 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800ff58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff5c:	b672      	cpsid	i
 800ff5e:	f383 8811 	msr	BASEPRI, r3
 800ff62:	f3bf 8f6f 	isb	sy
 800ff66:	f3bf 8f4f 	dsb	sy
 800ff6a:	b662      	cpsie	i
 800ff6c:	60fb      	str	r3, [r7, #12]
}
 800ff6e:	bf00      	nop
 800ff70:	e7fe      	b.n	800ff70 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800ff72:	693b      	ldr	r3, [r7, #16]
 800ff74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d10c      	bne.n	800ff94 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800ff7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff7e:	b672      	cpsid	i
 800ff80:	f383 8811 	msr	BASEPRI, r3
 800ff84:	f3bf 8f6f 	isb	sy
 800ff88:	f3bf 8f4f 	dsb	sy
 800ff8c:	b662      	cpsie	i
 800ff8e:	60bb      	str	r3, [r7, #8]
}
 800ff90:	bf00      	nop
 800ff92:	e7fe      	b.n	800ff92 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800ff94:	693b      	ldr	r3, [r7, #16]
 800ff96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff98:	1e5a      	subs	r2, r3, #1
 800ff9a:	693b      	ldr	r3, [r7, #16]
 800ff9c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ff9e:	693b      	ldr	r3, [r7, #16]
 800ffa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffa2:	693b      	ldr	r3, [r7, #16]
 800ffa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ffa6:	429a      	cmp	r2, r3
 800ffa8:	d02c      	beq.n	8010004 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ffaa:	693b      	ldr	r3, [r7, #16]
 800ffac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d128      	bne.n	8010004 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ffb2:	693b      	ldr	r3, [r7, #16]
 800ffb4:	3304      	adds	r3, #4
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f7fe f850 	bl	800e05c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ffbc:	693b      	ldr	r3, [r7, #16]
 800ffbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ffc0:	693b      	ldr	r3, [r7, #16]
 800ffc2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ffc4:	693b      	ldr	r3, [r7, #16]
 800ffc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffc8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ffcc:	693b      	ldr	r3, [r7, #16]
 800ffce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ffd0:	693b      	ldr	r3, [r7, #16]
 800ffd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffd4:	4b0f      	ldr	r3, [pc, #60]	; (8010014 <xTaskPriorityDisinherit+0xdc>)
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	429a      	cmp	r2, r3
 800ffda:	d903      	bls.n	800ffe4 <xTaskPriorityDisinherit+0xac>
 800ffdc:	693b      	ldr	r3, [r7, #16]
 800ffde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffe0:	4a0c      	ldr	r2, [pc, #48]	; (8010014 <xTaskPriorityDisinherit+0xdc>)
 800ffe2:	6013      	str	r3, [r2, #0]
 800ffe4:	693b      	ldr	r3, [r7, #16]
 800ffe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffe8:	4613      	mov	r3, r2
 800ffea:	009b      	lsls	r3, r3, #2
 800ffec:	4413      	add	r3, r2
 800ffee:	009b      	lsls	r3, r3, #2
 800fff0:	4a09      	ldr	r2, [pc, #36]	; (8010018 <xTaskPriorityDisinherit+0xe0>)
 800fff2:	441a      	add	r2, r3
 800fff4:	693b      	ldr	r3, [r7, #16]
 800fff6:	3304      	adds	r3, #4
 800fff8:	4619      	mov	r1, r3
 800fffa:	4610      	mov	r0, r2
 800fffc:	f7fd ffd1 	bl	800dfa2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010000:	2301      	movs	r3, #1
 8010002:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010004:	697b      	ldr	r3, [r7, #20]
	}
 8010006:	4618      	mov	r0, r3
 8010008:	3718      	adds	r7, #24
 801000a:	46bd      	mov	sp, r7
 801000c:	bd80      	pop	{r7, pc}
 801000e:	bf00      	nop
 8010010:	2000163c 	.word	0x2000163c
 8010014:	20001b18 	.word	0x20001b18
 8010018:	20001640 	.word	0x20001640

0801001c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801001c:	b580      	push	{r7, lr}
 801001e:	b088      	sub	sp, #32
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
 8010024:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801002a:	2301      	movs	r3, #1
 801002c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d06e      	beq.n	8010112 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010034:	69bb      	ldr	r3, [r7, #24]
 8010036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010038:	2b00      	cmp	r3, #0
 801003a:	d10c      	bne.n	8010056 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 801003c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010040:	b672      	cpsid	i
 8010042:	f383 8811 	msr	BASEPRI, r3
 8010046:	f3bf 8f6f 	isb	sy
 801004a:	f3bf 8f4f 	dsb	sy
 801004e:	b662      	cpsie	i
 8010050:	60fb      	str	r3, [r7, #12]
}
 8010052:	bf00      	nop
 8010054:	e7fe      	b.n	8010054 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010056:	69bb      	ldr	r3, [r7, #24]
 8010058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801005a:	683a      	ldr	r2, [r7, #0]
 801005c:	429a      	cmp	r2, r3
 801005e:	d902      	bls.n	8010066 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	61fb      	str	r3, [r7, #28]
 8010064:	e002      	b.n	801006c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010066:	69bb      	ldr	r3, [r7, #24]
 8010068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801006a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801006c:	69bb      	ldr	r3, [r7, #24]
 801006e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010070:	69fa      	ldr	r2, [r7, #28]
 8010072:	429a      	cmp	r2, r3
 8010074:	d04d      	beq.n	8010112 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010076:	69bb      	ldr	r3, [r7, #24]
 8010078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801007a:	697a      	ldr	r2, [r7, #20]
 801007c:	429a      	cmp	r2, r3
 801007e:	d148      	bne.n	8010112 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010080:	4b26      	ldr	r3, [pc, #152]	; (801011c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	69ba      	ldr	r2, [r7, #24]
 8010086:	429a      	cmp	r2, r3
 8010088:	d10c      	bne.n	80100a4 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 801008a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801008e:	b672      	cpsid	i
 8010090:	f383 8811 	msr	BASEPRI, r3
 8010094:	f3bf 8f6f 	isb	sy
 8010098:	f3bf 8f4f 	dsb	sy
 801009c:	b662      	cpsie	i
 801009e:	60bb      	str	r3, [r7, #8]
}
 80100a0:	bf00      	nop
 80100a2:	e7fe      	b.n	80100a2 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80100a4:	69bb      	ldr	r3, [r7, #24]
 80100a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100a8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80100aa:	69bb      	ldr	r3, [r7, #24]
 80100ac:	69fa      	ldr	r2, [r7, #28]
 80100ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80100b0:	69bb      	ldr	r3, [r7, #24]
 80100b2:	699b      	ldr	r3, [r3, #24]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	db04      	blt.n	80100c2 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100b8:	69fb      	ldr	r3, [r7, #28]
 80100ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80100be:	69bb      	ldr	r3, [r7, #24]
 80100c0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80100c2:	69bb      	ldr	r3, [r7, #24]
 80100c4:	6959      	ldr	r1, [r3, #20]
 80100c6:	693a      	ldr	r2, [r7, #16]
 80100c8:	4613      	mov	r3, r2
 80100ca:	009b      	lsls	r3, r3, #2
 80100cc:	4413      	add	r3, r2
 80100ce:	009b      	lsls	r3, r3, #2
 80100d0:	4a13      	ldr	r2, [pc, #76]	; (8010120 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80100d2:	4413      	add	r3, r2
 80100d4:	4299      	cmp	r1, r3
 80100d6:	d11c      	bne.n	8010112 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80100d8:	69bb      	ldr	r3, [r7, #24]
 80100da:	3304      	adds	r3, #4
 80100dc:	4618      	mov	r0, r3
 80100de:	f7fd ffbd 	bl	800e05c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80100e2:	69bb      	ldr	r3, [r7, #24]
 80100e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100e6:	4b0f      	ldr	r3, [pc, #60]	; (8010124 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	429a      	cmp	r2, r3
 80100ec:	d903      	bls.n	80100f6 <vTaskPriorityDisinheritAfterTimeout+0xda>
 80100ee:	69bb      	ldr	r3, [r7, #24]
 80100f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100f2:	4a0c      	ldr	r2, [pc, #48]	; (8010124 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80100f4:	6013      	str	r3, [r2, #0]
 80100f6:	69bb      	ldr	r3, [r7, #24]
 80100f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100fa:	4613      	mov	r3, r2
 80100fc:	009b      	lsls	r3, r3, #2
 80100fe:	4413      	add	r3, r2
 8010100:	009b      	lsls	r3, r3, #2
 8010102:	4a07      	ldr	r2, [pc, #28]	; (8010120 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8010104:	441a      	add	r2, r3
 8010106:	69bb      	ldr	r3, [r7, #24]
 8010108:	3304      	adds	r3, #4
 801010a:	4619      	mov	r1, r3
 801010c:	4610      	mov	r0, r2
 801010e:	f7fd ff48 	bl	800dfa2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010112:	bf00      	nop
 8010114:	3720      	adds	r7, #32
 8010116:	46bd      	mov	sp, r7
 8010118:	bd80      	pop	{r7, pc}
 801011a:	bf00      	nop
 801011c:	2000163c 	.word	0x2000163c
 8010120:	20001640 	.word	0x20001640
 8010124:	20001b18 	.word	0x20001b18

08010128 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010128:	b480      	push	{r7}
 801012a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801012c:	4b07      	ldr	r3, [pc, #28]	; (801014c <pvTaskIncrementMutexHeldCount+0x24>)
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d004      	beq.n	801013e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010134:	4b05      	ldr	r3, [pc, #20]	; (801014c <pvTaskIncrementMutexHeldCount+0x24>)
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801013a:	3201      	adds	r2, #1
 801013c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801013e:	4b03      	ldr	r3, [pc, #12]	; (801014c <pvTaskIncrementMutexHeldCount+0x24>)
 8010140:	681b      	ldr	r3, [r3, #0]
	}
 8010142:	4618      	mov	r0, r3
 8010144:	46bd      	mov	sp, r7
 8010146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014a:	4770      	bx	lr
 801014c:	2000163c 	.word	0x2000163c

08010150 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b084      	sub	sp, #16
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
 8010158:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801015a:	4b21      	ldr	r3, [pc, #132]	; (80101e0 <prvAddCurrentTaskToDelayedList+0x90>)
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010160:	4b20      	ldr	r3, [pc, #128]	; (80101e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	3304      	adds	r3, #4
 8010166:	4618      	mov	r0, r3
 8010168:	f7fd ff78 	bl	800e05c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010172:	d10a      	bne.n	801018a <prvAddCurrentTaskToDelayedList+0x3a>
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d007      	beq.n	801018a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801017a:	4b1a      	ldr	r3, [pc, #104]	; (80101e4 <prvAddCurrentTaskToDelayedList+0x94>)
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	3304      	adds	r3, #4
 8010180:	4619      	mov	r1, r3
 8010182:	4819      	ldr	r0, [pc, #100]	; (80101e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8010184:	f7fd ff0d 	bl	800dfa2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010188:	e026      	b.n	80101d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801018a:	68fa      	ldr	r2, [r7, #12]
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	4413      	add	r3, r2
 8010190:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010192:	4b14      	ldr	r3, [pc, #80]	; (80101e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	68ba      	ldr	r2, [r7, #8]
 8010198:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801019a:	68ba      	ldr	r2, [r7, #8]
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	429a      	cmp	r2, r3
 80101a0:	d209      	bcs.n	80101b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80101a2:	4b12      	ldr	r3, [pc, #72]	; (80101ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80101a4:	681a      	ldr	r2, [r3, #0]
 80101a6:	4b0f      	ldr	r3, [pc, #60]	; (80101e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	3304      	adds	r3, #4
 80101ac:	4619      	mov	r1, r3
 80101ae:	4610      	mov	r0, r2
 80101b0:	f7fd ff1b 	bl	800dfea <vListInsert>
}
 80101b4:	e010      	b.n	80101d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80101b6:	4b0e      	ldr	r3, [pc, #56]	; (80101f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80101b8:	681a      	ldr	r2, [r3, #0]
 80101ba:	4b0a      	ldr	r3, [pc, #40]	; (80101e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	3304      	adds	r3, #4
 80101c0:	4619      	mov	r1, r3
 80101c2:	4610      	mov	r0, r2
 80101c4:	f7fd ff11 	bl	800dfea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80101c8:	4b0a      	ldr	r3, [pc, #40]	; (80101f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	68ba      	ldr	r2, [r7, #8]
 80101ce:	429a      	cmp	r2, r3
 80101d0:	d202      	bcs.n	80101d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80101d2:	4a08      	ldr	r2, [pc, #32]	; (80101f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	6013      	str	r3, [r2, #0]
}
 80101d8:	bf00      	nop
 80101da:	3710      	adds	r7, #16
 80101dc:	46bd      	mov	sp, r7
 80101de:	bd80      	pop	{r7, pc}
 80101e0:	20001b14 	.word	0x20001b14
 80101e4:	2000163c 	.word	0x2000163c
 80101e8:	20001afc 	.word	0x20001afc
 80101ec:	20001acc 	.word	0x20001acc
 80101f0:	20001ac8 	.word	0x20001ac8
 80101f4:	20001b30 	.word	0x20001b30

080101f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b08a      	sub	sp, #40	; 0x28
 80101fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80101fe:	2300      	movs	r3, #0
 8010200:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010202:	f000 fb15 	bl	8010830 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010206:	4b1d      	ldr	r3, [pc, #116]	; (801027c <xTimerCreateTimerTask+0x84>)
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d021      	beq.n	8010252 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801020e:	2300      	movs	r3, #0
 8010210:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010212:	2300      	movs	r3, #0
 8010214:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010216:	1d3a      	adds	r2, r7, #4
 8010218:	f107 0108 	add.w	r1, r7, #8
 801021c:	f107 030c 	add.w	r3, r7, #12
 8010220:	4618      	mov	r0, r3
 8010222:	f7fd fe77 	bl	800df14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010226:	6879      	ldr	r1, [r7, #4]
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	68fa      	ldr	r2, [r7, #12]
 801022c:	9202      	str	r2, [sp, #8]
 801022e:	9301      	str	r3, [sp, #4]
 8010230:	2302      	movs	r3, #2
 8010232:	9300      	str	r3, [sp, #0]
 8010234:	2300      	movs	r3, #0
 8010236:	460a      	mov	r2, r1
 8010238:	4911      	ldr	r1, [pc, #68]	; (8010280 <xTimerCreateTimerTask+0x88>)
 801023a:	4812      	ldr	r0, [pc, #72]	; (8010284 <xTimerCreateTimerTask+0x8c>)
 801023c:	f7fe ff8e 	bl	800f15c <xTaskCreateStatic>
 8010240:	4603      	mov	r3, r0
 8010242:	4a11      	ldr	r2, [pc, #68]	; (8010288 <xTimerCreateTimerTask+0x90>)
 8010244:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010246:	4b10      	ldr	r3, [pc, #64]	; (8010288 <xTimerCreateTimerTask+0x90>)
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d001      	beq.n	8010252 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801024e:	2301      	movs	r3, #1
 8010250:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010252:	697b      	ldr	r3, [r7, #20]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d10c      	bne.n	8010272 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8010258:	f04f 0350 	mov.w	r3, #80	; 0x50
 801025c:	b672      	cpsid	i
 801025e:	f383 8811 	msr	BASEPRI, r3
 8010262:	f3bf 8f6f 	isb	sy
 8010266:	f3bf 8f4f 	dsb	sy
 801026a:	b662      	cpsie	i
 801026c:	613b      	str	r3, [r7, #16]
}
 801026e:	bf00      	nop
 8010270:	e7fe      	b.n	8010270 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8010272:	697b      	ldr	r3, [r7, #20]
}
 8010274:	4618      	mov	r0, r3
 8010276:	3718      	adds	r7, #24
 8010278:	46bd      	mov	sp, r7
 801027a:	bd80      	pop	{r7, pc}
 801027c:	20001b6c 	.word	0x20001b6c
 8010280:	08011ffc 	.word	0x08011ffc
 8010284:	080103c9 	.word	0x080103c9
 8010288:	20001b70 	.word	0x20001b70

0801028c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b08a      	sub	sp, #40	; 0x28
 8010290:	af00      	add	r7, sp, #0
 8010292:	60f8      	str	r0, [r7, #12]
 8010294:	60b9      	str	r1, [r7, #8]
 8010296:	607a      	str	r2, [r7, #4]
 8010298:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801029a:	2300      	movs	r3, #0
 801029c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d10c      	bne.n	80102be <xTimerGenericCommand+0x32>
	__asm volatile
 80102a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102a8:	b672      	cpsid	i
 80102aa:	f383 8811 	msr	BASEPRI, r3
 80102ae:	f3bf 8f6f 	isb	sy
 80102b2:	f3bf 8f4f 	dsb	sy
 80102b6:	b662      	cpsie	i
 80102b8:	623b      	str	r3, [r7, #32]
}
 80102ba:	bf00      	nop
 80102bc:	e7fe      	b.n	80102bc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80102be:	4b1a      	ldr	r3, [pc, #104]	; (8010328 <xTimerGenericCommand+0x9c>)
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d02a      	beq.n	801031c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80102c6:	68bb      	ldr	r3, [r7, #8]
 80102c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80102d2:	68bb      	ldr	r3, [r7, #8]
 80102d4:	2b05      	cmp	r3, #5
 80102d6:	dc18      	bgt.n	801030a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80102d8:	f7ff fda8 	bl	800fe2c <xTaskGetSchedulerState>
 80102dc:	4603      	mov	r3, r0
 80102de:	2b02      	cmp	r3, #2
 80102e0:	d109      	bne.n	80102f6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80102e2:	4b11      	ldr	r3, [pc, #68]	; (8010328 <xTimerGenericCommand+0x9c>)
 80102e4:	6818      	ldr	r0, [r3, #0]
 80102e6:	f107 0110 	add.w	r1, r7, #16
 80102ea:	2300      	movs	r3, #0
 80102ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102ee:	f7fe f8a3 	bl	800e438 <xQueueGenericSend>
 80102f2:	6278      	str	r0, [r7, #36]	; 0x24
 80102f4:	e012      	b.n	801031c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80102f6:	4b0c      	ldr	r3, [pc, #48]	; (8010328 <xTimerGenericCommand+0x9c>)
 80102f8:	6818      	ldr	r0, [r3, #0]
 80102fa:	f107 0110 	add.w	r1, r7, #16
 80102fe:	2300      	movs	r3, #0
 8010300:	2200      	movs	r2, #0
 8010302:	f7fe f899 	bl	800e438 <xQueueGenericSend>
 8010306:	6278      	str	r0, [r7, #36]	; 0x24
 8010308:	e008      	b.n	801031c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801030a:	4b07      	ldr	r3, [pc, #28]	; (8010328 <xTimerGenericCommand+0x9c>)
 801030c:	6818      	ldr	r0, [r3, #0]
 801030e:	f107 0110 	add.w	r1, r7, #16
 8010312:	2300      	movs	r3, #0
 8010314:	683a      	ldr	r2, [r7, #0]
 8010316:	f7fe f995 	bl	800e644 <xQueueGenericSendFromISR>
 801031a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801031c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801031e:	4618      	mov	r0, r3
 8010320:	3728      	adds	r7, #40	; 0x28
 8010322:	46bd      	mov	sp, r7
 8010324:	bd80      	pop	{r7, pc}
 8010326:	bf00      	nop
 8010328:	20001b6c 	.word	0x20001b6c

0801032c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b088      	sub	sp, #32
 8010330:	af02      	add	r7, sp, #8
 8010332:	6078      	str	r0, [r7, #4]
 8010334:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010336:	4b23      	ldr	r3, [pc, #140]	; (80103c4 <prvProcessExpiredTimer+0x98>)
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	68db      	ldr	r3, [r3, #12]
 801033c:	68db      	ldr	r3, [r3, #12]
 801033e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010340:	697b      	ldr	r3, [r7, #20]
 8010342:	3304      	adds	r3, #4
 8010344:	4618      	mov	r0, r3
 8010346:	f7fd fe89 	bl	800e05c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801034a:	697b      	ldr	r3, [r7, #20]
 801034c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010350:	f003 0304 	and.w	r3, r3, #4
 8010354:	2b00      	cmp	r3, #0
 8010356:	d024      	beq.n	80103a2 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010358:	697b      	ldr	r3, [r7, #20]
 801035a:	699a      	ldr	r2, [r3, #24]
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	18d1      	adds	r1, r2, r3
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	683a      	ldr	r2, [r7, #0]
 8010364:	6978      	ldr	r0, [r7, #20]
 8010366:	f000 f8d3 	bl	8010510 <prvInsertTimerInActiveList>
 801036a:	4603      	mov	r3, r0
 801036c:	2b00      	cmp	r3, #0
 801036e:	d021      	beq.n	80103b4 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010370:	2300      	movs	r3, #0
 8010372:	9300      	str	r3, [sp, #0]
 8010374:	2300      	movs	r3, #0
 8010376:	687a      	ldr	r2, [r7, #4]
 8010378:	2100      	movs	r1, #0
 801037a:	6978      	ldr	r0, [r7, #20]
 801037c:	f7ff ff86 	bl	801028c <xTimerGenericCommand>
 8010380:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010382:	693b      	ldr	r3, [r7, #16]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d115      	bne.n	80103b4 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8010388:	f04f 0350 	mov.w	r3, #80	; 0x50
 801038c:	b672      	cpsid	i
 801038e:	f383 8811 	msr	BASEPRI, r3
 8010392:	f3bf 8f6f 	isb	sy
 8010396:	f3bf 8f4f 	dsb	sy
 801039a:	b662      	cpsie	i
 801039c:	60fb      	str	r3, [r7, #12]
}
 801039e:	bf00      	nop
 80103a0:	e7fe      	b.n	80103a0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80103a2:	697b      	ldr	r3, [r7, #20]
 80103a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80103a8:	f023 0301 	bic.w	r3, r3, #1
 80103ac:	b2da      	uxtb	r2, r3
 80103ae:	697b      	ldr	r3, [r7, #20]
 80103b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80103b4:	697b      	ldr	r3, [r7, #20]
 80103b6:	6a1b      	ldr	r3, [r3, #32]
 80103b8:	6978      	ldr	r0, [r7, #20]
 80103ba:	4798      	blx	r3
}
 80103bc:	bf00      	nop
 80103be:	3718      	adds	r7, #24
 80103c0:	46bd      	mov	sp, r7
 80103c2:	bd80      	pop	{r7, pc}
 80103c4:	20001b64 	.word	0x20001b64

080103c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b084      	sub	sp, #16
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80103d0:	f107 0308 	add.w	r3, r7, #8
 80103d4:	4618      	mov	r0, r3
 80103d6:	f000 f857 	bl	8010488 <prvGetNextExpireTime>
 80103da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80103dc:	68bb      	ldr	r3, [r7, #8]
 80103de:	4619      	mov	r1, r3
 80103e0:	68f8      	ldr	r0, [r7, #12]
 80103e2:	f000 f803 	bl	80103ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80103e6:	f000 f8d5 	bl	8010594 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80103ea:	e7f1      	b.n	80103d0 <prvTimerTask+0x8>

080103ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b084      	sub	sp, #16
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
 80103f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80103f6:	f7ff f91b 	bl	800f630 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80103fa:	f107 0308 	add.w	r3, r7, #8
 80103fe:	4618      	mov	r0, r3
 8010400:	f000 f866 	bl	80104d0 <prvSampleTimeNow>
 8010404:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010406:	68bb      	ldr	r3, [r7, #8]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d130      	bne.n	801046e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d10a      	bne.n	8010428 <prvProcessTimerOrBlockTask+0x3c>
 8010412:	687a      	ldr	r2, [r7, #4]
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	429a      	cmp	r2, r3
 8010418:	d806      	bhi.n	8010428 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801041a:	f7ff f917 	bl	800f64c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801041e:	68f9      	ldr	r1, [r7, #12]
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f7ff ff83 	bl	801032c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010426:	e024      	b.n	8010472 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010428:	683b      	ldr	r3, [r7, #0]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d008      	beq.n	8010440 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801042e:	4b13      	ldr	r3, [pc, #76]	; (801047c <prvProcessTimerOrBlockTask+0x90>)
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d101      	bne.n	801043c <prvProcessTimerOrBlockTask+0x50>
 8010438:	2301      	movs	r3, #1
 801043a:	e000      	b.n	801043e <prvProcessTimerOrBlockTask+0x52>
 801043c:	2300      	movs	r3, #0
 801043e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010440:	4b0f      	ldr	r3, [pc, #60]	; (8010480 <prvProcessTimerOrBlockTask+0x94>)
 8010442:	6818      	ldr	r0, [r3, #0]
 8010444:	687a      	ldr	r2, [r7, #4]
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	1ad3      	subs	r3, r2, r3
 801044a:	683a      	ldr	r2, [r7, #0]
 801044c:	4619      	mov	r1, r3
 801044e:	f7fe fe51 	bl	800f0f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010452:	f7ff f8fb 	bl	800f64c <xTaskResumeAll>
 8010456:	4603      	mov	r3, r0
 8010458:	2b00      	cmp	r3, #0
 801045a:	d10a      	bne.n	8010472 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801045c:	4b09      	ldr	r3, [pc, #36]	; (8010484 <prvProcessTimerOrBlockTask+0x98>)
 801045e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010462:	601a      	str	r2, [r3, #0]
 8010464:	f3bf 8f4f 	dsb	sy
 8010468:	f3bf 8f6f 	isb	sy
}
 801046c:	e001      	b.n	8010472 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801046e:	f7ff f8ed 	bl	800f64c <xTaskResumeAll>
}
 8010472:	bf00      	nop
 8010474:	3710      	adds	r7, #16
 8010476:	46bd      	mov	sp, r7
 8010478:	bd80      	pop	{r7, pc}
 801047a:	bf00      	nop
 801047c:	20001b68 	.word	0x20001b68
 8010480:	20001b6c 	.word	0x20001b6c
 8010484:	e000ed04 	.word	0xe000ed04

08010488 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010488:	b480      	push	{r7}
 801048a:	b085      	sub	sp, #20
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010490:	4b0e      	ldr	r3, [pc, #56]	; (80104cc <prvGetNextExpireTime+0x44>)
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d101      	bne.n	801049e <prvGetNextExpireTime+0x16>
 801049a:	2201      	movs	r2, #1
 801049c:	e000      	b.n	80104a0 <prvGetNextExpireTime+0x18>
 801049e:	2200      	movs	r2, #0
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d105      	bne.n	80104b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80104ac:	4b07      	ldr	r3, [pc, #28]	; (80104cc <prvGetNextExpireTime+0x44>)
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	68db      	ldr	r3, [r3, #12]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	60fb      	str	r3, [r7, #12]
 80104b6:	e001      	b.n	80104bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80104b8:	2300      	movs	r3, #0
 80104ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80104bc:	68fb      	ldr	r3, [r7, #12]
}
 80104be:	4618      	mov	r0, r3
 80104c0:	3714      	adds	r7, #20
 80104c2:	46bd      	mov	sp, r7
 80104c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c8:	4770      	bx	lr
 80104ca:	bf00      	nop
 80104cc:	20001b64 	.word	0x20001b64

080104d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b084      	sub	sp, #16
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80104d8:	f7ff f958 	bl	800f78c <xTaskGetTickCount>
 80104dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80104de:	4b0b      	ldr	r3, [pc, #44]	; (801050c <prvSampleTimeNow+0x3c>)
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	68fa      	ldr	r2, [r7, #12]
 80104e4:	429a      	cmp	r2, r3
 80104e6:	d205      	bcs.n	80104f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80104e8:	f000 f93c 	bl	8010764 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	2201      	movs	r2, #1
 80104f0:	601a      	str	r2, [r3, #0]
 80104f2:	e002      	b.n	80104fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	2200      	movs	r2, #0
 80104f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80104fa:	4a04      	ldr	r2, [pc, #16]	; (801050c <prvSampleTimeNow+0x3c>)
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010500:	68fb      	ldr	r3, [r7, #12]
}
 8010502:	4618      	mov	r0, r3
 8010504:	3710      	adds	r7, #16
 8010506:	46bd      	mov	sp, r7
 8010508:	bd80      	pop	{r7, pc}
 801050a:	bf00      	nop
 801050c:	20001b74 	.word	0x20001b74

08010510 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b086      	sub	sp, #24
 8010514:	af00      	add	r7, sp, #0
 8010516:	60f8      	str	r0, [r7, #12]
 8010518:	60b9      	str	r1, [r7, #8]
 801051a:	607a      	str	r2, [r7, #4]
 801051c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801051e:	2300      	movs	r3, #0
 8010520:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	68ba      	ldr	r2, [r7, #8]
 8010526:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	68fa      	ldr	r2, [r7, #12]
 801052c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801052e:	68ba      	ldr	r2, [r7, #8]
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	429a      	cmp	r2, r3
 8010534:	d812      	bhi.n	801055c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010536:	687a      	ldr	r2, [r7, #4]
 8010538:	683b      	ldr	r3, [r7, #0]
 801053a:	1ad2      	subs	r2, r2, r3
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	699b      	ldr	r3, [r3, #24]
 8010540:	429a      	cmp	r2, r3
 8010542:	d302      	bcc.n	801054a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010544:	2301      	movs	r3, #1
 8010546:	617b      	str	r3, [r7, #20]
 8010548:	e01b      	b.n	8010582 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801054a:	4b10      	ldr	r3, [pc, #64]	; (801058c <prvInsertTimerInActiveList+0x7c>)
 801054c:	681a      	ldr	r2, [r3, #0]
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	3304      	adds	r3, #4
 8010552:	4619      	mov	r1, r3
 8010554:	4610      	mov	r0, r2
 8010556:	f7fd fd48 	bl	800dfea <vListInsert>
 801055a:	e012      	b.n	8010582 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801055c:	687a      	ldr	r2, [r7, #4]
 801055e:	683b      	ldr	r3, [r7, #0]
 8010560:	429a      	cmp	r2, r3
 8010562:	d206      	bcs.n	8010572 <prvInsertTimerInActiveList+0x62>
 8010564:	68ba      	ldr	r2, [r7, #8]
 8010566:	683b      	ldr	r3, [r7, #0]
 8010568:	429a      	cmp	r2, r3
 801056a:	d302      	bcc.n	8010572 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801056c:	2301      	movs	r3, #1
 801056e:	617b      	str	r3, [r7, #20]
 8010570:	e007      	b.n	8010582 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010572:	4b07      	ldr	r3, [pc, #28]	; (8010590 <prvInsertTimerInActiveList+0x80>)
 8010574:	681a      	ldr	r2, [r3, #0]
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	3304      	adds	r3, #4
 801057a:	4619      	mov	r1, r3
 801057c:	4610      	mov	r0, r2
 801057e:	f7fd fd34 	bl	800dfea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010582:	697b      	ldr	r3, [r7, #20]
}
 8010584:	4618      	mov	r0, r3
 8010586:	3718      	adds	r7, #24
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}
 801058c:	20001b68 	.word	0x20001b68
 8010590:	20001b64 	.word	0x20001b64

08010594 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b08e      	sub	sp, #56	; 0x38
 8010598:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801059a:	e0d0      	b.n	801073e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	da1a      	bge.n	80105d8 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80105a2:	1d3b      	adds	r3, r7, #4
 80105a4:	3304      	adds	r3, #4
 80105a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80105a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d10c      	bne.n	80105c8 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80105ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105b2:	b672      	cpsid	i
 80105b4:	f383 8811 	msr	BASEPRI, r3
 80105b8:	f3bf 8f6f 	isb	sy
 80105bc:	f3bf 8f4f 	dsb	sy
 80105c0:	b662      	cpsie	i
 80105c2:	61fb      	str	r3, [r7, #28]
}
 80105c4:	bf00      	nop
 80105c6:	e7fe      	b.n	80105c6 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80105c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80105ce:	6850      	ldr	r0, [r2, #4]
 80105d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80105d2:	6892      	ldr	r2, [r2, #8]
 80105d4:	4611      	mov	r1, r2
 80105d6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	f2c0 80ae 	blt.w	801073c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80105e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105e6:	695b      	ldr	r3, [r3, #20]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d004      	beq.n	80105f6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80105ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ee:	3304      	adds	r3, #4
 80105f0:	4618      	mov	r0, r3
 80105f2:	f7fd fd33 	bl	800e05c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80105f6:	463b      	mov	r3, r7
 80105f8:	4618      	mov	r0, r3
 80105fa:	f7ff ff69 	bl	80104d0 <prvSampleTimeNow>
 80105fe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2b09      	cmp	r3, #9
 8010604:	f200 809b 	bhi.w	801073e <prvProcessReceivedCommands+0x1aa>
 8010608:	a201      	add	r2, pc, #4	; (adr r2, 8010610 <prvProcessReceivedCommands+0x7c>)
 801060a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801060e:	bf00      	nop
 8010610:	08010639 	.word	0x08010639
 8010614:	08010639 	.word	0x08010639
 8010618:	08010639 	.word	0x08010639
 801061c:	080106b1 	.word	0x080106b1
 8010620:	080106c5 	.word	0x080106c5
 8010624:	08010713 	.word	0x08010713
 8010628:	08010639 	.word	0x08010639
 801062c:	08010639 	.word	0x08010639
 8010630:	080106b1 	.word	0x080106b1
 8010634:	080106c5 	.word	0x080106c5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801063a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801063e:	f043 0301 	orr.w	r3, r3, #1
 8010642:	b2da      	uxtb	r2, r3
 8010644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010646:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801064a:	68ba      	ldr	r2, [r7, #8]
 801064c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801064e:	699b      	ldr	r3, [r3, #24]
 8010650:	18d1      	adds	r1, r2, r3
 8010652:	68bb      	ldr	r3, [r7, #8]
 8010654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010656:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010658:	f7ff ff5a 	bl	8010510 <prvInsertTimerInActiveList>
 801065c:	4603      	mov	r3, r0
 801065e:	2b00      	cmp	r3, #0
 8010660:	d06d      	beq.n	801073e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010664:	6a1b      	ldr	r3, [r3, #32]
 8010666:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010668:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801066a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801066c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010670:	f003 0304 	and.w	r3, r3, #4
 8010674:	2b00      	cmp	r3, #0
 8010676:	d062      	beq.n	801073e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010678:	68ba      	ldr	r2, [r7, #8]
 801067a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801067c:	699b      	ldr	r3, [r3, #24]
 801067e:	441a      	add	r2, r3
 8010680:	2300      	movs	r3, #0
 8010682:	9300      	str	r3, [sp, #0]
 8010684:	2300      	movs	r3, #0
 8010686:	2100      	movs	r1, #0
 8010688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801068a:	f7ff fdff 	bl	801028c <xTimerGenericCommand>
 801068e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010690:	6a3b      	ldr	r3, [r7, #32]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d153      	bne.n	801073e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8010696:	f04f 0350 	mov.w	r3, #80	; 0x50
 801069a:	b672      	cpsid	i
 801069c:	f383 8811 	msr	BASEPRI, r3
 80106a0:	f3bf 8f6f 	isb	sy
 80106a4:	f3bf 8f4f 	dsb	sy
 80106a8:	b662      	cpsie	i
 80106aa:	61bb      	str	r3, [r7, #24]
}
 80106ac:	bf00      	nop
 80106ae:	e7fe      	b.n	80106ae <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80106b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80106b6:	f023 0301 	bic.w	r3, r3, #1
 80106ba:	b2da      	uxtb	r2, r3
 80106bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80106c2:	e03c      	b.n	801073e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80106c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80106ca:	f043 0301 	orr.w	r3, r3, #1
 80106ce:	b2da      	uxtb	r2, r3
 80106d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80106d6:	68ba      	ldr	r2, [r7, #8]
 80106d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106da:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80106dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106de:	699b      	ldr	r3, [r3, #24]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d10c      	bne.n	80106fe <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80106e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106e8:	b672      	cpsid	i
 80106ea:	f383 8811 	msr	BASEPRI, r3
 80106ee:	f3bf 8f6f 	isb	sy
 80106f2:	f3bf 8f4f 	dsb	sy
 80106f6:	b662      	cpsie	i
 80106f8:	617b      	str	r3, [r7, #20]
}
 80106fa:	bf00      	nop
 80106fc:	e7fe      	b.n	80106fc <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80106fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010700:	699a      	ldr	r2, [r3, #24]
 8010702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010704:	18d1      	adds	r1, r2, r3
 8010706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801070a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801070c:	f7ff ff00 	bl	8010510 <prvInsertTimerInActiveList>
					break;
 8010710:	e015      	b.n	801073e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010714:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010718:	f003 0302 	and.w	r3, r3, #2
 801071c:	2b00      	cmp	r3, #0
 801071e:	d103      	bne.n	8010728 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8010720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010722:	f000 fbc9 	bl	8010eb8 <vPortFree>
 8010726:	e00a      	b.n	801073e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801072a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801072e:	f023 0301 	bic.w	r3, r3, #1
 8010732:	b2da      	uxtb	r2, r3
 8010734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010736:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801073a:	e000      	b.n	801073e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801073c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801073e:	4b08      	ldr	r3, [pc, #32]	; (8010760 <prvProcessReceivedCommands+0x1cc>)
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	1d39      	adds	r1, r7, #4
 8010744:	2200      	movs	r2, #0
 8010746:	4618      	mov	r0, r3
 8010748:	f7fe f8b2 	bl	800e8b0 <xQueueReceive>
 801074c:	4603      	mov	r3, r0
 801074e:	2b00      	cmp	r3, #0
 8010750:	f47f af24 	bne.w	801059c <prvProcessReceivedCommands+0x8>
	}
}
 8010754:	bf00      	nop
 8010756:	bf00      	nop
 8010758:	3730      	adds	r7, #48	; 0x30
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}
 801075e:	bf00      	nop
 8010760:	20001b6c 	.word	0x20001b6c

08010764 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b088      	sub	sp, #32
 8010768:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801076a:	e04a      	b.n	8010802 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801076c:	4b2e      	ldr	r3, [pc, #184]	; (8010828 <prvSwitchTimerLists+0xc4>)
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	68db      	ldr	r3, [r3, #12]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010776:	4b2c      	ldr	r3, [pc, #176]	; (8010828 <prvSwitchTimerLists+0xc4>)
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	68db      	ldr	r3, [r3, #12]
 801077c:	68db      	ldr	r3, [r3, #12]
 801077e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	3304      	adds	r3, #4
 8010784:	4618      	mov	r0, r3
 8010786:	f7fd fc69 	bl	800e05c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	6a1b      	ldr	r3, [r3, #32]
 801078e:	68f8      	ldr	r0, [r7, #12]
 8010790:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010798:	f003 0304 	and.w	r3, r3, #4
 801079c:	2b00      	cmp	r3, #0
 801079e:	d030      	beq.n	8010802 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	699b      	ldr	r3, [r3, #24]
 80107a4:	693a      	ldr	r2, [r7, #16]
 80107a6:	4413      	add	r3, r2
 80107a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80107aa:	68ba      	ldr	r2, [r7, #8]
 80107ac:	693b      	ldr	r3, [r7, #16]
 80107ae:	429a      	cmp	r2, r3
 80107b0:	d90e      	bls.n	80107d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	68ba      	ldr	r2, [r7, #8]
 80107b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	68fa      	ldr	r2, [r7, #12]
 80107bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80107be:	4b1a      	ldr	r3, [pc, #104]	; (8010828 <prvSwitchTimerLists+0xc4>)
 80107c0:	681a      	ldr	r2, [r3, #0]
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	3304      	adds	r3, #4
 80107c6:	4619      	mov	r1, r3
 80107c8:	4610      	mov	r0, r2
 80107ca:	f7fd fc0e 	bl	800dfea <vListInsert>
 80107ce:	e018      	b.n	8010802 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80107d0:	2300      	movs	r3, #0
 80107d2:	9300      	str	r3, [sp, #0]
 80107d4:	2300      	movs	r3, #0
 80107d6:	693a      	ldr	r2, [r7, #16]
 80107d8:	2100      	movs	r1, #0
 80107da:	68f8      	ldr	r0, [r7, #12]
 80107dc:	f7ff fd56 	bl	801028c <xTimerGenericCommand>
 80107e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d10c      	bne.n	8010802 <prvSwitchTimerLists+0x9e>
	__asm volatile
 80107e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107ec:	b672      	cpsid	i
 80107ee:	f383 8811 	msr	BASEPRI, r3
 80107f2:	f3bf 8f6f 	isb	sy
 80107f6:	f3bf 8f4f 	dsb	sy
 80107fa:	b662      	cpsie	i
 80107fc:	603b      	str	r3, [r7, #0]
}
 80107fe:	bf00      	nop
 8010800:	e7fe      	b.n	8010800 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010802:	4b09      	ldr	r3, [pc, #36]	; (8010828 <prvSwitchTimerLists+0xc4>)
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d1af      	bne.n	801076c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801080c:	4b06      	ldr	r3, [pc, #24]	; (8010828 <prvSwitchTimerLists+0xc4>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010812:	4b06      	ldr	r3, [pc, #24]	; (801082c <prvSwitchTimerLists+0xc8>)
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	4a04      	ldr	r2, [pc, #16]	; (8010828 <prvSwitchTimerLists+0xc4>)
 8010818:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801081a:	4a04      	ldr	r2, [pc, #16]	; (801082c <prvSwitchTimerLists+0xc8>)
 801081c:	697b      	ldr	r3, [r7, #20]
 801081e:	6013      	str	r3, [r2, #0]
}
 8010820:	bf00      	nop
 8010822:	3718      	adds	r7, #24
 8010824:	46bd      	mov	sp, r7
 8010826:	bd80      	pop	{r7, pc}
 8010828:	20001b64 	.word	0x20001b64
 801082c:	20001b68 	.word	0x20001b68

08010830 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010830:	b580      	push	{r7, lr}
 8010832:	b082      	sub	sp, #8
 8010834:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010836:	f000 f949 	bl	8010acc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801083a:	4b15      	ldr	r3, [pc, #84]	; (8010890 <prvCheckForValidListAndQueue+0x60>)
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d120      	bne.n	8010884 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010842:	4814      	ldr	r0, [pc, #80]	; (8010894 <prvCheckForValidListAndQueue+0x64>)
 8010844:	f7fd fb80 	bl	800df48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010848:	4813      	ldr	r0, [pc, #76]	; (8010898 <prvCheckForValidListAndQueue+0x68>)
 801084a:	f7fd fb7d 	bl	800df48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801084e:	4b13      	ldr	r3, [pc, #76]	; (801089c <prvCheckForValidListAndQueue+0x6c>)
 8010850:	4a10      	ldr	r2, [pc, #64]	; (8010894 <prvCheckForValidListAndQueue+0x64>)
 8010852:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010854:	4b12      	ldr	r3, [pc, #72]	; (80108a0 <prvCheckForValidListAndQueue+0x70>)
 8010856:	4a10      	ldr	r2, [pc, #64]	; (8010898 <prvCheckForValidListAndQueue+0x68>)
 8010858:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801085a:	2300      	movs	r3, #0
 801085c:	9300      	str	r3, [sp, #0]
 801085e:	4b11      	ldr	r3, [pc, #68]	; (80108a4 <prvCheckForValidListAndQueue+0x74>)
 8010860:	4a11      	ldr	r2, [pc, #68]	; (80108a8 <prvCheckForValidListAndQueue+0x78>)
 8010862:	2110      	movs	r1, #16
 8010864:	200a      	movs	r0, #10
 8010866:	f7fd fc8d 	bl	800e184 <xQueueGenericCreateStatic>
 801086a:	4603      	mov	r3, r0
 801086c:	4a08      	ldr	r2, [pc, #32]	; (8010890 <prvCheckForValidListAndQueue+0x60>)
 801086e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010870:	4b07      	ldr	r3, [pc, #28]	; (8010890 <prvCheckForValidListAndQueue+0x60>)
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d005      	beq.n	8010884 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010878:	4b05      	ldr	r3, [pc, #20]	; (8010890 <prvCheckForValidListAndQueue+0x60>)
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	490b      	ldr	r1, [pc, #44]	; (80108ac <prvCheckForValidListAndQueue+0x7c>)
 801087e:	4618      	mov	r0, r3
 8010880:	f7fe fbe4 	bl	800f04c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010884:	f000 f956 	bl	8010b34 <vPortExitCritical>
}
 8010888:	bf00      	nop
 801088a:	46bd      	mov	sp, r7
 801088c:	bd80      	pop	{r7, pc}
 801088e:	bf00      	nop
 8010890:	20001b6c 	.word	0x20001b6c
 8010894:	20001b3c 	.word	0x20001b3c
 8010898:	20001b50 	.word	0x20001b50
 801089c:	20001b64 	.word	0x20001b64
 80108a0:	20001b68 	.word	0x20001b68
 80108a4:	20001c18 	.word	0x20001c18
 80108a8:	20001b78 	.word	0x20001b78
 80108ac:	08012004 	.word	0x08012004

080108b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80108b0:	b480      	push	{r7}
 80108b2:	b085      	sub	sp, #20
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	60f8      	str	r0, [r7, #12]
 80108b8:	60b9      	str	r1, [r7, #8]
 80108ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	3b04      	subs	r3, #4
 80108c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80108c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	3b04      	subs	r3, #4
 80108ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80108d0:	68bb      	ldr	r3, [r7, #8]
 80108d2:	f023 0201 	bic.w	r2, r3, #1
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	3b04      	subs	r3, #4
 80108de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80108e0:	4a0c      	ldr	r2, [pc, #48]	; (8010914 <pxPortInitialiseStack+0x64>)
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	3b14      	subs	r3, #20
 80108ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80108ec:	687a      	ldr	r2, [r7, #4]
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	3b04      	subs	r3, #4
 80108f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	f06f 0202 	mvn.w	r2, #2
 80108fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	3b20      	subs	r3, #32
 8010904:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010906:	68fb      	ldr	r3, [r7, #12]
}
 8010908:	4618      	mov	r0, r3
 801090a:	3714      	adds	r7, #20
 801090c:	46bd      	mov	sp, r7
 801090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010912:	4770      	bx	lr
 8010914:	08010919 	.word	0x08010919

08010918 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010918:	b480      	push	{r7}
 801091a:	b085      	sub	sp, #20
 801091c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801091e:	2300      	movs	r3, #0
 8010920:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010922:	4b14      	ldr	r3, [pc, #80]	; (8010974 <prvTaskExitError+0x5c>)
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	f1b3 3fff 	cmp.w	r3, #4294967295
 801092a:	d00c      	beq.n	8010946 <prvTaskExitError+0x2e>
	__asm volatile
 801092c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010930:	b672      	cpsid	i
 8010932:	f383 8811 	msr	BASEPRI, r3
 8010936:	f3bf 8f6f 	isb	sy
 801093a:	f3bf 8f4f 	dsb	sy
 801093e:	b662      	cpsie	i
 8010940:	60fb      	str	r3, [r7, #12]
}
 8010942:	bf00      	nop
 8010944:	e7fe      	b.n	8010944 <prvTaskExitError+0x2c>
	__asm volatile
 8010946:	f04f 0350 	mov.w	r3, #80	; 0x50
 801094a:	b672      	cpsid	i
 801094c:	f383 8811 	msr	BASEPRI, r3
 8010950:	f3bf 8f6f 	isb	sy
 8010954:	f3bf 8f4f 	dsb	sy
 8010958:	b662      	cpsie	i
 801095a:	60bb      	str	r3, [r7, #8]
}
 801095c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801095e:	bf00      	nop
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d0fc      	beq.n	8010960 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010966:	bf00      	nop
 8010968:	bf00      	nop
 801096a:	3714      	adds	r7, #20
 801096c:	46bd      	mov	sp, r7
 801096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010972:	4770      	bx	lr
 8010974:	20000118 	.word	0x20000118
	...

08010980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010980:	4b07      	ldr	r3, [pc, #28]	; (80109a0 <pxCurrentTCBConst2>)
 8010982:	6819      	ldr	r1, [r3, #0]
 8010984:	6808      	ldr	r0, [r1, #0]
 8010986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801098a:	f380 8809 	msr	PSP, r0
 801098e:	f3bf 8f6f 	isb	sy
 8010992:	f04f 0000 	mov.w	r0, #0
 8010996:	f380 8811 	msr	BASEPRI, r0
 801099a:	4770      	bx	lr
 801099c:	f3af 8000 	nop.w

080109a0 <pxCurrentTCBConst2>:
 80109a0:	2000163c 	.word	0x2000163c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80109a4:	bf00      	nop
 80109a6:	bf00      	nop

080109a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80109a8:	4808      	ldr	r0, [pc, #32]	; (80109cc <prvPortStartFirstTask+0x24>)
 80109aa:	6800      	ldr	r0, [r0, #0]
 80109ac:	6800      	ldr	r0, [r0, #0]
 80109ae:	f380 8808 	msr	MSP, r0
 80109b2:	f04f 0000 	mov.w	r0, #0
 80109b6:	f380 8814 	msr	CONTROL, r0
 80109ba:	b662      	cpsie	i
 80109bc:	b661      	cpsie	f
 80109be:	f3bf 8f4f 	dsb	sy
 80109c2:	f3bf 8f6f 	isb	sy
 80109c6:	df00      	svc	0
 80109c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80109ca:	bf00      	nop
 80109cc:	e000ed08 	.word	0xe000ed08

080109d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b084      	sub	sp, #16
 80109d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80109d6:	4b37      	ldr	r3, [pc, #220]	; (8010ab4 <xPortStartScheduler+0xe4>)
 80109d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	781b      	ldrb	r3, [r3, #0]
 80109de:	b2db      	uxtb	r3, r3
 80109e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	22ff      	movs	r2, #255	; 0xff
 80109e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	781b      	ldrb	r3, [r3, #0]
 80109ec:	b2db      	uxtb	r3, r3
 80109ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80109f0:	78fb      	ldrb	r3, [r7, #3]
 80109f2:	b2db      	uxtb	r3, r3
 80109f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80109f8:	b2da      	uxtb	r2, r3
 80109fa:	4b2f      	ldr	r3, [pc, #188]	; (8010ab8 <xPortStartScheduler+0xe8>)
 80109fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80109fe:	4b2f      	ldr	r3, [pc, #188]	; (8010abc <xPortStartScheduler+0xec>)
 8010a00:	2207      	movs	r2, #7
 8010a02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010a04:	e009      	b.n	8010a1a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010a06:	4b2d      	ldr	r3, [pc, #180]	; (8010abc <xPortStartScheduler+0xec>)
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	3b01      	subs	r3, #1
 8010a0c:	4a2b      	ldr	r2, [pc, #172]	; (8010abc <xPortStartScheduler+0xec>)
 8010a0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010a10:	78fb      	ldrb	r3, [r7, #3]
 8010a12:	b2db      	uxtb	r3, r3
 8010a14:	005b      	lsls	r3, r3, #1
 8010a16:	b2db      	uxtb	r3, r3
 8010a18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010a1a:	78fb      	ldrb	r3, [r7, #3]
 8010a1c:	b2db      	uxtb	r3, r3
 8010a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a22:	2b80      	cmp	r3, #128	; 0x80
 8010a24:	d0ef      	beq.n	8010a06 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010a26:	4b25      	ldr	r3, [pc, #148]	; (8010abc <xPortStartScheduler+0xec>)
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	f1c3 0307 	rsb	r3, r3, #7
 8010a2e:	2b04      	cmp	r3, #4
 8010a30:	d00c      	beq.n	8010a4c <xPortStartScheduler+0x7c>
	__asm volatile
 8010a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a36:	b672      	cpsid	i
 8010a38:	f383 8811 	msr	BASEPRI, r3
 8010a3c:	f3bf 8f6f 	isb	sy
 8010a40:	f3bf 8f4f 	dsb	sy
 8010a44:	b662      	cpsie	i
 8010a46:	60bb      	str	r3, [r7, #8]
}
 8010a48:	bf00      	nop
 8010a4a:	e7fe      	b.n	8010a4a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010a4c:	4b1b      	ldr	r3, [pc, #108]	; (8010abc <xPortStartScheduler+0xec>)
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	021b      	lsls	r3, r3, #8
 8010a52:	4a1a      	ldr	r2, [pc, #104]	; (8010abc <xPortStartScheduler+0xec>)
 8010a54:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010a56:	4b19      	ldr	r3, [pc, #100]	; (8010abc <xPortStartScheduler+0xec>)
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010a5e:	4a17      	ldr	r2, [pc, #92]	; (8010abc <xPortStartScheduler+0xec>)
 8010a60:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	b2da      	uxtb	r2, r3
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010a6a:	4b15      	ldr	r3, [pc, #84]	; (8010ac0 <xPortStartScheduler+0xf0>)
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	4a14      	ldr	r2, [pc, #80]	; (8010ac0 <xPortStartScheduler+0xf0>)
 8010a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010a74:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010a76:	4b12      	ldr	r3, [pc, #72]	; (8010ac0 <xPortStartScheduler+0xf0>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	4a11      	ldr	r2, [pc, #68]	; (8010ac0 <xPortStartScheduler+0xf0>)
 8010a7c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010a80:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010a82:	f000 f8dd 	bl	8010c40 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010a86:	4b0f      	ldr	r3, [pc, #60]	; (8010ac4 <xPortStartScheduler+0xf4>)
 8010a88:	2200      	movs	r2, #0
 8010a8a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010a8c:	f000 f8fc 	bl	8010c88 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010a90:	4b0d      	ldr	r3, [pc, #52]	; (8010ac8 <xPortStartScheduler+0xf8>)
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	4a0c      	ldr	r2, [pc, #48]	; (8010ac8 <xPortStartScheduler+0xf8>)
 8010a96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010a9a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010a9c:	f7ff ff84 	bl	80109a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010aa0:	f7fe ff40 	bl	800f924 <vTaskSwitchContext>
	prvTaskExitError();
 8010aa4:	f7ff ff38 	bl	8010918 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010aa8:	2300      	movs	r3, #0
}
 8010aaa:	4618      	mov	r0, r3
 8010aac:	3710      	adds	r7, #16
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	bd80      	pop	{r7, pc}
 8010ab2:	bf00      	nop
 8010ab4:	e000e400 	.word	0xe000e400
 8010ab8:	20001c68 	.word	0x20001c68
 8010abc:	20001c6c 	.word	0x20001c6c
 8010ac0:	e000ed20 	.word	0xe000ed20
 8010ac4:	20000118 	.word	0x20000118
 8010ac8:	e000ef34 	.word	0xe000ef34

08010acc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010acc:	b480      	push	{r7}
 8010ace:	b083      	sub	sp, #12
 8010ad0:	af00      	add	r7, sp, #0
	__asm volatile
 8010ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ad6:	b672      	cpsid	i
 8010ad8:	f383 8811 	msr	BASEPRI, r3
 8010adc:	f3bf 8f6f 	isb	sy
 8010ae0:	f3bf 8f4f 	dsb	sy
 8010ae4:	b662      	cpsie	i
 8010ae6:	607b      	str	r3, [r7, #4]
}
 8010ae8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010aea:	4b10      	ldr	r3, [pc, #64]	; (8010b2c <vPortEnterCritical+0x60>)
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	3301      	adds	r3, #1
 8010af0:	4a0e      	ldr	r2, [pc, #56]	; (8010b2c <vPortEnterCritical+0x60>)
 8010af2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010af4:	4b0d      	ldr	r3, [pc, #52]	; (8010b2c <vPortEnterCritical+0x60>)
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	2b01      	cmp	r3, #1
 8010afa:	d111      	bne.n	8010b20 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010afc:	4b0c      	ldr	r3, [pc, #48]	; (8010b30 <vPortEnterCritical+0x64>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	b2db      	uxtb	r3, r3
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d00c      	beq.n	8010b20 <vPortEnterCritical+0x54>
	__asm volatile
 8010b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b0a:	b672      	cpsid	i
 8010b0c:	f383 8811 	msr	BASEPRI, r3
 8010b10:	f3bf 8f6f 	isb	sy
 8010b14:	f3bf 8f4f 	dsb	sy
 8010b18:	b662      	cpsie	i
 8010b1a:	603b      	str	r3, [r7, #0]
}
 8010b1c:	bf00      	nop
 8010b1e:	e7fe      	b.n	8010b1e <vPortEnterCritical+0x52>
	}
}
 8010b20:	bf00      	nop
 8010b22:	370c      	adds	r7, #12
 8010b24:	46bd      	mov	sp, r7
 8010b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2a:	4770      	bx	lr
 8010b2c:	20000118 	.word	0x20000118
 8010b30:	e000ed04 	.word	0xe000ed04

08010b34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010b34:	b480      	push	{r7}
 8010b36:	b083      	sub	sp, #12
 8010b38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010b3a:	4b13      	ldr	r3, [pc, #76]	; (8010b88 <vPortExitCritical+0x54>)
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d10c      	bne.n	8010b5c <vPortExitCritical+0x28>
	__asm volatile
 8010b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b46:	b672      	cpsid	i
 8010b48:	f383 8811 	msr	BASEPRI, r3
 8010b4c:	f3bf 8f6f 	isb	sy
 8010b50:	f3bf 8f4f 	dsb	sy
 8010b54:	b662      	cpsie	i
 8010b56:	607b      	str	r3, [r7, #4]
}
 8010b58:	bf00      	nop
 8010b5a:	e7fe      	b.n	8010b5a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8010b5c:	4b0a      	ldr	r3, [pc, #40]	; (8010b88 <vPortExitCritical+0x54>)
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	3b01      	subs	r3, #1
 8010b62:	4a09      	ldr	r2, [pc, #36]	; (8010b88 <vPortExitCritical+0x54>)
 8010b64:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010b66:	4b08      	ldr	r3, [pc, #32]	; (8010b88 <vPortExitCritical+0x54>)
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d105      	bne.n	8010b7a <vPortExitCritical+0x46>
 8010b6e:	2300      	movs	r3, #0
 8010b70:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010b72:	683b      	ldr	r3, [r7, #0]
 8010b74:	f383 8811 	msr	BASEPRI, r3
}
 8010b78:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010b7a:	bf00      	nop
 8010b7c:	370c      	adds	r7, #12
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b84:	4770      	bx	lr
 8010b86:	bf00      	nop
 8010b88:	20000118 	.word	0x20000118
 8010b8c:	00000000 	.word	0x00000000

08010b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010b90:	f3ef 8009 	mrs	r0, PSP
 8010b94:	f3bf 8f6f 	isb	sy
 8010b98:	4b15      	ldr	r3, [pc, #84]	; (8010bf0 <pxCurrentTCBConst>)
 8010b9a:	681a      	ldr	r2, [r3, #0]
 8010b9c:	f01e 0f10 	tst.w	lr, #16
 8010ba0:	bf08      	it	eq
 8010ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010baa:	6010      	str	r0, [r2, #0]
 8010bac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010bb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010bb4:	b672      	cpsid	i
 8010bb6:	f380 8811 	msr	BASEPRI, r0
 8010bba:	f3bf 8f4f 	dsb	sy
 8010bbe:	f3bf 8f6f 	isb	sy
 8010bc2:	b662      	cpsie	i
 8010bc4:	f7fe feae 	bl	800f924 <vTaskSwitchContext>
 8010bc8:	f04f 0000 	mov.w	r0, #0
 8010bcc:	f380 8811 	msr	BASEPRI, r0
 8010bd0:	bc09      	pop	{r0, r3}
 8010bd2:	6819      	ldr	r1, [r3, #0]
 8010bd4:	6808      	ldr	r0, [r1, #0]
 8010bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bda:	f01e 0f10 	tst.w	lr, #16
 8010bde:	bf08      	it	eq
 8010be0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010be4:	f380 8809 	msr	PSP, r0
 8010be8:	f3bf 8f6f 	isb	sy
 8010bec:	4770      	bx	lr
 8010bee:	bf00      	nop

08010bf0 <pxCurrentTCBConst>:
 8010bf0:	2000163c 	.word	0x2000163c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010bf4:	bf00      	nop
 8010bf6:	bf00      	nop

08010bf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b082      	sub	sp, #8
 8010bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8010bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c02:	b672      	cpsid	i
 8010c04:	f383 8811 	msr	BASEPRI, r3
 8010c08:	f3bf 8f6f 	isb	sy
 8010c0c:	f3bf 8f4f 	dsb	sy
 8010c10:	b662      	cpsie	i
 8010c12:	607b      	str	r3, [r7, #4]
}
 8010c14:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010c16:	f7fe fdc9 	bl	800f7ac <xTaskIncrementTick>
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d003      	beq.n	8010c28 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010c20:	4b06      	ldr	r3, [pc, #24]	; (8010c3c <SysTick_Handler+0x44>)
 8010c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c26:	601a      	str	r2, [r3, #0]
 8010c28:	2300      	movs	r3, #0
 8010c2a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010c2c:	683b      	ldr	r3, [r7, #0]
 8010c2e:	f383 8811 	msr	BASEPRI, r3
}
 8010c32:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010c34:	bf00      	nop
 8010c36:	3708      	adds	r7, #8
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	bd80      	pop	{r7, pc}
 8010c3c:	e000ed04 	.word	0xe000ed04

08010c40 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010c40:	b480      	push	{r7}
 8010c42:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010c44:	4b0b      	ldr	r3, [pc, #44]	; (8010c74 <vPortSetupTimerInterrupt+0x34>)
 8010c46:	2200      	movs	r2, #0
 8010c48:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010c4a:	4b0b      	ldr	r3, [pc, #44]	; (8010c78 <vPortSetupTimerInterrupt+0x38>)
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010c50:	4b0a      	ldr	r3, [pc, #40]	; (8010c7c <vPortSetupTimerInterrupt+0x3c>)
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	4a0a      	ldr	r2, [pc, #40]	; (8010c80 <vPortSetupTimerInterrupt+0x40>)
 8010c56:	fba2 2303 	umull	r2, r3, r2, r3
 8010c5a:	099b      	lsrs	r3, r3, #6
 8010c5c:	4a09      	ldr	r2, [pc, #36]	; (8010c84 <vPortSetupTimerInterrupt+0x44>)
 8010c5e:	3b01      	subs	r3, #1
 8010c60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010c62:	4b04      	ldr	r3, [pc, #16]	; (8010c74 <vPortSetupTimerInterrupt+0x34>)
 8010c64:	2207      	movs	r2, #7
 8010c66:	601a      	str	r2, [r3, #0]
}
 8010c68:	bf00      	nop
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c70:	4770      	bx	lr
 8010c72:	bf00      	nop
 8010c74:	e000e010 	.word	0xe000e010
 8010c78:	e000e018 	.word	0xe000e018
 8010c7c:	20000000 	.word	0x20000000
 8010c80:	10624dd3 	.word	0x10624dd3
 8010c84:	e000e014 	.word	0xe000e014

08010c88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010c88:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010c98 <vPortEnableVFP+0x10>
 8010c8c:	6801      	ldr	r1, [r0, #0]
 8010c8e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010c92:	6001      	str	r1, [r0, #0]
 8010c94:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010c96:	bf00      	nop
 8010c98:	e000ed88 	.word	0xe000ed88

08010c9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010c9c:	b480      	push	{r7}
 8010c9e:	b085      	sub	sp, #20
 8010ca0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010ca2:	f3ef 8305 	mrs	r3, IPSR
 8010ca6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	2b0f      	cmp	r3, #15
 8010cac:	d916      	bls.n	8010cdc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010cae:	4a19      	ldr	r2, [pc, #100]	; (8010d14 <vPortValidateInterruptPriority+0x78>)
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	4413      	add	r3, r2
 8010cb4:	781b      	ldrb	r3, [r3, #0]
 8010cb6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010cb8:	4b17      	ldr	r3, [pc, #92]	; (8010d18 <vPortValidateInterruptPriority+0x7c>)
 8010cba:	781b      	ldrb	r3, [r3, #0]
 8010cbc:	7afa      	ldrb	r2, [r7, #11]
 8010cbe:	429a      	cmp	r2, r3
 8010cc0:	d20c      	bcs.n	8010cdc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8010cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cc6:	b672      	cpsid	i
 8010cc8:	f383 8811 	msr	BASEPRI, r3
 8010ccc:	f3bf 8f6f 	isb	sy
 8010cd0:	f3bf 8f4f 	dsb	sy
 8010cd4:	b662      	cpsie	i
 8010cd6:	607b      	str	r3, [r7, #4]
}
 8010cd8:	bf00      	nop
 8010cda:	e7fe      	b.n	8010cda <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010cdc:	4b0f      	ldr	r3, [pc, #60]	; (8010d1c <vPortValidateInterruptPriority+0x80>)
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010ce4:	4b0e      	ldr	r3, [pc, #56]	; (8010d20 <vPortValidateInterruptPriority+0x84>)
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	429a      	cmp	r2, r3
 8010cea:	d90c      	bls.n	8010d06 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8010cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cf0:	b672      	cpsid	i
 8010cf2:	f383 8811 	msr	BASEPRI, r3
 8010cf6:	f3bf 8f6f 	isb	sy
 8010cfa:	f3bf 8f4f 	dsb	sy
 8010cfe:	b662      	cpsie	i
 8010d00:	603b      	str	r3, [r7, #0]
}
 8010d02:	bf00      	nop
 8010d04:	e7fe      	b.n	8010d04 <vPortValidateInterruptPriority+0x68>
	}
 8010d06:	bf00      	nop
 8010d08:	3714      	adds	r7, #20
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d10:	4770      	bx	lr
 8010d12:	bf00      	nop
 8010d14:	e000e3f0 	.word	0xe000e3f0
 8010d18:	20001c68 	.word	0x20001c68
 8010d1c:	e000ed0c 	.word	0xe000ed0c
 8010d20:	20001c6c 	.word	0x20001c6c

08010d24 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b08a      	sub	sp, #40	; 0x28
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010d30:	f7fe fc7e 	bl	800f630 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010d34:	4b5b      	ldr	r3, [pc, #364]	; (8010ea4 <pvPortMalloc+0x180>)
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d101      	bne.n	8010d40 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010d3c:	f000 f91a 	bl	8010f74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010d40:	4b59      	ldr	r3, [pc, #356]	; (8010ea8 <pvPortMalloc+0x184>)
 8010d42:	681a      	ldr	r2, [r3, #0]
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	4013      	ands	r3, r2
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	f040 8092 	bne.w	8010e72 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d01f      	beq.n	8010d94 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8010d54:	2208      	movs	r2, #8
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	4413      	add	r3, r2
 8010d5a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	f003 0307 	and.w	r3, r3, #7
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d016      	beq.n	8010d94 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	f023 0307 	bic.w	r3, r3, #7
 8010d6c:	3308      	adds	r3, #8
 8010d6e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	f003 0307 	and.w	r3, r3, #7
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d00c      	beq.n	8010d94 <pvPortMalloc+0x70>
	__asm volatile
 8010d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d7e:	b672      	cpsid	i
 8010d80:	f383 8811 	msr	BASEPRI, r3
 8010d84:	f3bf 8f6f 	isb	sy
 8010d88:	f3bf 8f4f 	dsb	sy
 8010d8c:	b662      	cpsie	i
 8010d8e:	617b      	str	r3, [r7, #20]
}
 8010d90:	bf00      	nop
 8010d92:	e7fe      	b.n	8010d92 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d06b      	beq.n	8010e72 <pvPortMalloc+0x14e>
 8010d9a:	4b44      	ldr	r3, [pc, #272]	; (8010eac <pvPortMalloc+0x188>)
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	687a      	ldr	r2, [r7, #4]
 8010da0:	429a      	cmp	r2, r3
 8010da2:	d866      	bhi.n	8010e72 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010da4:	4b42      	ldr	r3, [pc, #264]	; (8010eb0 <pvPortMalloc+0x18c>)
 8010da6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010da8:	4b41      	ldr	r3, [pc, #260]	; (8010eb0 <pvPortMalloc+0x18c>)
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010dae:	e004      	b.n	8010dba <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8010db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010db2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dbc:	685b      	ldr	r3, [r3, #4]
 8010dbe:	687a      	ldr	r2, [r7, #4]
 8010dc0:	429a      	cmp	r2, r3
 8010dc2:	d903      	bls.n	8010dcc <pvPortMalloc+0xa8>
 8010dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d1f1      	bne.n	8010db0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010dcc:	4b35      	ldr	r3, [pc, #212]	; (8010ea4 <pvPortMalloc+0x180>)
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010dd2:	429a      	cmp	r2, r3
 8010dd4:	d04d      	beq.n	8010e72 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010dd6:	6a3b      	ldr	r3, [r7, #32]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	2208      	movs	r2, #8
 8010ddc:	4413      	add	r3, r2
 8010dde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010de2:	681a      	ldr	r2, [r3, #0]
 8010de4:	6a3b      	ldr	r3, [r7, #32]
 8010de6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dea:	685a      	ldr	r2, [r3, #4]
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	1ad2      	subs	r2, r2, r3
 8010df0:	2308      	movs	r3, #8
 8010df2:	005b      	lsls	r3, r3, #1
 8010df4:	429a      	cmp	r2, r3
 8010df6:	d921      	bls.n	8010e3c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	4413      	add	r3, r2
 8010dfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010e00:	69bb      	ldr	r3, [r7, #24]
 8010e02:	f003 0307 	and.w	r3, r3, #7
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d00c      	beq.n	8010e24 <pvPortMalloc+0x100>
	__asm volatile
 8010e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e0e:	b672      	cpsid	i
 8010e10:	f383 8811 	msr	BASEPRI, r3
 8010e14:	f3bf 8f6f 	isb	sy
 8010e18:	f3bf 8f4f 	dsb	sy
 8010e1c:	b662      	cpsie	i
 8010e1e:	613b      	str	r3, [r7, #16]
}
 8010e20:	bf00      	nop
 8010e22:	e7fe      	b.n	8010e22 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e26:	685a      	ldr	r2, [r3, #4]
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	1ad2      	subs	r2, r2, r3
 8010e2c:	69bb      	ldr	r3, [r7, #24]
 8010e2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e32:	687a      	ldr	r2, [r7, #4]
 8010e34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010e36:	69b8      	ldr	r0, [r7, #24]
 8010e38:	f000 f8fe 	bl	8011038 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010e3c:	4b1b      	ldr	r3, [pc, #108]	; (8010eac <pvPortMalloc+0x188>)
 8010e3e:	681a      	ldr	r2, [r3, #0]
 8010e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e42:	685b      	ldr	r3, [r3, #4]
 8010e44:	1ad3      	subs	r3, r2, r3
 8010e46:	4a19      	ldr	r2, [pc, #100]	; (8010eac <pvPortMalloc+0x188>)
 8010e48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010e4a:	4b18      	ldr	r3, [pc, #96]	; (8010eac <pvPortMalloc+0x188>)
 8010e4c:	681a      	ldr	r2, [r3, #0]
 8010e4e:	4b19      	ldr	r3, [pc, #100]	; (8010eb4 <pvPortMalloc+0x190>)
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	429a      	cmp	r2, r3
 8010e54:	d203      	bcs.n	8010e5e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010e56:	4b15      	ldr	r3, [pc, #84]	; (8010eac <pvPortMalloc+0x188>)
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	4a16      	ldr	r2, [pc, #88]	; (8010eb4 <pvPortMalloc+0x190>)
 8010e5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e60:	685a      	ldr	r2, [r3, #4]
 8010e62:	4b11      	ldr	r3, [pc, #68]	; (8010ea8 <pvPortMalloc+0x184>)
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	431a      	orrs	r2, r3
 8010e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e6e:	2200      	movs	r2, #0
 8010e70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010e72:	f7fe fbeb 	bl	800f64c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010e76:	69fb      	ldr	r3, [r7, #28]
 8010e78:	f003 0307 	and.w	r3, r3, #7
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d00c      	beq.n	8010e9a <pvPortMalloc+0x176>
	__asm volatile
 8010e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e84:	b672      	cpsid	i
 8010e86:	f383 8811 	msr	BASEPRI, r3
 8010e8a:	f3bf 8f6f 	isb	sy
 8010e8e:	f3bf 8f4f 	dsb	sy
 8010e92:	b662      	cpsie	i
 8010e94:	60fb      	str	r3, [r7, #12]
}
 8010e96:	bf00      	nop
 8010e98:	e7fe      	b.n	8010e98 <pvPortMalloc+0x174>
	return pvReturn;
 8010e9a:	69fb      	ldr	r3, [r7, #28]
}
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	3728      	adds	r7, #40	; 0x28
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	bd80      	pop	{r7, pc}
 8010ea4:	20005878 	.word	0x20005878
 8010ea8:	20005884 	.word	0x20005884
 8010eac:	2000587c 	.word	0x2000587c
 8010eb0:	20005870 	.word	0x20005870
 8010eb4:	20005880 	.word	0x20005880

08010eb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b086      	sub	sp, #24
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d04c      	beq.n	8010f64 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010eca:	2308      	movs	r3, #8
 8010ecc:	425b      	negs	r3, r3
 8010ece:	697a      	ldr	r2, [r7, #20]
 8010ed0:	4413      	add	r3, r2
 8010ed2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010ed4:	697b      	ldr	r3, [r7, #20]
 8010ed6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010ed8:	693b      	ldr	r3, [r7, #16]
 8010eda:	685a      	ldr	r2, [r3, #4]
 8010edc:	4b23      	ldr	r3, [pc, #140]	; (8010f6c <vPortFree+0xb4>)
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	4013      	ands	r3, r2
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d10c      	bne.n	8010f00 <vPortFree+0x48>
	__asm volatile
 8010ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eea:	b672      	cpsid	i
 8010eec:	f383 8811 	msr	BASEPRI, r3
 8010ef0:	f3bf 8f6f 	isb	sy
 8010ef4:	f3bf 8f4f 	dsb	sy
 8010ef8:	b662      	cpsie	i
 8010efa:	60fb      	str	r3, [r7, #12]
}
 8010efc:	bf00      	nop
 8010efe:	e7fe      	b.n	8010efe <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010f00:	693b      	ldr	r3, [r7, #16]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d00c      	beq.n	8010f22 <vPortFree+0x6a>
	__asm volatile
 8010f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f0c:	b672      	cpsid	i
 8010f0e:	f383 8811 	msr	BASEPRI, r3
 8010f12:	f3bf 8f6f 	isb	sy
 8010f16:	f3bf 8f4f 	dsb	sy
 8010f1a:	b662      	cpsie	i
 8010f1c:	60bb      	str	r3, [r7, #8]
}
 8010f1e:	bf00      	nop
 8010f20:	e7fe      	b.n	8010f20 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010f22:	693b      	ldr	r3, [r7, #16]
 8010f24:	685a      	ldr	r2, [r3, #4]
 8010f26:	4b11      	ldr	r3, [pc, #68]	; (8010f6c <vPortFree+0xb4>)
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	4013      	ands	r3, r2
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d019      	beq.n	8010f64 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010f30:	693b      	ldr	r3, [r7, #16]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d115      	bne.n	8010f64 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010f38:	693b      	ldr	r3, [r7, #16]
 8010f3a:	685a      	ldr	r2, [r3, #4]
 8010f3c:	4b0b      	ldr	r3, [pc, #44]	; (8010f6c <vPortFree+0xb4>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	43db      	mvns	r3, r3
 8010f42:	401a      	ands	r2, r3
 8010f44:	693b      	ldr	r3, [r7, #16]
 8010f46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010f48:	f7fe fb72 	bl	800f630 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010f4c:	693b      	ldr	r3, [r7, #16]
 8010f4e:	685a      	ldr	r2, [r3, #4]
 8010f50:	4b07      	ldr	r3, [pc, #28]	; (8010f70 <vPortFree+0xb8>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	4413      	add	r3, r2
 8010f56:	4a06      	ldr	r2, [pc, #24]	; (8010f70 <vPortFree+0xb8>)
 8010f58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010f5a:	6938      	ldr	r0, [r7, #16]
 8010f5c:	f000 f86c 	bl	8011038 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010f60:	f7fe fb74 	bl	800f64c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010f64:	bf00      	nop
 8010f66:	3718      	adds	r7, #24
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	bd80      	pop	{r7, pc}
 8010f6c:	20005884 	.word	0x20005884
 8010f70:	2000587c 	.word	0x2000587c

08010f74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010f74:	b480      	push	{r7}
 8010f76:	b085      	sub	sp, #20
 8010f78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010f7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8010f7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010f80:	4b27      	ldr	r3, [pc, #156]	; (8011020 <prvHeapInit+0xac>)
 8010f82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	f003 0307 	and.w	r3, r3, #7
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d00c      	beq.n	8010fa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	3307      	adds	r3, #7
 8010f92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	f023 0307 	bic.w	r3, r3, #7
 8010f9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010f9c:	68ba      	ldr	r2, [r7, #8]
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	1ad3      	subs	r3, r2, r3
 8010fa2:	4a1f      	ldr	r2, [pc, #124]	; (8011020 <prvHeapInit+0xac>)
 8010fa4:	4413      	add	r3, r2
 8010fa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010fac:	4a1d      	ldr	r2, [pc, #116]	; (8011024 <prvHeapInit+0xb0>)
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010fb2:	4b1c      	ldr	r3, [pc, #112]	; (8011024 <prvHeapInit+0xb0>)
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	68ba      	ldr	r2, [r7, #8]
 8010fbc:	4413      	add	r3, r2
 8010fbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010fc0:	2208      	movs	r2, #8
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	1a9b      	subs	r3, r3, r2
 8010fc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	f023 0307 	bic.w	r3, r3, #7
 8010fce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	4a15      	ldr	r2, [pc, #84]	; (8011028 <prvHeapInit+0xb4>)
 8010fd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010fd6:	4b14      	ldr	r3, [pc, #80]	; (8011028 <prvHeapInit+0xb4>)
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	2200      	movs	r2, #0
 8010fdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010fde:	4b12      	ldr	r3, [pc, #72]	; (8011028 <prvHeapInit+0xb4>)
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	68fa      	ldr	r2, [r7, #12]
 8010fee:	1ad2      	subs	r2, r2, r3
 8010ff0:	683b      	ldr	r3, [r7, #0]
 8010ff2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010ff4:	4b0c      	ldr	r3, [pc, #48]	; (8011028 <prvHeapInit+0xb4>)
 8010ff6:	681a      	ldr	r2, [r3, #0]
 8010ff8:	683b      	ldr	r3, [r7, #0]
 8010ffa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010ffc:	683b      	ldr	r3, [r7, #0]
 8010ffe:	685b      	ldr	r3, [r3, #4]
 8011000:	4a0a      	ldr	r2, [pc, #40]	; (801102c <prvHeapInit+0xb8>)
 8011002:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011004:	683b      	ldr	r3, [r7, #0]
 8011006:	685b      	ldr	r3, [r3, #4]
 8011008:	4a09      	ldr	r2, [pc, #36]	; (8011030 <prvHeapInit+0xbc>)
 801100a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801100c:	4b09      	ldr	r3, [pc, #36]	; (8011034 <prvHeapInit+0xc0>)
 801100e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011012:	601a      	str	r2, [r3, #0]
}
 8011014:	bf00      	nop
 8011016:	3714      	adds	r7, #20
 8011018:	46bd      	mov	sp, r7
 801101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101e:	4770      	bx	lr
 8011020:	20001c70 	.word	0x20001c70
 8011024:	20005870 	.word	0x20005870
 8011028:	20005878 	.word	0x20005878
 801102c:	20005880 	.word	0x20005880
 8011030:	2000587c 	.word	0x2000587c
 8011034:	20005884 	.word	0x20005884

08011038 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011038:	b480      	push	{r7}
 801103a:	b085      	sub	sp, #20
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011040:	4b28      	ldr	r3, [pc, #160]	; (80110e4 <prvInsertBlockIntoFreeList+0xac>)
 8011042:	60fb      	str	r3, [r7, #12]
 8011044:	e002      	b.n	801104c <prvInsertBlockIntoFreeList+0x14>
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	60fb      	str	r3, [r7, #12]
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	687a      	ldr	r2, [r7, #4]
 8011052:	429a      	cmp	r2, r3
 8011054:	d8f7      	bhi.n	8011046 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	685b      	ldr	r3, [r3, #4]
 801105e:	68ba      	ldr	r2, [r7, #8]
 8011060:	4413      	add	r3, r2
 8011062:	687a      	ldr	r2, [r7, #4]
 8011064:	429a      	cmp	r2, r3
 8011066:	d108      	bne.n	801107a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	685a      	ldr	r2, [r3, #4]
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	685b      	ldr	r3, [r3, #4]
 8011070:	441a      	add	r2, r3
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	685b      	ldr	r3, [r3, #4]
 8011082:	68ba      	ldr	r2, [r7, #8]
 8011084:	441a      	add	r2, r3
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	429a      	cmp	r2, r3
 801108c:	d118      	bne.n	80110c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	681a      	ldr	r2, [r3, #0]
 8011092:	4b15      	ldr	r3, [pc, #84]	; (80110e8 <prvInsertBlockIntoFreeList+0xb0>)
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	429a      	cmp	r2, r3
 8011098:	d00d      	beq.n	80110b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	685a      	ldr	r2, [r3, #4]
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	685b      	ldr	r3, [r3, #4]
 80110a4:	441a      	add	r2, r3
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	681a      	ldr	r2, [r3, #0]
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	601a      	str	r2, [r3, #0]
 80110b4:	e008      	b.n	80110c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80110b6:	4b0c      	ldr	r3, [pc, #48]	; (80110e8 <prvInsertBlockIntoFreeList+0xb0>)
 80110b8:	681a      	ldr	r2, [r3, #0]
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	601a      	str	r2, [r3, #0]
 80110be:	e003      	b.n	80110c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	681a      	ldr	r2, [r3, #0]
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80110c8:	68fa      	ldr	r2, [r7, #12]
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	429a      	cmp	r2, r3
 80110ce:	d002      	beq.n	80110d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	687a      	ldr	r2, [r7, #4]
 80110d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80110d6:	bf00      	nop
 80110d8:	3714      	adds	r7, #20
 80110da:	46bd      	mov	sp, r7
 80110dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e0:	4770      	bx	lr
 80110e2:	bf00      	nop
 80110e4:	20005870 	.word	0x20005870
 80110e8:	20005878 	.word	0x20005878

080110ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80110f0:	2200      	movs	r2, #0
 80110f2:	4912      	ldr	r1, [pc, #72]	; (801113c <MX_USB_DEVICE_Init+0x50>)
 80110f4:	4812      	ldr	r0, [pc, #72]	; (8011140 <MX_USB_DEVICE_Init+0x54>)
 80110f6:	f7fa ffcb 	bl	800c090 <USBD_Init>
 80110fa:	4603      	mov	r3, r0
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d001      	beq.n	8011104 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011100:	f7ef ffb8 	bl	8001074 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011104:	490f      	ldr	r1, [pc, #60]	; (8011144 <MX_USB_DEVICE_Init+0x58>)
 8011106:	480e      	ldr	r0, [pc, #56]	; (8011140 <MX_USB_DEVICE_Init+0x54>)
 8011108:	f7fa fff2 	bl	800c0f0 <USBD_RegisterClass>
 801110c:	4603      	mov	r3, r0
 801110e:	2b00      	cmp	r3, #0
 8011110:	d001      	beq.n	8011116 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011112:	f7ef ffaf 	bl	8001074 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011116:	490c      	ldr	r1, [pc, #48]	; (8011148 <MX_USB_DEVICE_Init+0x5c>)
 8011118:	4809      	ldr	r0, [pc, #36]	; (8011140 <MX_USB_DEVICE_Init+0x54>)
 801111a:	f7fa fee9 	bl	800bef0 <USBD_CDC_RegisterInterface>
 801111e:	4603      	mov	r3, r0
 8011120:	2b00      	cmp	r3, #0
 8011122:	d001      	beq.n	8011128 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011124:	f7ef ffa6 	bl	8001074 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011128:	4805      	ldr	r0, [pc, #20]	; (8011140 <MX_USB_DEVICE_Init+0x54>)
 801112a:	f7fb f817 	bl	800c15c <USBD_Start>
 801112e:	4603      	mov	r3, r0
 8011130:	2b00      	cmp	r3, #0
 8011132:	d001      	beq.n	8011138 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011134:	f7ef ff9e 	bl	8001074 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011138:	bf00      	nop
 801113a:	bd80      	pop	{r7, pc}
 801113c:	20000130 	.word	0x20000130
 8011140:	20005888 	.word	0x20005888
 8011144:	20000098 	.word	0x20000098
 8011148:	2000011c 	.word	0x2000011c

0801114c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011150:	2200      	movs	r2, #0
 8011152:	4905      	ldr	r1, [pc, #20]	; (8011168 <CDC_Init_FS+0x1c>)
 8011154:	4805      	ldr	r0, [pc, #20]	; (801116c <CDC_Init_FS+0x20>)
 8011156:	f7fa fee5 	bl	800bf24 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801115a:	4905      	ldr	r1, [pc, #20]	; (8011170 <CDC_Init_FS+0x24>)
 801115c:	4803      	ldr	r0, [pc, #12]	; (801116c <CDC_Init_FS+0x20>)
 801115e:	f7fa ff03 	bl	800bf68 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011162:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011164:	4618      	mov	r0, r3
 8011166:	bd80      	pop	{r7, pc}
 8011168:	20006364 	.word	0x20006364
 801116c:	20005888 	.word	0x20005888
 8011170:	20005b64 	.word	0x20005b64

08011174 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011174:	b480      	push	{r7}
 8011176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011178:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801117a:	4618      	mov	r0, r3
 801117c:	46bd      	mov	sp, r7
 801117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011182:	4770      	bx	lr

08011184 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011184:	b480      	push	{r7}
 8011186:	b083      	sub	sp, #12
 8011188:	af00      	add	r7, sp, #0
 801118a:	4603      	mov	r3, r0
 801118c:	6039      	str	r1, [r7, #0]
 801118e:	71fb      	strb	r3, [r7, #7]
 8011190:	4613      	mov	r3, r2
 8011192:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011194:	79fb      	ldrb	r3, [r7, #7]
 8011196:	2b23      	cmp	r3, #35	; 0x23
 8011198:	d84a      	bhi.n	8011230 <CDC_Control_FS+0xac>
 801119a:	a201      	add	r2, pc, #4	; (adr r2, 80111a0 <CDC_Control_FS+0x1c>)
 801119c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111a0:	08011231 	.word	0x08011231
 80111a4:	08011231 	.word	0x08011231
 80111a8:	08011231 	.word	0x08011231
 80111ac:	08011231 	.word	0x08011231
 80111b0:	08011231 	.word	0x08011231
 80111b4:	08011231 	.word	0x08011231
 80111b8:	08011231 	.word	0x08011231
 80111bc:	08011231 	.word	0x08011231
 80111c0:	08011231 	.word	0x08011231
 80111c4:	08011231 	.word	0x08011231
 80111c8:	08011231 	.word	0x08011231
 80111cc:	08011231 	.word	0x08011231
 80111d0:	08011231 	.word	0x08011231
 80111d4:	08011231 	.word	0x08011231
 80111d8:	08011231 	.word	0x08011231
 80111dc:	08011231 	.word	0x08011231
 80111e0:	08011231 	.word	0x08011231
 80111e4:	08011231 	.word	0x08011231
 80111e8:	08011231 	.word	0x08011231
 80111ec:	08011231 	.word	0x08011231
 80111f0:	08011231 	.word	0x08011231
 80111f4:	08011231 	.word	0x08011231
 80111f8:	08011231 	.word	0x08011231
 80111fc:	08011231 	.word	0x08011231
 8011200:	08011231 	.word	0x08011231
 8011204:	08011231 	.word	0x08011231
 8011208:	08011231 	.word	0x08011231
 801120c:	08011231 	.word	0x08011231
 8011210:	08011231 	.word	0x08011231
 8011214:	08011231 	.word	0x08011231
 8011218:	08011231 	.word	0x08011231
 801121c:	08011231 	.word	0x08011231
 8011220:	08011231 	.word	0x08011231
 8011224:	08011231 	.word	0x08011231
 8011228:	08011231 	.word	0x08011231
 801122c:	08011231 	.word	0x08011231
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011230:	bf00      	nop
  }

  return (USBD_OK);
 8011232:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011234:	4618      	mov	r0, r3
 8011236:	370c      	adds	r7, #12
 8011238:	46bd      	mov	sp, r7
 801123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123e:	4770      	bx	lr

08011240 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b084      	sub	sp, #16
 8011244:	af00      	add	r7, sp, #0
 8011246:	6078      	str	r0, [r7, #4]
 8011248:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	MSGQ_obj msg;										//Local message object

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);			//Default two lines of receive code.
 801124a:	6879      	ldr	r1, [r7, #4]
 801124c:	4813      	ldr	r0, [pc, #76]	; (801129c <CDC_Receive_FS+0x5c>)
 801124e:	f7fa fe8b 	bl	800bf68 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011252:	4812      	ldr	r0, [pc, #72]	; (801129c <CDC_Receive_FS+0x5c>)
 8011254:	f7fa fee6 	bl	800c024 <USBD_CDC_ReceivePacket>

  uint8_t len = (uint8_t) *Len;
 8011258:	683b      	ldr	r3, [r7, #0]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	73fb      	strb	r3, [r7, #15]

  if( USB_MSGQ_Rx != NULL )
 801125e:	4b10      	ldr	r3, [pc, #64]	; (80112a0 <CDC_Receive_FS+0x60>)
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d015      	beq.n	8011292 <CDC_Receive_FS+0x52>
  	{
	  	memset (msg.Buf, '\0', HiL_MSGQ_Buf_arr_len);	//Clear msg-obj
 8011266:	f107 0308 	add.w	r3, r7, #8
 801126a:	2204      	movs	r2, #4
 801126c:	2100      	movs	r1, #0
 801126e:	4618      	mov	r0, r3
 8011270:	f000 fd2a 	bl	8011cc8 <memset>
  		memcpy (msg.Buf, Buf, len);						//Copy usb buffer to msg-obj
 8011274:	7bfa      	ldrb	r2, [r7, #15]
 8011276:	f107 0308 	add.w	r3, r7, #8
 801127a:	6879      	ldr	r1, [r7, #4]
 801127c:	4618      	mov	r0, r3
 801127e:	f000 fd15 	bl	8011cac <memcpy>
  		osMessageQueuePut(USB_MSGQ_Rx, &msg, 0U, 0U);	//Put object in queue, no timeout.
 8011282:	4b07      	ldr	r3, [pc, #28]	; (80112a0 <CDC_Receive_FS+0x60>)
 8011284:	6818      	ldr	r0, [r3, #0]
 8011286:	f107 0108 	add.w	r1, r7, #8
 801128a:	2300      	movs	r3, #0
 801128c:	2200      	movs	r2, #0
 801128e:	f7fc fd41 	bl	800dd14 <osMessageQueuePut>
  	}

  return (USBD_OK);
 8011292:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011294:	4618      	mov	r0, r3
 8011296:	3710      	adds	r7, #16
 8011298:	46bd      	mov	sp, r7
 801129a:	bd80      	pop	{r7, pc}
 801129c:	20005888 	.word	0x20005888
 80112a0:	20000784 	.word	0x20000784

080112a4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b084      	sub	sp, #16
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
 80112ac:	460b      	mov	r3, r1
 80112ae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80112b0:	2300      	movs	r3, #0
 80112b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80112b4:	4b0d      	ldr	r3, [pc, #52]	; (80112ec <CDC_Transmit_FS+0x48>)
 80112b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80112ba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80112bc:	68bb      	ldr	r3, [r7, #8]
 80112be:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d001      	beq.n	80112ca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80112c6:	2301      	movs	r3, #1
 80112c8:	e00b      	b.n	80112e2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80112ca:	887b      	ldrh	r3, [r7, #2]
 80112cc:	461a      	mov	r2, r3
 80112ce:	6879      	ldr	r1, [r7, #4]
 80112d0:	4806      	ldr	r0, [pc, #24]	; (80112ec <CDC_Transmit_FS+0x48>)
 80112d2:	f7fa fe27 	bl	800bf24 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80112d6:	4805      	ldr	r0, [pc, #20]	; (80112ec <CDC_Transmit_FS+0x48>)
 80112d8:	f7fa fe64 	bl	800bfa4 <USBD_CDC_TransmitPacket>
 80112dc:	4603      	mov	r3, r0
 80112de:	73fb      	strb	r3, [r7, #15]


  /* USER CODE END 7 */
  return result;
 80112e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80112e2:	4618      	mov	r0, r3
 80112e4:	3710      	adds	r7, #16
 80112e6:	46bd      	mov	sp, r7
 80112e8:	bd80      	pop	{r7, pc}
 80112ea:	bf00      	nop
 80112ec:	20005888 	.word	0x20005888

080112f0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80112f0:	b480      	push	{r7}
 80112f2:	b087      	sub	sp, #28
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	60f8      	str	r0, [r7, #12]
 80112f8:	60b9      	str	r1, [r7, #8]
 80112fa:	4613      	mov	r3, r2
 80112fc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80112fe:	2300      	movs	r3, #0
 8011300:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011302:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011306:	4618      	mov	r0, r3
 8011308:	371c      	adds	r7, #28
 801130a:	46bd      	mov	sp, r7
 801130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011310:	4770      	bx	lr
	...

08011314 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011314:	b480      	push	{r7}
 8011316:	b083      	sub	sp, #12
 8011318:	af00      	add	r7, sp, #0
 801131a:	4603      	mov	r3, r0
 801131c:	6039      	str	r1, [r7, #0]
 801131e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011320:	683b      	ldr	r3, [r7, #0]
 8011322:	2212      	movs	r2, #18
 8011324:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011326:	4b03      	ldr	r3, [pc, #12]	; (8011334 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011328:	4618      	mov	r0, r3
 801132a:	370c      	adds	r7, #12
 801132c:	46bd      	mov	sp, r7
 801132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011332:	4770      	bx	lr
 8011334:	20000150 	.word	0x20000150

08011338 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011338:	b480      	push	{r7}
 801133a:	b083      	sub	sp, #12
 801133c:	af00      	add	r7, sp, #0
 801133e:	4603      	mov	r3, r0
 8011340:	6039      	str	r1, [r7, #0]
 8011342:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	2204      	movs	r2, #4
 8011348:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801134a:	4b03      	ldr	r3, [pc, #12]	; (8011358 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801134c:	4618      	mov	r0, r3
 801134e:	370c      	adds	r7, #12
 8011350:	46bd      	mov	sp, r7
 8011352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011356:	4770      	bx	lr
 8011358:	20000170 	.word	0x20000170

0801135c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b082      	sub	sp, #8
 8011360:	af00      	add	r7, sp, #0
 8011362:	4603      	mov	r3, r0
 8011364:	6039      	str	r1, [r7, #0]
 8011366:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011368:	79fb      	ldrb	r3, [r7, #7]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d105      	bne.n	801137a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801136e:	683a      	ldr	r2, [r7, #0]
 8011370:	4907      	ldr	r1, [pc, #28]	; (8011390 <USBD_FS_ProductStrDescriptor+0x34>)
 8011372:	4808      	ldr	r0, [pc, #32]	; (8011394 <USBD_FS_ProductStrDescriptor+0x38>)
 8011374:	f7fc f8c8 	bl	800d508 <USBD_GetString>
 8011378:	e004      	b.n	8011384 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801137a:	683a      	ldr	r2, [r7, #0]
 801137c:	4904      	ldr	r1, [pc, #16]	; (8011390 <USBD_FS_ProductStrDescriptor+0x34>)
 801137e:	4805      	ldr	r0, [pc, #20]	; (8011394 <USBD_FS_ProductStrDescriptor+0x38>)
 8011380:	f7fc f8c2 	bl	800d508 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011384:	4b02      	ldr	r3, [pc, #8]	; (8011390 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011386:	4618      	mov	r0, r3
 8011388:	3708      	adds	r7, #8
 801138a:	46bd      	mov	sp, r7
 801138c:	bd80      	pop	{r7, pc}
 801138e:	bf00      	nop
 8011390:	20006b64 	.word	0x20006b64
 8011394:	0801200c 	.word	0x0801200c

08011398 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011398:	b580      	push	{r7, lr}
 801139a:	b082      	sub	sp, #8
 801139c:	af00      	add	r7, sp, #0
 801139e:	4603      	mov	r3, r0
 80113a0:	6039      	str	r1, [r7, #0]
 80113a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80113a4:	683a      	ldr	r2, [r7, #0]
 80113a6:	4904      	ldr	r1, [pc, #16]	; (80113b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80113a8:	4804      	ldr	r0, [pc, #16]	; (80113bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80113aa:	f7fc f8ad 	bl	800d508 <USBD_GetString>
  return USBD_StrDesc;
 80113ae:	4b02      	ldr	r3, [pc, #8]	; (80113b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80113b0:	4618      	mov	r0, r3
 80113b2:	3708      	adds	r7, #8
 80113b4:	46bd      	mov	sp, r7
 80113b6:	bd80      	pop	{r7, pc}
 80113b8:	20006b64 	.word	0x20006b64
 80113bc:	08012020 	.word	0x08012020

080113c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b082      	sub	sp, #8
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	4603      	mov	r3, r0
 80113c8:	6039      	str	r1, [r7, #0]
 80113ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	221a      	movs	r2, #26
 80113d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80113d2:	f000 f855 	bl	8011480 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80113d6:	4b02      	ldr	r3, [pc, #8]	; (80113e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80113d8:	4618      	mov	r0, r3
 80113da:	3708      	adds	r7, #8
 80113dc:	46bd      	mov	sp, r7
 80113de:	bd80      	pop	{r7, pc}
 80113e0:	20000174 	.word	0x20000174

080113e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b082      	sub	sp, #8
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	4603      	mov	r3, r0
 80113ec:	6039      	str	r1, [r7, #0]
 80113ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80113f0:	79fb      	ldrb	r3, [r7, #7]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d105      	bne.n	8011402 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80113f6:	683a      	ldr	r2, [r7, #0]
 80113f8:	4907      	ldr	r1, [pc, #28]	; (8011418 <USBD_FS_ConfigStrDescriptor+0x34>)
 80113fa:	4808      	ldr	r0, [pc, #32]	; (801141c <USBD_FS_ConfigStrDescriptor+0x38>)
 80113fc:	f7fc f884 	bl	800d508 <USBD_GetString>
 8011400:	e004      	b.n	801140c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011402:	683a      	ldr	r2, [r7, #0]
 8011404:	4904      	ldr	r1, [pc, #16]	; (8011418 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011406:	4805      	ldr	r0, [pc, #20]	; (801141c <USBD_FS_ConfigStrDescriptor+0x38>)
 8011408:	f7fc f87e 	bl	800d508 <USBD_GetString>
  }
  return USBD_StrDesc;
 801140c:	4b02      	ldr	r3, [pc, #8]	; (8011418 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801140e:	4618      	mov	r0, r3
 8011410:	3708      	adds	r7, #8
 8011412:	46bd      	mov	sp, r7
 8011414:	bd80      	pop	{r7, pc}
 8011416:	bf00      	nop
 8011418:	20006b64 	.word	0x20006b64
 801141c:	08012034 	.word	0x08012034

08011420 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011420:	b580      	push	{r7, lr}
 8011422:	b082      	sub	sp, #8
 8011424:	af00      	add	r7, sp, #0
 8011426:	4603      	mov	r3, r0
 8011428:	6039      	str	r1, [r7, #0]
 801142a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801142c:	79fb      	ldrb	r3, [r7, #7]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d105      	bne.n	801143e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011432:	683a      	ldr	r2, [r7, #0]
 8011434:	4907      	ldr	r1, [pc, #28]	; (8011454 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011436:	4808      	ldr	r0, [pc, #32]	; (8011458 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011438:	f7fc f866 	bl	800d508 <USBD_GetString>
 801143c:	e004      	b.n	8011448 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801143e:	683a      	ldr	r2, [r7, #0]
 8011440:	4904      	ldr	r1, [pc, #16]	; (8011454 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011442:	4805      	ldr	r0, [pc, #20]	; (8011458 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011444:	f7fc f860 	bl	800d508 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011448:	4b02      	ldr	r3, [pc, #8]	; (8011454 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801144a:	4618      	mov	r0, r3
 801144c:	3708      	adds	r7, #8
 801144e:	46bd      	mov	sp, r7
 8011450:	bd80      	pop	{r7, pc}
 8011452:	bf00      	nop
 8011454:	20006b64 	.word	0x20006b64
 8011458:	08012040 	.word	0x08012040

0801145c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801145c:	b480      	push	{r7}
 801145e:	b083      	sub	sp, #12
 8011460:	af00      	add	r7, sp, #0
 8011462:	4603      	mov	r3, r0
 8011464:	6039      	str	r1, [r7, #0]
 8011466:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8011468:	683b      	ldr	r3, [r7, #0]
 801146a:	220c      	movs	r2, #12
 801146c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801146e:	4b03      	ldr	r3, [pc, #12]	; (801147c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8011470:	4618      	mov	r0, r3
 8011472:	370c      	adds	r7, #12
 8011474:	46bd      	mov	sp, r7
 8011476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147a:	4770      	bx	lr
 801147c:	20000164 	.word	0x20000164

08011480 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011480:	b580      	push	{r7, lr}
 8011482:	b084      	sub	sp, #16
 8011484:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011486:	4b0f      	ldr	r3, [pc, #60]	; (80114c4 <Get_SerialNum+0x44>)
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801148c:	4b0e      	ldr	r3, [pc, #56]	; (80114c8 <Get_SerialNum+0x48>)
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011492:	4b0e      	ldr	r3, [pc, #56]	; (80114cc <Get_SerialNum+0x4c>)
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011498:	68fa      	ldr	r2, [r7, #12]
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	4413      	add	r3, r2
 801149e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d009      	beq.n	80114ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80114a6:	2208      	movs	r2, #8
 80114a8:	4909      	ldr	r1, [pc, #36]	; (80114d0 <Get_SerialNum+0x50>)
 80114aa:	68f8      	ldr	r0, [r7, #12]
 80114ac:	f000 f814 	bl	80114d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80114b0:	2204      	movs	r2, #4
 80114b2:	4908      	ldr	r1, [pc, #32]	; (80114d4 <Get_SerialNum+0x54>)
 80114b4:	68b8      	ldr	r0, [r7, #8]
 80114b6:	f000 f80f 	bl	80114d8 <IntToUnicode>
  }
}
 80114ba:	bf00      	nop
 80114bc:	3710      	adds	r7, #16
 80114be:	46bd      	mov	sp, r7
 80114c0:	bd80      	pop	{r7, pc}
 80114c2:	bf00      	nop
 80114c4:	1ff0f420 	.word	0x1ff0f420
 80114c8:	1ff0f424 	.word	0x1ff0f424
 80114cc:	1ff0f428 	.word	0x1ff0f428
 80114d0:	20000176 	.word	0x20000176
 80114d4:	20000186 	.word	0x20000186

080114d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80114d8:	b480      	push	{r7}
 80114da:	b087      	sub	sp, #28
 80114dc:	af00      	add	r7, sp, #0
 80114de:	60f8      	str	r0, [r7, #12]
 80114e0:	60b9      	str	r1, [r7, #8]
 80114e2:	4613      	mov	r3, r2
 80114e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80114e6:	2300      	movs	r3, #0
 80114e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80114ea:	2300      	movs	r3, #0
 80114ec:	75fb      	strb	r3, [r7, #23]
 80114ee:	e027      	b.n	8011540 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	0f1b      	lsrs	r3, r3, #28
 80114f4:	2b09      	cmp	r3, #9
 80114f6:	d80b      	bhi.n	8011510 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	0f1b      	lsrs	r3, r3, #28
 80114fc:	b2da      	uxtb	r2, r3
 80114fe:	7dfb      	ldrb	r3, [r7, #23]
 8011500:	005b      	lsls	r3, r3, #1
 8011502:	4619      	mov	r1, r3
 8011504:	68bb      	ldr	r3, [r7, #8]
 8011506:	440b      	add	r3, r1
 8011508:	3230      	adds	r2, #48	; 0x30
 801150a:	b2d2      	uxtb	r2, r2
 801150c:	701a      	strb	r2, [r3, #0]
 801150e:	e00a      	b.n	8011526 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	0f1b      	lsrs	r3, r3, #28
 8011514:	b2da      	uxtb	r2, r3
 8011516:	7dfb      	ldrb	r3, [r7, #23]
 8011518:	005b      	lsls	r3, r3, #1
 801151a:	4619      	mov	r1, r3
 801151c:	68bb      	ldr	r3, [r7, #8]
 801151e:	440b      	add	r3, r1
 8011520:	3237      	adds	r2, #55	; 0x37
 8011522:	b2d2      	uxtb	r2, r2
 8011524:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	011b      	lsls	r3, r3, #4
 801152a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801152c:	7dfb      	ldrb	r3, [r7, #23]
 801152e:	005b      	lsls	r3, r3, #1
 8011530:	3301      	adds	r3, #1
 8011532:	68ba      	ldr	r2, [r7, #8]
 8011534:	4413      	add	r3, r2
 8011536:	2200      	movs	r2, #0
 8011538:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801153a:	7dfb      	ldrb	r3, [r7, #23]
 801153c:	3301      	adds	r3, #1
 801153e:	75fb      	strb	r3, [r7, #23]
 8011540:	7dfa      	ldrb	r2, [r7, #23]
 8011542:	79fb      	ldrb	r3, [r7, #7]
 8011544:	429a      	cmp	r2, r3
 8011546:	d3d3      	bcc.n	80114f0 <IntToUnicode+0x18>
  }
}
 8011548:	bf00      	nop
 801154a:	bf00      	nop
 801154c:	371c      	adds	r7, #28
 801154e:	46bd      	mov	sp, r7
 8011550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011554:	4770      	bx	lr
	...

08011558 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011558:	b580      	push	{r7, lr}
 801155a:	b0ae      	sub	sp, #184	; 0xb8
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011560:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011564:	2200      	movs	r2, #0
 8011566:	601a      	str	r2, [r3, #0]
 8011568:	605a      	str	r2, [r3, #4]
 801156a:	609a      	str	r2, [r3, #8]
 801156c:	60da      	str	r2, [r3, #12]
 801156e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011570:	f107 0314 	add.w	r3, r7, #20
 8011574:	2290      	movs	r2, #144	; 0x90
 8011576:	2100      	movs	r1, #0
 8011578:	4618      	mov	r0, r3
 801157a:	f000 fba5 	bl	8011cc8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011586:	d151      	bne.n	801162c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8011588:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801158c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 801158e:	2300      	movs	r3, #0
 8011590:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011594:	f107 0314 	add.w	r3, r7, #20
 8011598:	4618      	mov	r0, r3
 801159a:	f7f4 f83f 	bl	800561c <HAL_RCCEx_PeriphCLKConfig>
 801159e:	4603      	mov	r3, r0
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d001      	beq.n	80115a8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80115a4:	f7ef fd66 	bl	8001074 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80115a8:	4b22      	ldr	r3, [pc, #136]	; (8011634 <HAL_PCD_MspInit+0xdc>)
 80115aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115ac:	4a21      	ldr	r2, [pc, #132]	; (8011634 <HAL_PCD_MspInit+0xdc>)
 80115ae:	f043 0301 	orr.w	r3, r3, #1
 80115b2:	6313      	str	r3, [r2, #48]	; 0x30
 80115b4:	4b1f      	ldr	r3, [pc, #124]	; (8011634 <HAL_PCD_MspInit+0xdc>)
 80115b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115b8:	f003 0301 	and.w	r3, r3, #1
 80115bc:	613b      	str	r3, [r7, #16]
 80115be:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80115c0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80115c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80115c8:	2302      	movs	r3, #2
 80115ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80115ce:	2300      	movs	r3, #0
 80115d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80115d4:	2303      	movs	r3, #3
 80115d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80115da:	230a      	movs	r3, #10
 80115dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80115e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80115e4:	4619      	mov	r1, r3
 80115e6:	4814      	ldr	r0, [pc, #80]	; (8011638 <HAL_PCD_MspInit+0xe0>)
 80115e8:	f7f1 fcec 	bl	8002fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80115ec:	4b11      	ldr	r3, [pc, #68]	; (8011634 <HAL_PCD_MspInit+0xdc>)
 80115ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115f0:	4a10      	ldr	r2, [pc, #64]	; (8011634 <HAL_PCD_MspInit+0xdc>)
 80115f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80115f6:	6353      	str	r3, [r2, #52]	; 0x34
 80115f8:	4b0e      	ldr	r3, [pc, #56]	; (8011634 <HAL_PCD_MspInit+0xdc>)
 80115fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011600:	60fb      	str	r3, [r7, #12]
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	4b0b      	ldr	r3, [pc, #44]	; (8011634 <HAL_PCD_MspInit+0xdc>)
 8011606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011608:	4a0a      	ldr	r2, [pc, #40]	; (8011634 <HAL_PCD_MspInit+0xdc>)
 801160a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801160e:	6453      	str	r3, [r2, #68]	; 0x44
 8011610:	4b08      	ldr	r3, [pc, #32]	; (8011634 <HAL_PCD_MspInit+0xdc>)
 8011612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011618:	60bb      	str	r3, [r7, #8]
 801161a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801161c:	2200      	movs	r2, #0
 801161e:	2105      	movs	r1, #5
 8011620:	2043      	movs	r0, #67	; 0x43
 8011622:	f7f0 fc1f 	bl	8001e64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011626:	2043      	movs	r0, #67	; 0x43
 8011628:	f7f0 fc38 	bl	8001e9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801162c:	bf00      	nop
 801162e:	37b8      	adds	r7, #184	; 0xb8
 8011630:	46bd      	mov	sp, r7
 8011632:	bd80      	pop	{r7, pc}
 8011634:	40023800 	.word	0x40023800
 8011638:	40020000 	.word	0x40020000

0801163c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801163c:	b580      	push	{r7, lr}
 801163e:	b082      	sub	sp, #8
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011650:	4619      	mov	r1, r3
 8011652:	4610      	mov	r0, r2
 8011654:	f7fa fdcf 	bl	800c1f6 <USBD_LL_SetupStage>
}
 8011658:	bf00      	nop
 801165a:	3708      	adds	r7, #8
 801165c:	46bd      	mov	sp, r7
 801165e:	bd80      	pop	{r7, pc}

08011660 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011660:	b580      	push	{r7, lr}
 8011662:	b082      	sub	sp, #8
 8011664:	af00      	add	r7, sp, #0
 8011666:	6078      	str	r0, [r7, #4]
 8011668:	460b      	mov	r3, r1
 801166a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8011672:	78fa      	ldrb	r2, [r7, #3]
 8011674:	6879      	ldr	r1, [r7, #4]
 8011676:	4613      	mov	r3, r2
 8011678:	00db      	lsls	r3, r3, #3
 801167a:	4413      	add	r3, r2
 801167c:	009b      	lsls	r3, r3, #2
 801167e:	440b      	add	r3, r1
 8011680:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8011684:	681a      	ldr	r2, [r3, #0]
 8011686:	78fb      	ldrb	r3, [r7, #3]
 8011688:	4619      	mov	r1, r3
 801168a:	f7fa fe09 	bl	800c2a0 <USBD_LL_DataOutStage>
}
 801168e:	bf00      	nop
 8011690:	3708      	adds	r7, #8
 8011692:	46bd      	mov	sp, r7
 8011694:	bd80      	pop	{r7, pc}

08011696 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011696:	b580      	push	{r7, lr}
 8011698:	b082      	sub	sp, #8
 801169a:	af00      	add	r7, sp, #0
 801169c:	6078      	str	r0, [r7, #4]
 801169e:	460b      	mov	r3, r1
 80116a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 80116a8:	78fa      	ldrb	r2, [r7, #3]
 80116aa:	6879      	ldr	r1, [r7, #4]
 80116ac:	4613      	mov	r3, r2
 80116ae:	00db      	lsls	r3, r3, #3
 80116b0:	4413      	add	r3, r2
 80116b2:	009b      	lsls	r3, r3, #2
 80116b4:	440b      	add	r3, r1
 80116b6:	334c      	adds	r3, #76	; 0x4c
 80116b8:	681a      	ldr	r2, [r3, #0]
 80116ba:	78fb      	ldrb	r3, [r7, #3]
 80116bc:	4619      	mov	r1, r3
 80116be:	f7fa fea2 	bl	800c406 <USBD_LL_DataInStage>
}
 80116c2:	bf00      	nop
 80116c4:	3708      	adds	r7, #8
 80116c6:	46bd      	mov	sp, r7
 80116c8:	bd80      	pop	{r7, pc}

080116ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80116ca:	b580      	push	{r7, lr}
 80116cc:	b082      	sub	sp, #8
 80116ce:	af00      	add	r7, sp, #0
 80116d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80116d8:	4618      	mov	r0, r3
 80116da:	f7fa ffd6 	bl	800c68a <USBD_LL_SOF>
}
 80116de:	bf00      	nop
 80116e0:	3708      	adds	r7, #8
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd80      	pop	{r7, pc}

080116e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80116e6:	b580      	push	{r7, lr}
 80116e8:	b084      	sub	sp, #16
 80116ea:	af00      	add	r7, sp, #0
 80116ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80116ee:	2301      	movs	r3, #1
 80116f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	68db      	ldr	r3, [r3, #12]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d102      	bne.n	8011700 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80116fa:	2300      	movs	r3, #0
 80116fc:	73fb      	strb	r3, [r7, #15]
 80116fe:	e008      	b.n	8011712 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	68db      	ldr	r3, [r3, #12]
 8011704:	2b02      	cmp	r3, #2
 8011706:	d102      	bne.n	801170e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011708:	2301      	movs	r3, #1
 801170a:	73fb      	strb	r3, [r7, #15]
 801170c:	e001      	b.n	8011712 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801170e:	f7ef fcb1 	bl	8001074 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011718:	7bfa      	ldrb	r2, [r7, #15]
 801171a:	4611      	mov	r1, r2
 801171c:	4618      	mov	r0, r3
 801171e:	f7fa ff76 	bl	800c60e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011728:	4618      	mov	r0, r3
 801172a:	f7fa ff1e 	bl	800c56a <USBD_LL_Reset>
}
 801172e:	bf00      	nop
 8011730:	3710      	adds	r7, #16
 8011732:	46bd      	mov	sp, r7
 8011734:	bd80      	pop	{r7, pc}
	...

08011738 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011738:	b580      	push	{r7, lr}
 801173a:	b082      	sub	sp, #8
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011746:	4618      	mov	r0, r3
 8011748:	f7fa ff71 	bl	800c62e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	687a      	ldr	r2, [r7, #4]
 8011758:	6812      	ldr	r2, [r2, #0]
 801175a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801175e:	f043 0301 	orr.w	r3, r3, #1
 8011762:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	6a1b      	ldr	r3, [r3, #32]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d005      	beq.n	8011778 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801176c:	4b04      	ldr	r3, [pc, #16]	; (8011780 <HAL_PCD_SuspendCallback+0x48>)
 801176e:	691b      	ldr	r3, [r3, #16]
 8011770:	4a03      	ldr	r2, [pc, #12]	; (8011780 <HAL_PCD_SuspendCallback+0x48>)
 8011772:	f043 0306 	orr.w	r3, r3, #6
 8011776:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011778:	bf00      	nop
 801177a:	3708      	adds	r7, #8
 801177c:	46bd      	mov	sp, r7
 801177e:	bd80      	pop	{r7, pc}
 8011780:	e000ed00 	.word	0xe000ed00

08011784 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b082      	sub	sp, #8
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011792:	4618      	mov	r0, r3
 8011794:	f7fa ff61 	bl	800c65a <USBD_LL_Resume>
}
 8011798:	bf00      	nop
 801179a:	3708      	adds	r7, #8
 801179c:	46bd      	mov	sp, r7
 801179e:	bd80      	pop	{r7, pc}

080117a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b082      	sub	sp, #8
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
 80117a8:	460b      	mov	r3, r1
 80117aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80117b2:	78fa      	ldrb	r2, [r7, #3]
 80117b4:	4611      	mov	r1, r2
 80117b6:	4618      	mov	r0, r3
 80117b8:	f7fa ffb9 	bl	800c72e <USBD_LL_IsoOUTIncomplete>
}
 80117bc:	bf00      	nop
 80117be:	3708      	adds	r7, #8
 80117c0:	46bd      	mov	sp, r7
 80117c2:	bd80      	pop	{r7, pc}

080117c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b082      	sub	sp, #8
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
 80117cc:	460b      	mov	r3, r1
 80117ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80117d6:	78fa      	ldrb	r2, [r7, #3]
 80117d8:	4611      	mov	r1, r2
 80117da:	4618      	mov	r0, r3
 80117dc:	f7fa ff75 	bl	800c6ca <USBD_LL_IsoINIncomplete>
}
 80117e0:	bf00      	nop
 80117e2:	3708      	adds	r7, #8
 80117e4:	46bd      	mov	sp, r7
 80117e6:	bd80      	pop	{r7, pc}

080117e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b082      	sub	sp, #8
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80117f6:	4618      	mov	r0, r3
 80117f8:	f7fa ffcb 	bl	800c792 <USBD_LL_DevConnected>
}
 80117fc:	bf00      	nop
 80117fe:	3708      	adds	r7, #8
 8011800:	46bd      	mov	sp, r7
 8011802:	bd80      	pop	{r7, pc}

08011804 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011804:	b580      	push	{r7, lr}
 8011806:	b082      	sub	sp, #8
 8011808:	af00      	add	r7, sp, #0
 801180a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011812:	4618      	mov	r0, r3
 8011814:	f7fa ffc8 	bl	800c7a8 <USBD_LL_DevDisconnected>
}
 8011818:	bf00      	nop
 801181a:	3708      	adds	r7, #8
 801181c:	46bd      	mov	sp, r7
 801181e:	bd80      	pop	{r7, pc}

08011820 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011820:	b580      	push	{r7, lr}
 8011822:	b082      	sub	sp, #8
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	781b      	ldrb	r3, [r3, #0]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d13c      	bne.n	80118aa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011830:	4a20      	ldr	r2, [pc, #128]	; (80118b4 <USBD_LL_Init+0x94>)
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	4a1e      	ldr	r2, [pc, #120]	; (80118b4 <USBD_LL_Init+0x94>)
 801183c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011840:	4b1c      	ldr	r3, [pc, #112]	; (80118b4 <USBD_LL_Init+0x94>)
 8011842:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011846:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8011848:	4b1a      	ldr	r3, [pc, #104]	; (80118b4 <USBD_LL_Init+0x94>)
 801184a:	2206      	movs	r2, #6
 801184c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801184e:	4b19      	ldr	r3, [pc, #100]	; (80118b4 <USBD_LL_Init+0x94>)
 8011850:	2202      	movs	r2, #2
 8011852:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011854:	4b17      	ldr	r3, [pc, #92]	; (80118b4 <USBD_LL_Init+0x94>)
 8011856:	2200      	movs	r2, #0
 8011858:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801185a:	4b16      	ldr	r3, [pc, #88]	; (80118b4 <USBD_LL_Init+0x94>)
 801185c:	2202      	movs	r2, #2
 801185e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011860:	4b14      	ldr	r3, [pc, #80]	; (80118b4 <USBD_LL_Init+0x94>)
 8011862:	2200      	movs	r2, #0
 8011864:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011866:	4b13      	ldr	r3, [pc, #76]	; (80118b4 <USBD_LL_Init+0x94>)
 8011868:	2200      	movs	r2, #0
 801186a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801186c:	4b11      	ldr	r3, [pc, #68]	; (80118b4 <USBD_LL_Init+0x94>)
 801186e:	2200      	movs	r2, #0
 8011870:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011872:	4b10      	ldr	r3, [pc, #64]	; (80118b4 <USBD_LL_Init+0x94>)
 8011874:	2200      	movs	r2, #0
 8011876:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011878:	4b0e      	ldr	r3, [pc, #56]	; (80118b4 <USBD_LL_Init+0x94>)
 801187a:	2200      	movs	r2, #0
 801187c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801187e:	480d      	ldr	r0, [pc, #52]	; (80118b4 <USBD_LL_Init+0x94>)
 8011880:	f7f1 febd 	bl	80035fe <HAL_PCD_Init>
 8011884:	4603      	mov	r3, r0
 8011886:	2b00      	cmp	r3, #0
 8011888:	d001      	beq.n	801188e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801188a:	f7ef fbf3 	bl	8001074 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801188e:	2180      	movs	r1, #128	; 0x80
 8011890:	4808      	ldr	r0, [pc, #32]	; (80118b4 <USBD_LL_Init+0x94>)
 8011892:	f7f3 f938 	bl	8004b06 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011896:	2240      	movs	r2, #64	; 0x40
 8011898:	2100      	movs	r1, #0
 801189a:	4806      	ldr	r0, [pc, #24]	; (80118b4 <USBD_LL_Init+0x94>)
 801189c:	f7f3 f8ec 	bl	8004a78 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80118a0:	2280      	movs	r2, #128	; 0x80
 80118a2:	2101      	movs	r1, #1
 80118a4:	4803      	ldr	r0, [pc, #12]	; (80118b4 <USBD_LL_Init+0x94>)
 80118a6:	f7f3 f8e7 	bl	8004a78 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80118aa:	2300      	movs	r3, #0
}
 80118ac:	4618      	mov	r0, r3
 80118ae:	3708      	adds	r7, #8
 80118b0:	46bd      	mov	sp, r7
 80118b2:	bd80      	pop	{r7, pc}
 80118b4:	20006d64 	.word	0x20006d64

080118b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b084      	sub	sp, #16
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80118c0:	2300      	movs	r3, #0
 80118c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80118c4:	2300      	movs	r3, #0
 80118c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80118ce:	4618      	mov	r0, r3
 80118d0:	f7f1 ffb9 	bl	8003846 <HAL_PCD_Start>
 80118d4:	4603      	mov	r3, r0
 80118d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80118d8:	7bfb      	ldrb	r3, [r7, #15]
 80118da:	4618      	mov	r0, r3
 80118dc:	f000 f97e 	bl	8011bdc <USBD_Get_USB_Status>
 80118e0:	4603      	mov	r3, r0
 80118e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80118e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80118e6:	4618      	mov	r0, r3
 80118e8:	3710      	adds	r7, #16
 80118ea:	46bd      	mov	sp, r7
 80118ec:	bd80      	pop	{r7, pc}

080118ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80118ee:	b580      	push	{r7, lr}
 80118f0:	b084      	sub	sp, #16
 80118f2:	af00      	add	r7, sp, #0
 80118f4:	6078      	str	r0, [r7, #4]
 80118f6:	4608      	mov	r0, r1
 80118f8:	4611      	mov	r1, r2
 80118fa:	461a      	mov	r2, r3
 80118fc:	4603      	mov	r3, r0
 80118fe:	70fb      	strb	r3, [r7, #3]
 8011900:	460b      	mov	r3, r1
 8011902:	70bb      	strb	r3, [r7, #2]
 8011904:	4613      	mov	r3, r2
 8011906:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011908:	2300      	movs	r3, #0
 801190a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801190c:	2300      	movs	r3, #0
 801190e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011916:	78bb      	ldrb	r3, [r7, #2]
 8011918:	883a      	ldrh	r2, [r7, #0]
 801191a:	78f9      	ldrb	r1, [r7, #3]
 801191c:	f7f2 fca6 	bl	800426c <HAL_PCD_EP_Open>
 8011920:	4603      	mov	r3, r0
 8011922:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011924:	7bfb      	ldrb	r3, [r7, #15]
 8011926:	4618      	mov	r0, r3
 8011928:	f000 f958 	bl	8011bdc <USBD_Get_USB_Status>
 801192c:	4603      	mov	r3, r0
 801192e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011930:	7bbb      	ldrb	r3, [r7, #14]
}
 8011932:	4618      	mov	r0, r3
 8011934:	3710      	adds	r7, #16
 8011936:	46bd      	mov	sp, r7
 8011938:	bd80      	pop	{r7, pc}

0801193a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801193a:	b580      	push	{r7, lr}
 801193c:	b084      	sub	sp, #16
 801193e:	af00      	add	r7, sp, #0
 8011940:	6078      	str	r0, [r7, #4]
 8011942:	460b      	mov	r3, r1
 8011944:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011946:	2300      	movs	r3, #0
 8011948:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801194a:	2300      	movs	r3, #0
 801194c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011954:	78fa      	ldrb	r2, [r7, #3]
 8011956:	4611      	mov	r1, r2
 8011958:	4618      	mov	r0, r3
 801195a:	f7f2 fcef 	bl	800433c <HAL_PCD_EP_Close>
 801195e:	4603      	mov	r3, r0
 8011960:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011962:	7bfb      	ldrb	r3, [r7, #15]
 8011964:	4618      	mov	r0, r3
 8011966:	f000 f939 	bl	8011bdc <USBD_Get_USB_Status>
 801196a:	4603      	mov	r3, r0
 801196c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801196e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011970:	4618      	mov	r0, r3
 8011972:	3710      	adds	r7, #16
 8011974:	46bd      	mov	sp, r7
 8011976:	bd80      	pop	{r7, pc}

08011978 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011978:	b580      	push	{r7, lr}
 801197a:	b084      	sub	sp, #16
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
 8011980:	460b      	mov	r3, r1
 8011982:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011984:	2300      	movs	r3, #0
 8011986:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011988:	2300      	movs	r3, #0
 801198a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011992:	78fa      	ldrb	r2, [r7, #3]
 8011994:	4611      	mov	r1, r2
 8011996:	4618      	mov	r0, r3
 8011998:	f7f2 fdc7 	bl	800452a <HAL_PCD_EP_SetStall>
 801199c:	4603      	mov	r3, r0
 801199e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80119a0:	7bfb      	ldrb	r3, [r7, #15]
 80119a2:	4618      	mov	r0, r3
 80119a4:	f000 f91a 	bl	8011bdc <USBD_Get_USB_Status>
 80119a8:	4603      	mov	r3, r0
 80119aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80119ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80119ae:	4618      	mov	r0, r3
 80119b0:	3710      	adds	r7, #16
 80119b2:	46bd      	mov	sp, r7
 80119b4:	bd80      	pop	{r7, pc}

080119b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80119b6:	b580      	push	{r7, lr}
 80119b8:	b084      	sub	sp, #16
 80119ba:	af00      	add	r7, sp, #0
 80119bc:	6078      	str	r0, [r7, #4]
 80119be:	460b      	mov	r3, r1
 80119c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80119c2:	2300      	movs	r3, #0
 80119c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80119c6:	2300      	movs	r3, #0
 80119c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80119d0:	78fa      	ldrb	r2, [r7, #3]
 80119d2:	4611      	mov	r1, r2
 80119d4:	4618      	mov	r0, r3
 80119d6:	f7f2 fe0c 	bl	80045f2 <HAL_PCD_EP_ClrStall>
 80119da:	4603      	mov	r3, r0
 80119dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80119de:	7bfb      	ldrb	r3, [r7, #15]
 80119e0:	4618      	mov	r0, r3
 80119e2:	f000 f8fb 	bl	8011bdc <USBD_Get_USB_Status>
 80119e6:	4603      	mov	r3, r0
 80119e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80119ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80119ec:	4618      	mov	r0, r3
 80119ee:	3710      	adds	r7, #16
 80119f0:	46bd      	mov	sp, r7
 80119f2:	bd80      	pop	{r7, pc}

080119f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80119f4:	b480      	push	{r7}
 80119f6:	b085      	sub	sp, #20
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
 80119fc:	460b      	mov	r3, r1
 80119fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011a06:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011a08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	da0b      	bge.n	8011a28 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011a10:	78fb      	ldrb	r3, [r7, #3]
 8011a12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011a16:	68f9      	ldr	r1, [r7, #12]
 8011a18:	4613      	mov	r3, r2
 8011a1a:	00db      	lsls	r3, r3, #3
 8011a1c:	4413      	add	r3, r2
 8011a1e:	009b      	lsls	r3, r3, #2
 8011a20:	440b      	add	r3, r1
 8011a22:	333e      	adds	r3, #62	; 0x3e
 8011a24:	781b      	ldrb	r3, [r3, #0]
 8011a26:	e00b      	b.n	8011a40 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011a28:	78fb      	ldrb	r3, [r7, #3]
 8011a2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011a2e:	68f9      	ldr	r1, [r7, #12]
 8011a30:	4613      	mov	r3, r2
 8011a32:	00db      	lsls	r3, r3, #3
 8011a34:	4413      	add	r3, r2
 8011a36:	009b      	lsls	r3, r3, #2
 8011a38:	440b      	add	r3, r1
 8011a3a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8011a3e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011a40:	4618      	mov	r0, r3
 8011a42:	3714      	adds	r7, #20
 8011a44:	46bd      	mov	sp, r7
 8011a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4a:	4770      	bx	lr

08011a4c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b084      	sub	sp, #16
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
 8011a54:	460b      	mov	r3, r1
 8011a56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a58:	2300      	movs	r3, #0
 8011a5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011a66:	78fa      	ldrb	r2, [r7, #3]
 8011a68:	4611      	mov	r1, r2
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	f7f2 fbd9 	bl	8004222 <HAL_PCD_SetAddress>
 8011a70:	4603      	mov	r3, r0
 8011a72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011a74:	7bfb      	ldrb	r3, [r7, #15]
 8011a76:	4618      	mov	r0, r3
 8011a78:	f000 f8b0 	bl	8011bdc <USBD_Get_USB_Status>
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011a80:	7bbb      	ldrb	r3, [r7, #14]
}
 8011a82:	4618      	mov	r0, r3
 8011a84:	3710      	adds	r7, #16
 8011a86:	46bd      	mov	sp, r7
 8011a88:	bd80      	pop	{r7, pc}

08011a8a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011a8a:	b580      	push	{r7, lr}
 8011a8c:	b086      	sub	sp, #24
 8011a8e:	af00      	add	r7, sp, #0
 8011a90:	60f8      	str	r0, [r7, #12]
 8011a92:	607a      	str	r2, [r7, #4]
 8011a94:	603b      	str	r3, [r7, #0]
 8011a96:	460b      	mov	r3, r1
 8011a98:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011aa8:	7af9      	ldrb	r1, [r7, #11]
 8011aaa:	683b      	ldr	r3, [r7, #0]
 8011aac:	687a      	ldr	r2, [r7, #4]
 8011aae:	f7f2 fcf2 	bl	8004496 <HAL_PCD_EP_Transmit>
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ab6:	7dfb      	ldrb	r3, [r7, #23]
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f000 f88f 	bl	8011bdc <USBD_Get_USB_Status>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011ac2:	7dbb      	ldrb	r3, [r7, #22]
}
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	3718      	adds	r7, #24
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	bd80      	pop	{r7, pc}

08011acc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b086      	sub	sp, #24
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	60f8      	str	r0, [r7, #12]
 8011ad4:	607a      	str	r2, [r7, #4]
 8011ad6:	603b      	str	r3, [r7, #0]
 8011ad8:	460b      	mov	r3, r1
 8011ada:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011adc:	2300      	movs	r3, #0
 8011ade:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011aea:	7af9      	ldrb	r1, [r7, #11]
 8011aec:	683b      	ldr	r3, [r7, #0]
 8011aee:	687a      	ldr	r2, [r7, #4]
 8011af0:	f7f2 fc6e 	bl	80043d0 <HAL_PCD_EP_Receive>
 8011af4:	4603      	mov	r3, r0
 8011af6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011af8:	7dfb      	ldrb	r3, [r7, #23]
 8011afa:	4618      	mov	r0, r3
 8011afc:	f000 f86e 	bl	8011bdc <USBD_Get_USB_Status>
 8011b00:	4603      	mov	r3, r0
 8011b02:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011b04:	7dbb      	ldrb	r3, [r7, #22]
}
 8011b06:	4618      	mov	r0, r3
 8011b08:	3718      	adds	r7, #24
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}

08011b0e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b0e:	b580      	push	{r7, lr}
 8011b10:	b082      	sub	sp, #8
 8011b12:	af00      	add	r7, sp, #0
 8011b14:	6078      	str	r0, [r7, #4]
 8011b16:	460b      	mov	r3, r1
 8011b18:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011b20:	78fa      	ldrb	r2, [r7, #3]
 8011b22:	4611      	mov	r1, r2
 8011b24:	4618      	mov	r0, r3
 8011b26:	f7f2 fc9e 	bl	8004466 <HAL_PCD_EP_GetRxCount>
 8011b2a:	4603      	mov	r3, r0
}
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	3708      	adds	r7, #8
 8011b30:	46bd      	mov	sp, r7
 8011b32:	bd80      	pop	{r7, pc}

08011b34 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b082      	sub	sp, #8
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
 8011b3c:	460b      	mov	r3, r1
 8011b3e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8011b40:	78fb      	ldrb	r3, [r7, #3]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d002      	beq.n	8011b4c <HAL_PCDEx_LPM_Callback+0x18>
 8011b46:	2b01      	cmp	r3, #1
 8011b48:	d01f      	beq.n	8011b8a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8011b4a:	e03b      	b.n	8011bc4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	6a1b      	ldr	r3, [r3, #32]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d007      	beq.n	8011b64 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011b54:	f000 f83c 	bl	8011bd0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011b58:	4b1c      	ldr	r3, [pc, #112]	; (8011bcc <HAL_PCDEx_LPM_Callback+0x98>)
 8011b5a:	691b      	ldr	r3, [r3, #16]
 8011b5c:	4a1b      	ldr	r2, [pc, #108]	; (8011bcc <HAL_PCDEx_LPM_Callback+0x98>)
 8011b5e:	f023 0306 	bic.w	r3, r3, #6
 8011b62:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	687a      	ldr	r2, [r7, #4]
 8011b70:	6812      	ldr	r2, [r2, #0]
 8011b72:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011b76:	f023 0301 	bic.w	r3, r3, #1
 8011b7a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011b82:	4618      	mov	r0, r3
 8011b84:	f7fa fd69 	bl	800c65a <USBD_LL_Resume>
    break;
 8011b88:	e01c      	b.n	8011bc4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	687a      	ldr	r2, [r7, #4]
 8011b96:	6812      	ldr	r2, [r2, #0]
 8011b98:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011b9c:	f043 0301 	orr.w	r3, r3, #1
 8011ba0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011ba8:	4618      	mov	r0, r3
 8011baa:	f7fa fd40 	bl	800c62e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	6a1b      	ldr	r3, [r3, #32]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d005      	beq.n	8011bc2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011bb6:	4b05      	ldr	r3, [pc, #20]	; (8011bcc <HAL_PCDEx_LPM_Callback+0x98>)
 8011bb8:	691b      	ldr	r3, [r3, #16]
 8011bba:	4a04      	ldr	r2, [pc, #16]	; (8011bcc <HAL_PCDEx_LPM_Callback+0x98>)
 8011bbc:	f043 0306 	orr.w	r3, r3, #6
 8011bc0:	6113      	str	r3, [r2, #16]
    break;
 8011bc2:	bf00      	nop
}
 8011bc4:	bf00      	nop
 8011bc6:	3708      	adds	r7, #8
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	bd80      	pop	{r7, pc}
 8011bcc:	e000ed00 	.word	0xe000ed00

08011bd0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8011bd4:	f7ee fd92 	bl	80006fc <SystemClock_Config>
}
 8011bd8:	bf00      	nop
 8011bda:	bd80      	pop	{r7, pc}

08011bdc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011bdc:	b480      	push	{r7}
 8011bde:	b085      	sub	sp, #20
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	4603      	mov	r3, r0
 8011be4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011be6:	2300      	movs	r3, #0
 8011be8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011bea:	79fb      	ldrb	r3, [r7, #7]
 8011bec:	2b03      	cmp	r3, #3
 8011bee:	d817      	bhi.n	8011c20 <USBD_Get_USB_Status+0x44>
 8011bf0:	a201      	add	r2, pc, #4	; (adr r2, 8011bf8 <USBD_Get_USB_Status+0x1c>)
 8011bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bf6:	bf00      	nop
 8011bf8:	08011c09 	.word	0x08011c09
 8011bfc:	08011c0f 	.word	0x08011c0f
 8011c00:	08011c15 	.word	0x08011c15
 8011c04:	08011c1b 	.word	0x08011c1b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011c08:	2300      	movs	r3, #0
 8011c0a:	73fb      	strb	r3, [r7, #15]
    break;
 8011c0c:	e00b      	b.n	8011c26 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011c0e:	2303      	movs	r3, #3
 8011c10:	73fb      	strb	r3, [r7, #15]
    break;
 8011c12:	e008      	b.n	8011c26 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011c14:	2301      	movs	r3, #1
 8011c16:	73fb      	strb	r3, [r7, #15]
    break;
 8011c18:	e005      	b.n	8011c26 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011c1a:	2303      	movs	r3, #3
 8011c1c:	73fb      	strb	r3, [r7, #15]
    break;
 8011c1e:	e002      	b.n	8011c26 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011c20:	2303      	movs	r3, #3
 8011c22:	73fb      	strb	r3, [r7, #15]
    break;
 8011c24:	bf00      	nop
  }
  return usb_status;
 8011c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c28:	4618      	mov	r0, r3
 8011c2a:	3714      	adds	r7, #20
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c32:	4770      	bx	lr

08011c34 <__errno>:
 8011c34:	4b01      	ldr	r3, [pc, #4]	; (8011c3c <__errno+0x8>)
 8011c36:	6818      	ldr	r0, [r3, #0]
 8011c38:	4770      	bx	lr
 8011c3a:	bf00      	nop
 8011c3c:	20000190 	.word	0x20000190

08011c40 <__libc_init_array>:
 8011c40:	b570      	push	{r4, r5, r6, lr}
 8011c42:	4d0d      	ldr	r5, [pc, #52]	; (8011c78 <__libc_init_array+0x38>)
 8011c44:	4c0d      	ldr	r4, [pc, #52]	; (8011c7c <__libc_init_array+0x3c>)
 8011c46:	1b64      	subs	r4, r4, r5
 8011c48:	10a4      	asrs	r4, r4, #2
 8011c4a:	2600      	movs	r6, #0
 8011c4c:	42a6      	cmp	r6, r4
 8011c4e:	d109      	bne.n	8011c64 <__libc_init_array+0x24>
 8011c50:	4d0b      	ldr	r5, [pc, #44]	; (8011c80 <__libc_init_array+0x40>)
 8011c52:	4c0c      	ldr	r4, [pc, #48]	; (8011c84 <__libc_init_array+0x44>)
 8011c54:	f000 f9a6 	bl	8011fa4 <_init>
 8011c58:	1b64      	subs	r4, r4, r5
 8011c5a:	10a4      	asrs	r4, r4, #2
 8011c5c:	2600      	movs	r6, #0
 8011c5e:	42a6      	cmp	r6, r4
 8011c60:	d105      	bne.n	8011c6e <__libc_init_array+0x2e>
 8011c62:	bd70      	pop	{r4, r5, r6, pc}
 8011c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8011c68:	4798      	blx	r3
 8011c6a:	3601      	adds	r6, #1
 8011c6c:	e7ee      	b.n	8011c4c <__libc_init_array+0xc>
 8011c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011c72:	4798      	blx	r3
 8011c74:	3601      	adds	r6, #1
 8011c76:	e7f2      	b.n	8011c5e <__libc_init_array+0x1e>
 8011c78:	08012154 	.word	0x08012154
 8011c7c:	08012154 	.word	0x08012154
 8011c80:	08012154 	.word	0x08012154
 8011c84:	08012158 	.word	0x08012158

08011c88 <__retarget_lock_acquire_recursive>:
 8011c88:	4770      	bx	lr

08011c8a <__retarget_lock_release_recursive>:
 8011c8a:	4770      	bx	lr

08011c8c <malloc>:
 8011c8c:	4b02      	ldr	r3, [pc, #8]	; (8011c98 <malloc+0xc>)
 8011c8e:	4601      	mov	r1, r0
 8011c90:	6818      	ldr	r0, [r3, #0]
 8011c92:	f000 b88d 	b.w	8011db0 <_malloc_r>
 8011c96:	bf00      	nop
 8011c98:	20000190 	.word	0x20000190

08011c9c <free>:
 8011c9c:	4b02      	ldr	r3, [pc, #8]	; (8011ca8 <free+0xc>)
 8011c9e:	4601      	mov	r1, r0
 8011ca0:	6818      	ldr	r0, [r3, #0]
 8011ca2:	f000 b819 	b.w	8011cd8 <_free_r>
 8011ca6:	bf00      	nop
 8011ca8:	20000190 	.word	0x20000190

08011cac <memcpy>:
 8011cac:	440a      	add	r2, r1
 8011cae:	4291      	cmp	r1, r2
 8011cb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8011cb4:	d100      	bne.n	8011cb8 <memcpy+0xc>
 8011cb6:	4770      	bx	lr
 8011cb8:	b510      	push	{r4, lr}
 8011cba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011cbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011cc2:	4291      	cmp	r1, r2
 8011cc4:	d1f9      	bne.n	8011cba <memcpy+0xe>
 8011cc6:	bd10      	pop	{r4, pc}

08011cc8 <memset>:
 8011cc8:	4402      	add	r2, r0
 8011cca:	4603      	mov	r3, r0
 8011ccc:	4293      	cmp	r3, r2
 8011cce:	d100      	bne.n	8011cd2 <memset+0xa>
 8011cd0:	4770      	bx	lr
 8011cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8011cd6:	e7f9      	b.n	8011ccc <memset+0x4>

08011cd8 <_free_r>:
 8011cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011cda:	2900      	cmp	r1, #0
 8011cdc:	d044      	beq.n	8011d68 <_free_r+0x90>
 8011cde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ce2:	9001      	str	r0, [sp, #4]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	f1a1 0404 	sub.w	r4, r1, #4
 8011cea:	bfb8      	it	lt
 8011cec:	18e4      	addlt	r4, r4, r3
 8011cee:	f000 f94d 	bl	8011f8c <__malloc_lock>
 8011cf2:	4a1e      	ldr	r2, [pc, #120]	; (8011d6c <_free_r+0x94>)
 8011cf4:	9801      	ldr	r0, [sp, #4]
 8011cf6:	6813      	ldr	r3, [r2, #0]
 8011cf8:	b933      	cbnz	r3, 8011d08 <_free_r+0x30>
 8011cfa:	6063      	str	r3, [r4, #4]
 8011cfc:	6014      	str	r4, [r2, #0]
 8011cfe:	b003      	add	sp, #12
 8011d00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011d04:	f000 b948 	b.w	8011f98 <__malloc_unlock>
 8011d08:	42a3      	cmp	r3, r4
 8011d0a:	d908      	bls.n	8011d1e <_free_r+0x46>
 8011d0c:	6825      	ldr	r5, [r4, #0]
 8011d0e:	1961      	adds	r1, r4, r5
 8011d10:	428b      	cmp	r3, r1
 8011d12:	bf01      	itttt	eq
 8011d14:	6819      	ldreq	r1, [r3, #0]
 8011d16:	685b      	ldreq	r3, [r3, #4]
 8011d18:	1949      	addeq	r1, r1, r5
 8011d1a:	6021      	streq	r1, [r4, #0]
 8011d1c:	e7ed      	b.n	8011cfa <_free_r+0x22>
 8011d1e:	461a      	mov	r2, r3
 8011d20:	685b      	ldr	r3, [r3, #4]
 8011d22:	b10b      	cbz	r3, 8011d28 <_free_r+0x50>
 8011d24:	42a3      	cmp	r3, r4
 8011d26:	d9fa      	bls.n	8011d1e <_free_r+0x46>
 8011d28:	6811      	ldr	r1, [r2, #0]
 8011d2a:	1855      	adds	r5, r2, r1
 8011d2c:	42a5      	cmp	r5, r4
 8011d2e:	d10b      	bne.n	8011d48 <_free_r+0x70>
 8011d30:	6824      	ldr	r4, [r4, #0]
 8011d32:	4421      	add	r1, r4
 8011d34:	1854      	adds	r4, r2, r1
 8011d36:	42a3      	cmp	r3, r4
 8011d38:	6011      	str	r1, [r2, #0]
 8011d3a:	d1e0      	bne.n	8011cfe <_free_r+0x26>
 8011d3c:	681c      	ldr	r4, [r3, #0]
 8011d3e:	685b      	ldr	r3, [r3, #4]
 8011d40:	6053      	str	r3, [r2, #4]
 8011d42:	4421      	add	r1, r4
 8011d44:	6011      	str	r1, [r2, #0]
 8011d46:	e7da      	b.n	8011cfe <_free_r+0x26>
 8011d48:	d902      	bls.n	8011d50 <_free_r+0x78>
 8011d4a:	230c      	movs	r3, #12
 8011d4c:	6003      	str	r3, [r0, #0]
 8011d4e:	e7d6      	b.n	8011cfe <_free_r+0x26>
 8011d50:	6825      	ldr	r5, [r4, #0]
 8011d52:	1961      	adds	r1, r4, r5
 8011d54:	428b      	cmp	r3, r1
 8011d56:	bf04      	itt	eq
 8011d58:	6819      	ldreq	r1, [r3, #0]
 8011d5a:	685b      	ldreq	r3, [r3, #4]
 8011d5c:	6063      	str	r3, [r4, #4]
 8011d5e:	bf04      	itt	eq
 8011d60:	1949      	addeq	r1, r1, r5
 8011d62:	6021      	streq	r1, [r4, #0]
 8011d64:	6054      	str	r4, [r2, #4]
 8011d66:	e7ca      	b.n	8011cfe <_free_r+0x26>
 8011d68:	b003      	add	sp, #12
 8011d6a:	bd30      	pop	{r4, r5, pc}
 8011d6c:	20007270 	.word	0x20007270

08011d70 <sbrk_aligned>:
 8011d70:	b570      	push	{r4, r5, r6, lr}
 8011d72:	4e0e      	ldr	r6, [pc, #56]	; (8011dac <sbrk_aligned+0x3c>)
 8011d74:	460c      	mov	r4, r1
 8011d76:	6831      	ldr	r1, [r6, #0]
 8011d78:	4605      	mov	r5, r0
 8011d7a:	b911      	cbnz	r1, 8011d82 <sbrk_aligned+0x12>
 8011d7c:	f000 f8f6 	bl	8011f6c <_sbrk_r>
 8011d80:	6030      	str	r0, [r6, #0]
 8011d82:	4621      	mov	r1, r4
 8011d84:	4628      	mov	r0, r5
 8011d86:	f000 f8f1 	bl	8011f6c <_sbrk_r>
 8011d8a:	1c43      	adds	r3, r0, #1
 8011d8c:	d00a      	beq.n	8011da4 <sbrk_aligned+0x34>
 8011d8e:	1cc4      	adds	r4, r0, #3
 8011d90:	f024 0403 	bic.w	r4, r4, #3
 8011d94:	42a0      	cmp	r0, r4
 8011d96:	d007      	beq.n	8011da8 <sbrk_aligned+0x38>
 8011d98:	1a21      	subs	r1, r4, r0
 8011d9a:	4628      	mov	r0, r5
 8011d9c:	f000 f8e6 	bl	8011f6c <_sbrk_r>
 8011da0:	3001      	adds	r0, #1
 8011da2:	d101      	bne.n	8011da8 <sbrk_aligned+0x38>
 8011da4:	f04f 34ff 	mov.w	r4, #4294967295
 8011da8:	4620      	mov	r0, r4
 8011daa:	bd70      	pop	{r4, r5, r6, pc}
 8011dac:	20007274 	.word	0x20007274

08011db0 <_malloc_r>:
 8011db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011db4:	1ccd      	adds	r5, r1, #3
 8011db6:	f025 0503 	bic.w	r5, r5, #3
 8011dba:	3508      	adds	r5, #8
 8011dbc:	2d0c      	cmp	r5, #12
 8011dbe:	bf38      	it	cc
 8011dc0:	250c      	movcc	r5, #12
 8011dc2:	2d00      	cmp	r5, #0
 8011dc4:	4607      	mov	r7, r0
 8011dc6:	db01      	blt.n	8011dcc <_malloc_r+0x1c>
 8011dc8:	42a9      	cmp	r1, r5
 8011dca:	d905      	bls.n	8011dd8 <_malloc_r+0x28>
 8011dcc:	230c      	movs	r3, #12
 8011dce:	603b      	str	r3, [r7, #0]
 8011dd0:	2600      	movs	r6, #0
 8011dd2:	4630      	mov	r0, r6
 8011dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dd8:	4e2e      	ldr	r6, [pc, #184]	; (8011e94 <_malloc_r+0xe4>)
 8011dda:	f000 f8d7 	bl	8011f8c <__malloc_lock>
 8011dde:	6833      	ldr	r3, [r6, #0]
 8011de0:	461c      	mov	r4, r3
 8011de2:	bb34      	cbnz	r4, 8011e32 <_malloc_r+0x82>
 8011de4:	4629      	mov	r1, r5
 8011de6:	4638      	mov	r0, r7
 8011de8:	f7ff ffc2 	bl	8011d70 <sbrk_aligned>
 8011dec:	1c43      	adds	r3, r0, #1
 8011dee:	4604      	mov	r4, r0
 8011df0:	d14d      	bne.n	8011e8e <_malloc_r+0xde>
 8011df2:	6834      	ldr	r4, [r6, #0]
 8011df4:	4626      	mov	r6, r4
 8011df6:	2e00      	cmp	r6, #0
 8011df8:	d140      	bne.n	8011e7c <_malloc_r+0xcc>
 8011dfa:	6823      	ldr	r3, [r4, #0]
 8011dfc:	4631      	mov	r1, r6
 8011dfe:	4638      	mov	r0, r7
 8011e00:	eb04 0803 	add.w	r8, r4, r3
 8011e04:	f000 f8b2 	bl	8011f6c <_sbrk_r>
 8011e08:	4580      	cmp	r8, r0
 8011e0a:	d13a      	bne.n	8011e82 <_malloc_r+0xd2>
 8011e0c:	6821      	ldr	r1, [r4, #0]
 8011e0e:	3503      	adds	r5, #3
 8011e10:	1a6d      	subs	r5, r5, r1
 8011e12:	f025 0503 	bic.w	r5, r5, #3
 8011e16:	3508      	adds	r5, #8
 8011e18:	2d0c      	cmp	r5, #12
 8011e1a:	bf38      	it	cc
 8011e1c:	250c      	movcc	r5, #12
 8011e1e:	4629      	mov	r1, r5
 8011e20:	4638      	mov	r0, r7
 8011e22:	f7ff ffa5 	bl	8011d70 <sbrk_aligned>
 8011e26:	3001      	adds	r0, #1
 8011e28:	d02b      	beq.n	8011e82 <_malloc_r+0xd2>
 8011e2a:	6823      	ldr	r3, [r4, #0]
 8011e2c:	442b      	add	r3, r5
 8011e2e:	6023      	str	r3, [r4, #0]
 8011e30:	e00e      	b.n	8011e50 <_malloc_r+0xa0>
 8011e32:	6822      	ldr	r2, [r4, #0]
 8011e34:	1b52      	subs	r2, r2, r5
 8011e36:	d41e      	bmi.n	8011e76 <_malloc_r+0xc6>
 8011e38:	2a0b      	cmp	r2, #11
 8011e3a:	d916      	bls.n	8011e6a <_malloc_r+0xba>
 8011e3c:	1961      	adds	r1, r4, r5
 8011e3e:	42a3      	cmp	r3, r4
 8011e40:	6025      	str	r5, [r4, #0]
 8011e42:	bf18      	it	ne
 8011e44:	6059      	strne	r1, [r3, #4]
 8011e46:	6863      	ldr	r3, [r4, #4]
 8011e48:	bf08      	it	eq
 8011e4a:	6031      	streq	r1, [r6, #0]
 8011e4c:	5162      	str	r2, [r4, r5]
 8011e4e:	604b      	str	r3, [r1, #4]
 8011e50:	4638      	mov	r0, r7
 8011e52:	f104 060b 	add.w	r6, r4, #11
 8011e56:	f000 f89f 	bl	8011f98 <__malloc_unlock>
 8011e5a:	f026 0607 	bic.w	r6, r6, #7
 8011e5e:	1d23      	adds	r3, r4, #4
 8011e60:	1af2      	subs	r2, r6, r3
 8011e62:	d0b6      	beq.n	8011dd2 <_malloc_r+0x22>
 8011e64:	1b9b      	subs	r3, r3, r6
 8011e66:	50a3      	str	r3, [r4, r2]
 8011e68:	e7b3      	b.n	8011dd2 <_malloc_r+0x22>
 8011e6a:	6862      	ldr	r2, [r4, #4]
 8011e6c:	42a3      	cmp	r3, r4
 8011e6e:	bf0c      	ite	eq
 8011e70:	6032      	streq	r2, [r6, #0]
 8011e72:	605a      	strne	r2, [r3, #4]
 8011e74:	e7ec      	b.n	8011e50 <_malloc_r+0xa0>
 8011e76:	4623      	mov	r3, r4
 8011e78:	6864      	ldr	r4, [r4, #4]
 8011e7a:	e7b2      	b.n	8011de2 <_malloc_r+0x32>
 8011e7c:	4634      	mov	r4, r6
 8011e7e:	6876      	ldr	r6, [r6, #4]
 8011e80:	e7b9      	b.n	8011df6 <_malloc_r+0x46>
 8011e82:	230c      	movs	r3, #12
 8011e84:	603b      	str	r3, [r7, #0]
 8011e86:	4638      	mov	r0, r7
 8011e88:	f000 f886 	bl	8011f98 <__malloc_unlock>
 8011e8c:	e7a1      	b.n	8011dd2 <_malloc_r+0x22>
 8011e8e:	6025      	str	r5, [r4, #0]
 8011e90:	e7de      	b.n	8011e50 <_malloc_r+0xa0>
 8011e92:	bf00      	nop
 8011e94:	20007270 	.word	0x20007270

08011e98 <cleanup_glue>:
 8011e98:	b538      	push	{r3, r4, r5, lr}
 8011e9a:	460c      	mov	r4, r1
 8011e9c:	6809      	ldr	r1, [r1, #0]
 8011e9e:	4605      	mov	r5, r0
 8011ea0:	b109      	cbz	r1, 8011ea6 <cleanup_glue+0xe>
 8011ea2:	f7ff fff9 	bl	8011e98 <cleanup_glue>
 8011ea6:	4621      	mov	r1, r4
 8011ea8:	4628      	mov	r0, r5
 8011eaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011eae:	f7ff bf13 	b.w	8011cd8 <_free_r>
	...

08011eb4 <_reclaim_reent>:
 8011eb4:	4b2c      	ldr	r3, [pc, #176]	; (8011f68 <_reclaim_reent+0xb4>)
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	4283      	cmp	r3, r0
 8011eba:	b570      	push	{r4, r5, r6, lr}
 8011ebc:	4604      	mov	r4, r0
 8011ebe:	d051      	beq.n	8011f64 <_reclaim_reent+0xb0>
 8011ec0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011ec2:	b143      	cbz	r3, 8011ed6 <_reclaim_reent+0x22>
 8011ec4:	68db      	ldr	r3, [r3, #12]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d14a      	bne.n	8011f60 <_reclaim_reent+0xac>
 8011eca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011ecc:	6819      	ldr	r1, [r3, #0]
 8011ece:	b111      	cbz	r1, 8011ed6 <_reclaim_reent+0x22>
 8011ed0:	4620      	mov	r0, r4
 8011ed2:	f7ff ff01 	bl	8011cd8 <_free_r>
 8011ed6:	6961      	ldr	r1, [r4, #20]
 8011ed8:	b111      	cbz	r1, 8011ee0 <_reclaim_reent+0x2c>
 8011eda:	4620      	mov	r0, r4
 8011edc:	f7ff fefc 	bl	8011cd8 <_free_r>
 8011ee0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011ee2:	b111      	cbz	r1, 8011eea <_reclaim_reent+0x36>
 8011ee4:	4620      	mov	r0, r4
 8011ee6:	f7ff fef7 	bl	8011cd8 <_free_r>
 8011eea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011eec:	b111      	cbz	r1, 8011ef4 <_reclaim_reent+0x40>
 8011eee:	4620      	mov	r0, r4
 8011ef0:	f7ff fef2 	bl	8011cd8 <_free_r>
 8011ef4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011ef6:	b111      	cbz	r1, 8011efe <_reclaim_reent+0x4a>
 8011ef8:	4620      	mov	r0, r4
 8011efa:	f7ff feed 	bl	8011cd8 <_free_r>
 8011efe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011f00:	b111      	cbz	r1, 8011f08 <_reclaim_reent+0x54>
 8011f02:	4620      	mov	r0, r4
 8011f04:	f7ff fee8 	bl	8011cd8 <_free_r>
 8011f08:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011f0a:	b111      	cbz	r1, 8011f12 <_reclaim_reent+0x5e>
 8011f0c:	4620      	mov	r0, r4
 8011f0e:	f7ff fee3 	bl	8011cd8 <_free_r>
 8011f12:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011f14:	b111      	cbz	r1, 8011f1c <_reclaim_reent+0x68>
 8011f16:	4620      	mov	r0, r4
 8011f18:	f7ff fede 	bl	8011cd8 <_free_r>
 8011f1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011f1e:	b111      	cbz	r1, 8011f26 <_reclaim_reent+0x72>
 8011f20:	4620      	mov	r0, r4
 8011f22:	f7ff fed9 	bl	8011cd8 <_free_r>
 8011f26:	69a3      	ldr	r3, [r4, #24]
 8011f28:	b1e3      	cbz	r3, 8011f64 <_reclaim_reent+0xb0>
 8011f2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011f2c:	4620      	mov	r0, r4
 8011f2e:	4798      	blx	r3
 8011f30:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011f32:	b1b9      	cbz	r1, 8011f64 <_reclaim_reent+0xb0>
 8011f34:	4620      	mov	r0, r4
 8011f36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011f3a:	f7ff bfad 	b.w	8011e98 <cleanup_glue>
 8011f3e:	5949      	ldr	r1, [r1, r5]
 8011f40:	b941      	cbnz	r1, 8011f54 <_reclaim_reent+0xa0>
 8011f42:	3504      	adds	r5, #4
 8011f44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011f46:	2d80      	cmp	r5, #128	; 0x80
 8011f48:	68d9      	ldr	r1, [r3, #12]
 8011f4a:	d1f8      	bne.n	8011f3e <_reclaim_reent+0x8a>
 8011f4c:	4620      	mov	r0, r4
 8011f4e:	f7ff fec3 	bl	8011cd8 <_free_r>
 8011f52:	e7ba      	b.n	8011eca <_reclaim_reent+0x16>
 8011f54:	680e      	ldr	r6, [r1, #0]
 8011f56:	4620      	mov	r0, r4
 8011f58:	f7ff febe 	bl	8011cd8 <_free_r>
 8011f5c:	4631      	mov	r1, r6
 8011f5e:	e7ef      	b.n	8011f40 <_reclaim_reent+0x8c>
 8011f60:	2500      	movs	r5, #0
 8011f62:	e7ef      	b.n	8011f44 <_reclaim_reent+0x90>
 8011f64:	bd70      	pop	{r4, r5, r6, pc}
 8011f66:	bf00      	nop
 8011f68:	20000190 	.word	0x20000190

08011f6c <_sbrk_r>:
 8011f6c:	b538      	push	{r3, r4, r5, lr}
 8011f6e:	4d06      	ldr	r5, [pc, #24]	; (8011f88 <_sbrk_r+0x1c>)
 8011f70:	2300      	movs	r3, #0
 8011f72:	4604      	mov	r4, r0
 8011f74:	4608      	mov	r0, r1
 8011f76:	602b      	str	r3, [r5, #0]
 8011f78:	f7ef fcf4 	bl	8001964 <_sbrk>
 8011f7c:	1c43      	adds	r3, r0, #1
 8011f7e:	d102      	bne.n	8011f86 <_sbrk_r+0x1a>
 8011f80:	682b      	ldr	r3, [r5, #0]
 8011f82:	b103      	cbz	r3, 8011f86 <_sbrk_r+0x1a>
 8011f84:	6023      	str	r3, [r4, #0]
 8011f86:	bd38      	pop	{r3, r4, r5, pc}
 8011f88:	20007278 	.word	0x20007278

08011f8c <__malloc_lock>:
 8011f8c:	4801      	ldr	r0, [pc, #4]	; (8011f94 <__malloc_lock+0x8>)
 8011f8e:	f7ff be7b 	b.w	8011c88 <__retarget_lock_acquire_recursive>
 8011f92:	bf00      	nop
 8011f94:	2000726c 	.word	0x2000726c

08011f98 <__malloc_unlock>:
 8011f98:	4801      	ldr	r0, [pc, #4]	; (8011fa0 <__malloc_unlock+0x8>)
 8011f9a:	f7ff be76 	b.w	8011c8a <__retarget_lock_release_recursive>
 8011f9e:	bf00      	nop
 8011fa0:	2000726c 	.word	0x2000726c

08011fa4 <_init>:
 8011fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fa6:	bf00      	nop
 8011fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011faa:	bc08      	pop	{r3}
 8011fac:	469e      	mov	lr, r3
 8011fae:	4770      	bx	lr

08011fb0 <_fini>:
 8011fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fb2:	bf00      	nop
 8011fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011fb6:	bc08      	pop	{r3}
 8011fb8:	469e      	mov	lr, r3
 8011fba:	4770      	bx	lr

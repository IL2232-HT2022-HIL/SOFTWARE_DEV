
MCU_HiL_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f09c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  0800f29c  0800f29c  0001f29c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f49c  0800f49c  000202b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f49c  0800f49c  0001f49c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f4a4  0800f4a4  000202b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f4a4  0800f4a4  0001f4a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f4a8  0800f4a8  0001f4a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0800f4ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000174  0800f620  00020174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000214  0800f6c0  00020214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00006db8  200002b4  0800f760  000202b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000706c  0800f760  0002706c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000202b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003435b  00000000  00000000  000202e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000063df  00000000  00000000  0005463d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002658  00000000  00000000  0005aa20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000023b0  00000000  00000000  0005d078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00009ca0  00000000  00000000  0005f428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003156d  00000000  00000000  000690c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00118b40  00000000  00000000  0009a635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001b3175  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a55c  00000000  00000000  001b31c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002b4 	.word	0x200002b4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800f284 	.word	0x0800f284

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002b8 	.word	0x200002b8
 800023c:	0800f284 	.word	0x0800f284

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000548:	f3bf 8f4f 	dsb	sy
}
 800054c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800054e:	f3bf 8f6f 	isb	sy
}
 8000552:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000554:	4b0d      	ldr	r3, [pc, #52]	; (800058c <SCB_EnableICache+0x48>)
 8000556:	2200      	movs	r2, #0
 8000558:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800055c:	f3bf 8f4f 	dsb	sy
}
 8000560:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000562:	f3bf 8f6f 	isb	sy
}
 8000566:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <SCB_EnableICache+0x48>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	4a07      	ldr	r2, [pc, #28]	; (800058c <SCB_EnableICache+0x48>)
 800056e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000572:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000574:	f3bf 8f4f 	dsb	sy
}
 8000578:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800057a:	f3bf 8f6f 	isb	sy
}
 800057e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	e000ed00 	.word	0xe000ed00

08000590 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000596:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <SCB_EnableDCache+0x84>)
 8000598:	2200      	movs	r2, #0
 800059a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800059e:	f3bf 8f4f 	dsb	sy
}
 80005a2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005a4:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <SCB_EnableDCache+0x84>)
 80005a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005aa:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	0b5b      	lsrs	r3, r3, #13
 80005b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005b4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	08db      	lsrs	r3, r3, #3
 80005ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005be:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	015a      	lsls	r2, r3, #5
 80005c4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005c8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005ca:	68ba      	ldr	r2, [r7, #8]
 80005cc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005ce:	4911      	ldr	r1, [pc, #68]	; (8000614 <SCB_EnableDCache+0x84>)
 80005d0:	4313      	orrs	r3, r2
 80005d2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	1e5a      	subs	r2, r3, #1
 80005da:	60ba      	str	r2, [r7, #8]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d1ef      	bne.n	80005c0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	1e5a      	subs	r2, r3, #1
 80005e4:	60fa      	str	r2, [r7, #12]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d1e5      	bne.n	80005b6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005ea:	f3bf 8f4f 	dsb	sy
}
 80005ee:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <SCB_EnableDCache+0x84>)
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	4a07      	ldr	r2, [pc, #28]	; (8000614 <SCB_EnableDCache+0x84>)
 80005f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005fa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005fc:	f3bf 8f4f 	dsb	sy
}
 8000600:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000602:	f3bf 8f6f 	isb	sy
}
 8000606:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800061c:	f7ff ff92 	bl	8000544 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000620:	f7ff ffb6 	bl	8000590 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f001 f928 	bl	8001878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f874 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f000 fb16 	bl	8000c5c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000630:	f000 f8e0 	bl	80007f4 <MX_CAN1_Init>
  MX_DAC_Init();
 8000634:	f000 f912 	bl	800085c <MX_DAC_Init>
  MX_ETH_Init();
 8000638:	f000 f93a 	bl	80008b0 <MX_ETH_Init>
  MX_I2C1_Init();
 800063c:	f000 f986 	bl	800094c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000640:	f000 f9c4 	bl	80009cc <MX_SPI1_Init>
  MX_SPI3_Init();
 8000644:	f000 f9fc 	bl	8000a40 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000648:	f000 fa34 	bl	8000ab4 <MX_TIM1_Init>
  MX_UART7_Init();
 800064c:	f000 fad6 	bl	8000bfc <MX_UART7_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000650:	2100      	movs	r1, #0
 8000652:	481d      	ldr	r0, [pc, #116]	; (80006c8 <main+0xb0>)
 8000654:	f001 fb6a 	bl	8001d2c <HAL_DAC_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000658:	f00a fe8e 	bl	800b378 <osKernelInitialize>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  HiL_Init_MSGQ();
 800065c:	f008 fc04 	bl	8008e68 <HiL_Init_MSGQ>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000660:	4a1a      	ldr	r2, [pc, #104]	; (80006cc <main+0xb4>)
 8000662:	2100      	movs	r1, #0
 8000664:	481a      	ldr	r0, [pc, #104]	; (80006d0 <main+0xb8>)
 8000666:	f00a fef1 	bl	800b44c <osThreadNew>
 800066a:	4603      	mov	r3, r0
 800066c:	4a19      	ldr	r2, [pc, #100]	; (80006d4 <main+0xbc>)
 800066e:	6013      	str	r3, [r2, #0]

  /* creation of Task_gateway */
  Task_gatewayHandle = osThreadNew(StartTask_gateway, NULL, &Task_gateway_attributes);
 8000670:	4a19      	ldr	r2, [pc, #100]	; (80006d8 <main+0xc0>)
 8000672:	2100      	movs	r1, #0
 8000674:	4819      	ldr	r0, [pc, #100]	; (80006dc <main+0xc4>)
 8000676:	f00a fee9 	bl	800b44c <osThreadNew>
 800067a:	4603      	mov	r3, r0
 800067c:	4a18      	ldr	r2, [pc, #96]	; (80006e0 <main+0xc8>)
 800067e:	6013      	str	r3, [r2, #0]

  /* creation of Task_controller */
  Task_controllerHandle = osThreadNew(StartTask_controller, NULL, &Task_controller_attributes);
 8000680:	4a18      	ldr	r2, [pc, #96]	; (80006e4 <main+0xcc>)
 8000682:	2100      	movs	r1, #0
 8000684:	4818      	ldr	r0, [pc, #96]	; (80006e8 <main+0xd0>)
 8000686:	f00a fee1 	bl	800b44c <osThreadNew>
 800068a:	4603      	mov	r3, r0
 800068c:	4a17      	ldr	r2, [pc, #92]	; (80006ec <main+0xd4>)
 800068e:	6013      	str	r3, [r2, #0]

  /* creation of Task_SHT20 */
  Task_SHT20Handle = osThreadNew(StartTask_SHT20, NULL, &Task_SHT20_attributes);
 8000690:	4a17      	ldr	r2, [pc, #92]	; (80006f0 <main+0xd8>)
 8000692:	2100      	movs	r1, #0
 8000694:	4817      	ldr	r0, [pc, #92]	; (80006f4 <main+0xdc>)
 8000696:	f00a fed9 	bl	800b44c <osThreadNew>
 800069a:	4603      	mov	r3, r0
 800069c:	4a16      	ldr	r2, [pc, #88]	; (80006f8 <main+0xe0>)
 800069e:	6013      	str	r3, [r2, #0]

  /* creation of Task_74HC595D */
  Task_74HC595DHandle = osThreadNew(StartTask_74HC595D, NULL, &Task_74HC595D_attributes);
 80006a0:	4a16      	ldr	r2, [pc, #88]	; (80006fc <main+0xe4>)
 80006a2:	2100      	movs	r1, #0
 80006a4:	4816      	ldr	r0, [pc, #88]	; (8000700 <main+0xe8>)
 80006a6:	f00a fed1 	bl	800b44c <osThreadNew>
 80006aa:	4603      	mov	r3, r0
 80006ac:	4a15      	ldr	r2, [pc, #84]	; (8000704 <main+0xec>)
 80006ae:	6013      	str	r3, [r2, #0]

  /* creation of myTask06 */
  myTask06Handle = osThreadNew(StartTask06, NULL, &myTask06_attributes);
 80006b0:	4a15      	ldr	r2, [pc, #84]	; (8000708 <main+0xf0>)
 80006b2:	2100      	movs	r1, #0
 80006b4:	4815      	ldr	r0, [pc, #84]	; (800070c <main+0xf4>)
 80006b6:	f00a fec9 	bl	800b44c <osThreadNew>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4a14      	ldr	r2, [pc, #80]	; (8000710 <main+0xf8>)
 80006be:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006c0:	f00a fe8e 	bl	800b3e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <main+0xac>
 80006c6:	bf00      	nop
 80006c8:	20000330 	.word	0x20000330
 80006cc:	0800f34c 	.word	0x0800f34c
 80006d0:	08000ee9 	.word	0x08000ee9
 80006d4:	200005e4 	.word	0x200005e4
 80006d8:	0800f370 	.word	0x0800f370
 80006dc:	08000efd 	.word	0x08000efd
 80006e0:	200005e8 	.word	0x200005e8
 80006e4:	0800f394 	.word	0x0800f394
 80006e8:	08000f0d 	.word	0x08000f0d
 80006ec:	200005ec 	.word	0x200005ec
 80006f0:	0800f3b8 	.word	0x0800f3b8
 80006f4:	08000f75 	.word	0x08000f75
 80006f8:	200005f0 	.word	0x200005f0
 80006fc:	0800f3dc 	.word	0x0800f3dc
 8000700:	08000f85 	.word	0x08000f85
 8000704:	200005f4 	.word	0x200005f4
 8000708:	0800f400 	.word	0x0800f400
 800070c:	08000f95 	.word	0x08000f95
 8000710:	200005f8 	.word	0x200005f8

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b094      	sub	sp, #80	; 0x50
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	2234      	movs	r2, #52	; 0x34
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f00e fc40 	bl	800efa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	f107 0308 	add.w	r3, r7, #8
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000738:	4b2c      	ldr	r3, [pc, #176]	; (80007ec <SystemClock_Config+0xd8>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073c:	4a2b      	ldr	r2, [pc, #172]	; (80007ec <SystemClock_Config+0xd8>)
 800073e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000742:	6413      	str	r3, [r2, #64]	; 0x40
 8000744:	4b29      	ldr	r3, [pc, #164]	; (80007ec <SystemClock_Config+0xd8>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000750:	4b27      	ldr	r3, [pc, #156]	; (80007f0 <SystemClock_Config+0xdc>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000758:	4a25      	ldr	r2, [pc, #148]	; (80007f0 <SystemClock_Config+0xdc>)
 800075a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	4b23      	ldr	r3, [pc, #140]	; (80007f0 <SystemClock_Config+0xdc>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800076c:	2301      	movs	r3, #1
 800076e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000770:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000774:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000776:	2302      	movs	r3, #2
 8000778:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800077e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000780:	2304      	movs	r3, #4
 8000782:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000784:	2360      	movs	r3, #96	; 0x60
 8000786:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000788:	2302      	movs	r3, #2
 800078a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800078c:	2304      	movs	r3, #4
 800078e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000790:	2302      	movs	r3, #2
 8000792:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000794:	f107 031c 	add.w	r3, r7, #28
 8000798:	4618      	mov	r0, r3
 800079a:	f003 fd2f 	bl	80041fc <HAL_RCC_OscConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007a4:	f000 fc10 	bl	8000fc8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007a8:	f003 fcd8 	bl	800415c <HAL_PWREx_EnableOverDrive>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80007b2:	f000 fc09 	bl	8000fc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b6:	230f      	movs	r3, #15
 80007b8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ba:	2302      	movs	r3, #2
 80007bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007cc:	f107 0308 	add.w	r3, r7, #8
 80007d0:	2103      	movs	r1, #3
 80007d2:	4618      	mov	r0, r3
 80007d4:	f003 ffc0 	bl	8004758 <HAL_RCC_ClockConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80007de:	f000 fbf3 	bl	8000fc8 <Error_Handler>
  }
}
 80007e2:	bf00      	nop
 80007e4:	3750      	adds	r7, #80	; 0x50
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40007000 	.word	0x40007000

080007f4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007f8:	4b16      	ldr	r3, [pc, #88]	; (8000854 <MX_CAN1_Init+0x60>)
 80007fa:	4a17      	ldr	r2, [pc, #92]	; (8000858 <MX_CAN1_Init+0x64>)
 80007fc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <MX_CAN1_Init+0x60>)
 8000800:	2210      	movs	r2, #16
 8000802:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000804:	4b13      	ldr	r3, [pc, #76]	; (8000854 <MX_CAN1_Init+0x60>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800080a:	4b12      	ldr	r3, [pc, #72]	; (8000854 <MX_CAN1_Init+0x60>)
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000810:	4b10      	ldr	r3, [pc, #64]	; (8000854 <MX_CAN1_Init+0x60>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_CAN1_Init+0x60>)
 8000818:	2200      	movs	r2, #0
 800081a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800081c:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <MX_CAN1_Init+0x60>)
 800081e:	2200      	movs	r2, #0
 8000820:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_CAN1_Init+0x60>)
 8000824:	2200      	movs	r2, #0
 8000826:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <MX_CAN1_Init+0x60>)
 800082a:	2200      	movs	r2, #0
 800082c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_CAN1_Init+0x60>)
 8000830:	2200      	movs	r2, #0
 8000832:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <MX_CAN1_Init+0x60>)
 8000836:	2200      	movs	r2, #0
 8000838:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_CAN1_Init+0x60>)
 800083c:	2200      	movs	r2, #0
 800083e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000840:	4804      	ldr	r0, [pc, #16]	; (8000854 <MX_CAN1_Init+0x60>)
 8000842:	f001 f873 	bl	800192c <HAL_CAN_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800084c:	f000 fbbc 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000308 	.word	0x20000308
 8000858:	40006400 	.word	0x40006400

0800085c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000862:	463b      	mov	r3, r7
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_DAC_Init+0x4c>)
 800086c:	4a0f      	ldr	r2, [pc, #60]	; (80008ac <MX_DAC_Init+0x50>)
 800086e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000870:	480d      	ldr	r0, [pc, #52]	; (80008a8 <MX_DAC_Init+0x4c>)
 8000872:	f001 fa39 	bl	8001ce8 <HAL_DAC_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800087c:	f000 fba4 	bl	8000fc8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000880:	2300      	movs	r3, #0
 8000882:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000884:	2300      	movs	r3, #0
 8000886:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000888:	463b      	mov	r3, r7
 800088a:	2200      	movs	r2, #0
 800088c:	4619      	mov	r1, r3
 800088e:	4806      	ldr	r0, [pc, #24]	; (80008a8 <MX_DAC_Init+0x4c>)
 8000890:	f001 fb27 	bl	8001ee2 <HAL_DAC_ConfigChannel>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800089a:	f000 fb95 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000330 	.word	0x20000330
 80008ac:	40007400 	.word	0x40007400

080008b0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008b4:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <MX_ETH_Init+0x84>)
 80008b6:	4a20      	ldr	r2, [pc, #128]	; (8000938 <MX_ETH_Init+0x88>)
 80008b8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008ba:	4b20      	ldr	r3, [pc, #128]	; (800093c <MX_ETH_Init+0x8c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008c0:	4b1e      	ldr	r3, [pc, #120]	; (800093c <MX_ETH_Init+0x8c>)
 80008c2:	2280      	movs	r2, #128	; 0x80
 80008c4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008c6:	4b1d      	ldr	r3, [pc, #116]	; (800093c <MX_ETH_Init+0x8c>)
 80008c8:	22e1      	movs	r2, #225	; 0xe1
 80008ca:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <MX_ETH_Init+0x8c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008d2:	4b1a      	ldr	r3, [pc, #104]	; (800093c <MX_ETH_Init+0x8c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008d8:	4b18      	ldr	r3, [pc, #96]	; (800093c <MX_ETH_Init+0x8c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <MX_ETH_Init+0x84>)
 80008e0:	4a16      	ldr	r2, [pc, #88]	; (800093c <MX_ETH_Init+0x8c>)
 80008e2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008e4:	4b13      	ldr	r3, [pc, #76]	; (8000934 <MX_ETH_Init+0x84>)
 80008e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008ea:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008ec:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_ETH_Init+0x84>)
 80008ee:	4a14      	ldr	r2, [pc, #80]	; (8000940 <MX_ETH_Init+0x90>)
 80008f0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <MX_ETH_Init+0x84>)
 80008f4:	4a13      	ldr	r2, [pc, #76]	; (8000944 <MX_ETH_Init+0x94>)
 80008f6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008f8:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_ETH_Init+0x84>)
 80008fa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008fe:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000900:	480c      	ldr	r0, [pc, #48]	; (8000934 <MX_ETH_Init+0x84>)
 8000902:	f001 fb47 	bl	8001f94 <HAL_ETH_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800090c:	f000 fb5c 	bl	8000fc8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000910:	2238      	movs	r2, #56	; 0x38
 8000912:	2100      	movs	r1, #0
 8000914:	480c      	ldr	r0, [pc, #48]	; (8000948 <MX_ETH_Init+0x98>)
 8000916:	f00e fb47 	bl	800efa8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MX_ETH_Init+0x98>)
 800091c:	2221      	movs	r2, #33	; 0x21
 800091e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_ETH_Init+0x98>)
 8000922:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000926:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000928:	4b07      	ldr	r3, [pc, #28]	; (8000948 <MX_ETH_Init+0x98>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000344 	.word	0x20000344
 8000938:	40028000 	.word	0x40028000
 800093c:	20000600 	.word	0x20000600
 8000940:	20000214 	.word	0x20000214
 8000944:	20000174 	.word	0x20000174
 8000948:	200002d0 	.word	0x200002d0

0800094c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000950:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <MX_I2C1_Init+0x74>)
 8000952:	4a1c      	ldr	r2, [pc, #112]	; (80009c4 <MX_I2C1_Init+0x78>)
 8000954:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000956:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <MX_I2C1_Init+0x74>)
 8000958:	4a1b      	ldr	r2, [pc, #108]	; (80009c8 <MX_I2C1_Init+0x7c>)
 800095a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800095c:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <MX_I2C1_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000962:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <MX_I2C1_Init+0x74>)
 8000964:	2201      	movs	r2, #1
 8000966:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000968:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <MX_I2C1_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800096e:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_I2C1_Init+0x74>)
 8000970:	2200      	movs	r2, #0
 8000972:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <MX_I2C1_Init+0x74>)
 8000976:	2200      	movs	r2, #0
 8000978:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_I2C1_Init+0x74>)
 800097c:	2200      	movs	r2, #0
 800097e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000980:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <MX_I2C1_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000986:	480e      	ldr	r0, [pc, #56]	; (80009c0 <MX_I2C1_Init+0x74>)
 8000988:	f002 f808 	bl	800299c <HAL_I2C_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000992:	f000 fb19 	bl	8000fc8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000996:	2100      	movs	r1, #0
 8000998:	4809      	ldr	r0, [pc, #36]	; (80009c0 <MX_I2C1_Init+0x74>)
 800099a:	f002 f88f 	bl	8002abc <HAL_I2CEx_ConfigAnalogFilter>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009a4:	f000 fb10 	bl	8000fc8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009a8:	2100      	movs	r1, #0
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_I2C1_Init+0x74>)
 80009ac:	f002 f8d1 	bl	8002b52 <HAL_I2CEx_ConfigDigitalFilter>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009b6:	f000 fb07 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200003f4 	.word	0x200003f4
 80009c4:	40005400 	.word	0x40005400
 80009c8:	20303e5d 	.word	0x20303e5d

080009cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009d0:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <MX_SPI1_Init+0x6c>)
 80009d2:	4a1a      	ldr	r2, [pc, #104]	; (8000a3c <MX_SPI1_Init+0x70>)
 80009d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80009d6:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <MX_SPI1_Init+0x6c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80009dc:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <MX_SPI1_Init+0x6c>)
 80009de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <MX_SPI1_Init+0x6c>)
 80009e6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <MX_SPI1_Init+0x6c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_SPI1_Init+0x6c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_SPI1_Init+0x6c>)
 80009fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a00:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <MX_SPI1_Init+0x6c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_SPI1_Init+0x6c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a0c:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <MX_SPI1_Init+0x6c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_SPI1_Init+0x6c>)
 8000a14:	2207      	movs	r2, #7
 8000a16:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a18:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <MX_SPI1_Init+0x6c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_SPI1_Init+0x6c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a24:	4804      	ldr	r0, [pc, #16]	; (8000a38 <MX_SPI1_Init+0x6c>)
 8000a26:	f004 fd17 	bl	8005458 <HAL_SPI_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_SPI1_Init+0x68>
  {
    Error_Handler();
 8000a30:	f000 faca 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000448 	.word	0x20000448
 8000a3c:	40013000 	.word	0x40013000

08000a40 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a44:	4b19      	ldr	r3, [pc, #100]	; (8000aac <MX_SPI3_Init+0x6c>)
 8000a46:	4a1a      	ldr	r2, [pc, #104]	; (8000ab0 <MX_SPI3_Init+0x70>)
 8000a48:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000a4a:	4b18      	ldr	r3, [pc, #96]	; (8000aac <MX_SPI3_Init+0x6c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000a50:	4b16      	ldr	r3, [pc, #88]	; (8000aac <MX_SPI3_Init+0x6c>)
 8000a52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a56:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_SPI3_Init+0x6c>)
 8000a5a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a5e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <MX_SPI3_Init+0x6c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_SPI3_Init+0x6c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_SPI3_Init+0x6c>)
 8000a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a72:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a74:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <MX_SPI3_Init+0x6c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_SPI3_Init+0x6c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a80:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <MX_SPI3_Init+0x6c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_SPI3_Init+0x6c>)
 8000a88:	2207      	movs	r2, #7
 8000a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <MX_SPI3_Init+0x6c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_SPI3_Init+0x6c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a98:	4804      	ldr	r0, [pc, #16]	; (8000aac <MX_SPI3_Init+0x6c>)
 8000a9a:	f004 fcdd 	bl	8005458 <HAL_SPI_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_SPI3_Init+0x68>
  {
    Error_Handler();
 8000aa4:	f000 fa90 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200004ac 	.word	0x200004ac
 8000ab0:	40003c00 	.word	0x40003c00

08000ab4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b090      	sub	sp, #64	; 0x40
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000af0:	4b40      	ldr	r3, [pc, #256]	; (8000bf4 <MX_TIM1_Init+0x140>)
 8000af2:	4a41      	ldr	r2, [pc, #260]	; (8000bf8 <MX_TIM1_Init+0x144>)
 8000af4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000af6:	4b3f      	ldr	r3, [pc, #252]	; (8000bf4 <MX_TIM1_Init+0x140>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afc:	4b3d      	ldr	r3, [pc, #244]	; (8000bf4 <MX_TIM1_Init+0x140>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b02:	4b3c      	ldr	r3, [pc, #240]	; (8000bf4 <MX_TIM1_Init+0x140>)
 8000b04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b08:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0a:	4b3a      	ldr	r3, [pc, #232]	; (8000bf4 <MX_TIM1_Init+0x140>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b10:	4b38      	ldr	r3, [pc, #224]	; (8000bf4 <MX_TIM1_Init+0x140>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b16:	4b37      	ldr	r3, [pc, #220]	; (8000bf4 <MX_TIM1_Init+0x140>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b1c:	4835      	ldr	r0, [pc, #212]	; (8000bf4 <MX_TIM1_Init+0x140>)
 8000b1e:	f004 fd46 	bl	80055ae <HAL_TIM_Base_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000b28:	f000 fa4e 	bl	8000fc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b30:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b36:	4619      	mov	r1, r3
 8000b38:	482e      	ldr	r0, [pc, #184]	; (8000bf4 <MX_TIM1_Init+0x140>)
 8000b3a:	f005 fba9 	bl	8006290 <HAL_TIM_ConfigClockSource>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000b44:	f000 fa40 	bl	8000fc8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000b48:	482a      	ldr	r0, [pc, #168]	; (8000bf4 <MX_TIM1_Init+0x140>)
 8000b4a:	f004 fdff 	bl	800574c <HAL_TIM_IC_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000b54:	f000 fa38 	bl	8000fc8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000b58:	2304      	movs	r3, #4
 8000b5a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000b5c:	2350      	movs	r3, #80	; 0x50
 8000b5e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b60:	2300      	movs	r3, #0
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000b6c:	f107 031c 	add.w	r3, r7, #28
 8000b70:	4619      	mov	r1, r3
 8000b72:	4820      	ldr	r0, [pc, #128]	; (8000bf4 <MX_TIM1_Init+0x140>)
 8000b74:	f005 fc56 	bl	8006424 <HAL_TIM_SlaveConfigSynchro>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000b7e:	f000 fa23 	bl	8000fc8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b86:	2301      	movs	r3, #1
 8000b88:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b92:	f107 030c 	add.w	r3, r7, #12
 8000b96:	2200      	movs	r2, #0
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4816      	ldr	r0, [pc, #88]	; (8000bf4 <MX_TIM1_Init+0x140>)
 8000b9c:	f005 fadb 	bl	8006156 <HAL_TIM_IC_ConfigChannel>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000ba6:	f000 fa0f 	bl	8000fc8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000baa:	2302      	movs	r3, #2
 8000bac:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000bb2:	f107 030c 	add.w	r3, r7, #12
 8000bb6:	2204      	movs	r2, #4
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480e      	ldr	r0, [pc, #56]	; (8000bf4 <MX_TIM1_Init+0x140>)
 8000bbc:	f005 facb 	bl	8006156 <HAL_TIM_IC_ConfigChannel>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000bc6:	f000 f9ff 	bl	8000fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <MX_TIM1_Init+0x140>)
 8000bdc:	f005 ffe4 	bl	8006ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8000be6:	f000 f9ef 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	3740      	adds	r7, #64	; 0x40
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000510 	.word	0x20000510
 8000bf8:	40010000 	.word	0x40010000

08000bfc <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <MX_UART7_Init+0x58>)
 8000c02:	4a15      	ldr	r2, [pc, #84]	; (8000c58 <MX_UART7_Init+0x5c>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <MX_UART7_Init+0x58>)
 8000c08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c0c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <MX_UART7_Init+0x58>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <MX_UART7_Init+0x58>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <MX_UART7_Init+0x58>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <MX_UART7_Init+0x58>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <MX_UART7_Init+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <MX_UART7_Init+0x58>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <MX_UART7_Init+0x58>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <MX_UART7_Init+0x58>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000c3e:	4805      	ldr	r0, [pc, #20]	; (8000c54 <MX_UART7_Init+0x58>)
 8000c40:	f006 f85e 	bl	8006d00 <HAL_UART_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000c4a:	f000 f9bd 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	2000055c 	.word	0x2000055c
 8000c58:	40007800 	.word	0x40007800

08000c5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08e      	sub	sp, #56	; 0x38
 8000c60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
 8000c70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c72:	4b95      	ldr	r3, [pc, #596]	; (8000ec8 <MX_GPIO_Init+0x26c>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a94      	ldr	r2, [pc, #592]	; (8000ec8 <MX_GPIO_Init+0x26c>)
 8000c78:	f043 0310 	orr.w	r3, r3, #16
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b92      	ldr	r3, [pc, #584]	; (8000ec8 <MX_GPIO_Init+0x26c>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0310 	and.w	r3, r3, #16
 8000c86:	623b      	str	r3, [r7, #32]
 8000c88:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8a:	4b8f      	ldr	r3, [pc, #572]	; (8000ec8 <MX_GPIO_Init+0x26c>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a8e      	ldr	r2, [pc, #568]	; (8000ec8 <MX_GPIO_Init+0x26c>)
 8000c90:	f043 0304 	orr.w	r3, r3, #4
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b8c      	ldr	r3, [pc, #560]	; (8000ec8 <MX_GPIO_Init+0x26c>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0304 	and.w	r3, r3, #4
 8000c9e:	61fb      	str	r3, [r7, #28]
 8000ca0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ca2:	4b89      	ldr	r3, [pc, #548]	; (8000ec8 <MX_GPIO_Init+0x26c>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a88      	ldr	r2, [pc, #544]	; (8000ec8 <MX_GPIO_Init+0x26c>)
 8000ca8:	f043 0320 	orr.w	r3, r3, #32
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b86      	ldr	r3, [pc, #536]	; (8000ec8 <MX_GPIO_Init+0x26c>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0320 	and.w	r3, r3, #32
 8000cb6:	61bb      	str	r3, [r7, #24]
 8000cb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cba:	4b83      	ldr	r3, [pc, #524]	; (8000ec8 <MX_GPIO_Init+0x26c>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a82      	ldr	r2, [pc, #520]	; (8000ec8 <MX_GPIO_Init+0x26c>)
 8000cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b80      	ldr	r3, [pc, #512]	; (8000ec8 <MX_GPIO_Init+0x26c>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	4b7d      	ldr	r3, [pc, #500]	; (8000ec8 <MX_GPIO_Init+0x26c>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a7c      	ldr	r2, [pc, #496]	; (8000ec8 <MX_GPIO_Init+0x26c>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b7a      	ldr	r3, [pc, #488]	; (8000ec8 <MX_GPIO_Init+0x26c>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cea:	4b77      	ldr	r3, [pc, #476]	; (8000ec8 <MX_GPIO_Init+0x26c>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a76      	ldr	r2, [pc, #472]	; (8000ec8 <MX_GPIO_Init+0x26c>)
 8000cf0:	f043 0302 	orr.w	r3, r3, #2
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b74      	ldr	r3, [pc, #464]	; (8000ec8 <MX_GPIO_Init+0x26c>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d02:	4b71      	ldr	r3, [pc, #452]	; (8000ec8 <MX_GPIO_Init+0x26c>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a70      	ldr	r2, [pc, #448]	; (8000ec8 <MX_GPIO_Init+0x26c>)
 8000d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b6e      	ldr	r3, [pc, #440]	; (8000ec8 <MX_GPIO_Init+0x26c>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1a:	4b6b      	ldr	r3, [pc, #428]	; (8000ec8 <MX_GPIO_Init+0x26c>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a6a      	ldr	r2, [pc, #424]	; (8000ec8 <MX_GPIO_Init+0x26c>)
 8000d20:	f043 0308 	orr.w	r3, r3, #8
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b68      	ldr	r3, [pc, #416]	; (8000ec8 <MX_GPIO_Init+0x26c>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0308 	and.w	r3, r3, #8
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HiL_TL2_Car_GPIO_Port, HiL_TL2_Car_Pin, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2180      	movs	r1, #128	; 0x80
 8000d36:	4865      	ldr	r0, [pc, #404]	; (8000ecc <MX_GPIO_Init+0x270>)
 8000d38:	f001 fe16 	bl	8002968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HiL_SW5_Pin|HiL_SW8_Pin|HiL_SW6_Pin|HiL_SW7_Pin
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f24c 41b0 	movw	r1, #50352	; 0xc4b0
 8000d42:	4863      	ldr	r0, [pc, #396]	; (8000ed0 <MX_GPIO_Init+0x274>)
 8000d44:	f001 fe10 	bl	8002968 <HAL_GPIO_WritePin>
                          |HiL_LIS2DW12TR_Int2_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HiL_button3_B_Pin|HiL_button3_A_Pin, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	210c      	movs	r1, #12
 8000d4c:	4861      	ldr	r0, [pc, #388]	; (8000ed4 <MX_GPIO_Init+0x278>)
 8000d4e:	f001 fe0b 	bl	8002968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HiL_LIS2DW12TR_Int1_Pin|HiL_TL3_Car_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 8000d58:	485f      	ldr	r0, [pc, #380]	; (8000ed8 <MX_GPIO_Init+0x27c>)
 8000d5a:	f001 fe05 	bl	8002968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HiL_TL1_Car_GPIO_Port, HiL_TL1_Car_Pin, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d64:	485d      	ldr	r0, [pc, #372]	; (8000edc <MX_GPIO_Init+0x280>)
 8000d66:	f001 fdff 	bl	8002968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, HiL_TL4_Car_Pin|HiL_button3_C_Pin|HiL_button3_D_Pin|HiL_button3_center_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2174      	movs	r1, #116	; 0x74
 8000d6e:	485c      	ldr	r0, [pc, #368]	; (8000ee0 <MX_GPIO_Init+0x284>)
 8000d70:	f001 fdfa 	bl	8002968 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HiL_Disp_Data_Instr_Pin HiL_Disp_CS_Pin */
  GPIO_InitStruct.Pin = HiL_Disp_Data_Instr_Pin|HiL_Disp_CS_Pin;
 8000d74:	f241 0308 	movw	r3, #4104	; 0x1008
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d86:	4619      	mov	r1, r3
 8000d88:	4856      	ldr	r0, [pc, #344]	; (8000ee4 <MX_GPIO_Init+0x288>)
 8000d8a:	f001 fc29 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_595_Reset_Pin HiL_Disp_Reset_Pin HiL_595_STCP_Pin */
  GPIO_InitStruct.Pin = HiL_595_Reset_Pin|HiL_Disp_Reset_Pin|HiL_595_STCP_Pin;
 8000d8e:	f248 0305 	movw	r3, #32773	; 0x8005
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da0:	4619      	mov	r1, r3
 8000da2:	484e      	ldr	r0, [pc, #312]	; (8000edc <MX_GPIO_Init+0x280>)
 8000da4:	f001 fc1c 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL2_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL2_Car_Pin;
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HiL_TL2_Car_GPIO_Port, &GPIO_InitStruct);
 8000db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4843      	ldr	r0, [pc, #268]	; (8000ecc <MX_GPIO_Init+0x270>)
 8000dc0:	f001 fc0e 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_USR_LED1_Pin */
  GPIO_InitStruct.Pin = HiL_USR_LED1_Pin;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HiL_USR_LED1_GPIO_Port, &GPIO_InitStruct);
 8000dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4840      	ldr	r0, [pc, #256]	; (8000ed8 <MX_GPIO_Init+0x27c>)
 8000dd8:	f001 fc02 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_USR_LED2_Pin */
  GPIO_InitStruct.Pin = HiL_USR_LED2_Pin;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HiL_USR_LED2_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dec:	4619      	mov	r1, r3
 8000dee:	4838      	ldr	r0, [pc, #224]	; (8000ed0 <MX_GPIO_Init+0x274>)
 8000df0:	f001 fbf6 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_SW5_Pin HiL_SW8_Pin HiL_SW6_Pin HiL_SW7_Pin */
  GPIO_InitStruct.Pin = HiL_SW5_Pin|HiL_SW8_Pin|HiL_SW6_Pin|HiL_SW7_Pin;
 8000df4:	f24c 4310 	movw	r3, #50192	; 0xc410
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000dfa:	2311      	movs	r3, #17
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4830      	ldr	r0, [pc, #192]	; (8000ed0 <MX_GPIO_Init+0x274>)
 8000e0e:	f001 fbe7 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_button3_B_Pin HiL_button3_A_Pin */
  GPIO_InitStruct.Pin = HiL_button3_B_Pin|HiL_button3_A_Pin;
 8000e12:	230c      	movs	r3, #12
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e16:	2311      	movs	r3, #17
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e26:	4619      	mov	r1, r3
 8000e28:	482a      	ldr	r0, [pc, #168]	; (8000ed4 <MX_GPIO_Init+0x278>)
 8000e2a:	f001 fbd9 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_LIS2DW12TR_Int1_Pin HiL_TL3_Car_Pin */
  GPIO_InitStruct.Pin = HiL_LIS2DW12TR_Int1_Pin|HiL_TL3_Car_Pin;
 8000e2e:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e44:	4619      	mov	r1, r3
 8000e46:	4824      	ldr	r0, [pc, #144]	; (8000ed8 <MX_GPIO_Init+0x27c>)
 8000e48:	f001 fbca 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL1_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL1_Car_Pin;
 8000e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HiL_TL1_Car_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e62:	4619      	mov	r1, r3
 8000e64:	481d      	ldr	r0, [pc, #116]	; (8000edc <MX_GPIO_Init+0x280>)
 8000e66:	f001 fbbb 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL4_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL4_Car_Pin;
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HiL_TL4_Car_GPIO_Port, &GPIO_InitStruct);
 8000e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4817      	ldr	r0, [pc, #92]	; (8000ee0 <MX_GPIO_Init+0x284>)
 8000e82:	f001 fbad 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_button3_C_Pin HiL_button3_D_Pin HiL_button3_center_Pin */
  GPIO_InitStruct.Pin = HiL_button3_C_Pin|HiL_button3_D_Pin|HiL_button3_center_Pin;
 8000e86:	2370      	movs	r3, #112	; 0x70
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e8a:	2311      	movs	r3, #17
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4810      	ldr	r0, [pc, #64]	; (8000ee0 <MX_GPIO_Init+0x284>)
 8000e9e:	f001 fb9f 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_LIS2DW12TR_Int2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = HiL_LIS2DW12TR_Int2_Pin|LD2_Pin;
 8000ea2:	23a0      	movs	r3, #160	; 0xa0
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <MX_GPIO_Init+0x274>)
 8000eba:	f001 fb91 	bl	80025e0 <HAL_GPIO_Init>

}
 8000ebe:	bf00      	nop
 8000ec0:	3738      	adds	r7, #56	; 0x38
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40021400 	.word	0x40021400
 8000ed0:	40020400 	.word	0x40020400
 8000ed4:	40021800 	.word	0x40021800
 8000ed8:	40020000 	.word	0x40020000
 8000edc:	40020800 	.word	0x40020800
 8000ee0:	40020c00 	.word	0x40020c00
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000ef0:	f00d fa6c 	bl	800e3cc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f00a fb4f 	bl	800b598 <osDelay>
 8000efa:	e7fb      	b.n	8000ef4 <StartDefaultTask+0xc>

08000efc <StartTask_gateway>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_gateway */
void StartTask_gateway(void *argument)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_gateway */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f04:	2001      	movs	r0, #1
 8000f06:	f00a fb47 	bl	800b598 <osDelay>
 8000f0a:	e7fb      	b.n	8000f04 <StartTask_gateway+0x8>

08000f0c <StartTask_controller>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_controller */
void StartTask_controller(void *argument)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	  if( USB_MSGQ_Rx != NULL )
 8000f14:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <StartTask_controller+0x64>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d024      	beq.n	8000f66 <StartTask_controller+0x5a>
	  {

			status = osMessageQueueGet(USB_MSGQ_Rx, &msg, NULL, 0U);
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <StartTask_controller+0x64>)
 8000f1e:	6818      	ldr	r0, [r3, #0]
 8000f20:	f107 010c 	add.w	r1, r7, #12
 8000f24:	2300      	movs	r3, #0
 8000f26:	2200      	movs	r2, #0
 8000f28:	f00a fc5e 	bl	800b7e8 <osMessageQueueGet>
 8000f2c:	6138      	str	r0, [r7, #16]

			if (status == osOK)
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d118      	bne.n	8000f66 <StartTask_controller+0x5a>
			{
				for (int i = 0; i < sizeof(msg.Buf); i++)
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
 8000f38:	e00d      	b.n	8000f56 <StartTask_controller+0x4a>
				{
					recieve_message[i] = msg.Buf[i];					//		Dummy processing of message. Could be in any other task
 8000f3a:	f107 020c 	add.w	r2, r7, #12
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	4413      	add	r3, r2
 8000f42:	7819      	ldrb	r1, [r3, #0]
 8000f44:	f107 0208 	add.w	r2, r7, #8
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	460a      	mov	r2, r1
 8000f4e:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < sizeof(msg.Buf); i++)
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	3301      	adds	r3, #1
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	2b03      	cmp	r3, #3
 8000f5a:	d9ee      	bls.n	8000f3a <StartTask_controller+0x2e>
				}

				HiL_controller_read_message(recieve_message);
 8000f5c:	f107 0308 	add.w	r3, r7, #8
 8000f60:	4618      	mov	r0, r3
 8000f62:	f007 ffe5 	bl	8008f30 <HiL_controller_read_message>
			}
	  }

	  osDelay(10);
 8000f66:	200a      	movs	r0, #10
 8000f68:	f00a fb16 	bl	800b598 <osDelay>
	  if( USB_MSGQ_Rx != NULL )
 8000f6c:	e7d2      	b.n	8000f14 <StartTask_controller+0x8>
 8000f6e:	bf00      	nop
 8000f70:	200005fc 	.word	0x200005fc

08000f74 <StartTask_SHT20>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_SHT20 */
void StartTask_SHT20(void *argument)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_SHT20 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f00a fb0b 	bl	800b598 <osDelay>
 8000f82:	e7fb      	b.n	8000f7c <StartTask_SHT20+0x8>

08000f84 <StartTask_74HC595D>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_74HC595D */
void StartTask_74HC595D(void *argument)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_74HC595D */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	f00a fb03 	bl	800b598 <osDelay>
 8000f92:	e7fb      	b.n	8000f8c <StartTask_74HC595D+0x8>

08000f94 <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void *argument)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f00a fafb 	bl	800b598 <osDelay>
 8000fa2:	e7fb      	b.n	8000f9c <StartTask06+0x8>

08000fa4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d101      	bne.n	8000fba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fb6:	f000 fc75 	bl	80018a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40001000 	.word	0x40001000

08000fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fcc:	b672      	cpsid	i
}
 8000fce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <Error_Handler+0x8>
	...

08000fd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <HAL_MspInit+0x4c>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	4a10      	ldr	r2, [pc, #64]	; (8001020 <HAL_MspInit+0x4c>)
 8000fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <HAL_MspInit+0x4c>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <HAL_MspInit+0x4c>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <HAL_MspInit+0x4c>)
 8000ff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <HAL_MspInit+0x4c>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	210f      	movs	r1, #15
 800100e:	f06f 0001 	mvn.w	r0, #1
 8001012:	f000 fe3f 	bl	8001c94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40023800 	.word	0x40023800

08001024 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	; 0x28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a17      	ldr	r2, [pc, #92]	; (80010a0 <HAL_CAN_MspInit+0x7c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d127      	bne.n	8001096 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001046:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <HAL_CAN_MspInit+0x80>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	4a16      	ldr	r2, [pc, #88]	; (80010a4 <HAL_CAN_MspInit+0x80>)
 800104c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001050:	6413      	str	r3, [r2, #64]	; 0x40
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <HAL_CAN_MspInit+0x80>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <HAL_CAN_MspInit+0x80>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a10      	ldr	r2, [pc, #64]	; (80010a4 <HAL_CAN_MspInit+0x80>)
 8001064:	f043 0308 	orr.w	r3, r3, #8
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <HAL_CAN_MspInit+0x80>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0308 	and.w	r3, r3, #8
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = HiL_CAN1_RX_Pin|HiL_CAN1_TX_Pin;
 8001076:	2303      	movs	r3, #3
 8001078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001082:	2303      	movs	r3, #3
 8001084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001086:	2309      	movs	r3, #9
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <HAL_CAN_MspInit+0x84>)
 8001092:	f001 faa5 	bl	80025e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001096:	bf00      	nop
 8001098:	3728      	adds	r7, #40	; 0x28
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40006400 	.word	0x40006400
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020c00 	.word	0x40020c00

080010ac <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a19      	ldr	r2, [pc, #100]	; (8001130 <HAL_DAC_MspInit+0x84>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d12b      	bne.n	8001126 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80010ce:	4b19      	ldr	r3, [pc, #100]	; (8001134 <HAL_DAC_MspInit+0x88>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	4a18      	ldr	r2, [pc, #96]	; (8001134 <HAL_DAC_MspInit+0x88>)
 80010d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80010d8:	6413      	str	r3, [r2, #64]	; 0x40
 80010da:	4b16      	ldr	r3, [pc, #88]	; (8001134 <HAL_DAC_MspInit+0x88>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	4b13      	ldr	r3, [pc, #76]	; (8001134 <HAL_DAC_MspInit+0x88>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a12      	ldr	r2, [pc, #72]	; (8001134 <HAL_DAC_MspInit+0x88>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b10      	ldr	r3, [pc, #64]	; (8001134 <HAL_DAC_MspInit+0x88>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = HiL_Poti_Pin;
 80010fe:	2310      	movs	r3, #16
 8001100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001102:	2303      	movs	r3, #3
 8001104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(HiL_Poti_GPIO_Port, &GPIO_InitStruct);
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4619      	mov	r1, r3
 8001110:	4809      	ldr	r0, [pc, #36]	; (8001138 <HAL_DAC_MspInit+0x8c>)
 8001112:	f001 fa65 	bl	80025e0 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	210f      	movs	r1, #15
 800111a:	2036      	movs	r0, #54	; 0x36
 800111c:	f000 fdba 	bl	8001c94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001120:	2036      	movs	r0, #54	; 0x36
 8001122:	f000 fdd3 	bl	8001ccc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001126:	bf00      	nop
 8001128:	3728      	adds	r7, #40	; 0x28
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40007400 	.word	0x40007400
 8001134:	40023800 	.word	0x40023800
 8001138:	40020000 	.word	0x40020000

0800113c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08e      	sub	sp, #56	; 0x38
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a4e      	ldr	r2, [pc, #312]	; (8001294 <HAL_ETH_MspInit+0x158>)
 800115a:	4293      	cmp	r3, r2
 800115c:	f040 8096 	bne.w	800128c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001160:	4b4d      	ldr	r3, [pc, #308]	; (8001298 <HAL_ETH_MspInit+0x15c>)
 8001162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001164:	4a4c      	ldr	r2, [pc, #304]	; (8001298 <HAL_ETH_MspInit+0x15c>)
 8001166:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800116a:	6313      	str	r3, [r2, #48]	; 0x30
 800116c:	4b4a      	ldr	r3, [pc, #296]	; (8001298 <HAL_ETH_MspInit+0x15c>)
 800116e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001174:	623b      	str	r3, [r7, #32]
 8001176:	6a3b      	ldr	r3, [r7, #32]
 8001178:	4b47      	ldr	r3, [pc, #284]	; (8001298 <HAL_ETH_MspInit+0x15c>)
 800117a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117c:	4a46      	ldr	r2, [pc, #280]	; (8001298 <HAL_ETH_MspInit+0x15c>)
 800117e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001182:	6313      	str	r3, [r2, #48]	; 0x30
 8001184:	4b44      	ldr	r3, [pc, #272]	; (8001298 <HAL_ETH_MspInit+0x15c>)
 8001186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001188:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800118c:	61fb      	str	r3, [r7, #28]
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	4b41      	ldr	r3, [pc, #260]	; (8001298 <HAL_ETH_MspInit+0x15c>)
 8001192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001194:	4a40      	ldr	r2, [pc, #256]	; (8001298 <HAL_ETH_MspInit+0x15c>)
 8001196:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800119a:	6313      	str	r3, [r2, #48]	; 0x30
 800119c:	4b3e      	ldr	r3, [pc, #248]	; (8001298 <HAL_ETH_MspInit+0x15c>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011a4:	61bb      	str	r3, [r7, #24]
 80011a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a8:	4b3b      	ldr	r3, [pc, #236]	; (8001298 <HAL_ETH_MspInit+0x15c>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ac:	4a3a      	ldr	r2, [pc, #232]	; (8001298 <HAL_ETH_MspInit+0x15c>)
 80011ae:	f043 0304 	orr.w	r3, r3, #4
 80011b2:	6313      	str	r3, [r2, #48]	; 0x30
 80011b4:	4b38      	ldr	r3, [pc, #224]	; (8001298 <HAL_ETH_MspInit+0x15c>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c0:	4b35      	ldr	r3, [pc, #212]	; (8001298 <HAL_ETH_MspInit+0x15c>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c4:	4a34      	ldr	r2, [pc, #208]	; (8001298 <HAL_ETH_MspInit+0x15c>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	6313      	str	r3, [r2, #48]	; 0x30
 80011cc:	4b32      	ldr	r3, [pc, #200]	; (8001298 <HAL_ETH_MspInit+0x15c>)
 80011ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d8:	4b2f      	ldr	r3, [pc, #188]	; (8001298 <HAL_ETH_MspInit+0x15c>)
 80011da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011dc:	4a2e      	ldr	r2, [pc, #184]	; (8001298 <HAL_ETH_MspInit+0x15c>)
 80011de:	f043 0302 	orr.w	r3, r3, #2
 80011e2:	6313      	str	r3, [r2, #48]	; 0x30
 80011e4:	4b2c      	ldr	r3, [pc, #176]	; (8001298 <HAL_ETH_MspInit+0x15c>)
 80011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011f0:	4b29      	ldr	r3, [pc, #164]	; (8001298 <HAL_ETH_MspInit+0x15c>)
 80011f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f4:	4a28      	ldr	r2, [pc, #160]	; (8001298 <HAL_ETH_MspInit+0x15c>)
 80011f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011fa:	6313      	str	r3, [r2, #48]	; 0x30
 80011fc:	4b26      	ldr	r3, [pc, #152]	; (8001298 <HAL_ETH_MspInit+0x15c>)
 80011fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001208:	2332      	movs	r3, #50	; 0x32
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001214:	2303      	movs	r3, #3
 8001216:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001218:	230b      	movs	r3, #11
 800121a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001220:	4619      	mov	r1, r3
 8001222:	481e      	ldr	r0, [pc, #120]	; (800129c <HAL_ETH_MspInit+0x160>)
 8001224:	f001 f9dc 	bl	80025e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001228:	2386      	movs	r3, #134	; 0x86
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001234:	2303      	movs	r3, #3
 8001236:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001238:	230b      	movs	r3, #11
 800123a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001240:	4619      	mov	r1, r3
 8001242:	4817      	ldr	r0, [pc, #92]	; (80012a0 <HAL_ETH_MspInit+0x164>)
 8001244:	f001 f9cc 	bl	80025e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001248:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001256:	2303      	movs	r3, #3
 8001258:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800125a:	230b      	movs	r3, #11
 800125c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001262:	4619      	mov	r1, r3
 8001264:	480f      	ldr	r0, [pc, #60]	; (80012a4 <HAL_ETH_MspInit+0x168>)
 8001266:	f001 f9bb 	bl	80025e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800126a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800127c:	230b      	movs	r3, #11
 800127e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001284:	4619      	mov	r1, r3
 8001286:	4808      	ldr	r0, [pc, #32]	; (80012a8 <HAL_ETH_MspInit+0x16c>)
 8001288:	f001 f9aa 	bl	80025e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800128c:	bf00      	nop
 800128e:	3738      	adds	r7, #56	; 0x38
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40028000 	.word	0x40028000
 8001298:	40023800 	.word	0x40023800
 800129c:	40020800 	.word	0x40020800
 80012a0:	40020000 	.word	0x40020000
 80012a4:	40020400 	.word	0x40020400
 80012a8:	40021800 	.word	0x40021800

080012ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b0ae      	sub	sp, #184	; 0xb8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2290      	movs	r2, #144	; 0x90
 80012ca:	2100      	movs	r1, #0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f00d fe6b 	bl	800efa8 <memset>
  if(hi2c->Instance==I2C1)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a22      	ldr	r2, [pc, #136]	; (8001360 <HAL_I2C_MspInit+0xb4>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d13c      	bne.n	8001356 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012e0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012e2:	2300      	movs	r3, #0
 80012e4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4618      	mov	r0, r3
 80012ec:	f003 fc8c 	bl	8004c08 <HAL_RCCEx_PeriphCLKConfig>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80012f6:	f7ff fe67 	bl	8000fc8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <HAL_I2C_MspInit+0xb8>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a19      	ldr	r2, [pc, #100]	; (8001364 <HAL_I2C_MspInit+0xb8>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b17      	ldr	r3, [pc, #92]	; (8001364 <HAL_I2C_MspInit+0xb8>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = HiL_I2C1_SCL_Pin|HiL_I2C1_SDA_Pin;
 8001312:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001316:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800131a:	2312      	movs	r3, #18
 800131c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001326:	2303      	movs	r3, #3
 8001328:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800132c:	2304      	movs	r3, #4
 800132e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001332:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001336:	4619      	mov	r1, r3
 8001338:	480b      	ldr	r0, [pc, #44]	; (8001368 <HAL_I2C_MspInit+0xbc>)
 800133a:	f001 f951 	bl	80025e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <HAL_I2C_MspInit+0xb8>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	4a08      	ldr	r2, [pc, #32]	; (8001364 <HAL_I2C_MspInit+0xb8>)
 8001344:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001348:	6413      	str	r3, [r2, #64]	; 0x40
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_I2C_MspInit+0xb8>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001356:	bf00      	nop
 8001358:	37b8      	adds	r7, #184	; 0xb8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40005400 	.word	0x40005400
 8001364:	40023800 	.word	0x40023800
 8001368:	40020400 	.word	0x40020400

0800136c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08e      	sub	sp, #56	; 0x38
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a4a      	ldr	r2, [pc, #296]	; (80014b4 <HAL_SPI_MspInit+0x148>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d144      	bne.n	8001418 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800138e:	4b4a      	ldr	r3, [pc, #296]	; (80014b8 <HAL_SPI_MspInit+0x14c>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	4a49      	ldr	r2, [pc, #292]	; (80014b8 <HAL_SPI_MspInit+0x14c>)
 8001394:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001398:	6453      	str	r3, [r2, #68]	; 0x44
 800139a:	4b47      	ldr	r3, [pc, #284]	; (80014b8 <HAL_SPI_MspInit+0x14c>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013a2:	623b      	str	r3, [r7, #32]
 80013a4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a6:	4b44      	ldr	r3, [pc, #272]	; (80014b8 <HAL_SPI_MspInit+0x14c>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a43      	ldr	r2, [pc, #268]	; (80014b8 <HAL_SPI_MspInit+0x14c>)
 80013ac:	f043 0308 	orr.w	r3, r3, #8
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b41      	ldr	r3, [pc, #260]	; (80014b8 <HAL_SPI_MspInit+0x14c>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	61fb      	str	r3, [r7, #28]
 80013bc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013be:	4b3e      	ldr	r3, [pc, #248]	; (80014b8 <HAL_SPI_MspInit+0x14c>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a3d      	ldr	r2, [pc, #244]	; (80014b8 <HAL_SPI_MspInit+0x14c>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b3b      	ldr	r3, [pc, #236]	; (80014b8 <HAL_SPI_MspInit+0x14c>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	61bb      	str	r3, [r7, #24]
 80013d4:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = HiL_595_DS_Pin;
 80013d6:	2380      	movs	r3, #128	; 0x80
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013e6:	2305      	movs	r3, #5
 80013e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_595_DS_GPIO_Port, &GPIO_InitStruct);
 80013ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ee:	4619      	mov	r1, r3
 80013f0:	4832      	ldr	r0, [pc, #200]	; (80014bc <HAL_SPI_MspInit+0x150>)
 80013f2:	f001 f8f5 	bl	80025e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013f6:	2308      	movs	r3, #8
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	2302      	movs	r3, #2
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001402:	2303      	movs	r3, #3
 8001404:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001406:	2305      	movs	r3, #5
 8001408:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140e:	4619      	mov	r1, r3
 8001410:	482b      	ldr	r0, [pc, #172]	; (80014c0 <HAL_SPI_MspInit+0x154>)
 8001412:	f001 f8e5 	bl	80025e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001416:	e049      	b.n	80014ac <HAL_SPI_MspInit+0x140>
  else if(hspi->Instance==SPI3)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a29      	ldr	r2, [pc, #164]	; (80014c4 <HAL_SPI_MspInit+0x158>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d144      	bne.n	80014ac <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001422:	4b25      	ldr	r3, [pc, #148]	; (80014b8 <HAL_SPI_MspInit+0x14c>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	4a24      	ldr	r2, [pc, #144]	; (80014b8 <HAL_SPI_MspInit+0x14c>)
 8001428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800142c:	6413      	str	r3, [r2, #64]	; 0x40
 800142e:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <HAL_SPI_MspInit+0x14c>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143a:	4b1f      	ldr	r3, [pc, #124]	; (80014b8 <HAL_SPI_MspInit+0x14c>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a1e      	ldr	r2, [pc, #120]	; (80014b8 <HAL_SPI_MspInit+0x14c>)
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <HAL_SPI_MspInit+0x14c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001452:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <HAL_SPI_MspInit+0x14c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a18      	ldr	r2, [pc, #96]	; (80014b8 <HAL_SPI_MspInit+0x14c>)
 8001458:	f043 0304 	orr.w	r3, r3, #4
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <HAL_SPI_MspInit+0x14c>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HiL_SPI3_MOSI_Pin;
 800146a:	2304      	movs	r3, #4
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800147a:	2307      	movs	r3, #7
 800147c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_SPI3_MOSI_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001482:	4619      	mov	r1, r3
 8001484:	480e      	ldr	r0, [pc, #56]	; (80014c0 <HAL_SPI_MspInit+0x154>)
 8001486:	f001 f8ab 	bl	80025e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HiL_SPI3_SCK_Pin;
 800148a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001490:	2302      	movs	r3, #2
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001498:	2303      	movs	r3, #3
 800149a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800149c:	2306      	movs	r3, #6
 800149e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_SPI3_SCK_GPIO_Port, &GPIO_InitStruct);
 80014a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a4:	4619      	mov	r1, r3
 80014a6:	4808      	ldr	r0, [pc, #32]	; (80014c8 <HAL_SPI_MspInit+0x15c>)
 80014a8:	f001 f89a 	bl	80025e0 <HAL_GPIO_Init>
}
 80014ac:	bf00      	nop
 80014ae:	3738      	adds	r7, #56	; 0x38
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40013000 	.word	0x40013000
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020c00 	.word	0x40020c00
 80014c0:	40020400 	.word	0x40020400
 80014c4:	40003c00 	.word	0x40003c00
 80014c8:	40020800 	.word	0x40020800

080014cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	; 0x28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a1b      	ldr	r2, [pc, #108]	; (8001558 <HAL_TIM_Base_MspInit+0x8c>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d130      	bne.n	8001550 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014ee:	4b1b      	ldr	r3, [pc, #108]	; (800155c <HAL_TIM_Base_MspInit+0x90>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	4a1a      	ldr	r2, [pc, #104]	; (800155c <HAL_TIM_Base_MspInit+0x90>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6453      	str	r3, [r2, #68]	; 0x44
 80014fa:	4b18      	ldr	r3, [pc, #96]	; (800155c <HAL_TIM_Base_MspInit+0x90>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <HAL_TIM_Base_MspInit+0x90>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a14      	ldr	r2, [pc, #80]	; (800155c <HAL_TIM_Base_MspInit+0x90>)
 800150c:	f043 0310 	orr.w	r3, r3, #16
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b12      	ldr	r3, [pc, #72]	; (800155c <HAL_TIM_Base_MspInit+0x90>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0310 	and.w	r3, r3, #16
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = HiL_595_Enable_Pin;
 800151e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2300      	movs	r3, #0
 800152e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001530:	2301      	movs	r3, #1
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HiL_595_Enable_GPIO_Port, &GPIO_InitStruct);
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	4619      	mov	r1, r3
 800153a:	4809      	ldr	r0, [pc, #36]	; (8001560 <HAL_TIM_Base_MspInit+0x94>)
 800153c:	f001 f850 	bl	80025e0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001540:	2200      	movs	r2, #0
 8001542:	2105      	movs	r1, #5
 8001544:	201b      	movs	r0, #27
 8001546:	f000 fba5 	bl	8001c94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800154a:	201b      	movs	r0, #27
 800154c:	f000 fbbe 	bl	8001ccc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001550:	bf00      	nop
 8001552:	3728      	adds	r7, #40	; 0x28
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40010000 	.word	0x40010000
 800155c:	40023800 	.word	0x40023800
 8001560:	40021000 	.word	0x40021000

08001564 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b0ae      	sub	sp, #184	; 0xb8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	2290      	movs	r2, #144	; 0x90
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f00d fd0f 	bl	800efa8 <memset>
  if(huart->Instance==UART7)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a22      	ldr	r2, [pc, #136]	; (8001618 <HAL_UART_MspInit+0xb4>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d13c      	bne.n	800160e <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001598:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800159a:	2300      	movs	r3, #0
 800159c:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4618      	mov	r0, r3
 80015a4:	f003 fb30 	bl	8004c08 <HAL_RCCEx_PeriphCLKConfig>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015ae:	f7ff fd0b 	bl	8000fc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80015b2:	4b1a      	ldr	r3, [pc, #104]	; (800161c <HAL_UART_MspInit+0xb8>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	4a19      	ldr	r2, [pc, #100]	; (800161c <HAL_UART_MspInit+0xb8>)
 80015b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80015bc:	6413      	str	r3, [r2, #64]	; 0x40
 80015be:	4b17      	ldr	r3, [pc, #92]	; (800161c <HAL_UART_MspInit+0xb8>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ca:	4b14      	ldr	r3, [pc, #80]	; (800161c <HAL_UART_MspInit+0xb8>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a13      	ldr	r2, [pc, #76]	; (800161c <HAL_UART_MspInit+0xb8>)
 80015d0:	f043 0310 	orr.w	r3, r3, #16
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <HAL_UART_MspInit+0xb8>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0310 	and.w	r3, r3, #16
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = HiL_UART7_RX_Pin|HiL_UART7_TX_Pin;
 80015e2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80015e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	2302      	movs	r3, #2
 80015ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f6:	2303      	movs	r3, #3
 80015f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80015fc:	2308      	movs	r3, #8
 80015fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001602:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001606:	4619      	mov	r1, r3
 8001608:	4805      	ldr	r0, [pc, #20]	; (8001620 <HAL_UART_MspInit+0xbc>)
 800160a:	f000 ffe9 	bl	80025e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 800160e:	bf00      	nop
 8001610:	37b8      	adds	r7, #184	; 0xb8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40007800 	.word	0x40007800
 800161c:	40023800 	.word	0x40023800
 8001620:	40021000 	.word	0x40021000

08001624 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08e      	sub	sp, #56	; 0x38
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800162c:	2300      	movs	r3, #0
 800162e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001634:	4b33      	ldr	r3, [pc, #204]	; (8001704 <HAL_InitTick+0xe0>)
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	4a32      	ldr	r2, [pc, #200]	; (8001704 <HAL_InitTick+0xe0>)
 800163a:	f043 0310 	orr.w	r3, r3, #16
 800163e:	6413      	str	r3, [r2, #64]	; 0x40
 8001640:	4b30      	ldr	r3, [pc, #192]	; (8001704 <HAL_InitTick+0xe0>)
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	f003 0310 	and.w	r3, r3, #16
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800164c:	f107 0210 	add.w	r2, r7, #16
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	4611      	mov	r1, r2
 8001656:	4618      	mov	r0, r3
 8001658:	f003 faa4 	bl	8004ba4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800165c:	6a3b      	ldr	r3, [r7, #32]
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001662:	2b00      	cmp	r3, #0
 8001664:	d103      	bne.n	800166e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001666:	f003 fa75 	bl	8004b54 <HAL_RCC_GetPCLK1Freq>
 800166a:	6378      	str	r0, [r7, #52]	; 0x34
 800166c:	e004      	b.n	8001678 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800166e:	f003 fa71 	bl	8004b54 <HAL_RCC_GetPCLK1Freq>
 8001672:	4603      	mov	r3, r0
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800167a:	4a23      	ldr	r2, [pc, #140]	; (8001708 <HAL_InitTick+0xe4>)
 800167c:	fba2 2303 	umull	r2, r3, r2, r3
 8001680:	0c9b      	lsrs	r3, r3, #18
 8001682:	3b01      	subs	r3, #1
 8001684:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001686:	4b21      	ldr	r3, [pc, #132]	; (800170c <HAL_InitTick+0xe8>)
 8001688:	4a21      	ldr	r2, [pc, #132]	; (8001710 <HAL_InitTick+0xec>)
 800168a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800168c:	4b1f      	ldr	r3, [pc, #124]	; (800170c <HAL_InitTick+0xe8>)
 800168e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001692:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001694:	4a1d      	ldr	r2, [pc, #116]	; (800170c <HAL_InitTick+0xe8>)
 8001696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001698:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800169a:	4b1c      	ldr	r3, [pc, #112]	; (800170c <HAL_InitTick+0xe8>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a0:	4b1a      	ldr	r3, [pc, #104]	; (800170c <HAL_InitTick+0xe8>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a6:	4b19      	ldr	r3, [pc, #100]	; (800170c <HAL_InitTick+0xe8>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80016ac:	4817      	ldr	r0, [pc, #92]	; (800170c <HAL_InitTick+0xe8>)
 80016ae:	f003 ff7e 	bl	80055ae <HAL_TIM_Base_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80016b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d11b      	bne.n	80016f8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80016c0:	4812      	ldr	r0, [pc, #72]	; (800170c <HAL_InitTick+0xe8>)
 80016c2:	f003 ffcb 	bl	800565c <HAL_TIM_Base_Start_IT>
 80016c6:	4603      	mov	r3, r0
 80016c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80016cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d111      	bne.n	80016f8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016d4:	2036      	movs	r0, #54	; 0x36
 80016d6:	f000 faf9 	bl	8001ccc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b0f      	cmp	r3, #15
 80016de:	d808      	bhi.n	80016f2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80016e0:	2200      	movs	r2, #0
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	2036      	movs	r0, #54	; 0x36
 80016e6:	f000 fad5 	bl	8001c94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <HAL_InitTick+0xf0>)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	e002      	b.n	80016f8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3738      	adds	r7, #56	; 0x38
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40023800 	.word	0x40023800
 8001708:	431bde83 	.word	0x431bde83
 800170c:	20000608 	.word	0x20000608
 8001710:	40001000 	.word	0x40001000
 8001714:	20000004 	.word	0x20000004

08001718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800171c:	e7fe      	b.n	800171c <NMI_Handler+0x4>

0800171e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001722:	e7fe      	b.n	8001722 <HardFault_Handler+0x4>

08001724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <MemManage_Handler+0x4>

0800172a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172e:	e7fe      	b.n	800172e <BusFault_Handler+0x4>

08001730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <UsageFault_Handler+0x4>

08001736 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <TIM1_CC_IRQHandler+0x10>)
 800174a:	f004 fbe5 	bl	8005f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000510 	.word	0x20000510

08001758 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <TIM6_DAC_IRQHandler+0x20>)
 800175e:	791b      	ldrb	r3, [r3, #4]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d002      	beq.n	800176c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8001766:	4804      	ldr	r0, [pc, #16]	; (8001778 <TIM6_DAC_IRQHandler+0x20>)
 8001768:	f000 fb32 	bl	8001dd0 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 800176c:	4803      	ldr	r0, [pc, #12]	; (800177c <TIM6_DAC_IRQHandler+0x24>)
 800176e:	f004 fbd3 	bl	8005f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000330 	.word	0x20000330
 800177c:	20000608 	.word	0x20000608

08001780 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <OTG_FS_IRQHandler+0x10>)
 8001786:	f001 fb76 	bl	8002e76 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20006b54 	.word	0x20006b54

08001794 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800179c:	4a14      	ldr	r2, [pc, #80]	; (80017f0 <_sbrk+0x5c>)
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <_sbrk+0x60>)
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <_sbrk+0x64>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d102      	bne.n	80017b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <_sbrk+0x64>)
 80017b2:	4a12      	ldr	r2, [pc, #72]	; (80017fc <_sbrk+0x68>)
 80017b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <_sbrk+0x64>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d207      	bcs.n	80017d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017c4:	f00d fba6 	bl	800ef14 <__errno>
 80017c8:	4603      	mov	r3, r0
 80017ca:	220c      	movs	r2, #12
 80017cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ce:	f04f 33ff 	mov.w	r3, #4294967295
 80017d2:	e009      	b.n	80017e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <_sbrk+0x64>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017da:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <_sbrk+0x64>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	4a05      	ldr	r2, [pc, #20]	; (80017f8 <_sbrk+0x64>)
 80017e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017e6:	68fb      	ldr	r3, [r7, #12]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20080000 	.word	0x20080000
 80017f4:	00000400 	.word	0x00000400
 80017f8:	20000654 	.word	0x20000654
 80017fc:	20007070 	.word	0x20007070

08001800 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <SystemInit+0x20>)
 8001806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800180a:	4a05      	ldr	r2, [pc, #20]	; (8001820 <SystemInit+0x20>)
 800180c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001824:	f8df d034 	ldr.w	sp, [pc, #52]	; 800185c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001828:	480d      	ldr	r0, [pc, #52]	; (8001860 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800182a:	490e      	ldr	r1, [pc, #56]	; (8001864 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800182c:	4a0e      	ldr	r2, [pc, #56]	; (8001868 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001830:	e002      	b.n	8001838 <LoopCopyDataInit>

08001832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001836:	3304      	adds	r3, #4

08001838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800183a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800183c:	d3f9      	bcc.n	8001832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800183e:	4a0b      	ldr	r2, [pc, #44]	; (800186c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001840:	4c0b      	ldr	r4, [pc, #44]	; (8001870 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001844:	e001      	b.n	800184a <LoopFillZerobss>

08001846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001848:	3204      	adds	r2, #4

0800184a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800184a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800184c:	d3fb      	bcc.n	8001846 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800184e:	f7ff ffd7 	bl	8001800 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001852:	f00d fb65 	bl	800ef20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001856:	f7fe fedf 	bl	8000618 <main>
  bx  lr    
 800185a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800185c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001864:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8001868:	0800f4ac 	.word	0x0800f4ac
  ldr r2, =_sbss
 800186c:	200002b4 	.word	0x200002b4
  ldr r4, =_ebss
 8001870:	2000706c 	.word	0x2000706c

08001874 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001874:	e7fe      	b.n	8001874 <ADC_IRQHandler>
	...

08001878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <HAL_Init+0x28>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a07      	ldr	r2, [pc, #28]	; (80018a0 <HAL_Init+0x28>)
 8001882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001886:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001888:	2003      	movs	r0, #3
 800188a:	f000 f9f8 	bl	8001c7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800188e:	200f      	movs	r0, #15
 8001890:	f7ff fec8 	bl	8001624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001894:	f7ff fb9e 	bl	8000fd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40023c00 	.word	0x40023c00

080018a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_IncTick+0x20>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <HAL_IncTick+0x24>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4413      	add	r3, r2
 80018b4:	4a04      	ldr	r2, [pc, #16]	; (80018c8 <HAL_IncTick+0x24>)
 80018b6:	6013      	str	r3, [r2, #0]
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20000008 	.word	0x20000008
 80018c8:	20000658 	.word	0x20000658

080018cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return uwTick;
 80018d0:	4b03      	ldr	r3, [pc, #12]	; (80018e0 <HAL_GetTick+0x14>)
 80018d2:	681b      	ldr	r3, [r3, #0]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	20000658 	.word	0x20000658

080018e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018ec:	f7ff ffee 	bl	80018cc <HAL_GetTick>
 80018f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018fc:	d005      	beq.n	800190a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018fe:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <HAL_Delay+0x44>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4413      	add	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800190a:	bf00      	nop
 800190c:	f7ff ffde 	bl	80018cc <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	429a      	cmp	r2, r3
 800191a:	d8f7      	bhi.n	800190c <HAL_Delay+0x28>
  {
  }
}
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000008 	.word	0x20000008

0800192c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e0ed      	b.n	8001b1a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d102      	bne.n	8001950 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff fb6a 	bl	8001024 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f042 0201 	orr.w	r2, r2, #1
 800195e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001960:	f7ff ffb4 	bl	80018cc <HAL_GetTick>
 8001964:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001966:	e012      	b.n	800198e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001968:	f7ff ffb0 	bl	80018cc <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b0a      	cmp	r3, #10
 8001974:	d90b      	bls.n	800198e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2205      	movs	r2, #5
 8001986:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e0c5      	b.n	8001b1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0e5      	beq.n	8001968 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 0202 	bic.w	r2, r2, #2
 80019aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019ac:	f7ff ff8e 	bl	80018cc <HAL_GetTick>
 80019b0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019b2:	e012      	b.n	80019da <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019b4:	f7ff ff8a 	bl	80018cc <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b0a      	cmp	r3, #10
 80019c0:	d90b      	bls.n	80019da <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2205      	movs	r2, #5
 80019d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e09f      	b.n	8001b1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1e5      	bne.n	80019b4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	7e1b      	ldrb	r3, [r3, #24]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d108      	bne.n	8001a02 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	e007      	b.n	8001a12 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	7e5b      	ldrb	r3, [r3, #25]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d108      	bne.n	8001a2c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	e007      	b.n	8001a3c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	7e9b      	ldrb	r3, [r3, #26]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d108      	bne.n	8001a56 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f042 0220 	orr.w	r2, r2, #32
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	e007      	b.n	8001a66 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0220 	bic.w	r2, r2, #32
 8001a64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	7edb      	ldrb	r3, [r3, #27]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d108      	bne.n	8001a80 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 0210 	bic.w	r2, r2, #16
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	e007      	b.n	8001a90 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f042 0210 	orr.w	r2, r2, #16
 8001a8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	7f1b      	ldrb	r3, [r3, #28]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d108      	bne.n	8001aaa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f042 0208 	orr.w	r2, r2, #8
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	e007      	b.n	8001aba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 0208 	bic.w	r2, r2, #8
 8001ab8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	7f5b      	ldrb	r3, [r3, #29]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d108      	bne.n	8001ad4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f042 0204 	orr.w	r2, r2, #4
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	e007      	b.n	8001ae4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0204 	bic.w	r2, r2, #4
 8001ae2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	431a      	orrs	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	ea42 0103 	orr.w	r1, r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	1e5a      	subs	r2, r3, #1
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <__NVIC_SetPriorityGrouping>:
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <__NVIC_SetPriorityGrouping+0x40>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b40:	4013      	ands	r3, r2
 8001b42:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <__NVIC_SetPriorityGrouping+0x44>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b52:	4a04      	ldr	r2, [pc, #16]	; (8001b64 <__NVIC_SetPriorityGrouping+0x40>)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	60d3      	str	r3, [r2, #12]
}
 8001b58:	bf00      	nop
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000ed00 	.word	0xe000ed00
 8001b68:	05fa0000 	.word	0x05fa0000

08001b6c <__NVIC_GetPriorityGrouping>:
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b70:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <__NVIC_GetPriorityGrouping+0x18>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	0a1b      	lsrs	r3, r3, #8
 8001b76:	f003 0307 	and.w	r3, r3, #7
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <__NVIC_EnableIRQ>:
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	db0b      	blt.n	8001bb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	f003 021f 	and.w	r2, r3, #31
 8001ba0:	4907      	ldr	r1, [pc, #28]	; (8001bc0 <__NVIC_EnableIRQ+0x38>)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	095b      	lsrs	r3, r3, #5
 8001ba8:	2001      	movs	r0, #1
 8001baa:	fa00 f202 	lsl.w	r2, r0, r2
 8001bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000e100 	.word	0xe000e100

08001bc4 <__NVIC_SetPriority>:
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	6039      	str	r1, [r7, #0]
 8001bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	db0a      	blt.n	8001bee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	490c      	ldr	r1, [pc, #48]	; (8001c10 <__NVIC_SetPriority+0x4c>)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	0112      	lsls	r2, r2, #4
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	440b      	add	r3, r1
 8001be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001bec:	e00a      	b.n	8001c04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4908      	ldr	r1, [pc, #32]	; (8001c14 <__NVIC_SetPriority+0x50>)
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	3b04      	subs	r3, #4
 8001bfc:	0112      	lsls	r2, r2, #4
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	440b      	add	r3, r1
 8001c02:	761a      	strb	r2, [r3, #24]
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000e100 	.word	0xe000e100
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <NVIC_EncodePriority>:
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f1c3 0307 	rsb	r3, r3, #7
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	bf28      	it	cs
 8001c36:	2304      	movcs	r3, #4
 8001c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	2b06      	cmp	r3, #6
 8001c40:	d902      	bls.n	8001c48 <NVIC_EncodePriority+0x30>
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3b03      	subs	r3, #3
 8001c46:	e000      	b.n	8001c4a <NVIC_EncodePriority+0x32>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43da      	mvns	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c60:	f04f 31ff 	mov.w	r1, #4294967295
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6a:	43d9      	mvns	r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	4313      	orrs	r3, r2
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3724      	adds	r7, #36	; 0x24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff ff4c 	bl	8001b24 <__NVIC_SetPriorityGrouping>
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
 8001ca0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca6:	f7ff ff61 	bl	8001b6c <__NVIC_GetPriorityGrouping>
 8001caa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	68b9      	ldr	r1, [r7, #8]
 8001cb0:	6978      	ldr	r0, [r7, #20]
 8001cb2:	f7ff ffb1 	bl	8001c18 <NVIC_EncodePriority>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cbc:	4611      	mov	r1, r2
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff ff80 	bl	8001bc4 <__NVIC_SetPriority>
}
 8001cc4:	bf00      	nop
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff ff54 	bl	8001b88 <__NVIC_EnableIRQ>
}
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e014      	b.n	8001d24 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	791b      	ldrb	r3, [r3, #4]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d105      	bne.n	8001d10 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff f9ce 	bl	80010ac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2202      	movs	r2, #2
 8001d14:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	795b      	ldrb	r3, [r3, #5]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d101      	bne.n	8001d42 <HAL_DAC_Start+0x16>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e040      	b.n	8001dc4 <HAL_DAC_Start+0x98>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6819      	ldr	r1, [r3, #0]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	f003 0310 	and.w	r3, r3, #16
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	409a      	lsls	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10f      	bne.n	8001d8c <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001d76:	2b3c      	cmp	r3, #60	; 0x3c
 8001d78:	d11d      	bne.n	8001db6 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f042 0201 	orr.w	r2, r2, #1
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	e014      	b.n	8001db6 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	f003 0310 	and.w	r3, r3, #16
 8001d9c:	213c      	movs	r1, #60	; 0x3c
 8001d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d107      	bne.n	8001db6 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f042 0202 	orr.w	r2, r2, #2
 8001db4:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001de6:	d120      	bne.n	8001e2a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001df6:	d118      	bne.n	8001e2a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2204      	movs	r2, #4
 8001dfc:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	f043 0201 	orr.w	r2, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e22:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f852 	bl	8001ece <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e38:	d120      	bne.n	8001e7c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e48:	d118      	bne.n	8001e7c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	f043 0202 	orr.w	r2, r3, #2
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e64:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001e74:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f882 	bl	8001f80 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8001e7c:	bf00      	nop
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b087      	sub	sp, #28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
 8001e90:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d105      	bne.n	8001eae <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3308      	adds	r3, #8
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	e004      	b.n	8001eb8 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3314      	adds	r3, #20
 8001eb6:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	371c      	adds	r7, #28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b087      	sub	sp, #28
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	795b      	ldrb	r3, [r3, #5]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d101      	bne.n	8001efa <HAL_DAC_ConfigChannel+0x18>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e03c      	b.n	8001f74 <HAL_DAC_ConfigChannel+0x92>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2201      	movs	r2, #1
 8001efe:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2202      	movs	r2, #2
 8001f04:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f003 0310 	and.w	r3, r3, #16
 8001f14:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	4013      	ands	r3, r2
 8001f22:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f003 0310 	and.w	r3, r3, #16
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6819      	ldr	r1, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	22c0      	movs	r2, #192	; 0xc0
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43da      	mvns	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	400a      	ands	r2, r1
 8001f64:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	371c      	adds	r7, #28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e06a      	b.n	800207c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d106      	bne.n	8001fbe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2223      	movs	r2, #35	; 0x23
 8001fb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff f8bf 	bl	800113c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fbe:	4b31      	ldr	r3, [pc, #196]	; (8002084 <HAL_ETH_Init+0xf0>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	4a30      	ldr	r2, [pc, #192]	; (8002084 <HAL_ETH_Init+0xf0>)
 8001fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fca:	4b2e      	ldr	r3, [pc, #184]	; (8002084 <HAL_ETH_Init+0xf0>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001fd6:	4b2c      	ldr	r3, [pc, #176]	; (8002088 <HAL_ETH_Init+0xf4>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	4a2b      	ldr	r2, [pc, #172]	; (8002088 <HAL_ETH_Init+0xf4>)
 8001fdc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001fe0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001fe2:	4b29      	ldr	r3, [pc, #164]	; (8002088 <HAL_ETH_Init+0xf4>)
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	4927      	ldr	r1, [pc, #156]	; (8002088 <HAL_ETH_Init+0xf4>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001ff0:	4b25      	ldr	r3, [pc, #148]	; (8002088 <HAL_ETH_Init+0xf4>)
 8001ff2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6812      	ldr	r2, [r2, #0]
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800200a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800200c:	f7ff fc5e 	bl	80018cc <HAL_GetTick>
 8002010:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002012:	e011      	b.n	8002038 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002014:	f7ff fc5a 	bl	80018cc <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002022:	d909      	bls.n	8002038 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2204      	movs	r2, #4
 8002028:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	22e0      	movs	r2, #224	; 0xe0
 8002030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e021      	b.n	800207c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1e4      	bne.n	8002014 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f958 	bl	8002300 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 f9ff 	bl	8002454 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 fa55 	bl	8002506 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	461a      	mov	r2, r3
 8002062:	2100      	movs	r1, #0
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 f9bd 	bl	80023e4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2210      	movs	r2, #16
 8002076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40023800 	.word	0x40023800
 8002088:	40013800 	.word	0x40013800

0800208c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	4b51      	ldr	r3, [pc, #324]	; (80021e8 <ETH_SetMACConfig+0x15c>)
 80020a2:	4013      	ands	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	7c1b      	ldrb	r3, [r3, #16]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d102      	bne.n	80020b4 <ETH_SetMACConfig+0x28>
 80020ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80020b2:	e000      	b.n	80020b6 <ETH_SetMACConfig+0x2a>
 80020b4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	7c5b      	ldrb	r3, [r3, #17]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d102      	bne.n	80020c4 <ETH_SetMACConfig+0x38>
 80020be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020c2:	e000      	b.n	80020c6 <ETH_SetMACConfig+0x3a>
 80020c4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80020c6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80020cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	7fdb      	ldrb	r3, [r3, #31]
 80020d2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80020d4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80020da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	7f92      	ldrb	r2, [r2, #30]
 80020e0:	2a00      	cmp	r2, #0
 80020e2:	d102      	bne.n	80020ea <ETH_SetMACConfig+0x5e>
 80020e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020e8:	e000      	b.n	80020ec <ETH_SetMACConfig+0x60>
 80020ea:	2200      	movs	r2, #0
                        macconf->Speed |
 80020ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	7f1b      	ldrb	r3, [r3, #28]
 80020f2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80020f4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80020fa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	791b      	ldrb	r3, [r3, #4]
 8002100:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002102:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	f892 2020 	ldrb.w	r2, [r2, #32]
 800210a:	2a00      	cmp	r2, #0
 800210c:	d102      	bne.n	8002114 <ETH_SetMACConfig+0x88>
 800210e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002112:	e000      	b.n	8002116 <ETH_SetMACConfig+0x8a>
 8002114:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002116:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	7bdb      	ldrb	r3, [r3, #15]
 800211c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800211e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002124:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800212c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800212e:	4313      	orrs	r3, r2
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	4313      	orrs	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002146:	2001      	movs	r0, #1
 8002148:	f7ff fbcc 	bl	80018e4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002162:	4013      	ands	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800216a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002172:	2a00      	cmp	r2, #0
 8002174:	d101      	bne.n	800217a <ETH_SetMACConfig+0xee>
 8002176:	2280      	movs	r2, #128	; 0x80
 8002178:	e000      	b.n	800217c <ETH_SetMACConfig+0xf0>
 800217a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800217c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002182:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800218a:	2a01      	cmp	r2, #1
 800218c:	d101      	bne.n	8002192 <ETH_SetMACConfig+0x106>
 800218e:	2208      	movs	r2, #8
 8002190:	e000      	b.n	8002194 <ETH_SetMACConfig+0x108>
 8002192:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002194:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800219c:	2a01      	cmp	r2, #1
 800219e:	d101      	bne.n	80021a4 <ETH_SetMACConfig+0x118>
 80021a0:	2204      	movs	r2, #4
 80021a2:	e000      	b.n	80021a6 <ETH_SetMACConfig+0x11a>
 80021a4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80021a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80021ae:	2a01      	cmp	r2, #1
 80021b0:	d101      	bne.n	80021b6 <ETH_SetMACConfig+0x12a>
 80021b2:	2202      	movs	r2, #2
 80021b4:	e000      	b.n	80021b8 <ETH_SetMACConfig+0x12c>
 80021b6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80021b8:	4313      	orrs	r3, r2
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4313      	orrs	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021d0:	2001      	movs	r0, #1
 80021d2:	f7ff fb87 	bl	80018e4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	619a      	str	r2, [r3, #24]
}
 80021de:	bf00      	nop
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	ff20810f 	.word	0xff20810f

080021ec <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	4b3d      	ldr	r3, [pc, #244]	; (80022fc <ETH_SetDMAConfig+0x110>)
 8002206:	4013      	ands	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	7b1b      	ldrb	r3, [r3, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d102      	bne.n	8002218 <ETH_SetDMAConfig+0x2c>
 8002212:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002216:	e000      	b.n	800221a <ETH_SetDMAConfig+0x2e>
 8002218:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	7b5b      	ldrb	r3, [r3, #13]
 800221e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002220:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	7f52      	ldrb	r2, [r2, #29]
 8002226:	2a00      	cmp	r2, #0
 8002228:	d102      	bne.n	8002230 <ETH_SetDMAConfig+0x44>
 800222a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800222e:	e000      	b.n	8002232 <ETH_SetDMAConfig+0x46>
 8002230:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002232:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	7b9b      	ldrb	r3, [r3, #14]
 8002238:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800223a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002240:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	7f1b      	ldrb	r3, [r3, #28]
 8002246:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002248:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	7f9b      	ldrb	r3, [r3, #30]
 800224e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002250:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002256:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800225e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002260:	4313      	orrs	r3, r2
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	4313      	orrs	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002270:	461a      	mov	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002282:	2001      	movs	r0, #1
 8002284:	f7ff fb2e 	bl	80018e4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002290:	461a      	mov	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	791b      	ldrb	r3, [r3, #4]
 800229a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80022a0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80022a6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80022ac:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022b4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80022b6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022bc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80022be:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80022c4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6812      	ldr	r2, [r2, #0]
 80022ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022d2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022e0:	2001      	movs	r0, #1
 80022e2:	f7ff faff 	bl	80018e4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ee:	461a      	mov	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6013      	str	r3, [r2, #0]
}
 80022f4:	bf00      	nop
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	f8de3f23 	.word	0xf8de3f23

08002300 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b0a6      	sub	sp, #152	; 0x98
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002308:	2301      	movs	r3, #1
 800230a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800230e:	2301      	movs	r3, #1
 8002310:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002314:	2300      	movs	r3, #0
 8002316:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002318:	2300      	movs	r3, #0
 800231a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800231e:	2301      	movs	r3, #1
 8002320:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002324:	2300      	movs	r3, #0
 8002326:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800232a:	2301      	movs	r3, #1
 800232c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002330:	2300      	movs	r3, #0
 8002332:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002336:	2300      	movs	r3, #0
 8002338:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800233c:	2300      	movs	r3, #0
 800233e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002340:	2300      	movs	r3, #0
 8002342:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002346:	2300      	movs	r3, #0
 8002348:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800234a:	2300      	movs	r3, #0
 800234c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002350:	2300      	movs	r3, #0
 8002352:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002356:	2300      	movs	r3, #0
 8002358:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800235c:	2300      	movs	r3, #0
 800235e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002362:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002366:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002368:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800236c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800236e:	2300      	movs	r3, #0
 8002370:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002374:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002378:	4619      	mov	r1, r3
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff fe86 	bl	800208c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002380:	2301      	movs	r3, #1
 8002382:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002384:	2301      	movs	r3, #1
 8002386:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002388:	2301      	movs	r3, #1
 800238a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800238e:	2301      	movs	r3, #1
 8002390:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002396:	2300      	movs	r3, #0
 8002398:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800239c:	2300      	movs	r3, #0
 800239e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80023a2:	2300      	movs	r3, #0
 80023a4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80023a6:	2301      	movs	r3, #1
 80023a8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80023ac:	2301      	movs	r3, #1
 80023ae:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80023b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023b4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80023b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023ba:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80023bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023c0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80023c2:	2301      	movs	r3, #1
 80023c4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80023d0:	f107 0308 	add.w	r3, r7, #8
 80023d4:	4619      	mov	r1, r3
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff ff08 	bl	80021ec <ETH_SetDMAConfig>
}
 80023dc:	bf00      	nop
 80023de:	3798      	adds	r7, #152	; 0x98
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3305      	adds	r3, #5
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	021b      	lsls	r3, r3, #8
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	3204      	adds	r2, #4
 80023fc:	7812      	ldrb	r2, [r2, #0]
 80023fe:	4313      	orrs	r3, r2
 8002400:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	4b11      	ldr	r3, [pc, #68]	; (800244c <ETH_MACAddressConfig+0x68>)
 8002406:	4413      	add	r3, r2
 8002408:	461a      	mov	r2, r3
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3303      	adds	r3, #3
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	061a      	lsls	r2, r3, #24
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3302      	adds	r3, #2
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	041b      	lsls	r3, r3, #16
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3301      	adds	r3, #1
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	021b      	lsls	r3, r3, #8
 8002428:	4313      	orrs	r3, r2
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	7812      	ldrb	r2, [r2, #0]
 800242e:	4313      	orrs	r3, r2
 8002430:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <ETH_MACAddressConfig+0x6c>)
 8002436:	4413      	add	r3, r2
 8002438:	461a      	mov	r2, r3
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	6013      	str	r3, [r2, #0]
}
 800243e:	bf00      	nop
 8002440:	371c      	adds	r7, #28
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40028040 	.word	0x40028040
 8002450:	40028044 	.word	0x40028044

08002454 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800245c:	2300      	movs	r3, #0
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	e03e      	b.n	80024e0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68d9      	ldr	r1, [r3, #12]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	440b      	add	r3, r1
 8002472:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2200      	movs	r2, #0
 800247e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2200      	movs	r2, #0
 800248a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800248c:	68b9      	ldr	r1, [r7, #8]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	3206      	adds	r2, #6
 8002494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d80c      	bhi.n	80024c4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68d9      	ldr	r1, [r3, #12]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	1c5a      	adds	r2, r3, #1
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	440b      	add	r3, r1
 80024bc:	461a      	mov	r2, r3
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	e004      	b.n	80024ce <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	461a      	mov	r2, r3
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	3301      	adds	r3, #1
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d9bd      	bls.n	8002462 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024f8:	611a      	str	r2, [r3, #16]
}
 80024fa:	bf00      	nop
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002506:	b480      	push	{r7}
 8002508:	b085      	sub	sp, #20
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	e046      	b.n	80025a2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6919      	ldr	r1, [r3, #16]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	440b      	add	r3, r1
 8002524:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2200      	movs	r2, #0
 8002530:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	2200      	movs	r2, #0
 8002536:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2200      	movs	r2, #0
 800253c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	2200      	movs	r2, #0
 8002542:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	2200      	movs	r2, #0
 8002548:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002550:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002558:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002566:	68b9      	ldr	r1, [r7, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	3212      	adds	r2, #18
 800256e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2b02      	cmp	r3, #2
 8002576:	d80c      	bhi.n	8002592 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6919      	ldr	r1, [r3, #16]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	440b      	add	r3, r1
 800258a:	461a      	mov	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	60da      	str	r2, [r3, #12]
 8002590:	e004      	b.n	800259c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	461a      	mov	r2, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	3301      	adds	r3, #1
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	d9b5      	bls.n	8002514 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691a      	ldr	r2, [r3, #16]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025d2:	60da      	str	r2, [r3, #12]
}
 80025d4:	bf00      	nop
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b089      	sub	sp, #36	; 0x24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80025f2:	2300      	movs	r3, #0
 80025f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
 80025fe:	e175      	b.n	80028ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002600:	2201      	movs	r2, #1
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4013      	ands	r3, r2
 8002612:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	429a      	cmp	r2, r3
 800261a:	f040 8164 	bne.w	80028e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b01      	cmp	r3, #1
 8002628:	d005      	beq.n	8002636 <HAL_GPIO_Init+0x56>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d130      	bne.n	8002698 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	2203      	movs	r2, #3
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800266c:	2201      	movs	r2, #1
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	f003 0201 	and.w	r2, r3, #1
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d017      	beq.n	80026d4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	2203      	movs	r2, #3
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d123      	bne.n	8002728 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	08da      	lsrs	r2, r3, #3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3208      	adds	r2, #8
 80026e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	220f      	movs	r2, #15
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	08da      	lsrs	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3208      	adds	r2, #8
 8002722:	69b9      	ldr	r1, [r7, #24]
 8002724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	2203      	movs	r2, #3
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 0203 	and.w	r2, r3, #3
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 80be 	beq.w	80028e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276a:	4b66      	ldr	r3, [pc, #408]	; (8002904 <HAL_GPIO_Init+0x324>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	4a65      	ldr	r2, [pc, #404]	; (8002904 <HAL_GPIO_Init+0x324>)
 8002770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002774:	6453      	str	r3, [r2, #68]	; 0x44
 8002776:	4b63      	ldr	r3, [pc, #396]	; (8002904 <HAL_GPIO_Init+0x324>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002782:	4a61      	ldr	r2, [pc, #388]	; (8002908 <HAL_GPIO_Init+0x328>)
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	089b      	lsrs	r3, r3, #2
 8002788:	3302      	adds	r3, #2
 800278a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800278e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	220f      	movs	r2, #15
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a58      	ldr	r2, [pc, #352]	; (800290c <HAL_GPIO_Init+0x32c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d037      	beq.n	800281e <HAL_GPIO_Init+0x23e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a57      	ldr	r2, [pc, #348]	; (8002910 <HAL_GPIO_Init+0x330>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d031      	beq.n	800281a <HAL_GPIO_Init+0x23a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a56      	ldr	r2, [pc, #344]	; (8002914 <HAL_GPIO_Init+0x334>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d02b      	beq.n	8002816 <HAL_GPIO_Init+0x236>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a55      	ldr	r2, [pc, #340]	; (8002918 <HAL_GPIO_Init+0x338>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d025      	beq.n	8002812 <HAL_GPIO_Init+0x232>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a54      	ldr	r2, [pc, #336]	; (800291c <HAL_GPIO_Init+0x33c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d01f      	beq.n	800280e <HAL_GPIO_Init+0x22e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a53      	ldr	r2, [pc, #332]	; (8002920 <HAL_GPIO_Init+0x340>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d019      	beq.n	800280a <HAL_GPIO_Init+0x22a>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a52      	ldr	r2, [pc, #328]	; (8002924 <HAL_GPIO_Init+0x344>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d013      	beq.n	8002806 <HAL_GPIO_Init+0x226>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a51      	ldr	r2, [pc, #324]	; (8002928 <HAL_GPIO_Init+0x348>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d00d      	beq.n	8002802 <HAL_GPIO_Init+0x222>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a50      	ldr	r2, [pc, #320]	; (800292c <HAL_GPIO_Init+0x34c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d007      	beq.n	80027fe <HAL_GPIO_Init+0x21e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a4f      	ldr	r2, [pc, #316]	; (8002930 <HAL_GPIO_Init+0x350>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d101      	bne.n	80027fa <HAL_GPIO_Init+0x21a>
 80027f6:	2309      	movs	r3, #9
 80027f8:	e012      	b.n	8002820 <HAL_GPIO_Init+0x240>
 80027fa:	230a      	movs	r3, #10
 80027fc:	e010      	b.n	8002820 <HAL_GPIO_Init+0x240>
 80027fe:	2308      	movs	r3, #8
 8002800:	e00e      	b.n	8002820 <HAL_GPIO_Init+0x240>
 8002802:	2307      	movs	r3, #7
 8002804:	e00c      	b.n	8002820 <HAL_GPIO_Init+0x240>
 8002806:	2306      	movs	r3, #6
 8002808:	e00a      	b.n	8002820 <HAL_GPIO_Init+0x240>
 800280a:	2305      	movs	r3, #5
 800280c:	e008      	b.n	8002820 <HAL_GPIO_Init+0x240>
 800280e:	2304      	movs	r3, #4
 8002810:	e006      	b.n	8002820 <HAL_GPIO_Init+0x240>
 8002812:	2303      	movs	r3, #3
 8002814:	e004      	b.n	8002820 <HAL_GPIO_Init+0x240>
 8002816:	2302      	movs	r3, #2
 8002818:	e002      	b.n	8002820 <HAL_GPIO_Init+0x240>
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <HAL_GPIO_Init+0x240>
 800281e:	2300      	movs	r3, #0
 8002820:	69fa      	ldr	r2, [r7, #28]
 8002822:	f002 0203 	and.w	r2, r2, #3
 8002826:	0092      	lsls	r2, r2, #2
 8002828:	4093      	lsls	r3, r2
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4313      	orrs	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002830:	4935      	ldr	r1, [pc, #212]	; (8002908 <HAL_GPIO_Init+0x328>)
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	089b      	lsrs	r3, r3, #2
 8002836:	3302      	adds	r3, #2
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800283e:	4b3d      	ldr	r3, [pc, #244]	; (8002934 <HAL_GPIO_Init+0x354>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	43db      	mvns	r3, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4013      	ands	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002862:	4a34      	ldr	r2, [pc, #208]	; (8002934 <HAL_GPIO_Init+0x354>)
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002868:	4b32      	ldr	r3, [pc, #200]	; (8002934 <HAL_GPIO_Init+0x354>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800288c:	4a29      	ldr	r2, [pc, #164]	; (8002934 <HAL_GPIO_Init+0x354>)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002892:	4b28      	ldr	r3, [pc, #160]	; (8002934 <HAL_GPIO_Init+0x354>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	43db      	mvns	r3, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4013      	ands	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028b6:	4a1f      	ldr	r2, [pc, #124]	; (8002934 <HAL_GPIO_Init+0x354>)
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028bc:	4b1d      	ldr	r3, [pc, #116]	; (8002934 <HAL_GPIO_Init+0x354>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028e0:	4a14      	ldr	r2, [pc, #80]	; (8002934 <HAL_GPIO_Init+0x354>)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	3301      	adds	r3, #1
 80028ea:	61fb      	str	r3, [r7, #28]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	2b0f      	cmp	r3, #15
 80028f0:	f67f ae86 	bls.w	8002600 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80028f4:	bf00      	nop
 80028f6:	bf00      	nop
 80028f8:	3724      	adds	r7, #36	; 0x24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40023800 	.word	0x40023800
 8002908:	40013800 	.word	0x40013800
 800290c:	40020000 	.word	0x40020000
 8002910:	40020400 	.word	0x40020400
 8002914:	40020800 	.word	0x40020800
 8002918:	40020c00 	.word	0x40020c00
 800291c:	40021000 	.word	0x40021000
 8002920:	40021400 	.word	0x40021400
 8002924:	40021800 	.word	0x40021800
 8002928:	40021c00 	.word	0x40021c00
 800292c:	40022000 	.word	0x40022000
 8002930:	40022400 	.word	0x40022400
 8002934:	40013c00 	.word	0x40013c00

08002938 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691a      	ldr	r2, [r3, #16]
 8002948:	887b      	ldrh	r3, [r7, #2]
 800294a:	4013      	ands	r3, r2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d002      	beq.n	8002956 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002950:	2301      	movs	r3, #1
 8002952:	73fb      	strb	r3, [r7, #15]
 8002954:	e001      	b.n	800295a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002956:	2300      	movs	r3, #0
 8002958:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800295a:	7bfb      	ldrb	r3, [r7, #15]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	807b      	strh	r3, [r7, #2]
 8002974:	4613      	mov	r3, r2
 8002976:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002978:	787b      	ldrb	r3, [r7, #1]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800297e:	887a      	ldrh	r2, [r7, #2]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002984:	e003      	b.n	800298e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002986:	887b      	ldrh	r3, [r7, #2]
 8002988:	041a      	lsls	r2, r3, #16
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	619a      	str	r2, [r3, #24]
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
	...

0800299c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e07f      	b.n	8002aae <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d106      	bne.n	80029c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7fe fc72 	bl	80012ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2224      	movs	r2, #36	; 0x24
 80029cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0201 	bic.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d107      	bne.n	8002a16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	e006      	b.n	8002a24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d104      	bne.n	8002a36 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6859      	ldr	r1, [r3, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	4b1d      	ldr	r3, [pc, #116]	; (8002ab8 <HAL_I2C_Init+0x11c>)
 8002a42:	430b      	orrs	r3, r1
 8002a44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691a      	ldr	r2, [r3, #16]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69d9      	ldr	r1, [r3, #28]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a1a      	ldr	r2, [r3, #32]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	02008000 	.word	0x02008000

08002abc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b20      	cmp	r3, #32
 8002ad0:	d138      	bne.n	8002b44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e032      	b.n	8002b46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2224      	movs	r2, #36	; 0x24
 8002aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0201 	bic.w	r2, r2, #1
 8002afe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6819      	ldr	r1, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0201 	orr.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2220      	movs	r2, #32
 8002b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b40:	2300      	movs	r3, #0
 8002b42:	e000      	b.n	8002b46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b44:	2302      	movs	r3, #2
  }
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b085      	sub	sp, #20
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b20      	cmp	r3, #32
 8002b66:	d139      	bne.n	8002bdc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e033      	b.n	8002bde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2224      	movs	r2, #36	; 0x24
 8002b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0201 	bic.w	r2, r2, #1
 8002b94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ba4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	021b      	lsls	r3, r3, #8
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	e000      	b.n	8002bde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002bdc:	2302      	movs	r3, #2
  }
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bec:	b08f      	sub	sp, #60	; 0x3c
 8002bee:	af0a      	add	r7, sp, #40	; 0x28
 8002bf0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e116      	b.n	8002e2a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d106      	bne.n	8002c1c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f00b fe0e 	bl	800e838 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2203      	movs	r2, #3
 8002c20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d102      	bne.n	8002c36 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f004 fdd3 	bl	80077e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	603b      	str	r3, [r7, #0]
 8002c46:	687e      	ldr	r6, [r7, #4]
 8002c48:	466d      	mov	r5, sp
 8002c4a:	f106 0410 	add.w	r4, r6, #16
 8002c4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c5e:	1d33      	adds	r3, r6, #4
 8002c60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c62:	6838      	ldr	r0, [r7, #0]
 8002c64:	f004 fcb4 	bl	80075d0 <USB_CoreInit>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d005      	beq.n	8002c7a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2202      	movs	r2, #2
 8002c72:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e0d7      	b.n	8002e2a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2100      	movs	r1, #0
 8002c80:	4618      	mov	r0, r3
 8002c82:	f004 fdc1 	bl	8007808 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c86:	2300      	movs	r3, #0
 8002c88:	73fb      	strb	r3, [r7, #15]
 8002c8a:	e04a      	b.n	8002d22 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c8c:	7bfa      	ldrb	r2, [r7, #15]
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	333d      	adds	r3, #61	; 0x3d
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ca0:	7bfa      	ldrb	r2, [r7, #15]
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	333c      	adds	r3, #60	; 0x3c
 8002cb0:	7bfa      	ldrb	r2, [r7, #15]
 8002cb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002cb4:	7bfa      	ldrb	r2, [r7, #15]
 8002cb6:	7bfb      	ldrb	r3, [r7, #15]
 8002cb8:	b298      	uxth	r0, r3
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	3344      	adds	r3, #68	; 0x44
 8002cc8:	4602      	mov	r2, r0
 8002cca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ccc:	7bfa      	ldrb	r2, [r7, #15]
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	3340      	adds	r3, #64	; 0x40
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ce0:	7bfa      	ldrb	r2, [r7, #15]
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4413      	add	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	3348      	adds	r3, #72	; 0x48
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cf4:	7bfa      	ldrb	r2, [r7, #15]
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	334c      	adds	r3, #76	; 0x4c
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d08:	7bfa      	ldrb	r2, [r7, #15]
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	4413      	add	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	440b      	add	r3, r1
 8002d16:	3354      	adds	r3, #84	; 0x54
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	73fb      	strb	r3, [r7, #15]
 8002d22:	7bfa      	ldrb	r2, [r7, #15]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d3af      	bcc.n	8002c8c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	73fb      	strb	r3, [r7, #15]
 8002d30:	e044      	b.n	8002dbc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d32:	7bfa      	ldrb	r2, [r7, #15]
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002d44:	2200      	movs	r2, #0
 8002d46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d48:	7bfa      	ldrb	r2, [r7, #15]
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	4413      	add	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002d5a:	7bfa      	ldrb	r2, [r7, #15]
 8002d5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d5e:	7bfa      	ldrb	r2, [r7, #15]
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4413      	add	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d70:	2200      	movs	r2, #0
 8002d72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d74:	7bfa      	ldrb	r2, [r7, #15]
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d8a:	7bfa      	ldrb	r2, [r7, #15]
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	4413      	add	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002da0:	7bfa      	ldrb	r2, [r7, #15]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	4413      	add	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002db6:	7bfb      	ldrb	r3, [r7, #15]
 8002db8:	3301      	adds	r3, #1
 8002dba:	73fb      	strb	r3, [r7, #15]
 8002dbc:	7bfa      	ldrb	r2, [r7, #15]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d3b5      	bcc.n	8002d32 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	603b      	str	r3, [r7, #0]
 8002dcc:	687e      	ldr	r6, [r7, #4]
 8002dce:	466d      	mov	r5, sp
 8002dd0:	f106 0410 	add.w	r4, r6, #16
 8002dd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ddc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002de0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002de4:	1d33      	adds	r3, r6, #4
 8002de6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002de8:	6838      	ldr	r0, [r7, #0]
 8002dea:	f004 fd59 	bl	80078a0 <USB_DevInit>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2202      	movs	r2, #2
 8002df8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e014      	b.n	8002e2a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d102      	bne.n	8002e1e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f001 f97b 	bl	8004114 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f005 fea7 	bl	8008b76 <USB_DevDisconnect>

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e32 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b082      	sub	sp, #8
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_PCD_Start+0x16>
 8002e44:	2302      	movs	r3, #2
 8002e46:	e012      	b.n	8002e6e <HAL_PCD_Start+0x3c>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f004 fcb5 	bl	80077c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f005 fe68 	bl	8008b34 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e76:	b590      	push	{r4, r7, lr}
 8002e78:	b08d      	sub	sp, #52	; 0x34
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f005 ff26 	bl	8008cde <USB_GetMode>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f040 84b7 	bne.w	8003808 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f005 fe8a 	bl	8008bb8 <USB_ReadInterrupts>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 84ad 	beq.w	8003806 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	0a1b      	lsrs	r3, r3, #8
 8002eb6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f005 fe77 	bl	8008bb8 <USB_ReadInterrupts>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d107      	bne.n	8002ee4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	695a      	ldr	r2, [r3, #20]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f002 0202 	and.w	r2, r2, #2
 8002ee2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f005 fe65 	bl	8008bb8 <USB_ReadInterrupts>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	f003 0310 	and.w	r3, r3, #16
 8002ef4:	2b10      	cmp	r3, #16
 8002ef6:	d161      	bne.n	8002fbc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	699a      	ldr	r2, [r3, #24]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0210 	bic.w	r2, r2, #16
 8002f06:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	f003 020f 	and.w	r2, r3, #15
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	4413      	add	r3, r2
 8002f24:	3304      	adds	r3, #4
 8002f26:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	0c5b      	lsrs	r3, r3, #17
 8002f2c:	f003 030f 	and.w	r3, r3, #15
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d124      	bne.n	8002f7e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d035      	beq.n	8002fac <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	091b      	lsrs	r3, r3, #4
 8002f48:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	461a      	mov	r2, r3
 8002f52:	6a38      	ldr	r0, [r7, #32]
 8002f54:	f005 fc9c 	bl	8008890 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	691a      	ldr	r2, [r3, #16]
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	091b      	lsrs	r3, r3, #4
 8002f60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f64:	441a      	add	r2, r3
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	6a1a      	ldr	r2, [r3, #32]
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	091b      	lsrs	r3, r3, #4
 8002f72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f76:	441a      	add	r2, r3
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	621a      	str	r2, [r3, #32]
 8002f7c:	e016      	b.n	8002fac <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	0c5b      	lsrs	r3, r3, #17
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	2b06      	cmp	r3, #6
 8002f88:	d110      	bne.n	8002fac <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f90:	2208      	movs	r2, #8
 8002f92:	4619      	mov	r1, r3
 8002f94:	6a38      	ldr	r0, [r7, #32]
 8002f96:	f005 fc7b 	bl	8008890 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	6a1a      	ldr	r2, [r3, #32]
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	091b      	lsrs	r3, r3, #4
 8002fa2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fa6:	441a      	add	r2, r3
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699a      	ldr	r2, [r3, #24]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0210 	orr.w	r2, r2, #16
 8002fba:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f005 fdf9 	bl	8008bb8 <USB_ReadInterrupts>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fcc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002fd0:	f040 80a7 	bne.w	8003122 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f005 fdfe 	bl	8008bde <USB_ReadDevAllOutEpInterrupt>
 8002fe2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002fe4:	e099      	b.n	800311a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 808e 	beq.w	800310e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f005 fe22 	bl	8008c46 <USB_ReadDevOutEPInterrupt>
 8003002:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00c      	beq.n	8003028 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	015a      	lsls	r2, r3, #5
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	4413      	add	r3, r2
 8003016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800301a:	461a      	mov	r2, r3
 800301c:	2301      	movs	r3, #1
 800301e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003020:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 fef0 	bl	8003e08 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00c      	beq.n	800304c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	4413      	add	r3, r2
 800303a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800303e:	461a      	mov	r2, r3
 8003040:	2308      	movs	r3, #8
 8003042:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003044:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 ffc6 	bl	8003fd8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f003 0310 	and.w	r3, r3, #16
 8003052:	2b00      	cmp	r3, #0
 8003054:	d008      	beq.n	8003068 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	4413      	add	r3, r2
 800305e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003062:	461a      	mov	r2, r3
 8003064:	2310      	movs	r3, #16
 8003066:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d030      	beq.n	80030d4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307a:	2b80      	cmp	r3, #128	; 0x80
 800307c:	d109      	bne.n	8003092 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	69fa      	ldr	r2, [r7, #28]
 8003088:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800308c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003090:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003094:	4613      	mov	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	4413      	add	r3, r2
 80030a4:	3304      	adds	r3, #4
 80030a6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	78db      	ldrb	r3, [r3, #3]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d108      	bne.n	80030c2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	2200      	movs	r2, #0
 80030b4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	4619      	mov	r1, r3
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f00b fcdf 	bl	800ea80 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	015a      	lsls	r2, r3, #5
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ce:	461a      	mov	r2, r3
 80030d0:	2302      	movs	r3, #2
 80030d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	f003 0320 	and.w	r3, r3, #32
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d008      	beq.n	80030f0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	015a      	lsls	r2, r3, #5
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	4413      	add	r3, r2
 80030e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ea:	461a      	mov	r2, r3
 80030ec:	2320      	movs	r3, #32
 80030ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d009      	beq.n	800310e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	015a      	lsls	r2, r3, #5
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	4413      	add	r3, r2
 8003102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003106:	461a      	mov	r2, r3
 8003108:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800310c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	3301      	adds	r3, #1
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003116:	085b      	lsrs	r3, r3, #1
 8003118:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800311a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311c:	2b00      	cmp	r3, #0
 800311e:	f47f af62 	bne.w	8002fe6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f005 fd46 	bl	8008bb8 <USB_ReadInterrupts>
 800312c:	4603      	mov	r3, r0
 800312e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003132:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003136:	f040 80db 	bne.w	80032f0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f005 fd67 	bl	8008c12 <USB_ReadDevAllInEpInterrupt>
 8003144:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003146:	2300      	movs	r3, #0
 8003148:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800314a:	e0cd      	b.n	80032e8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800314c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 80c2 	beq.w	80032dc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	4611      	mov	r1, r2
 8003162:	4618      	mov	r0, r3
 8003164:	f005 fd8d 	bl	8008c82 <USB_ReadDevInEPInterrupt>
 8003168:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d057      	beq.n	8003224 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	2201      	movs	r2, #1
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003188:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	43db      	mvns	r3, r3
 800318e:	69f9      	ldr	r1, [r7, #28]
 8003190:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003194:	4013      	ands	r3, r2
 8003196:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	015a      	lsls	r2, r3, #5
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	4413      	add	r3, r2
 80031a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031a4:	461a      	mov	r2, r3
 80031a6:	2301      	movs	r3, #1
 80031a8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d132      	bne.n	8003218 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b6:	4613      	mov	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	4413      	add	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	334c      	adds	r3, #76	; 0x4c
 80031c2:	6819      	ldr	r1, [r3, #0]
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c8:	4613      	mov	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	4413      	add	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4403      	add	r3, r0
 80031d2:	3348      	adds	r3, #72	; 0x48
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4419      	add	r1, r3
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031dc:	4613      	mov	r3, r2
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	4413      	add	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4403      	add	r3, r0
 80031e6:	334c      	adds	r3, #76	; 0x4c
 80031e8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d113      	bne.n	8003218 <HAL_PCD_IRQHandler+0x3a2>
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f4:	4613      	mov	r3, r2
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	4413      	add	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	3354      	adds	r3, #84	; 0x54
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d108      	bne.n	8003218 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6818      	ldr	r0, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003210:	461a      	mov	r2, r3
 8003212:	2101      	movs	r1, #1
 8003214:	f005 fd96 	bl	8008d44 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	b2db      	uxtb	r3, r3
 800321c:	4619      	mov	r1, r3
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f00b fba9 	bl	800e976 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	f003 0308 	and.w	r3, r3, #8
 800322a:	2b00      	cmp	r3, #0
 800322c:	d008      	beq.n	8003240 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	015a      	lsls	r2, r3, #5
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	4413      	add	r3, r2
 8003236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800323a:	461a      	mov	r2, r3
 800323c:	2308      	movs	r3, #8
 800323e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	f003 0310 	and.w	r3, r3, #16
 8003246:	2b00      	cmp	r3, #0
 8003248:	d008      	beq.n	800325c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	4413      	add	r3, r2
 8003252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003256:	461a      	mov	r2, r3
 8003258:	2310      	movs	r3, #16
 800325a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003262:	2b00      	cmp	r3, #0
 8003264:	d008      	beq.n	8003278 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	015a      	lsls	r2, r3, #5
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	4413      	add	r3, r2
 800326e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003272:	461a      	mov	r2, r3
 8003274:	2340      	movs	r3, #64	; 0x40
 8003276:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d023      	beq.n	80032ca <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003282:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003284:	6a38      	ldr	r0, [r7, #32]
 8003286:	f004 fc69 	bl	8007b5c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800328a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800328c:	4613      	mov	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	4413      	add	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	3338      	adds	r3, #56	; 0x38
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	4413      	add	r3, r2
 800329a:	3304      	adds	r3, #4
 800329c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	78db      	ldrb	r3, [r3, #3]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d108      	bne.n	80032b8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2200      	movs	r2, #0
 80032aa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	4619      	mov	r1, r3
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f00b fbf6 	bl	800eaa4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032c4:	461a      	mov	r2, r3
 80032c6:	2302      	movs	r3, #2
 80032c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80032d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 fd08 	bl	8003cec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	3301      	adds	r3, #1
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80032e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e4:	085b      	lsrs	r3, r3, #1
 80032e6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80032e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f47f af2e 	bne.w	800314c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f005 fc5f 	bl	8008bb8 <USB_ReadInterrupts>
 80032fa:	4603      	mov	r3, r0
 80032fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003300:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003304:	d122      	bne.n	800334c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	69fa      	ldr	r2, [r7, #28]
 8003310:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003314:	f023 0301 	bic.w	r3, r3, #1
 8003318:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003320:	2b01      	cmp	r3, #1
 8003322:	d108      	bne.n	8003336 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800332c:	2100      	movs	r1, #0
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f00b fd70 	bl	800ee14 <HAL_PCDEx_LPM_Callback>
 8003334:	e002      	b.n	800333c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f00b fb94 	bl	800ea64 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695a      	ldr	r2, [r3, #20]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800334a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f005 fc31 	bl	8008bb8 <USB_ReadInterrupts>
 8003356:	4603      	mov	r3, r0
 8003358:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800335c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003360:	d112      	bne.n	8003388 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b01      	cmp	r3, #1
 8003370:	d102      	bne.n	8003378 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f00b fb50 	bl	800ea18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695a      	ldr	r2, [r3, #20]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003386:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f005 fc13 	bl	8008bb8 <USB_ReadInterrupts>
 8003392:	4603      	mov	r3, r0
 8003394:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003398:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800339c:	d121      	bne.n	80033e2 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	695a      	ldr	r2, [r3, #20]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80033ac:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d111      	bne.n	80033dc <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c6:	089b      	lsrs	r3, r3, #2
 80033c8:	f003 020f 	and.w	r2, r3, #15
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80033d2:	2101      	movs	r1, #1
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f00b fd1d 	bl	800ee14 <HAL_PCDEx_LPM_Callback>
 80033da:	e002      	b.n	80033e2 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f00b fb1b 	bl	800ea18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f005 fbe6 	bl	8008bb8 <USB_ReadInterrupts>
 80033ec:	4603      	mov	r3, r0
 80033ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f6:	f040 80b7 	bne.w	8003568 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	69fa      	ldr	r2, [r7, #28]
 8003404:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003408:	f023 0301 	bic.w	r3, r3, #1
 800340c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2110      	movs	r1, #16
 8003414:	4618      	mov	r0, r3
 8003416:	f004 fba1 	bl	8007b5c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800341a:	2300      	movs	r3, #0
 800341c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800341e:	e046      	b.n	80034ae <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	4413      	add	r3, r2
 8003428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800342c:	461a      	mov	r2, r3
 800342e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003432:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	4413      	add	r3, r2
 800343c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003444:	0151      	lsls	r1, r2, #5
 8003446:	69fa      	ldr	r2, [r7, #28]
 8003448:	440a      	add	r2, r1
 800344a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800344e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003452:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003456:	015a      	lsls	r2, r3, #5
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	4413      	add	r3, r2
 800345c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003460:	461a      	mov	r2, r3
 8003462:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003466:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346a:	015a      	lsls	r2, r3, #5
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	4413      	add	r3, r2
 8003470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003478:	0151      	lsls	r1, r2, #5
 800347a:	69fa      	ldr	r2, [r7, #28]
 800347c:	440a      	add	r2, r1
 800347e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003482:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003486:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	4413      	add	r3, r2
 8003490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003498:	0151      	lsls	r1, r2, #5
 800349a:	69fa      	ldr	r2, [r7, #28]
 800349c:	440a      	add	r2, r1
 800349e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034a6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034aa:	3301      	adds	r3, #1
 80034ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d3b3      	bcc.n	8003420 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	69fa      	ldr	r2, [r7, #28]
 80034c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034c6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80034ca:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d016      	beq.n	8003502 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034de:	69fa      	ldr	r2, [r7, #28]
 80034e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034e4:	f043 030b 	orr.w	r3, r3, #11
 80034e8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f4:	69fa      	ldr	r2, [r7, #28]
 80034f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034fa:	f043 030b 	orr.w	r3, r3, #11
 80034fe:	6453      	str	r3, [r2, #68]	; 0x44
 8003500:	e015      	b.n	800352e <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003508:	695a      	ldr	r2, [r3, #20]
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003510:	4619      	mov	r1, r3
 8003512:	f242 032b 	movw	r3, #8235	; 0x202b
 8003516:	4313      	orrs	r3, r2
 8003518:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	69fa      	ldr	r2, [r7, #28]
 8003524:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003528:	f043 030b 	orr.w	r3, r3, #11
 800352c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	69fa      	ldr	r2, [r7, #28]
 8003538:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800353c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003540:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003552:	461a      	mov	r2, r3
 8003554:	f005 fbf6 	bl	8008d44 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	695a      	ldr	r2, [r3, #20]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003566:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4618      	mov	r0, r3
 800356e:	f005 fb23 	bl	8008bb8 <USB_ReadInterrupts>
 8003572:	4603      	mov	r3, r0
 8003574:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800357c:	d124      	bne.n	80035c8 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f005 fbba 	bl	8008cfc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f004 fb62 	bl	8007c56 <USB_GetDevSpeed>
 8003592:	4603      	mov	r3, r0
 8003594:	461a      	mov	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681c      	ldr	r4, [r3, #0]
 800359e:	f001 facd 	bl	8004b3c <HAL_RCC_GetHCLKFreq>
 80035a2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	461a      	mov	r2, r3
 80035ac:	4620      	mov	r0, r4
 80035ae:	f004 f867 	bl	8007680 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f00b fa07 	bl	800e9c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695a      	ldr	r2, [r3, #20]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80035c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f005 faf3 	bl	8008bb8 <USB_ReadInterrupts>
 80035d2:	4603      	mov	r3, r0
 80035d4:	f003 0308 	and.w	r3, r3, #8
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d10a      	bne.n	80035f2 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f00b f9e4 	bl	800e9aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695a      	ldr	r2, [r3, #20]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f002 0208 	and.w	r2, r2, #8
 80035f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f005 fade 	bl	8008bb8 <USB_ReadInterrupts>
 80035fc:	4603      	mov	r3, r0
 80035fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003602:	2b80      	cmp	r3, #128	; 0x80
 8003604:	d122      	bne.n	800364c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003606:	6a3b      	ldr	r3, [r7, #32]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003612:	2301      	movs	r3, #1
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
 8003616:	e014      	b.n	8003642 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800361c:	4613      	mov	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	4413      	add	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d105      	bne.n	800363c <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	b2db      	uxtb	r3, r3
 8003634:	4619      	mov	r1, r3
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fb27 	bl	8003c8a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	3301      	adds	r3, #1
 8003640:	627b      	str	r3, [r7, #36]	; 0x24
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003648:	429a      	cmp	r2, r3
 800364a:	d3e5      	bcc.n	8003618 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f005 fab1 	bl	8008bb8 <USB_ReadInterrupts>
 8003656:	4603      	mov	r3, r0
 8003658:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800365c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003660:	d13b      	bne.n	80036da <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003662:	2301      	movs	r3, #1
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
 8003666:	e02b      	b.n	80036c0 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	4413      	add	r3, r2
 8003670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800367c:	4613      	mov	r3, r2
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	4413      	add	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	3340      	adds	r3, #64	; 0x40
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d115      	bne.n	80036ba <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800368e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003690:	2b00      	cmp	r3, #0
 8003692:	da12      	bge.n	80036ba <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003698:	4613      	mov	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	4413      	add	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	333f      	adds	r3, #63	; 0x3f
 80036a4:	2201      	movs	r2, #1
 80036a6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	4619      	mov	r1, r3
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 fae8 	bl	8003c8a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	3301      	adds	r3, #1
 80036be:	627b      	str	r3, [r7, #36]	; 0x24
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d3ce      	bcc.n	8003668 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695a      	ldr	r2, [r3, #20]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80036d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f005 fa6a 	bl	8008bb8 <USB_ReadInterrupts>
 80036e4:	4603      	mov	r3, r0
 80036e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036ee:	d155      	bne.n	800379c <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036f0:	2301      	movs	r3, #1
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24
 80036f4:	e045      	b.n	8003782 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80036f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f8:	015a      	lsls	r2, r3, #5
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800370a:	4613      	mov	r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	4413      	add	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d12e      	bne.n	800377c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800371e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003720:	2b00      	cmp	r3, #0
 8003722:	da2b      	bge.n	800377c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003730:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003734:	429a      	cmp	r2, r3
 8003736:	d121      	bne.n	800377c <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800373c:	4613      	mov	r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800374a:	2201      	movs	r2, #1
 800374c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10a      	bne.n	800377c <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	69fa      	ldr	r2, [r7, #28]
 8003770:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003774:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003778:	6053      	str	r3, [r2, #4]
            break;
 800377a:	e007      	b.n	800378c <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	3301      	adds	r3, #1
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003788:	429a      	cmp	r2, r3
 800378a:	d3b4      	bcc.n	80036f6 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695a      	ldr	r2, [r3, #20]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800379a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f005 fa09 	bl	8008bb8 <USB_ReadInterrupts>
 80037a6:	4603      	mov	r3, r0
 80037a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80037ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b0:	d10a      	bne.n	80037c8 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f00b f988 	bl	800eac8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695a      	ldr	r2, [r3, #20]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80037c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f005 f9f3 	bl	8008bb8 <USB_ReadInterrupts>
 80037d2:	4603      	mov	r3, r0
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b04      	cmp	r3, #4
 80037da:	d115      	bne.n	8003808 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	f003 0304 	and.w	r3, r3, #4
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f00b f978 	bl	800eae4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6859      	ldr	r1, [r3, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	430a      	orrs	r2, r1
 8003802:	605a      	str	r2, [r3, #4]
 8003804:	e000      	b.n	8003808 <HAL_PCD_IRQHandler+0x992>
      return;
 8003806:	bf00      	nop
    }
  }
}
 8003808:	3734      	adds	r7, #52	; 0x34
 800380a:	46bd      	mov	sp, r7
 800380c:	bd90      	pop	{r4, r7, pc}

0800380e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b082      	sub	sp, #8
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
 8003816:	460b      	mov	r3, r1
 8003818:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003820:	2b01      	cmp	r3, #1
 8003822:	d101      	bne.n	8003828 <HAL_PCD_SetAddress+0x1a>
 8003824:	2302      	movs	r3, #2
 8003826:	e013      	b.n	8003850 <HAL_PCD_SetAddress+0x42>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	78fa      	ldrb	r2, [r7, #3]
 8003834:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	78fa      	ldrb	r2, [r7, #3]
 800383e:	4611      	mov	r1, r2
 8003840:	4618      	mov	r0, r3
 8003842:	f005 f951 	bl	8008ae8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	4608      	mov	r0, r1
 8003862:	4611      	mov	r1, r2
 8003864:	461a      	mov	r2, r3
 8003866:	4603      	mov	r3, r0
 8003868:	70fb      	strb	r3, [r7, #3]
 800386a:	460b      	mov	r3, r1
 800386c:	803b      	strh	r3, [r7, #0]
 800386e:	4613      	mov	r3, r2
 8003870:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003872:	2300      	movs	r3, #0
 8003874:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003876:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800387a:	2b00      	cmp	r3, #0
 800387c:	da0f      	bge.n	800389e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800387e:	78fb      	ldrb	r3, [r7, #3]
 8003880:	f003 020f 	and.w	r2, r3, #15
 8003884:	4613      	mov	r3, r2
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	4413      	add	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	3338      	adds	r3, #56	; 0x38
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	4413      	add	r3, r2
 8003892:	3304      	adds	r3, #4
 8003894:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2201      	movs	r2, #1
 800389a:	705a      	strb	r2, [r3, #1]
 800389c:	e00f      	b.n	80038be <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800389e:	78fb      	ldrb	r3, [r7, #3]
 80038a0:	f003 020f 	and.w	r2, r3, #15
 80038a4:	4613      	mov	r3, r2
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4413      	add	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	4413      	add	r3, r2
 80038b4:	3304      	adds	r3, #4
 80038b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80038be:	78fb      	ldrb	r3, [r7, #3]
 80038c0:	f003 030f 	and.w	r3, r3, #15
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80038ca:	883a      	ldrh	r2, [r7, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	78ba      	ldrb	r2, [r7, #2]
 80038d4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	785b      	ldrb	r3, [r3, #1]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d004      	beq.n	80038e8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80038e8:	78bb      	ldrb	r3, [r7, #2]
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d102      	bne.n	80038f4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d101      	bne.n	8003902 <HAL_PCD_EP_Open+0xaa>
 80038fe:	2302      	movs	r3, #2
 8003900:	e00e      	b.n	8003920 <HAL_PCD_EP_Open+0xc8>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68f9      	ldr	r1, [r7, #12]
 8003910:	4618      	mov	r0, r3
 8003912:	f004 f9c5 	bl	8007ca0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800391e:	7afb      	ldrb	r3, [r7, #11]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	460b      	mov	r3, r1
 8003932:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003934:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003938:	2b00      	cmp	r3, #0
 800393a:	da0f      	bge.n	800395c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800393c:	78fb      	ldrb	r3, [r7, #3]
 800393e:	f003 020f 	and.w	r2, r3, #15
 8003942:	4613      	mov	r3, r2
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	4413      	add	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	3338      	adds	r3, #56	; 0x38
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	4413      	add	r3, r2
 8003950:	3304      	adds	r3, #4
 8003952:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2201      	movs	r2, #1
 8003958:	705a      	strb	r2, [r3, #1]
 800395a:	e00f      	b.n	800397c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800395c:	78fb      	ldrb	r3, [r7, #3]
 800395e:	f003 020f 	and.w	r2, r3, #15
 8003962:	4613      	mov	r3, r2
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	4413      	add	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	4413      	add	r3, r2
 8003972:	3304      	adds	r3, #4
 8003974:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800397c:	78fb      	ldrb	r3, [r7, #3]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	b2da      	uxtb	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800398e:	2b01      	cmp	r3, #1
 8003990:	d101      	bne.n	8003996 <HAL_PCD_EP_Close+0x6e>
 8003992:	2302      	movs	r3, #2
 8003994:	e00e      	b.n	80039b4 <HAL_PCD_EP_Close+0x8c>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68f9      	ldr	r1, [r7, #12]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f004 fa03 	bl	8007db0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	607a      	str	r2, [r7, #4]
 80039c6:	603b      	str	r3, [r7, #0]
 80039c8:	460b      	mov	r3, r1
 80039ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039cc:	7afb      	ldrb	r3, [r7, #11]
 80039ce:	f003 020f 	and.w	r2, r3, #15
 80039d2:	4613      	mov	r3, r2
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	4413      	add	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4413      	add	r3, r2
 80039e2:	3304      	adds	r3, #4
 80039e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	2200      	movs	r2, #0
 80039f6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	2200      	movs	r2, #0
 80039fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039fe:	7afb      	ldrb	r3, [r7, #11]
 8003a00:	f003 030f 	and.w	r3, r3, #15
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d102      	bne.n	8003a18 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a18:	7afb      	ldrb	r3, [r7, #11]
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d109      	bne.n	8003a36 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6818      	ldr	r0, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	6979      	ldr	r1, [r7, #20]
 8003a30:	f004 fcea 	bl	8008408 <USB_EP0StartXfer>
 8003a34:	e008      	b.n	8003a48 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6818      	ldr	r0, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	461a      	mov	r2, r3
 8003a42:	6979      	ldr	r1, [r7, #20]
 8003a44:	f004 fa90 	bl	8007f68 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003a5e:	78fb      	ldrb	r3, [r7, #3]
 8003a60:	f003 020f 	and.w	r2, r3, #15
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003a74:	681b      	ldr	r3, [r3, #0]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b086      	sub	sp, #24
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	60f8      	str	r0, [r7, #12]
 8003a8a:	607a      	str	r2, [r7, #4]
 8003a8c:	603b      	str	r3, [r7, #0]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a92:	7afb      	ldrb	r3, [r7, #11]
 8003a94:	f003 020f 	and.w	r2, r3, #15
 8003a98:	4613      	mov	r3, r2
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	4413      	add	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	3338      	adds	r3, #56	; 0x38
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ac2:	7afb      	ldrb	r3, [r7, #11]
 8003ac4:	f003 030f 	and.w	r3, r3, #15
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d102      	bne.n	8003adc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003adc:	7afb      	ldrb	r3, [r7, #11]
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d109      	bne.n	8003afa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6818      	ldr	r0, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	461a      	mov	r2, r3
 8003af2:	6979      	ldr	r1, [r7, #20]
 8003af4:	f004 fc88 	bl	8008408 <USB_EP0StartXfer>
 8003af8:	e008      	b.n	8003b0c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	461a      	mov	r2, r3
 8003b06:	6979      	ldr	r1, [r7, #20]
 8003b08:	f004 fa2e 	bl	8007f68 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b084      	sub	sp, #16
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	460b      	mov	r3, r1
 8003b20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b22:	78fb      	ldrb	r3, [r7, #3]
 8003b24:	f003 020f 	and.w	r2, r3, #15
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d901      	bls.n	8003b34 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e050      	b.n	8003bd6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	da0f      	bge.n	8003b5c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b3c:	78fb      	ldrb	r3, [r7, #3]
 8003b3e:	f003 020f 	and.w	r2, r3, #15
 8003b42:	4613      	mov	r3, r2
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	4413      	add	r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	3338      	adds	r3, #56	; 0x38
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	4413      	add	r3, r2
 8003b50:	3304      	adds	r3, #4
 8003b52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2201      	movs	r2, #1
 8003b58:	705a      	strb	r2, [r3, #1]
 8003b5a:	e00d      	b.n	8003b78 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b5c:	78fa      	ldrb	r2, [r7, #3]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	4413      	add	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	3304      	adds	r3, #4
 8003b70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b7e:	78fb      	ldrb	r3, [r7, #3]
 8003b80:	f003 030f 	and.w	r3, r3, #15
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d101      	bne.n	8003b98 <HAL_PCD_EP_SetStall+0x82>
 8003b94:	2302      	movs	r3, #2
 8003b96:	e01e      	b.n	8003bd6 <HAL_PCD_EP_SetStall+0xc0>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68f9      	ldr	r1, [r7, #12]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f004 feca 	bl	8008940 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003bac:	78fb      	ldrb	r3, [r7, #3]
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10a      	bne.n	8003bcc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6818      	ldr	r0, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	b2d9      	uxtb	r1, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	f005 f8bc 	bl	8008d44 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b084      	sub	sp, #16
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	460b      	mov	r3, r1
 8003be8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003bea:	78fb      	ldrb	r3, [r7, #3]
 8003bec:	f003 020f 	and.w	r2, r3, #15
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d901      	bls.n	8003bfc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e042      	b.n	8003c82 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	da0f      	bge.n	8003c24 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c04:	78fb      	ldrb	r3, [r7, #3]
 8003c06:	f003 020f 	and.w	r2, r3, #15
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	4413      	add	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	3338      	adds	r3, #56	; 0x38
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	4413      	add	r3, r2
 8003c18:	3304      	adds	r3, #4
 8003c1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	705a      	strb	r2, [r3, #1]
 8003c22:	e00f      	b.n	8003c44 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c24:	78fb      	ldrb	r3, [r7, #3]
 8003c26:	f003 020f 	and.w	r2, r3, #15
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	4413      	add	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	4413      	add	r3, r2
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c4a:	78fb      	ldrb	r3, [r7, #3]
 8003c4c:	f003 030f 	and.w	r3, r3, #15
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d101      	bne.n	8003c64 <HAL_PCD_EP_ClrStall+0x86>
 8003c60:	2302      	movs	r3, #2
 8003c62:	e00e      	b.n	8003c82 <HAL_PCD_EP_ClrStall+0xa4>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68f9      	ldr	r1, [r7, #12]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f004 fed2 	bl	8008a1c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b084      	sub	sp, #16
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
 8003c92:	460b      	mov	r3, r1
 8003c94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003c96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	da0c      	bge.n	8003cb8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c9e:	78fb      	ldrb	r3, [r7, #3]
 8003ca0:	f003 020f 	and.w	r2, r3, #15
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	3338      	adds	r3, #56	; 0x38
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	e00c      	b.n	8003cd2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cb8:	78fb      	ldrb	r3, [r7, #3]
 8003cba:	f003 020f 	and.w	r2, r3, #15
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	4413      	add	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	4413      	add	r3, r2
 8003cce:	3304      	adds	r3, #4
 8003cd0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68f9      	ldr	r1, [r7, #12]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f004 fcf1 	bl	80086c0 <USB_EPStopXfer>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003ce2:	7afb      	ldrb	r3, [r7, #11]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b08a      	sub	sp, #40	; 0x28
 8003cf0:	af02      	add	r7, sp, #8
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	4613      	mov	r3, r2
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	4413      	add	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	3338      	adds	r3, #56	; 0x38
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	4413      	add	r3, r2
 8003d10:	3304      	adds	r3, #4
 8003d12:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6a1a      	ldr	r2, [r3, #32]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d901      	bls.n	8003d24 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e06c      	b.n	8003dfe <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	699a      	ldr	r2, [r3, #24]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	69fa      	ldr	r2, [r7, #28]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d902      	bls.n	8003d40 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	3303      	adds	r3, #3
 8003d44:	089b      	lsrs	r3, r3, #2
 8003d46:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d48:	e02b      	b.n	8003da2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	699a      	ldr	r2, [r3, #24]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	69fa      	ldr	r2, [r7, #28]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d902      	bls.n	8003d66 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	3303      	adds	r3, #3
 8003d6a:	089b      	lsrs	r3, r3, #2
 8003d6c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6919      	ldr	r1, [r3, #16]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	4603      	mov	r3, r0
 8003d84:	6978      	ldr	r0, [r7, #20]
 8003d86:	f004 fd45 	bl	8008814 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	691a      	ldr	r2, [r3, #16]
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	441a      	add	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6a1a      	ldr	r2, [r3, #32]
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	441a      	add	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	015a      	lsls	r2, r3, #5
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	4413      	add	r3, r2
 8003daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d809      	bhi.n	8003dcc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6a1a      	ldr	r2, [r3, #32]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d203      	bcs.n	8003dcc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1be      	bne.n	8003d4a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	699a      	ldr	r2, [r3, #24]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d811      	bhi.n	8003dfc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	f003 030f 	and.w	r3, r3, #15
 8003dde:	2201      	movs	r2, #1
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	43db      	mvns	r3, r3
 8003df2:	6939      	ldr	r1, [r7, #16]
 8003df4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003df8:	4013      	ands	r3, r2
 8003dfa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3720      	adds	r7, #32
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b088      	sub	sp, #32
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	333c      	adds	r3, #60	; 0x3c
 8003e20:	3304      	adds	r3, #4
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	015a      	lsls	r2, r3, #5
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d17b      	bne.n	8003f36 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d015      	beq.n	8003e74 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	4a61      	ldr	r2, [pc, #388]	; (8003fd0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	f240 80b9 	bls.w	8003fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 80b3 	beq.w	8003fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	015a      	lsls	r2, r3, #5
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	4413      	add	r3, r2
 8003e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e70:	6093      	str	r3, [r2, #8]
 8003e72:	e0a7      	b.n	8003fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d009      	beq.n	8003e92 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	2320      	movs	r3, #32
 8003e8e:	6093      	str	r3, [r2, #8]
 8003e90:	e098      	b.n	8003fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f040 8093 	bne.w	8003fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	4a4b      	ldr	r2, [pc, #300]	; (8003fd0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d90f      	bls.n	8003ec6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ec2:	6093      	str	r3, [r2, #8]
 8003ec4:	e07e      	b.n	8003fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	4413      	add	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	3304      	adds	r3, #4
 8003eda:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	69da      	ldr	r2, [r3, #28]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	0159      	lsls	r1, r3, #5
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	440b      	add	r3, r1
 8003ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ef2:	1ad2      	subs	r2, r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d114      	bne.n	8003f28 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d109      	bne.n	8003f1a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6818      	ldr	r0, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f10:	461a      	mov	r2, r3
 8003f12:	2101      	movs	r1, #1
 8003f14:	f004 ff16 	bl	8008d44 <USB_EP0_OutStart>
 8003f18:	e006      	b.n	8003f28 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	691a      	ldr	r2, [r3, #16]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	441a      	add	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f00a fd06 	bl	800e940 <HAL_PCD_DataOutStageCallback>
 8003f34:	e046      	b.n	8003fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	4a26      	ldr	r2, [pc, #152]	; (8003fd4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d124      	bne.n	8003f88 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	015a      	lsls	r2, r3, #5
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	4413      	add	r3, r2
 8003f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f54:	461a      	mov	r2, r3
 8003f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f5a:	6093      	str	r3, [r2, #8]
 8003f5c:	e032      	b.n	8003fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f003 0320 	and.w	r3, r3, #32
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d008      	beq.n	8003f7a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	015a      	lsls	r2, r3, #5
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	4413      	add	r3, r2
 8003f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f74:	461a      	mov	r2, r3
 8003f76:	2320      	movs	r3, #32
 8003f78:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	4619      	mov	r1, r3
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f00a fcdd 	bl	800e940 <HAL_PCD_DataOutStageCallback>
 8003f86:	e01d      	b.n	8003fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d114      	bne.n	8003fb8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	4613      	mov	r3, r2
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	4413      	add	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	440b      	add	r3, r1
 8003f9c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d108      	bne.n	8003fb8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6818      	ldr	r0, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	f004 fec6 	bl	8008d44 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f00a fcbe 	bl	800e940 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3720      	adds	r7, #32
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	4f54300a 	.word	0x4f54300a
 8003fd4:	4f54310a 	.word	0x4f54310a

08003fd8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	333c      	adds	r3, #60	; 0x3c
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	4a15      	ldr	r2, [pc, #84]	; (8004060 <PCD_EP_OutSetupPacket_int+0x88>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d90e      	bls.n	800402c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004014:	2b00      	cmp	r3, #0
 8004016:	d009      	beq.n	800402c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	4413      	add	r3, r2
 8004020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004024:	461a      	mov	r2, r3
 8004026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800402a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f00a fc75 	bl	800e91c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4a0a      	ldr	r2, [pc, #40]	; (8004060 <PCD_EP_OutSetupPacket_int+0x88>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d90c      	bls.n	8004054 <PCD_EP_OutSetupPacket_int+0x7c>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d108      	bne.n	8004054 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6818      	ldr	r0, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800404c:	461a      	mov	r2, r3
 800404e:	2101      	movs	r1, #1
 8004050:	f004 fe78 	bl	8008d44 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	4f54300a 	.word	0x4f54300a

08004064 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	70fb      	strb	r3, [r7, #3]
 8004070:	4613      	mov	r3, r2
 8004072:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800407c:	78fb      	ldrb	r3, [r7, #3]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d107      	bne.n	8004092 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004082:	883b      	ldrh	r3, [r7, #0]
 8004084:	0419      	lsls	r1, r3, #16
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	430a      	orrs	r2, r1
 800408e:	629a      	str	r2, [r3, #40]	; 0x28
 8004090:	e028      	b.n	80040e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004098:	0c1b      	lsrs	r3, r3, #16
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	4413      	add	r3, r2
 800409e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80040a0:	2300      	movs	r3, #0
 80040a2:	73fb      	strb	r3, [r7, #15]
 80040a4:	e00d      	b.n	80040c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	7bfb      	ldrb	r3, [r7, #15]
 80040ac:	3340      	adds	r3, #64	; 0x40
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4413      	add	r3, r2
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	0c1b      	lsrs	r3, r3, #16
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	4413      	add	r3, r2
 80040ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80040bc:	7bfb      	ldrb	r3, [r7, #15]
 80040be:	3301      	adds	r3, #1
 80040c0:	73fb      	strb	r3, [r7, #15]
 80040c2:	7bfa      	ldrb	r2, [r7, #15]
 80040c4:	78fb      	ldrb	r3, [r7, #3]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d3ec      	bcc.n	80040a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80040cc:	883b      	ldrh	r3, [r7, #0]
 80040ce:	0418      	lsls	r0, r3, #16
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6819      	ldr	r1, [r3, #0]
 80040d4:	78fb      	ldrb	r3, [r7, #3]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	4302      	orrs	r2, r0
 80040dc:	3340      	adds	r3, #64	; 0x40
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	440b      	add	r3, r1
 80040e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
 80040fa:	460b      	mov	r3, r1
 80040fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	887a      	ldrh	r2, [r7, #2]
 8004104:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004142:	4b05      	ldr	r3, [pc, #20]	; (8004158 <HAL_PCDEx_ActivateLPM+0x44>)
 8004144:	4313      	orrs	r3, r2
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	10000003 	.word	0x10000003

0800415c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004162:	2300      	movs	r3, #0
 8004164:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004166:	4b23      	ldr	r3, [pc, #140]	; (80041f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	4a22      	ldr	r2, [pc, #136]	; (80041f4 <HAL_PWREx_EnableOverDrive+0x98>)
 800416c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004170:	6413      	str	r3, [r2, #64]	; 0x40
 8004172:	4b20      	ldr	r3, [pc, #128]	; (80041f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800417a:	603b      	str	r3, [r7, #0]
 800417c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800417e:	4b1e      	ldr	r3, [pc, #120]	; (80041f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a1d      	ldr	r2, [pc, #116]	; (80041f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004188:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800418a:	f7fd fb9f 	bl	80018cc <HAL_GetTick>
 800418e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004190:	e009      	b.n	80041a6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004192:	f7fd fb9b 	bl	80018cc <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041a0:	d901      	bls.n	80041a6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e022      	b.n	80041ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80041a6:	4b14      	ldr	r3, [pc, #80]	; (80041f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041b2:	d1ee      	bne.n	8004192 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80041b4:	4b10      	ldr	r3, [pc, #64]	; (80041f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a0f      	ldr	r2, [pc, #60]	; (80041f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041c0:	f7fd fb84 	bl	80018cc <HAL_GetTick>
 80041c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80041c6:	e009      	b.n	80041dc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80041c8:	f7fd fb80 	bl	80018cc <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041d6:	d901      	bls.n	80041dc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e007      	b.n	80041ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80041dc:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041e8:	d1ee      	bne.n	80041c8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40023800 	.word	0x40023800
 80041f8:	40007000 	.word	0x40007000

080041fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004204:	2300      	movs	r3, #0
 8004206:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e29b      	b.n	800474a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 8087 	beq.w	800432e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004220:	4b96      	ldr	r3, [pc, #600]	; (800447c <HAL_RCC_OscConfig+0x280>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f003 030c 	and.w	r3, r3, #12
 8004228:	2b04      	cmp	r3, #4
 800422a:	d00c      	beq.n	8004246 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800422c:	4b93      	ldr	r3, [pc, #588]	; (800447c <HAL_RCC_OscConfig+0x280>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f003 030c 	and.w	r3, r3, #12
 8004234:	2b08      	cmp	r3, #8
 8004236:	d112      	bne.n	800425e <HAL_RCC_OscConfig+0x62>
 8004238:	4b90      	ldr	r3, [pc, #576]	; (800447c <HAL_RCC_OscConfig+0x280>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004240:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004244:	d10b      	bne.n	800425e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004246:	4b8d      	ldr	r3, [pc, #564]	; (800447c <HAL_RCC_OscConfig+0x280>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d06c      	beq.n	800432c <HAL_RCC_OscConfig+0x130>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d168      	bne.n	800432c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e275      	b.n	800474a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004266:	d106      	bne.n	8004276 <HAL_RCC_OscConfig+0x7a>
 8004268:	4b84      	ldr	r3, [pc, #528]	; (800447c <HAL_RCC_OscConfig+0x280>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a83      	ldr	r2, [pc, #524]	; (800447c <HAL_RCC_OscConfig+0x280>)
 800426e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004272:	6013      	str	r3, [r2, #0]
 8004274:	e02e      	b.n	80042d4 <HAL_RCC_OscConfig+0xd8>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10c      	bne.n	8004298 <HAL_RCC_OscConfig+0x9c>
 800427e:	4b7f      	ldr	r3, [pc, #508]	; (800447c <HAL_RCC_OscConfig+0x280>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a7e      	ldr	r2, [pc, #504]	; (800447c <HAL_RCC_OscConfig+0x280>)
 8004284:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004288:	6013      	str	r3, [r2, #0]
 800428a:	4b7c      	ldr	r3, [pc, #496]	; (800447c <HAL_RCC_OscConfig+0x280>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a7b      	ldr	r2, [pc, #492]	; (800447c <HAL_RCC_OscConfig+0x280>)
 8004290:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	e01d      	b.n	80042d4 <HAL_RCC_OscConfig+0xd8>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042a0:	d10c      	bne.n	80042bc <HAL_RCC_OscConfig+0xc0>
 80042a2:	4b76      	ldr	r3, [pc, #472]	; (800447c <HAL_RCC_OscConfig+0x280>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a75      	ldr	r2, [pc, #468]	; (800447c <HAL_RCC_OscConfig+0x280>)
 80042a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	4b73      	ldr	r3, [pc, #460]	; (800447c <HAL_RCC_OscConfig+0x280>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a72      	ldr	r2, [pc, #456]	; (800447c <HAL_RCC_OscConfig+0x280>)
 80042b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	e00b      	b.n	80042d4 <HAL_RCC_OscConfig+0xd8>
 80042bc:	4b6f      	ldr	r3, [pc, #444]	; (800447c <HAL_RCC_OscConfig+0x280>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a6e      	ldr	r2, [pc, #440]	; (800447c <HAL_RCC_OscConfig+0x280>)
 80042c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042c6:	6013      	str	r3, [r2, #0]
 80042c8:	4b6c      	ldr	r3, [pc, #432]	; (800447c <HAL_RCC_OscConfig+0x280>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a6b      	ldr	r2, [pc, #428]	; (800447c <HAL_RCC_OscConfig+0x280>)
 80042ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d013      	beq.n	8004304 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042dc:	f7fd faf6 	bl	80018cc <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042e4:	f7fd faf2 	bl	80018cc <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b64      	cmp	r3, #100	; 0x64
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e229      	b.n	800474a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f6:	4b61      	ldr	r3, [pc, #388]	; (800447c <HAL_RCC_OscConfig+0x280>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0f0      	beq.n	80042e4 <HAL_RCC_OscConfig+0xe8>
 8004302:	e014      	b.n	800432e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004304:	f7fd fae2 	bl	80018cc <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800430c:	f7fd fade 	bl	80018cc <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b64      	cmp	r3, #100	; 0x64
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e215      	b.n	800474a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800431e:	4b57      	ldr	r3, [pc, #348]	; (800447c <HAL_RCC_OscConfig+0x280>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1f0      	bne.n	800430c <HAL_RCC_OscConfig+0x110>
 800432a:	e000      	b.n	800432e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800432c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d069      	beq.n	800440e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800433a:	4b50      	ldr	r3, [pc, #320]	; (800447c <HAL_RCC_OscConfig+0x280>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 030c 	and.w	r3, r3, #12
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00b      	beq.n	800435e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004346:	4b4d      	ldr	r3, [pc, #308]	; (800447c <HAL_RCC_OscConfig+0x280>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 030c 	and.w	r3, r3, #12
 800434e:	2b08      	cmp	r3, #8
 8004350:	d11c      	bne.n	800438c <HAL_RCC_OscConfig+0x190>
 8004352:	4b4a      	ldr	r3, [pc, #296]	; (800447c <HAL_RCC_OscConfig+0x280>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d116      	bne.n	800438c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800435e:	4b47      	ldr	r3, [pc, #284]	; (800447c <HAL_RCC_OscConfig+0x280>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d005      	beq.n	8004376 <HAL_RCC_OscConfig+0x17a>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d001      	beq.n	8004376 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e1e9      	b.n	800474a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004376:	4b41      	ldr	r3, [pc, #260]	; (800447c <HAL_RCC_OscConfig+0x280>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	493d      	ldr	r1, [pc, #244]	; (800447c <HAL_RCC_OscConfig+0x280>)
 8004386:	4313      	orrs	r3, r2
 8004388:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800438a:	e040      	b.n	800440e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d023      	beq.n	80043dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004394:	4b39      	ldr	r3, [pc, #228]	; (800447c <HAL_RCC_OscConfig+0x280>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a38      	ldr	r2, [pc, #224]	; (800447c <HAL_RCC_OscConfig+0x280>)
 800439a:	f043 0301 	orr.w	r3, r3, #1
 800439e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a0:	f7fd fa94 	bl	80018cc <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043a8:	f7fd fa90 	bl	80018cc <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e1c7      	b.n	800474a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ba:	4b30      	ldr	r3, [pc, #192]	; (800447c <HAL_RCC_OscConfig+0x280>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0f0      	beq.n	80043a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c6:	4b2d      	ldr	r3, [pc, #180]	; (800447c <HAL_RCC_OscConfig+0x280>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	4929      	ldr	r1, [pc, #164]	; (800447c <HAL_RCC_OscConfig+0x280>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	600b      	str	r3, [r1, #0]
 80043da:	e018      	b.n	800440e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043dc:	4b27      	ldr	r3, [pc, #156]	; (800447c <HAL_RCC_OscConfig+0x280>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a26      	ldr	r2, [pc, #152]	; (800447c <HAL_RCC_OscConfig+0x280>)
 80043e2:	f023 0301 	bic.w	r3, r3, #1
 80043e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e8:	f7fd fa70 	bl	80018cc <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043f0:	f7fd fa6c 	bl	80018cc <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e1a3      	b.n	800474a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004402:	4b1e      	ldr	r3, [pc, #120]	; (800447c <HAL_RCC_OscConfig+0x280>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b00      	cmp	r3, #0
 8004418:	d038      	beq.n	800448c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d019      	beq.n	8004456 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004422:	4b16      	ldr	r3, [pc, #88]	; (800447c <HAL_RCC_OscConfig+0x280>)
 8004424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004426:	4a15      	ldr	r2, [pc, #84]	; (800447c <HAL_RCC_OscConfig+0x280>)
 8004428:	f043 0301 	orr.w	r3, r3, #1
 800442c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800442e:	f7fd fa4d 	bl	80018cc <HAL_GetTick>
 8004432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004434:	e008      	b.n	8004448 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004436:	f7fd fa49 	bl	80018cc <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d901      	bls.n	8004448 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e180      	b.n	800474a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004448:	4b0c      	ldr	r3, [pc, #48]	; (800447c <HAL_RCC_OscConfig+0x280>)
 800444a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0f0      	beq.n	8004436 <HAL_RCC_OscConfig+0x23a>
 8004454:	e01a      	b.n	800448c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004456:	4b09      	ldr	r3, [pc, #36]	; (800447c <HAL_RCC_OscConfig+0x280>)
 8004458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800445a:	4a08      	ldr	r2, [pc, #32]	; (800447c <HAL_RCC_OscConfig+0x280>)
 800445c:	f023 0301 	bic.w	r3, r3, #1
 8004460:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004462:	f7fd fa33 	bl	80018cc <HAL_GetTick>
 8004466:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004468:	e00a      	b.n	8004480 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800446a:	f7fd fa2f 	bl	80018cc <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d903      	bls.n	8004480 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e166      	b.n	800474a <HAL_RCC_OscConfig+0x54e>
 800447c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004480:	4b92      	ldr	r3, [pc, #584]	; (80046cc <HAL_RCC_OscConfig+0x4d0>)
 8004482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1ee      	bne.n	800446a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 80a4 	beq.w	80045e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800449a:	4b8c      	ldr	r3, [pc, #560]	; (80046cc <HAL_RCC_OscConfig+0x4d0>)
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10d      	bne.n	80044c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80044a6:	4b89      	ldr	r3, [pc, #548]	; (80046cc <HAL_RCC_OscConfig+0x4d0>)
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	4a88      	ldr	r2, [pc, #544]	; (80046cc <HAL_RCC_OscConfig+0x4d0>)
 80044ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044b0:	6413      	str	r3, [r2, #64]	; 0x40
 80044b2:	4b86      	ldr	r3, [pc, #536]	; (80046cc <HAL_RCC_OscConfig+0x4d0>)
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ba:	60bb      	str	r3, [r7, #8]
 80044bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044be:	2301      	movs	r3, #1
 80044c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044c2:	4b83      	ldr	r3, [pc, #524]	; (80046d0 <HAL_RCC_OscConfig+0x4d4>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d118      	bne.n	8004500 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80044ce:	4b80      	ldr	r3, [pc, #512]	; (80046d0 <HAL_RCC_OscConfig+0x4d4>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a7f      	ldr	r2, [pc, #508]	; (80046d0 <HAL_RCC_OscConfig+0x4d4>)
 80044d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044da:	f7fd f9f7 	bl	80018cc <HAL_GetTick>
 80044de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044e0:	e008      	b.n	80044f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e2:	f7fd f9f3 	bl	80018cc <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b64      	cmp	r3, #100	; 0x64
 80044ee:	d901      	bls.n	80044f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e12a      	b.n	800474a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044f4:	4b76      	ldr	r3, [pc, #472]	; (80046d0 <HAL_RCC_OscConfig+0x4d4>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d0f0      	beq.n	80044e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d106      	bne.n	8004516 <HAL_RCC_OscConfig+0x31a>
 8004508:	4b70      	ldr	r3, [pc, #448]	; (80046cc <HAL_RCC_OscConfig+0x4d0>)
 800450a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450c:	4a6f      	ldr	r2, [pc, #444]	; (80046cc <HAL_RCC_OscConfig+0x4d0>)
 800450e:	f043 0301 	orr.w	r3, r3, #1
 8004512:	6713      	str	r3, [r2, #112]	; 0x70
 8004514:	e02d      	b.n	8004572 <HAL_RCC_OscConfig+0x376>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10c      	bne.n	8004538 <HAL_RCC_OscConfig+0x33c>
 800451e:	4b6b      	ldr	r3, [pc, #428]	; (80046cc <HAL_RCC_OscConfig+0x4d0>)
 8004520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004522:	4a6a      	ldr	r2, [pc, #424]	; (80046cc <HAL_RCC_OscConfig+0x4d0>)
 8004524:	f023 0301 	bic.w	r3, r3, #1
 8004528:	6713      	str	r3, [r2, #112]	; 0x70
 800452a:	4b68      	ldr	r3, [pc, #416]	; (80046cc <HAL_RCC_OscConfig+0x4d0>)
 800452c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452e:	4a67      	ldr	r2, [pc, #412]	; (80046cc <HAL_RCC_OscConfig+0x4d0>)
 8004530:	f023 0304 	bic.w	r3, r3, #4
 8004534:	6713      	str	r3, [r2, #112]	; 0x70
 8004536:	e01c      	b.n	8004572 <HAL_RCC_OscConfig+0x376>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	2b05      	cmp	r3, #5
 800453e:	d10c      	bne.n	800455a <HAL_RCC_OscConfig+0x35e>
 8004540:	4b62      	ldr	r3, [pc, #392]	; (80046cc <HAL_RCC_OscConfig+0x4d0>)
 8004542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004544:	4a61      	ldr	r2, [pc, #388]	; (80046cc <HAL_RCC_OscConfig+0x4d0>)
 8004546:	f043 0304 	orr.w	r3, r3, #4
 800454a:	6713      	str	r3, [r2, #112]	; 0x70
 800454c:	4b5f      	ldr	r3, [pc, #380]	; (80046cc <HAL_RCC_OscConfig+0x4d0>)
 800454e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004550:	4a5e      	ldr	r2, [pc, #376]	; (80046cc <HAL_RCC_OscConfig+0x4d0>)
 8004552:	f043 0301 	orr.w	r3, r3, #1
 8004556:	6713      	str	r3, [r2, #112]	; 0x70
 8004558:	e00b      	b.n	8004572 <HAL_RCC_OscConfig+0x376>
 800455a:	4b5c      	ldr	r3, [pc, #368]	; (80046cc <HAL_RCC_OscConfig+0x4d0>)
 800455c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455e:	4a5b      	ldr	r2, [pc, #364]	; (80046cc <HAL_RCC_OscConfig+0x4d0>)
 8004560:	f023 0301 	bic.w	r3, r3, #1
 8004564:	6713      	str	r3, [r2, #112]	; 0x70
 8004566:	4b59      	ldr	r3, [pc, #356]	; (80046cc <HAL_RCC_OscConfig+0x4d0>)
 8004568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456a:	4a58      	ldr	r2, [pc, #352]	; (80046cc <HAL_RCC_OscConfig+0x4d0>)
 800456c:	f023 0304 	bic.w	r3, r3, #4
 8004570:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d015      	beq.n	80045a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457a:	f7fd f9a7 	bl	80018cc <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004580:	e00a      	b.n	8004598 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004582:	f7fd f9a3 	bl	80018cc <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004590:	4293      	cmp	r3, r2
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e0d8      	b.n	800474a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004598:	4b4c      	ldr	r3, [pc, #304]	; (80046cc <HAL_RCC_OscConfig+0x4d0>)
 800459a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0ee      	beq.n	8004582 <HAL_RCC_OscConfig+0x386>
 80045a4:	e014      	b.n	80045d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a6:	f7fd f991 	bl	80018cc <HAL_GetTick>
 80045aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ac:	e00a      	b.n	80045c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ae:	f7fd f98d 	bl	80018cc <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045bc:	4293      	cmp	r3, r2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e0c2      	b.n	800474a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045c4:	4b41      	ldr	r3, [pc, #260]	; (80046cc <HAL_RCC_OscConfig+0x4d0>)
 80045c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1ee      	bne.n	80045ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045d0:	7dfb      	ldrb	r3, [r7, #23]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d105      	bne.n	80045e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045d6:	4b3d      	ldr	r3, [pc, #244]	; (80046cc <HAL_RCC_OscConfig+0x4d0>)
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	4a3c      	ldr	r2, [pc, #240]	; (80046cc <HAL_RCC_OscConfig+0x4d0>)
 80045dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 80ae 	beq.w	8004748 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045ec:	4b37      	ldr	r3, [pc, #220]	; (80046cc <HAL_RCC_OscConfig+0x4d0>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f003 030c 	and.w	r3, r3, #12
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d06d      	beq.n	80046d4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d14b      	bne.n	8004698 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004600:	4b32      	ldr	r3, [pc, #200]	; (80046cc <HAL_RCC_OscConfig+0x4d0>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a31      	ldr	r2, [pc, #196]	; (80046cc <HAL_RCC_OscConfig+0x4d0>)
 8004606:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800460a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460c:	f7fd f95e 	bl	80018cc <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004614:	f7fd f95a 	bl	80018cc <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e091      	b.n	800474a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004626:	4b29      	ldr	r3, [pc, #164]	; (80046cc <HAL_RCC_OscConfig+0x4d0>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1f0      	bne.n	8004614 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69da      	ldr	r2, [r3, #28]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	431a      	orrs	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	019b      	lsls	r3, r3, #6
 8004642:	431a      	orrs	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004648:	085b      	lsrs	r3, r3, #1
 800464a:	3b01      	subs	r3, #1
 800464c:	041b      	lsls	r3, r3, #16
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004654:	061b      	lsls	r3, r3, #24
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465c:	071b      	lsls	r3, r3, #28
 800465e:	491b      	ldr	r1, [pc, #108]	; (80046cc <HAL_RCC_OscConfig+0x4d0>)
 8004660:	4313      	orrs	r3, r2
 8004662:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004664:	4b19      	ldr	r3, [pc, #100]	; (80046cc <HAL_RCC_OscConfig+0x4d0>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a18      	ldr	r2, [pc, #96]	; (80046cc <HAL_RCC_OscConfig+0x4d0>)
 800466a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800466e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004670:	f7fd f92c 	bl	80018cc <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004678:	f7fd f928 	bl	80018cc <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e05f      	b.n	800474a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800468a:	4b10      	ldr	r3, [pc, #64]	; (80046cc <HAL_RCC_OscConfig+0x4d0>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0f0      	beq.n	8004678 <HAL_RCC_OscConfig+0x47c>
 8004696:	e057      	b.n	8004748 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004698:	4b0c      	ldr	r3, [pc, #48]	; (80046cc <HAL_RCC_OscConfig+0x4d0>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a0b      	ldr	r2, [pc, #44]	; (80046cc <HAL_RCC_OscConfig+0x4d0>)
 800469e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a4:	f7fd f912 	bl	80018cc <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ac:	f7fd f90e 	bl	80018cc <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e045      	b.n	800474a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046be:	4b03      	ldr	r3, [pc, #12]	; (80046cc <HAL_RCC_OscConfig+0x4d0>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f0      	bne.n	80046ac <HAL_RCC_OscConfig+0x4b0>
 80046ca:	e03d      	b.n	8004748 <HAL_RCC_OscConfig+0x54c>
 80046cc:	40023800 	.word	0x40023800
 80046d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80046d4:	4b1f      	ldr	r3, [pc, #124]	; (8004754 <HAL_RCC_OscConfig+0x558>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d030      	beq.n	8004744 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d129      	bne.n	8004744 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d122      	bne.n	8004744 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004704:	4013      	ands	r3, r2
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800470a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800470c:	4293      	cmp	r3, r2
 800470e:	d119      	bne.n	8004744 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471a:	085b      	lsrs	r3, r3, #1
 800471c:	3b01      	subs	r3, #1
 800471e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004720:	429a      	cmp	r2, r3
 8004722:	d10f      	bne.n	8004744 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004730:	429a      	cmp	r2, r3
 8004732:	d107      	bne.n	8004744 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004740:	429a      	cmp	r2, r3
 8004742:	d001      	beq.n	8004748 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e000      	b.n	800474a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3718      	adds	r7, #24
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	40023800 	.word	0x40023800

08004758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004762:	2300      	movs	r3, #0
 8004764:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e0d0      	b.n	8004912 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004770:	4b6a      	ldr	r3, [pc, #424]	; (800491c <HAL_RCC_ClockConfig+0x1c4>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 030f 	and.w	r3, r3, #15
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	429a      	cmp	r2, r3
 800477c:	d910      	bls.n	80047a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800477e:	4b67      	ldr	r3, [pc, #412]	; (800491c <HAL_RCC_ClockConfig+0x1c4>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f023 020f 	bic.w	r2, r3, #15
 8004786:	4965      	ldr	r1, [pc, #404]	; (800491c <HAL_RCC_ClockConfig+0x1c4>)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	4313      	orrs	r3, r2
 800478c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800478e:	4b63      	ldr	r3, [pc, #396]	; (800491c <HAL_RCC_ClockConfig+0x1c4>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 030f 	and.w	r3, r3, #15
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	429a      	cmp	r2, r3
 800479a:	d001      	beq.n	80047a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e0b8      	b.n	8004912 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d020      	beq.n	80047ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d005      	beq.n	80047c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047b8:	4b59      	ldr	r3, [pc, #356]	; (8004920 <HAL_RCC_ClockConfig+0x1c8>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	4a58      	ldr	r2, [pc, #352]	; (8004920 <HAL_RCC_ClockConfig+0x1c8>)
 80047be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0308 	and.w	r3, r3, #8
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d005      	beq.n	80047dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047d0:	4b53      	ldr	r3, [pc, #332]	; (8004920 <HAL_RCC_ClockConfig+0x1c8>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	4a52      	ldr	r2, [pc, #328]	; (8004920 <HAL_RCC_ClockConfig+0x1c8>)
 80047d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047dc:	4b50      	ldr	r3, [pc, #320]	; (8004920 <HAL_RCC_ClockConfig+0x1c8>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	494d      	ldr	r1, [pc, #308]	; (8004920 <HAL_RCC_ClockConfig+0x1c8>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d040      	beq.n	800487c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d107      	bne.n	8004812 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004802:	4b47      	ldr	r3, [pc, #284]	; (8004920 <HAL_RCC_ClockConfig+0x1c8>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d115      	bne.n	800483a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e07f      	b.n	8004912 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	2b02      	cmp	r3, #2
 8004818:	d107      	bne.n	800482a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800481a:	4b41      	ldr	r3, [pc, #260]	; (8004920 <HAL_RCC_ClockConfig+0x1c8>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d109      	bne.n	800483a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e073      	b.n	8004912 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800482a:	4b3d      	ldr	r3, [pc, #244]	; (8004920 <HAL_RCC_ClockConfig+0x1c8>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e06b      	b.n	8004912 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800483a:	4b39      	ldr	r3, [pc, #228]	; (8004920 <HAL_RCC_ClockConfig+0x1c8>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f023 0203 	bic.w	r2, r3, #3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	4936      	ldr	r1, [pc, #216]	; (8004920 <HAL_RCC_ClockConfig+0x1c8>)
 8004848:	4313      	orrs	r3, r2
 800484a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800484c:	f7fd f83e 	bl	80018cc <HAL_GetTick>
 8004850:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004852:	e00a      	b.n	800486a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004854:	f7fd f83a 	bl	80018cc <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004862:	4293      	cmp	r3, r2
 8004864:	d901      	bls.n	800486a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e053      	b.n	8004912 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800486a:	4b2d      	ldr	r3, [pc, #180]	; (8004920 <HAL_RCC_ClockConfig+0x1c8>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 020c 	and.w	r2, r3, #12
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	429a      	cmp	r2, r3
 800487a:	d1eb      	bne.n	8004854 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800487c:	4b27      	ldr	r3, [pc, #156]	; (800491c <HAL_RCC_ClockConfig+0x1c4>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 030f 	and.w	r3, r3, #15
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d210      	bcs.n	80048ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800488a:	4b24      	ldr	r3, [pc, #144]	; (800491c <HAL_RCC_ClockConfig+0x1c4>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f023 020f 	bic.w	r2, r3, #15
 8004892:	4922      	ldr	r1, [pc, #136]	; (800491c <HAL_RCC_ClockConfig+0x1c4>)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	4313      	orrs	r3, r2
 8004898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800489a:	4b20      	ldr	r3, [pc, #128]	; (800491c <HAL_RCC_ClockConfig+0x1c4>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 030f 	and.w	r3, r3, #15
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d001      	beq.n	80048ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e032      	b.n	8004912 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d008      	beq.n	80048ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048b8:	4b19      	ldr	r3, [pc, #100]	; (8004920 <HAL_RCC_ClockConfig+0x1c8>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	4916      	ldr	r1, [pc, #88]	; (8004920 <HAL_RCC_ClockConfig+0x1c8>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0308 	and.w	r3, r3, #8
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d009      	beq.n	80048ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048d6:	4b12      	ldr	r3, [pc, #72]	; (8004920 <HAL_RCC_ClockConfig+0x1c8>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	490e      	ldr	r1, [pc, #56]	; (8004920 <HAL_RCC_ClockConfig+0x1c8>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048ea:	f000 f821 	bl	8004930 <HAL_RCC_GetSysClockFreq>
 80048ee:	4602      	mov	r2, r0
 80048f0:	4b0b      	ldr	r3, [pc, #44]	; (8004920 <HAL_RCC_ClockConfig+0x1c8>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	091b      	lsrs	r3, r3, #4
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	490a      	ldr	r1, [pc, #40]	; (8004924 <HAL_RCC_ClockConfig+0x1cc>)
 80048fc:	5ccb      	ldrb	r3, [r1, r3]
 80048fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004902:	4a09      	ldr	r2, [pc, #36]	; (8004928 <HAL_RCC_ClockConfig+0x1d0>)
 8004904:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004906:	4b09      	ldr	r3, [pc, #36]	; (800492c <HAL_RCC_ClockConfig+0x1d4>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f7fc fe8a 	bl	8001624 <HAL_InitTick>

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	40023c00 	.word	0x40023c00
 8004920:	40023800 	.word	0x40023800
 8004924:	0800f424 	.word	0x0800f424
 8004928:	20000000 	.word	0x20000000
 800492c:	20000004 	.word	0x20000004

08004930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004934:	b094      	sub	sp, #80	; 0x50
 8004936:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004938:	2300      	movs	r3, #0
 800493a:	647b      	str	r3, [r7, #68]	; 0x44
 800493c:	2300      	movs	r3, #0
 800493e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004940:	2300      	movs	r3, #0
 8004942:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004944:	2300      	movs	r3, #0
 8004946:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004948:	4b79      	ldr	r3, [pc, #484]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x200>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f003 030c 	and.w	r3, r3, #12
 8004950:	2b08      	cmp	r3, #8
 8004952:	d00d      	beq.n	8004970 <HAL_RCC_GetSysClockFreq+0x40>
 8004954:	2b08      	cmp	r3, #8
 8004956:	f200 80e1 	bhi.w	8004b1c <HAL_RCC_GetSysClockFreq+0x1ec>
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <HAL_RCC_GetSysClockFreq+0x34>
 800495e:	2b04      	cmp	r3, #4
 8004960:	d003      	beq.n	800496a <HAL_RCC_GetSysClockFreq+0x3a>
 8004962:	e0db      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004964:	4b73      	ldr	r3, [pc, #460]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x204>)
 8004966:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004968:	e0db      	b.n	8004b22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800496a:	4b73      	ldr	r3, [pc, #460]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x208>)
 800496c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800496e:	e0d8      	b.n	8004b22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004970:	4b6f      	ldr	r3, [pc, #444]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004978:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800497a:	4b6d      	ldr	r3, [pc, #436]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x200>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d063      	beq.n	8004a4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004986:	4b6a      	ldr	r3, [pc, #424]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	099b      	lsrs	r3, r3, #6
 800498c:	2200      	movs	r2, #0
 800498e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004990:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004998:	633b      	str	r3, [r7, #48]	; 0x30
 800499a:	2300      	movs	r3, #0
 800499c:	637b      	str	r3, [r7, #52]	; 0x34
 800499e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80049a2:	4622      	mov	r2, r4
 80049a4:	462b      	mov	r3, r5
 80049a6:	f04f 0000 	mov.w	r0, #0
 80049aa:	f04f 0100 	mov.w	r1, #0
 80049ae:	0159      	lsls	r1, r3, #5
 80049b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049b4:	0150      	lsls	r0, r2, #5
 80049b6:	4602      	mov	r2, r0
 80049b8:	460b      	mov	r3, r1
 80049ba:	4621      	mov	r1, r4
 80049bc:	1a51      	subs	r1, r2, r1
 80049be:	6139      	str	r1, [r7, #16]
 80049c0:	4629      	mov	r1, r5
 80049c2:	eb63 0301 	sbc.w	r3, r3, r1
 80049c6:	617b      	str	r3, [r7, #20]
 80049c8:	f04f 0200 	mov.w	r2, #0
 80049cc:	f04f 0300 	mov.w	r3, #0
 80049d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049d4:	4659      	mov	r1, fp
 80049d6:	018b      	lsls	r3, r1, #6
 80049d8:	4651      	mov	r1, sl
 80049da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049de:	4651      	mov	r1, sl
 80049e0:	018a      	lsls	r2, r1, #6
 80049e2:	4651      	mov	r1, sl
 80049e4:	ebb2 0801 	subs.w	r8, r2, r1
 80049e8:	4659      	mov	r1, fp
 80049ea:	eb63 0901 	sbc.w	r9, r3, r1
 80049ee:	f04f 0200 	mov.w	r2, #0
 80049f2:	f04f 0300 	mov.w	r3, #0
 80049f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a02:	4690      	mov	r8, r2
 8004a04:	4699      	mov	r9, r3
 8004a06:	4623      	mov	r3, r4
 8004a08:	eb18 0303 	adds.w	r3, r8, r3
 8004a0c:	60bb      	str	r3, [r7, #8]
 8004a0e:	462b      	mov	r3, r5
 8004a10:	eb49 0303 	adc.w	r3, r9, r3
 8004a14:	60fb      	str	r3, [r7, #12]
 8004a16:	f04f 0200 	mov.w	r2, #0
 8004a1a:	f04f 0300 	mov.w	r3, #0
 8004a1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a22:	4629      	mov	r1, r5
 8004a24:	024b      	lsls	r3, r1, #9
 8004a26:	4621      	mov	r1, r4
 8004a28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a2c:	4621      	mov	r1, r4
 8004a2e:	024a      	lsls	r2, r1, #9
 8004a30:	4610      	mov	r0, r2
 8004a32:	4619      	mov	r1, r3
 8004a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a36:	2200      	movs	r2, #0
 8004a38:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a40:	f7fb fbfe 	bl	8000240 <__aeabi_uldivmod>
 8004a44:	4602      	mov	r2, r0
 8004a46:	460b      	mov	r3, r1
 8004a48:	4613      	mov	r3, r2
 8004a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a4c:	e058      	b.n	8004b00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a4e:	4b38      	ldr	r3, [pc, #224]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	099b      	lsrs	r3, r3, #6
 8004a54:	2200      	movs	r2, #0
 8004a56:	4618      	mov	r0, r3
 8004a58:	4611      	mov	r1, r2
 8004a5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a5e:	623b      	str	r3, [r7, #32]
 8004a60:	2300      	movs	r3, #0
 8004a62:	627b      	str	r3, [r7, #36]	; 0x24
 8004a64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a68:	4642      	mov	r2, r8
 8004a6a:	464b      	mov	r3, r9
 8004a6c:	f04f 0000 	mov.w	r0, #0
 8004a70:	f04f 0100 	mov.w	r1, #0
 8004a74:	0159      	lsls	r1, r3, #5
 8004a76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a7a:	0150      	lsls	r0, r2, #5
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4641      	mov	r1, r8
 8004a82:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a86:	4649      	mov	r1, r9
 8004a88:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a8c:	f04f 0200 	mov.w	r2, #0
 8004a90:	f04f 0300 	mov.w	r3, #0
 8004a94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004aa0:	ebb2 040a 	subs.w	r4, r2, sl
 8004aa4:	eb63 050b 	sbc.w	r5, r3, fp
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	00eb      	lsls	r3, r5, #3
 8004ab2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ab6:	00e2      	lsls	r2, r4, #3
 8004ab8:	4614      	mov	r4, r2
 8004aba:	461d      	mov	r5, r3
 8004abc:	4643      	mov	r3, r8
 8004abe:	18e3      	adds	r3, r4, r3
 8004ac0:	603b      	str	r3, [r7, #0]
 8004ac2:	464b      	mov	r3, r9
 8004ac4:	eb45 0303 	adc.w	r3, r5, r3
 8004ac8:	607b      	str	r3, [r7, #4]
 8004aca:	f04f 0200 	mov.w	r2, #0
 8004ace:	f04f 0300 	mov.w	r3, #0
 8004ad2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ad6:	4629      	mov	r1, r5
 8004ad8:	028b      	lsls	r3, r1, #10
 8004ada:	4621      	mov	r1, r4
 8004adc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ae0:	4621      	mov	r1, r4
 8004ae2:	028a      	lsls	r2, r1, #10
 8004ae4:	4610      	mov	r0, r2
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aea:	2200      	movs	r2, #0
 8004aec:	61bb      	str	r3, [r7, #24]
 8004aee:	61fa      	str	r2, [r7, #28]
 8004af0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004af4:	f7fb fba4 	bl	8000240 <__aeabi_uldivmod>
 8004af8:	4602      	mov	r2, r0
 8004afa:	460b      	mov	r3, r1
 8004afc:	4613      	mov	r3, r2
 8004afe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004b00:	4b0b      	ldr	r3, [pc, #44]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	0c1b      	lsrs	r3, r3, #16
 8004b06:	f003 0303 	and.w	r3, r3, #3
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004b10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b1a:	e002      	b.n	8004b22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b1c:	4b05      	ldr	r3, [pc, #20]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3750      	adds	r7, #80	; 0x50
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b2e:	bf00      	nop
 8004b30:	40023800 	.word	0x40023800
 8004b34:	00f42400 	.word	0x00f42400
 8004b38:	007a1200 	.word	0x007a1200

08004b3c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b40:	4b03      	ldr	r3, [pc, #12]	; (8004b50 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b42:	681b      	ldr	r3, [r3, #0]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	20000000 	.word	0x20000000

08004b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b58:	f7ff fff0 	bl	8004b3c <HAL_RCC_GetHCLKFreq>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	0a9b      	lsrs	r3, r3, #10
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	4903      	ldr	r1, [pc, #12]	; (8004b78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b6a:	5ccb      	ldrb	r3, [r1, r3]
 8004b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40023800 	.word	0x40023800
 8004b78:	0800f434 	.word	0x0800f434

08004b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b80:	f7ff ffdc 	bl	8004b3c <HAL_RCC_GetHCLKFreq>
 8004b84:	4602      	mov	r2, r0
 8004b86:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	0b5b      	lsrs	r3, r3, #13
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	4903      	ldr	r1, [pc, #12]	; (8004ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b92:	5ccb      	ldrb	r3, [r1, r3]
 8004b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40023800 	.word	0x40023800
 8004ba0:	0800f434 	.word	0x0800f434

08004ba4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	220f      	movs	r2, #15
 8004bb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004bb4:	4b12      	ldr	r3, [pc, #72]	; (8004c00 <HAL_RCC_GetClockConfig+0x5c>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f003 0203 	and.w	r2, r3, #3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004bc0:	4b0f      	ldr	r3, [pc, #60]	; (8004c00 <HAL_RCC_GetClockConfig+0x5c>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004bcc:	4b0c      	ldr	r3, [pc, #48]	; (8004c00 <HAL_RCC_GetClockConfig+0x5c>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004bd8:	4b09      	ldr	r3, [pc, #36]	; (8004c00 <HAL_RCC_GetClockConfig+0x5c>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	08db      	lsrs	r3, r3, #3
 8004bde:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004be6:	4b07      	ldr	r3, [pc, #28]	; (8004c04 <HAL_RCC_GetClockConfig+0x60>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 020f 	and.w	r2, r3, #15
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	601a      	str	r2, [r3, #0]
}
 8004bf2:	bf00      	nop
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	40023800 	.word	0x40023800
 8004c04:	40023c00 	.word	0x40023c00

08004c08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b088      	sub	sp, #32
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004c10:	2300      	movs	r3, #0
 8004c12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004c14:	2300      	movs	r3, #0
 8004c16:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004c20:	2300      	movs	r3, #0
 8004c22:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d012      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c30:	4b69      	ldr	r3, [pc, #420]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	4a68      	ldr	r2, [pc, #416]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004c3a:	6093      	str	r3, [r2, #8]
 8004c3c:	4b66      	ldr	r3, [pc, #408]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c44:	4964      	ldr	r1, [pc, #400]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004c52:	2301      	movs	r3, #1
 8004c54:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d017      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c62:	4b5d      	ldr	r3, [pc, #372]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c70:	4959      	ldr	r1, [pc, #356]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c80:	d101      	bne.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004c82:	2301      	movs	r3, #1
 8004c84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d017      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c9e:	4b4e      	ldr	r3, [pc, #312]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ca4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cac:	494a      	ldr	r1, [pc, #296]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cbc:	d101      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0320 	and.w	r3, r3, #32
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 808b 	beq.w	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cec:	4b3a      	ldr	r3, [pc, #232]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf0:	4a39      	ldr	r2, [pc, #228]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8004cf8:	4b37      	ldr	r3, [pc, #220]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d00:	60bb      	str	r3, [r7, #8]
 8004d02:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d04:	4b35      	ldr	r3, [pc, #212]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a34      	ldr	r2, [pc, #208]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d10:	f7fc fddc 	bl	80018cc <HAL_GetTick>
 8004d14:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d16:	e008      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d18:	f7fc fdd8 	bl	80018cc <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b64      	cmp	r3, #100	; 0x64
 8004d24:	d901      	bls.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e38f      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d2a:	4b2c      	ldr	r3, [pc, #176]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0f0      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d36:	4b28      	ldr	r3, [pc, #160]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d3e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d035      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d02e      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d54:	4b20      	ldr	r3, [pc, #128]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d5c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d5e:	4b1e      	ldr	r3, [pc, #120]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d62:	4a1d      	ldr	r2, [pc, #116]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d68:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d6a:	4b1b      	ldr	r3, [pc, #108]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6e:	4a1a      	ldr	r2, [pc, #104]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004d76:	4a18      	ldr	r2, [pc, #96]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d7c:	4b16      	ldr	r3, [pc, #88]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d114      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d88:	f7fc fda0 	bl	80018cc <HAL_GetTick>
 8004d8c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d8e:	e00a      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d90:	f7fc fd9c 	bl	80018cc <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e351      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da6:	4b0c      	ldr	r3, [pc, #48]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0ee      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dbe:	d111      	bne.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004dc0:	4b05      	ldr	r3, [pc, #20]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004dcc:	4b04      	ldr	r3, [pc, #16]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004dce:	400b      	ands	r3, r1
 8004dd0:	4901      	ldr	r1, [pc, #4]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	608b      	str	r3, [r1, #8]
 8004dd6:	e00b      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	40007000 	.word	0x40007000
 8004de0:	0ffffcff 	.word	0x0ffffcff
 8004de4:	4bac      	ldr	r3, [pc, #688]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	4aab      	ldr	r2, [pc, #684]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004dee:	6093      	str	r3, [r2, #8]
 8004df0:	4ba9      	ldr	r3, [pc, #676]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004df2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dfc:	49a6      	ldr	r1, [pc, #664]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0310 	and.w	r3, r3, #16
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d010      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e0e:	4ba2      	ldr	r3, [pc, #648]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e14:	4aa0      	ldr	r2, [pc, #640]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004e1e:	4b9e      	ldr	r3, [pc, #632]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e20:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e28:	499b      	ldr	r1, [pc, #620]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00a      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e3c:	4b96      	ldr	r3, [pc, #600]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e4a:	4993      	ldr	r1, [pc, #588]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e5e:	4b8e      	ldr	r3, [pc, #568]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e6c:	498a      	ldr	r1, [pc, #552]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00a      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e80:	4b85      	ldr	r3, [pc, #532]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e8e:	4982      	ldr	r1, [pc, #520]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00a      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ea2:	4b7d      	ldr	r3, [pc, #500]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb0:	4979      	ldr	r1, [pc, #484]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00a      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ec4:	4b74      	ldr	r3, [pc, #464]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eca:	f023 0203 	bic.w	r2, r3, #3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed2:	4971      	ldr	r1, [pc, #452]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00a      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ee6:	4b6c      	ldr	r3, [pc, #432]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eec:	f023 020c 	bic.w	r2, r3, #12
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ef4:	4968      	ldr	r1, [pc, #416]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00a      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f08:	4b63      	ldr	r3, [pc, #396]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f16:	4960      	ldr	r1, [pc, #384]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f2a:	4b5b      	ldr	r3, [pc, #364]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f30:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f38:	4957      	ldr	r1, [pc, #348]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00a      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f4c:	4b52      	ldr	r3, [pc, #328]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5a:	494f      	ldr	r1, [pc, #316]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00a      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004f6e:	4b4a      	ldr	r3, [pc, #296]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f7c:	4946      	ldr	r1, [pc, #280]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00a      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004f90:	4b41      	ldr	r3, [pc, #260]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f9e:	493e      	ldr	r1, [pc, #248]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004fb2:	4b39      	ldr	r3, [pc, #228]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fc0:	4935      	ldr	r1, [pc, #212]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00a      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004fd4:	4b30      	ldr	r3, [pc, #192]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fe2:	492d      	ldr	r1, [pc, #180]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d011      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004ff6:	4b28      	ldr	r3, [pc, #160]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005004:	4924      	ldr	r1, [pc, #144]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005006:	4313      	orrs	r3, r2
 8005008:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005010:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005014:	d101      	bne.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005016:	2301      	movs	r3, #1
 8005018:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0308 	and.w	r3, r3, #8
 8005022:	2b00      	cmp	r3, #0
 8005024:	d001      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005026:	2301      	movs	r3, #1
 8005028:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005036:	4b18      	ldr	r3, [pc, #96]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005044:	4914      	ldr	r1, [pc, #80]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005046:	4313      	orrs	r3, r2
 8005048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00b      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005058:	4b0f      	ldr	r3, [pc, #60]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800505a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005068:	490b      	ldr	r1, [pc, #44]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800506a:	4313      	orrs	r3, r2
 800506c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00f      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800507c:	4b06      	ldr	r3, [pc, #24]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800507e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005082:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800508c:	4902      	ldr	r1, [pc, #8]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800508e:	4313      	orrs	r3, r2
 8005090:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005094:	e002      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005096:	bf00      	nop
 8005098:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00b      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80050a8:	4b8a      	ldr	r3, [pc, #552]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b8:	4986      	ldr	r1, [pc, #536]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00b      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80050cc:	4b81      	ldr	r3, [pc, #516]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050d2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050dc:	497d      	ldr	r1, [pc, #500]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d006      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 80d6 	beq.w	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80050f8:	4b76      	ldr	r3, [pc, #472]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a75      	ldr	r2, [pc, #468]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005102:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005104:	f7fc fbe2 	bl	80018cc <HAL_GetTick>
 8005108:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800510a:	e008      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800510c:	f7fc fbde 	bl	80018cc <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b64      	cmp	r3, #100	; 0x64
 8005118:	d901      	bls.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e195      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800511e:	4b6d      	ldr	r3, [pc, #436]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1f0      	bne.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b00      	cmp	r3, #0
 8005134:	d021      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800513a:	2b00      	cmp	r3, #0
 800513c:	d11d      	bne.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800513e:	4b65      	ldr	r3, [pc, #404]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005140:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005144:	0c1b      	lsrs	r3, r3, #16
 8005146:	f003 0303 	and.w	r3, r3, #3
 800514a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800514c:	4b61      	ldr	r3, [pc, #388]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800514e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005152:	0e1b      	lsrs	r3, r3, #24
 8005154:	f003 030f 	and.w	r3, r3, #15
 8005158:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	019a      	lsls	r2, r3, #6
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	041b      	lsls	r3, r3, #16
 8005164:	431a      	orrs	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	061b      	lsls	r3, r3, #24
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	071b      	lsls	r3, r3, #28
 8005172:	4958      	ldr	r1, [pc, #352]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005174:	4313      	orrs	r3, r2
 8005176:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d004      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800518e:	d00a      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005198:	2b00      	cmp	r3, #0
 800519a:	d02e      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051a4:	d129      	bne.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80051a6:	4b4b      	ldr	r3, [pc, #300]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051ac:	0c1b      	lsrs	r3, r3, #16
 80051ae:	f003 0303 	and.w	r3, r3, #3
 80051b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051b4:	4b47      	ldr	r3, [pc, #284]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051ba:	0f1b      	lsrs	r3, r3, #28
 80051bc:	f003 0307 	and.w	r3, r3, #7
 80051c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	019a      	lsls	r2, r3, #6
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	041b      	lsls	r3, r3, #16
 80051cc:	431a      	orrs	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	061b      	lsls	r3, r3, #24
 80051d4:	431a      	orrs	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	071b      	lsls	r3, r3, #28
 80051da:	493e      	ldr	r1, [pc, #248]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80051e2:	4b3c      	ldr	r3, [pc, #240]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051e8:	f023 021f 	bic.w	r2, r3, #31
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	3b01      	subs	r3, #1
 80051f2:	4938      	ldr	r1, [pc, #224]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d01d      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005206:	4b33      	ldr	r3, [pc, #204]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800520c:	0e1b      	lsrs	r3, r3, #24
 800520e:	f003 030f 	and.w	r3, r3, #15
 8005212:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005214:	4b2f      	ldr	r3, [pc, #188]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800521a:	0f1b      	lsrs	r3, r3, #28
 800521c:	f003 0307 	and.w	r3, r3, #7
 8005220:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	019a      	lsls	r2, r3, #6
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	041b      	lsls	r3, r3, #16
 800522e:	431a      	orrs	r2, r3
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	061b      	lsls	r3, r3, #24
 8005234:	431a      	orrs	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	071b      	lsls	r3, r3, #28
 800523a:	4926      	ldr	r1, [pc, #152]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800523c:	4313      	orrs	r3, r2
 800523e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d011      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	019a      	lsls	r2, r3, #6
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	041b      	lsls	r3, r3, #16
 800525a:	431a      	orrs	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	061b      	lsls	r3, r3, #24
 8005262:	431a      	orrs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	071b      	lsls	r3, r3, #28
 800526a:	491a      	ldr	r1, [pc, #104]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800526c:	4313      	orrs	r3, r2
 800526e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005272:	4b18      	ldr	r3, [pc, #96]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a17      	ldr	r2, [pc, #92]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005278:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800527c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800527e:	f7fc fb25 	bl	80018cc <HAL_GetTick>
 8005282:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005284:	e008      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005286:	f7fc fb21 	bl	80018cc <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b64      	cmp	r3, #100	; 0x64
 8005292:	d901      	bls.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e0d8      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005298:	4b0e      	ldr	r3, [pc, #56]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0f0      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	f040 80ce 	bne.w	8005448 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80052ac:	4b09      	ldr	r3, [pc, #36]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a08      	ldr	r2, [pc, #32]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052b8:	f7fc fb08 	bl	80018cc <HAL_GetTick>
 80052bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052be:	e00b      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80052c0:	f7fc fb04 	bl	80018cc <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b64      	cmp	r3, #100	; 0x64
 80052cc:	d904      	bls.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e0bb      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80052d2:	bf00      	nop
 80052d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052d8:	4b5e      	ldr	r3, [pc, #376]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052e4:	d0ec      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d009      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005302:	2b00      	cmp	r3, #0
 8005304:	d02e      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	2b00      	cmp	r3, #0
 800530c:	d12a      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800530e:	4b51      	ldr	r3, [pc, #324]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005314:	0c1b      	lsrs	r3, r3, #16
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800531c:	4b4d      	ldr	r3, [pc, #308]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800531e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005322:	0f1b      	lsrs	r3, r3, #28
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	019a      	lsls	r2, r3, #6
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	041b      	lsls	r3, r3, #16
 8005334:	431a      	orrs	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	061b      	lsls	r3, r3, #24
 800533c:	431a      	orrs	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	071b      	lsls	r3, r3, #28
 8005342:	4944      	ldr	r1, [pc, #272]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005344:	4313      	orrs	r3, r2
 8005346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800534a:	4b42      	ldr	r3, [pc, #264]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800534c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005350:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005358:	3b01      	subs	r3, #1
 800535a:	021b      	lsls	r3, r3, #8
 800535c:	493d      	ldr	r1, [pc, #244]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800535e:	4313      	orrs	r3, r2
 8005360:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d022      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005374:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005378:	d11d      	bne.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800537a:	4b36      	ldr	r3, [pc, #216]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800537c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005380:	0e1b      	lsrs	r3, r3, #24
 8005382:	f003 030f 	and.w	r3, r3, #15
 8005386:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005388:	4b32      	ldr	r3, [pc, #200]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800538a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800538e:	0f1b      	lsrs	r3, r3, #28
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	019a      	lsls	r2, r3, #6
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	041b      	lsls	r3, r3, #16
 80053a2:	431a      	orrs	r2, r3
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	061b      	lsls	r3, r3, #24
 80053a8:	431a      	orrs	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	071b      	lsls	r3, r3, #28
 80053ae:	4929      	ldr	r1, [pc, #164]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0308 	and.w	r3, r3, #8
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d028      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053c2:	4b24      	ldr	r3, [pc, #144]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c8:	0e1b      	lsrs	r3, r3, #24
 80053ca:	f003 030f 	and.w	r3, r3, #15
 80053ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80053d0:	4b20      	ldr	r3, [pc, #128]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d6:	0c1b      	lsrs	r3, r3, #16
 80053d8:	f003 0303 	and.w	r3, r3, #3
 80053dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	019a      	lsls	r2, r3, #6
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	041b      	lsls	r3, r3, #16
 80053e8:	431a      	orrs	r2, r3
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	061b      	lsls	r3, r3, #24
 80053ee:	431a      	orrs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	69db      	ldr	r3, [r3, #28]
 80053f4:	071b      	lsls	r3, r3, #28
 80053f6:	4917      	ldr	r1, [pc, #92]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80053fe:	4b15      	ldr	r3, [pc, #84]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005400:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005404:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540c:	4911      	ldr	r1, [pc, #68]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800540e:	4313      	orrs	r3, r2
 8005410:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005414:	4b0f      	ldr	r3, [pc, #60]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a0e      	ldr	r2, [pc, #56]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800541a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800541e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005420:	f7fc fa54 	bl	80018cc <HAL_GetTick>
 8005424:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005426:	e008      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005428:	f7fc fa50 	bl	80018cc <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b64      	cmp	r3, #100	; 0x64
 8005434:	d901      	bls.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e007      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800543a:	4b06      	ldr	r3, [pc, #24]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005442:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005446:	d1ef      	bne.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3720      	adds	r7, #32
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	40023800 	.word	0x40023800

08005458 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e09d      	b.n	80055a6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	2b00      	cmp	r3, #0
 8005470:	d108      	bne.n	8005484 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800547a:	d009      	beq.n	8005490 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	61da      	str	r2, [r3, #28]
 8005482:	e005      	b.n	8005490 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d106      	bne.n	80054b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7fb ff5e 	bl	800136c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2202      	movs	r2, #2
 80054b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054d0:	d902      	bls.n	80054d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80054d2:	2300      	movs	r3, #0
 80054d4:	60fb      	str	r3, [r7, #12]
 80054d6:	e002      	b.n	80054de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80054d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80054e6:	d007      	beq.n	80054f8 <HAL_SPI_Init+0xa0>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054f0:	d002      	beq.n	80054f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005508:	431a      	orrs	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	431a      	orrs	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	431a      	orrs	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005526:	431a      	orrs	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005530:	431a      	orrs	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553a:	ea42 0103 	orr.w	r1, r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005542:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	430a      	orrs	r2, r1
 800554c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	0c1b      	lsrs	r3, r3, #16
 8005554:	f003 0204 	and.w	r2, r3, #4
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	f003 0310 	and.w	r3, r3, #16
 8005560:	431a      	orrs	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005566:	f003 0308 	and.w	r3, r3, #8
 800556a:	431a      	orrs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005574:	ea42 0103 	orr.w	r1, r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	69da      	ldr	r2, [r3, #28]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005594:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b082      	sub	sp, #8
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d101      	bne.n	80055c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e049      	b.n	8005654 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d106      	bne.n	80055da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f7fb ff79 	bl	80014cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2202      	movs	r2, #2
 80055de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	3304      	adds	r3, #4
 80055ea:	4619      	mov	r1, r3
 80055ec:	4610      	mov	r0, r2
 80055ee:	f000 ffbd 	bl	800656c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b01      	cmp	r3, #1
 800566e:	d001      	beq.n	8005674 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e054      	b.n	800571e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68da      	ldr	r2, [r3, #12]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 0201 	orr.w	r2, r2, #1
 800568a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a26      	ldr	r2, [pc, #152]	; (800572c <HAL_TIM_Base_Start_IT+0xd0>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d022      	beq.n	80056dc <HAL_TIM_Base_Start_IT+0x80>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800569e:	d01d      	beq.n	80056dc <HAL_TIM_Base_Start_IT+0x80>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a22      	ldr	r2, [pc, #136]	; (8005730 <HAL_TIM_Base_Start_IT+0xd4>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d018      	beq.n	80056dc <HAL_TIM_Base_Start_IT+0x80>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a21      	ldr	r2, [pc, #132]	; (8005734 <HAL_TIM_Base_Start_IT+0xd8>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d013      	beq.n	80056dc <HAL_TIM_Base_Start_IT+0x80>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a1f      	ldr	r2, [pc, #124]	; (8005738 <HAL_TIM_Base_Start_IT+0xdc>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d00e      	beq.n	80056dc <HAL_TIM_Base_Start_IT+0x80>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a1e      	ldr	r2, [pc, #120]	; (800573c <HAL_TIM_Base_Start_IT+0xe0>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d009      	beq.n	80056dc <HAL_TIM_Base_Start_IT+0x80>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a1c      	ldr	r2, [pc, #112]	; (8005740 <HAL_TIM_Base_Start_IT+0xe4>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d004      	beq.n	80056dc <HAL_TIM_Base_Start_IT+0x80>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a1b      	ldr	r2, [pc, #108]	; (8005744 <HAL_TIM_Base_Start_IT+0xe8>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d115      	bne.n	8005708 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689a      	ldr	r2, [r3, #8]
 80056e2:	4b19      	ldr	r3, [pc, #100]	; (8005748 <HAL_TIM_Base_Start_IT+0xec>)
 80056e4:	4013      	ands	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2b06      	cmp	r3, #6
 80056ec:	d015      	beq.n	800571a <HAL_TIM_Base_Start_IT+0xbe>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056f4:	d011      	beq.n	800571a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f042 0201 	orr.w	r2, r2, #1
 8005704:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005706:	e008      	b.n	800571a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f042 0201 	orr.w	r2, r2, #1
 8005716:	601a      	str	r2, [r3, #0]
 8005718:	e000      	b.n	800571c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800571a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	40010000 	.word	0x40010000
 8005730:	40000400 	.word	0x40000400
 8005734:	40000800 	.word	0x40000800
 8005738:	40000c00 	.word	0x40000c00
 800573c:	40010400 	.word	0x40010400
 8005740:	40014000 	.word	0x40014000
 8005744:	40001800 	.word	0x40001800
 8005748:	00010007 	.word	0x00010007

0800574c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e049      	b.n	80057f2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d106      	bne.n	8005778 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f841 	bl	80057fa <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2202      	movs	r2, #2
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	3304      	adds	r3, #4
 8005788:	4619      	mov	r1, r3
 800578a:	4610      	mov	r0, r2
 800578c:	f000 feee 	bl	800656c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3708      	adds	r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b083      	sub	sp, #12
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005802:	bf00      	nop
 8005804:	370c      	adds	r7, #12
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
	...

08005810 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d104      	bne.n	800582a <HAL_TIM_IC_Start+0x1a>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005826:	b2db      	uxtb	r3, r3
 8005828:	e023      	b.n	8005872 <HAL_TIM_IC_Start+0x62>
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b04      	cmp	r3, #4
 800582e:	d104      	bne.n	800583a <HAL_TIM_IC_Start+0x2a>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005836:	b2db      	uxtb	r3, r3
 8005838:	e01b      	b.n	8005872 <HAL_TIM_IC_Start+0x62>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b08      	cmp	r3, #8
 800583e:	d104      	bne.n	800584a <HAL_TIM_IC_Start+0x3a>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005846:	b2db      	uxtb	r3, r3
 8005848:	e013      	b.n	8005872 <HAL_TIM_IC_Start+0x62>
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b0c      	cmp	r3, #12
 800584e:	d104      	bne.n	800585a <HAL_TIM_IC_Start+0x4a>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005856:	b2db      	uxtb	r3, r3
 8005858:	e00b      	b.n	8005872 <HAL_TIM_IC_Start+0x62>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2b10      	cmp	r3, #16
 800585e:	d104      	bne.n	800586a <HAL_TIM_IC_Start+0x5a>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005866:	b2db      	uxtb	r3, r3
 8005868:	e003      	b.n	8005872 <HAL_TIM_IC_Start+0x62>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005870:	b2db      	uxtb	r3, r3
 8005872:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d104      	bne.n	8005884 <HAL_TIM_IC_Start+0x74>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005880:	b2db      	uxtb	r3, r3
 8005882:	e013      	b.n	80058ac <HAL_TIM_IC_Start+0x9c>
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	2b04      	cmp	r3, #4
 8005888:	d104      	bne.n	8005894 <HAL_TIM_IC_Start+0x84>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005890:	b2db      	uxtb	r3, r3
 8005892:	e00b      	b.n	80058ac <HAL_TIM_IC_Start+0x9c>
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	2b08      	cmp	r3, #8
 8005898:	d104      	bne.n	80058a4 <HAL_TIM_IC_Start+0x94>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	e003      	b.n	80058ac <HAL_TIM_IC_Start+0x9c>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80058ae:	7bfb      	ldrb	r3, [r7, #15]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d102      	bne.n	80058ba <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80058b4:	7bbb      	ldrb	r3, [r7, #14]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d001      	beq.n	80058be <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e097      	b.n	80059ee <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d104      	bne.n	80058ce <HAL_TIM_IC_Start+0xbe>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058cc:	e023      	b.n	8005916 <HAL_TIM_IC_Start+0x106>
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b04      	cmp	r3, #4
 80058d2:	d104      	bne.n	80058de <HAL_TIM_IC_Start+0xce>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058dc:	e01b      	b.n	8005916 <HAL_TIM_IC_Start+0x106>
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b08      	cmp	r3, #8
 80058e2:	d104      	bne.n	80058ee <HAL_TIM_IC_Start+0xde>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058ec:	e013      	b.n	8005916 <HAL_TIM_IC_Start+0x106>
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	2b0c      	cmp	r3, #12
 80058f2:	d104      	bne.n	80058fe <HAL_TIM_IC_Start+0xee>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058fc:	e00b      	b.n	8005916 <HAL_TIM_IC_Start+0x106>
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b10      	cmp	r3, #16
 8005902:	d104      	bne.n	800590e <HAL_TIM_IC_Start+0xfe>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800590c:	e003      	b.n	8005916 <HAL_TIM_IC_Start+0x106>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2202      	movs	r2, #2
 8005912:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d104      	bne.n	8005926 <HAL_TIM_IC_Start+0x116>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2202      	movs	r2, #2
 8005920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005924:	e013      	b.n	800594e <HAL_TIM_IC_Start+0x13e>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b04      	cmp	r3, #4
 800592a:	d104      	bne.n	8005936 <HAL_TIM_IC_Start+0x126>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005934:	e00b      	b.n	800594e <HAL_TIM_IC_Start+0x13e>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b08      	cmp	r3, #8
 800593a:	d104      	bne.n	8005946 <HAL_TIM_IC_Start+0x136>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005944:	e003      	b.n	800594e <HAL_TIM_IC_Start+0x13e>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2202      	movs	r2, #2
 800594a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2201      	movs	r2, #1
 8005954:	6839      	ldr	r1, [r7, #0]
 8005956:	4618      	mov	r0, r3
 8005958:	f001 f900 	bl	8006b5c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a25      	ldr	r2, [pc, #148]	; (80059f8 <HAL_TIM_IC_Start+0x1e8>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d022      	beq.n	80059ac <HAL_TIM_IC_Start+0x19c>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800596e:	d01d      	beq.n	80059ac <HAL_TIM_IC_Start+0x19c>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a21      	ldr	r2, [pc, #132]	; (80059fc <HAL_TIM_IC_Start+0x1ec>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d018      	beq.n	80059ac <HAL_TIM_IC_Start+0x19c>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a20      	ldr	r2, [pc, #128]	; (8005a00 <HAL_TIM_IC_Start+0x1f0>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d013      	beq.n	80059ac <HAL_TIM_IC_Start+0x19c>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a1e      	ldr	r2, [pc, #120]	; (8005a04 <HAL_TIM_IC_Start+0x1f4>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d00e      	beq.n	80059ac <HAL_TIM_IC_Start+0x19c>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a1d      	ldr	r2, [pc, #116]	; (8005a08 <HAL_TIM_IC_Start+0x1f8>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d009      	beq.n	80059ac <HAL_TIM_IC_Start+0x19c>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a1b      	ldr	r2, [pc, #108]	; (8005a0c <HAL_TIM_IC_Start+0x1fc>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d004      	beq.n	80059ac <HAL_TIM_IC_Start+0x19c>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a1a      	ldr	r2, [pc, #104]	; (8005a10 <HAL_TIM_IC_Start+0x200>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d115      	bne.n	80059d8 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689a      	ldr	r2, [r3, #8]
 80059b2:	4b18      	ldr	r3, [pc, #96]	; (8005a14 <HAL_TIM_IC_Start+0x204>)
 80059b4:	4013      	ands	r3, r2
 80059b6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	2b06      	cmp	r3, #6
 80059bc:	d015      	beq.n	80059ea <HAL_TIM_IC_Start+0x1da>
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059c4:	d011      	beq.n	80059ea <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f042 0201 	orr.w	r2, r2, #1
 80059d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d6:	e008      	b.n	80059ea <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f042 0201 	orr.w	r2, r2, #1
 80059e6:	601a      	str	r2, [r3, #0]
 80059e8:	e000      	b.n	80059ec <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	40010000 	.word	0x40010000
 80059fc:	40000400 	.word	0x40000400
 8005a00:	40000800 	.word	0x40000800
 8005a04:	40000c00 	.word	0x40000c00
 8005a08:	40010400 	.word	0x40010400
 8005a0c:	40014000 	.word	0x40014000
 8005a10:	40001800 	.word	0x40001800
 8005a14:	00010007 	.word	0x00010007

08005a18 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2200      	movs	r2, #0
 8005a28:	6839      	ldr	r1, [r7, #0]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f001 f896 	bl	8006b5c <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6a1a      	ldr	r2, [r3, #32]
 8005a36:	f241 1311 	movw	r3, #4369	; 0x1111
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10f      	bne.n	8005a60 <HAL_TIM_IC_Stop+0x48>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6a1a      	ldr	r2, [r3, #32]
 8005a46:	f240 4344 	movw	r3, #1092	; 0x444
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d107      	bne.n	8005a60 <HAL_TIM_IC_Stop+0x48>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f022 0201 	bic.w	r2, r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d104      	bne.n	8005a70 <HAL_TIM_IC_Stop+0x58>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a6e:	e023      	b.n	8005ab8 <HAL_TIM_IC_Stop+0xa0>
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	2b04      	cmp	r3, #4
 8005a74:	d104      	bne.n	8005a80 <HAL_TIM_IC_Stop+0x68>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a7e:	e01b      	b.n	8005ab8 <HAL_TIM_IC_Stop+0xa0>
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	2b08      	cmp	r3, #8
 8005a84:	d104      	bne.n	8005a90 <HAL_TIM_IC_Stop+0x78>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a8e:	e013      	b.n	8005ab8 <HAL_TIM_IC_Stop+0xa0>
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	2b0c      	cmp	r3, #12
 8005a94:	d104      	bne.n	8005aa0 <HAL_TIM_IC_Stop+0x88>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a9e:	e00b      	b.n	8005ab8 <HAL_TIM_IC_Stop+0xa0>
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2b10      	cmp	r3, #16
 8005aa4:	d104      	bne.n	8005ab0 <HAL_TIM_IC_Stop+0x98>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005aae:	e003      	b.n	8005ab8 <HAL_TIM_IC_Stop+0xa0>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d104      	bne.n	8005ac8 <HAL_TIM_IC_Stop+0xb0>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ac6:	e013      	b.n	8005af0 <HAL_TIM_IC_Stop+0xd8>
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	d104      	bne.n	8005ad8 <HAL_TIM_IC_Stop+0xc0>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ad6:	e00b      	b.n	8005af0 <HAL_TIM_IC_Stop+0xd8>
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2b08      	cmp	r3, #8
 8005adc:	d104      	bne.n	8005ae8 <HAL_TIM_IC_Stop+0xd0>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ae6:	e003      	b.n	8005af0 <HAL_TIM_IC_Stop+0xd8>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
	...

08005afc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d104      	bne.n	8005b1a <HAL_TIM_IC_Start_IT+0x1e>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	e023      	b.n	8005b62 <HAL_TIM_IC_Start_IT+0x66>
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2b04      	cmp	r3, #4
 8005b1e:	d104      	bne.n	8005b2a <HAL_TIM_IC_Start_IT+0x2e>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	e01b      	b.n	8005b62 <HAL_TIM_IC_Start_IT+0x66>
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b08      	cmp	r3, #8
 8005b2e:	d104      	bne.n	8005b3a <HAL_TIM_IC_Start_IT+0x3e>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	e013      	b.n	8005b62 <HAL_TIM_IC_Start_IT+0x66>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b0c      	cmp	r3, #12
 8005b3e:	d104      	bne.n	8005b4a <HAL_TIM_IC_Start_IT+0x4e>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	e00b      	b.n	8005b62 <HAL_TIM_IC_Start_IT+0x66>
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2b10      	cmp	r3, #16
 8005b4e:	d104      	bne.n	8005b5a <HAL_TIM_IC_Start_IT+0x5e>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	e003      	b.n	8005b62 <HAL_TIM_IC_Start_IT+0x66>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d104      	bne.n	8005b74 <HAL_TIM_IC_Start_IT+0x78>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	e013      	b.n	8005b9c <HAL_TIM_IC_Start_IT+0xa0>
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d104      	bne.n	8005b84 <HAL_TIM_IC_Start_IT+0x88>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	e00b      	b.n	8005b9c <HAL_TIM_IC_Start_IT+0xa0>
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2b08      	cmp	r3, #8
 8005b88:	d104      	bne.n	8005b94 <HAL_TIM_IC_Start_IT+0x98>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	e003      	b.n	8005b9c <HAL_TIM_IC_Start_IT+0xa0>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b9e:	7bbb      	ldrb	r3, [r7, #14]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d102      	bne.n	8005baa <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ba4:	7b7b      	ldrb	r3, [r7, #13]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d001      	beq.n	8005bae <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e0e2      	b.n	8005d74 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d104      	bne.n	8005bbe <HAL_TIM_IC_Start_IT+0xc2>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bbc:	e023      	b.n	8005c06 <HAL_TIM_IC_Start_IT+0x10a>
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2b04      	cmp	r3, #4
 8005bc2:	d104      	bne.n	8005bce <HAL_TIM_IC_Start_IT+0xd2>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bcc:	e01b      	b.n	8005c06 <HAL_TIM_IC_Start_IT+0x10a>
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b08      	cmp	r3, #8
 8005bd2:	d104      	bne.n	8005bde <HAL_TIM_IC_Start_IT+0xe2>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bdc:	e013      	b.n	8005c06 <HAL_TIM_IC_Start_IT+0x10a>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b0c      	cmp	r3, #12
 8005be2:	d104      	bne.n	8005bee <HAL_TIM_IC_Start_IT+0xf2>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2202      	movs	r2, #2
 8005be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005bec:	e00b      	b.n	8005c06 <HAL_TIM_IC_Start_IT+0x10a>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b10      	cmp	r3, #16
 8005bf2:	d104      	bne.n	8005bfe <HAL_TIM_IC_Start_IT+0x102>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bfc:	e003      	b.n	8005c06 <HAL_TIM_IC_Start_IT+0x10a>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2202      	movs	r2, #2
 8005c02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d104      	bne.n	8005c16 <HAL_TIM_IC_Start_IT+0x11a>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c14:	e013      	b.n	8005c3e <HAL_TIM_IC_Start_IT+0x142>
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b04      	cmp	r3, #4
 8005c1a:	d104      	bne.n	8005c26 <HAL_TIM_IC_Start_IT+0x12a>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2202      	movs	r2, #2
 8005c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c24:	e00b      	b.n	8005c3e <HAL_TIM_IC_Start_IT+0x142>
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b08      	cmp	r3, #8
 8005c2a:	d104      	bne.n	8005c36 <HAL_TIM_IC_Start_IT+0x13a>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2202      	movs	r2, #2
 8005c30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c34:	e003      	b.n	8005c3e <HAL_TIM_IC_Start_IT+0x142>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2202      	movs	r2, #2
 8005c3a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b0c      	cmp	r3, #12
 8005c42:	d841      	bhi.n	8005cc8 <HAL_TIM_IC_Start_IT+0x1cc>
 8005c44:	a201      	add	r2, pc, #4	; (adr r2, 8005c4c <HAL_TIM_IC_Start_IT+0x150>)
 8005c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4a:	bf00      	nop
 8005c4c:	08005c81 	.word	0x08005c81
 8005c50:	08005cc9 	.word	0x08005cc9
 8005c54:	08005cc9 	.word	0x08005cc9
 8005c58:	08005cc9 	.word	0x08005cc9
 8005c5c:	08005c93 	.word	0x08005c93
 8005c60:	08005cc9 	.word	0x08005cc9
 8005c64:	08005cc9 	.word	0x08005cc9
 8005c68:	08005cc9 	.word	0x08005cc9
 8005c6c:	08005ca5 	.word	0x08005ca5
 8005c70:	08005cc9 	.word	0x08005cc9
 8005c74:	08005cc9 	.word	0x08005cc9
 8005c78:	08005cc9 	.word	0x08005cc9
 8005c7c:	08005cb7 	.word	0x08005cb7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0202 	orr.w	r2, r2, #2
 8005c8e:	60da      	str	r2, [r3, #12]
      break;
 8005c90:	e01d      	b.n	8005cce <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68da      	ldr	r2, [r3, #12]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f042 0204 	orr.w	r2, r2, #4
 8005ca0:	60da      	str	r2, [r3, #12]
      break;
 8005ca2:	e014      	b.n	8005cce <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68da      	ldr	r2, [r3, #12]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f042 0208 	orr.w	r2, r2, #8
 8005cb2:	60da      	str	r2, [r3, #12]
      break;
 8005cb4:	e00b      	b.n	8005cce <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68da      	ldr	r2, [r3, #12]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f042 0210 	orr.w	r2, r2, #16
 8005cc4:	60da      	str	r2, [r3, #12]
      break;
 8005cc6:	e002      	b.n	8005cce <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	73fb      	strb	r3, [r7, #15]
      break;
 8005ccc:	bf00      	nop
  }

  if (status == HAL_OK)
 8005cce:	7bfb      	ldrb	r3, [r7, #15]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d14e      	bne.n	8005d72 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	6839      	ldr	r1, [r7, #0]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f000 ff3d 	bl	8006b5c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a25      	ldr	r2, [pc, #148]	; (8005d7c <HAL_TIM_IC_Start_IT+0x280>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d022      	beq.n	8005d32 <HAL_TIM_IC_Start_IT+0x236>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cf4:	d01d      	beq.n	8005d32 <HAL_TIM_IC_Start_IT+0x236>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a21      	ldr	r2, [pc, #132]	; (8005d80 <HAL_TIM_IC_Start_IT+0x284>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d018      	beq.n	8005d32 <HAL_TIM_IC_Start_IT+0x236>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a1f      	ldr	r2, [pc, #124]	; (8005d84 <HAL_TIM_IC_Start_IT+0x288>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d013      	beq.n	8005d32 <HAL_TIM_IC_Start_IT+0x236>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a1e      	ldr	r2, [pc, #120]	; (8005d88 <HAL_TIM_IC_Start_IT+0x28c>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d00e      	beq.n	8005d32 <HAL_TIM_IC_Start_IT+0x236>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a1c      	ldr	r2, [pc, #112]	; (8005d8c <HAL_TIM_IC_Start_IT+0x290>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d009      	beq.n	8005d32 <HAL_TIM_IC_Start_IT+0x236>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a1b      	ldr	r2, [pc, #108]	; (8005d90 <HAL_TIM_IC_Start_IT+0x294>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d004      	beq.n	8005d32 <HAL_TIM_IC_Start_IT+0x236>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a19      	ldr	r2, [pc, #100]	; (8005d94 <HAL_TIM_IC_Start_IT+0x298>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d115      	bne.n	8005d5e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	4b17      	ldr	r3, [pc, #92]	; (8005d98 <HAL_TIM_IC_Start_IT+0x29c>)
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	2b06      	cmp	r3, #6
 8005d42:	d015      	beq.n	8005d70 <HAL_TIM_IC_Start_IT+0x274>
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d4a:	d011      	beq.n	8005d70 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f042 0201 	orr.w	r2, r2, #1
 8005d5a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d5c:	e008      	b.n	8005d70 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f042 0201 	orr.w	r2, r2, #1
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	e000      	b.n	8005d72 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d70:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	40010000 	.word	0x40010000
 8005d80:	40000400 	.word	0x40000400
 8005d84:	40000800 	.word	0x40000800
 8005d88:	40000c00 	.word	0x40000c00
 8005d8c:	40010400 	.word	0x40010400
 8005d90:	40014000 	.word	0x40014000
 8005d94:	40001800 	.word	0x40001800
 8005d98:	00010007 	.word	0x00010007

08005d9c <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2b0c      	cmp	r3, #12
 8005dae:	d841      	bhi.n	8005e34 <HAL_TIM_IC_Stop_IT+0x98>
 8005db0:	a201      	add	r2, pc, #4	; (adr r2, 8005db8 <HAL_TIM_IC_Stop_IT+0x1c>)
 8005db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db6:	bf00      	nop
 8005db8:	08005ded 	.word	0x08005ded
 8005dbc:	08005e35 	.word	0x08005e35
 8005dc0:	08005e35 	.word	0x08005e35
 8005dc4:	08005e35 	.word	0x08005e35
 8005dc8:	08005dff 	.word	0x08005dff
 8005dcc:	08005e35 	.word	0x08005e35
 8005dd0:	08005e35 	.word	0x08005e35
 8005dd4:	08005e35 	.word	0x08005e35
 8005dd8:	08005e11 	.word	0x08005e11
 8005ddc:	08005e35 	.word	0x08005e35
 8005de0:	08005e35 	.word	0x08005e35
 8005de4:	08005e35 	.word	0x08005e35
 8005de8:	08005e23 	.word	0x08005e23
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68da      	ldr	r2, [r3, #12]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f022 0202 	bic.w	r2, r2, #2
 8005dfa:	60da      	str	r2, [r3, #12]
      break;
 8005dfc:	e01d      	b.n	8005e3a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68da      	ldr	r2, [r3, #12]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0204 	bic.w	r2, r2, #4
 8005e0c:	60da      	str	r2, [r3, #12]
      break;
 8005e0e:	e014      	b.n	8005e3a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68da      	ldr	r2, [r3, #12]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f022 0208 	bic.w	r2, r2, #8
 8005e1e:	60da      	str	r2, [r3, #12]
      break;
 8005e20:	e00b      	b.n	8005e3a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68da      	ldr	r2, [r3, #12]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 0210 	bic.w	r2, r2, #16
 8005e30:	60da      	str	r2, [r3, #12]
      break;
 8005e32:	e002      	b.n	8005e3a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	73fb      	strb	r3, [r7, #15]
      break;
 8005e38:	bf00      	nop
  }

  if (status == HAL_OK)
 8005e3a:	7bfb      	ldrb	r3, [r7, #15]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d166      	bne.n	8005f0e <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2200      	movs	r2, #0
 8005e46:	6839      	ldr	r1, [r7, #0]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 fe87 	bl	8006b5c <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	6a1a      	ldr	r2, [r3, #32]
 8005e54:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e58:	4013      	ands	r3, r2
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10f      	bne.n	8005e7e <HAL_TIM_IC_Stop_IT+0xe2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6a1a      	ldr	r2, [r3, #32]
 8005e64:	f240 4344 	movw	r3, #1092	; 0x444
 8005e68:	4013      	ands	r3, r2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d107      	bne.n	8005e7e <HAL_TIM_IC_Stop_IT+0xe2>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f022 0201 	bic.w	r2, r2, #1
 8005e7c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d104      	bne.n	8005e8e <HAL_TIM_IC_Stop_IT+0xf2>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e8c:	e023      	b.n	8005ed6 <HAL_TIM_IC_Stop_IT+0x13a>
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	2b04      	cmp	r3, #4
 8005e92:	d104      	bne.n	8005e9e <HAL_TIM_IC_Stop_IT+0x102>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e9c:	e01b      	b.n	8005ed6 <HAL_TIM_IC_Stop_IT+0x13a>
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b08      	cmp	r3, #8
 8005ea2:	d104      	bne.n	8005eae <HAL_TIM_IC_Stop_IT+0x112>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005eac:	e013      	b.n	8005ed6 <HAL_TIM_IC_Stop_IT+0x13a>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b0c      	cmp	r3, #12
 8005eb2:	d104      	bne.n	8005ebe <HAL_TIM_IC_Stop_IT+0x122>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ebc:	e00b      	b.n	8005ed6 <HAL_TIM_IC_Stop_IT+0x13a>
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2b10      	cmp	r3, #16
 8005ec2:	d104      	bne.n	8005ece <HAL_TIM_IC_Stop_IT+0x132>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ecc:	e003      	b.n	8005ed6 <HAL_TIM_IC_Stop_IT+0x13a>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d104      	bne.n	8005ee6 <HAL_TIM_IC_Stop_IT+0x14a>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ee4:	e013      	b.n	8005f0e <HAL_TIM_IC_Stop_IT+0x172>
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b04      	cmp	r3, #4
 8005eea:	d104      	bne.n	8005ef6 <HAL_TIM_IC_Stop_IT+0x15a>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ef4:	e00b      	b.n	8005f0e <HAL_TIM_IC_Stop_IT+0x172>
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	2b08      	cmp	r3, #8
 8005efa:	d104      	bne.n	8005f06 <HAL_TIM_IC_Stop_IT+0x16a>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f04:	e003      	b.n	8005f0e <HAL_TIM_IC_Stop_IT+0x172>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 8005f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3710      	adds	r7, #16
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d122      	bne.n	8005f74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	f003 0302 	and.w	r3, r3, #2
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d11b      	bne.n	8005f74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f06f 0202 	mvn.w	r2, #2
 8005f44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	f003 0303 	and.w	r3, r3, #3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f002 ff9a 	bl	8008e94 <HAL_TIM_IC_CaptureCallback>
 8005f60:	e005      	b.n	8005f6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fae4 	bl	8006530 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 faeb 	bl	8006544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	f003 0304 	and.w	r3, r3, #4
 8005f7e:	2b04      	cmp	r3, #4
 8005f80:	d122      	bne.n	8005fc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	f003 0304 	and.w	r3, r3, #4
 8005f8c:	2b04      	cmp	r3, #4
 8005f8e:	d11b      	bne.n	8005fc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f06f 0204 	mvn.w	r2, #4
 8005f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2202      	movs	r2, #2
 8005f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d003      	beq.n	8005fb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f002 ff70 	bl	8008e94 <HAL_TIM_IC_CaptureCallback>
 8005fb4:	e005      	b.n	8005fc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 faba 	bl	8006530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 fac1 	bl	8006544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	f003 0308 	and.w	r3, r3, #8
 8005fd2:	2b08      	cmp	r3, #8
 8005fd4:	d122      	bne.n	800601c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f003 0308 	and.w	r3, r3, #8
 8005fe0:	2b08      	cmp	r3, #8
 8005fe2:	d11b      	bne.n	800601c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f06f 0208 	mvn.w	r2, #8
 8005fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2204      	movs	r2, #4
 8005ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	f003 0303 	and.w	r3, r3, #3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f002 ff46 	bl	8008e94 <HAL_TIM_IC_CaptureCallback>
 8006008:	e005      	b.n	8006016 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fa90 	bl	8006530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 fa97 	bl	8006544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	f003 0310 	and.w	r3, r3, #16
 8006026:	2b10      	cmp	r3, #16
 8006028:	d122      	bne.n	8006070 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f003 0310 	and.w	r3, r3, #16
 8006034:	2b10      	cmp	r3, #16
 8006036:	d11b      	bne.n	8006070 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f06f 0210 	mvn.w	r2, #16
 8006040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2208      	movs	r2, #8
 8006046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	69db      	ldr	r3, [r3, #28]
 800604e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006052:	2b00      	cmp	r3, #0
 8006054:	d003      	beq.n	800605e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f002 ff1c 	bl	8008e94 <HAL_TIM_IC_CaptureCallback>
 800605c:	e005      	b.n	800606a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 fa66 	bl	8006530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 fa6d 	bl	8006544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	f003 0301 	and.w	r3, r3, #1
 800607a:	2b01      	cmp	r3, #1
 800607c:	d10e      	bne.n	800609c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	f003 0301 	and.w	r3, r3, #1
 8006088:	2b01      	cmp	r3, #1
 800608a:	d107      	bne.n	800609c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f06f 0201 	mvn.w	r2, #1
 8006094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7fa ff84 	bl	8000fa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a6:	2b80      	cmp	r3, #128	; 0x80
 80060a8:	d10e      	bne.n	80060c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b4:	2b80      	cmp	r3, #128	; 0x80
 80060b6:	d107      	bne.n	80060c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 fe08 	bl	8006cd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060d6:	d10e      	bne.n	80060f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e2:	2b80      	cmp	r3, #128	; 0x80
 80060e4:	d107      	bne.n	80060f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80060ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fdfb 	bl	8006cec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006100:	2b40      	cmp	r3, #64	; 0x40
 8006102:	d10e      	bne.n	8006122 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610e:	2b40      	cmp	r3, #64	; 0x40
 8006110:	d107      	bne.n	8006122 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800611a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 fa1b 	bl	8006558 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	f003 0320 	and.w	r3, r3, #32
 800612c:	2b20      	cmp	r3, #32
 800612e:	d10e      	bne.n	800614e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	f003 0320 	and.w	r3, r3, #32
 800613a:	2b20      	cmp	r3, #32
 800613c:	d107      	bne.n	800614e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f06f 0220 	mvn.w	r2, #32
 8006146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 fdbb 	bl	8006cc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800614e:	bf00      	nop
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b086      	sub	sp, #24
 800615a:	af00      	add	r7, sp, #0
 800615c:	60f8      	str	r0, [r7, #12]
 800615e:	60b9      	str	r1, [r7, #8]
 8006160:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006162:	2300      	movs	r3, #0
 8006164:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800616c:	2b01      	cmp	r3, #1
 800616e:	d101      	bne.n	8006174 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006170:	2302      	movs	r3, #2
 8006172:	e088      	b.n	8006286 <HAL_TIM_IC_ConfigChannel+0x130>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d11b      	bne.n	80061ba <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6818      	ldr	r0, [r3, #0]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	6819      	ldr	r1, [r3, #0]
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	f000 fb1f 	bl	80067d4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	699a      	ldr	r2, [r3, #24]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 020c 	bic.w	r2, r2, #12
 80061a4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	6999      	ldr	r1, [r3, #24]
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	689a      	ldr	r2, [r3, #8]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	430a      	orrs	r2, r1
 80061b6:	619a      	str	r2, [r3, #24]
 80061b8:	e060      	b.n	800627c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b04      	cmp	r3, #4
 80061be:	d11c      	bne.n	80061fa <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6818      	ldr	r0, [r3, #0]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	6819      	ldr	r1, [r3, #0]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	f000 fba3 	bl	800691a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	699a      	ldr	r2, [r3, #24]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80061e2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6999      	ldr	r1, [r3, #24]
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	021a      	lsls	r2, r3, #8
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	430a      	orrs	r2, r1
 80061f6:	619a      	str	r2, [r3, #24]
 80061f8:	e040      	b.n	800627c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2b08      	cmp	r3, #8
 80061fe:	d11b      	bne.n	8006238 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6818      	ldr	r0, [r3, #0]
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	6819      	ldr	r1, [r3, #0]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	f000 fbf0 	bl	80069f4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	69da      	ldr	r2, [r3, #28]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f022 020c 	bic.w	r2, r2, #12
 8006222:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	69d9      	ldr	r1, [r3, #28]
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	689a      	ldr	r2, [r3, #8]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	430a      	orrs	r2, r1
 8006234:	61da      	str	r2, [r3, #28]
 8006236:	e021      	b.n	800627c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2b0c      	cmp	r3, #12
 800623c:	d11c      	bne.n	8006278 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6818      	ldr	r0, [r3, #0]
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	6819      	ldr	r1, [r3, #0]
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	685a      	ldr	r2, [r3, #4]
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	f000 fc0d 	bl	8006a6c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	69da      	ldr	r2, [r3, #28]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006260:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69d9      	ldr	r1, [r3, #28]
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	021a      	lsls	r2, r3, #8
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	61da      	str	r2, [r3, #28]
 8006276:	e001      	b.n	800627c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006284:	7dfb      	ldrb	r3, [r7, #23]
}
 8006286:	4618      	mov	r0, r3
 8006288:	3718      	adds	r7, #24
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
	...

08006290 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d101      	bne.n	80062ac <HAL_TIM_ConfigClockSource+0x1c>
 80062a8:	2302      	movs	r3, #2
 80062aa:	e0b4      	b.n	8006416 <HAL_TIM_ConfigClockSource+0x186>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2202      	movs	r2, #2
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	4b56      	ldr	r3, [pc, #344]	; (8006420 <HAL_TIM_ConfigClockSource+0x190>)
 80062c8:	4013      	ands	r3, r2
 80062ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062e4:	d03e      	beq.n	8006364 <HAL_TIM_ConfigClockSource+0xd4>
 80062e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ea:	f200 8087 	bhi.w	80063fc <HAL_TIM_ConfigClockSource+0x16c>
 80062ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f2:	f000 8086 	beq.w	8006402 <HAL_TIM_ConfigClockSource+0x172>
 80062f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062fa:	d87f      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x16c>
 80062fc:	2b70      	cmp	r3, #112	; 0x70
 80062fe:	d01a      	beq.n	8006336 <HAL_TIM_ConfigClockSource+0xa6>
 8006300:	2b70      	cmp	r3, #112	; 0x70
 8006302:	d87b      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x16c>
 8006304:	2b60      	cmp	r3, #96	; 0x60
 8006306:	d050      	beq.n	80063aa <HAL_TIM_ConfigClockSource+0x11a>
 8006308:	2b60      	cmp	r3, #96	; 0x60
 800630a:	d877      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x16c>
 800630c:	2b50      	cmp	r3, #80	; 0x50
 800630e:	d03c      	beq.n	800638a <HAL_TIM_ConfigClockSource+0xfa>
 8006310:	2b50      	cmp	r3, #80	; 0x50
 8006312:	d873      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x16c>
 8006314:	2b40      	cmp	r3, #64	; 0x40
 8006316:	d058      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0x13a>
 8006318:	2b40      	cmp	r3, #64	; 0x40
 800631a:	d86f      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x16c>
 800631c:	2b30      	cmp	r3, #48	; 0x30
 800631e:	d064      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0x15a>
 8006320:	2b30      	cmp	r3, #48	; 0x30
 8006322:	d86b      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x16c>
 8006324:	2b20      	cmp	r3, #32
 8006326:	d060      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0x15a>
 8006328:	2b20      	cmp	r3, #32
 800632a:	d867      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x16c>
 800632c:	2b00      	cmp	r3, #0
 800632e:	d05c      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0x15a>
 8006330:	2b10      	cmp	r3, #16
 8006332:	d05a      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0x15a>
 8006334:	e062      	b.n	80063fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6818      	ldr	r0, [r3, #0]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	6899      	ldr	r1, [r3, #8]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	f000 fbe9 	bl	8006b1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006358:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	609a      	str	r2, [r3, #8]
      break;
 8006362:	e04f      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6818      	ldr	r0, [r3, #0]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	6899      	ldr	r1, [r3, #8]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	685a      	ldr	r2, [r3, #4]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f000 fbd2 	bl	8006b1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689a      	ldr	r2, [r3, #8]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006386:	609a      	str	r2, [r3, #8]
      break;
 8006388:	e03c      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6818      	ldr	r0, [r3, #0]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	6859      	ldr	r1, [r3, #4]
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	461a      	mov	r2, r3
 8006398:	f000 fa90 	bl	80068bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2150      	movs	r1, #80	; 0x50
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 fb9f 	bl	8006ae6 <TIM_ITRx_SetConfig>
      break;
 80063a8:	e02c      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6818      	ldr	r0, [r3, #0]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	6859      	ldr	r1, [r3, #4]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	461a      	mov	r2, r3
 80063b8:	f000 faec 	bl	8006994 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2160      	movs	r1, #96	; 0x60
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 fb8f 	bl	8006ae6 <TIM_ITRx_SetConfig>
      break;
 80063c8:	e01c      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6818      	ldr	r0, [r3, #0]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	6859      	ldr	r1, [r3, #4]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	461a      	mov	r2, r3
 80063d8:	f000 fa70 	bl	80068bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2140      	movs	r1, #64	; 0x40
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 fb7f 	bl	8006ae6 <TIM_ITRx_SetConfig>
      break;
 80063e8:	e00c      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4619      	mov	r1, r3
 80063f4:	4610      	mov	r0, r2
 80063f6:	f000 fb76 	bl	8006ae6 <TIM_ITRx_SetConfig>
      break;
 80063fa:	e003      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006400:	e000      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006402:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006414:	7bfb      	ldrb	r3, [r7, #15]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	fffeff88 	.word	0xfffeff88

08006424 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006434:	2b01      	cmp	r3, #1
 8006436:	d101      	bne.n	800643c <HAL_TIM_SlaveConfigSynchro+0x18>
 8006438:	2302      	movs	r3, #2
 800643a:	e031      	b.n	80064a0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800644c:	6839      	ldr	r1, [r7, #0]
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f92c 	bl	80066ac <TIM_SlaveTimer_SetConfig>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d009      	beq.n	800646e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e018      	b.n	80064a0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68da      	ldr	r2, [r3, #12]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800647c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68da      	ldr	r2, [r3, #12]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800648c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3708      	adds	r7, #8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80064b2:	2300      	movs	r3, #0
 80064b4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b0c      	cmp	r3, #12
 80064ba:	d831      	bhi.n	8006520 <HAL_TIM_ReadCapturedValue+0x78>
 80064bc:	a201      	add	r2, pc, #4	; (adr r2, 80064c4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80064be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c2:	bf00      	nop
 80064c4:	080064f9 	.word	0x080064f9
 80064c8:	08006521 	.word	0x08006521
 80064cc:	08006521 	.word	0x08006521
 80064d0:	08006521 	.word	0x08006521
 80064d4:	08006503 	.word	0x08006503
 80064d8:	08006521 	.word	0x08006521
 80064dc:	08006521 	.word	0x08006521
 80064e0:	08006521 	.word	0x08006521
 80064e4:	0800650d 	.word	0x0800650d
 80064e8:	08006521 	.word	0x08006521
 80064ec:	08006521 	.word	0x08006521
 80064f0:	08006521 	.word	0x08006521
 80064f4:	08006517 	.word	0x08006517
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064fe:	60fb      	str	r3, [r7, #12]

      break;
 8006500:	e00f      	b.n	8006522 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006508:	60fb      	str	r3, [r7, #12]

      break;
 800650a:	e00a      	b.n	8006522 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006512:	60fb      	str	r3, [r7, #12]

      break;
 8006514:	e005      	b.n	8006522 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651c:	60fb      	str	r3, [r7, #12]

      break;
 800651e:	e000      	b.n	8006522 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006520:	bf00      	nop
  }

  return tmpreg;
 8006522:	68fb      	ldr	r3, [r7, #12]
}
 8006524:	4618      	mov	r0, r3
 8006526:	3714      	adds	r7, #20
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a40      	ldr	r2, [pc, #256]	; (8006680 <TIM_Base_SetConfig+0x114>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d013      	beq.n	80065ac <TIM_Base_SetConfig+0x40>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800658a:	d00f      	beq.n	80065ac <TIM_Base_SetConfig+0x40>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a3d      	ldr	r2, [pc, #244]	; (8006684 <TIM_Base_SetConfig+0x118>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d00b      	beq.n	80065ac <TIM_Base_SetConfig+0x40>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a3c      	ldr	r2, [pc, #240]	; (8006688 <TIM_Base_SetConfig+0x11c>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d007      	beq.n	80065ac <TIM_Base_SetConfig+0x40>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a3b      	ldr	r2, [pc, #236]	; (800668c <TIM_Base_SetConfig+0x120>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d003      	beq.n	80065ac <TIM_Base_SetConfig+0x40>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a3a      	ldr	r2, [pc, #232]	; (8006690 <TIM_Base_SetConfig+0x124>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d108      	bne.n	80065be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a2f      	ldr	r2, [pc, #188]	; (8006680 <TIM_Base_SetConfig+0x114>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d02b      	beq.n	800661e <TIM_Base_SetConfig+0xb2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065cc:	d027      	beq.n	800661e <TIM_Base_SetConfig+0xb2>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a2c      	ldr	r2, [pc, #176]	; (8006684 <TIM_Base_SetConfig+0x118>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d023      	beq.n	800661e <TIM_Base_SetConfig+0xb2>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a2b      	ldr	r2, [pc, #172]	; (8006688 <TIM_Base_SetConfig+0x11c>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d01f      	beq.n	800661e <TIM_Base_SetConfig+0xb2>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a2a      	ldr	r2, [pc, #168]	; (800668c <TIM_Base_SetConfig+0x120>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d01b      	beq.n	800661e <TIM_Base_SetConfig+0xb2>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a29      	ldr	r2, [pc, #164]	; (8006690 <TIM_Base_SetConfig+0x124>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d017      	beq.n	800661e <TIM_Base_SetConfig+0xb2>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a28      	ldr	r2, [pc, #160]	; (8006694 <TIM_Base_SetConfig+0x128>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d013      	beq.n	800661e <TIM_Base_SetConfig+0xb2>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a27      	ldr	r2, [pc, #156]	; (8006698 <TIM_Base_SetConfig+0x12c>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d00f      	beq.n	800661e <TIM_Base_SetConfig+0xb2>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a26      	ldr	r2, [pc, #152]	; (800669c <TIM_Base_SetConfig+0x130>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d00b      	beq.n	800661e <TIM_Base_SetConfig+0xb2>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a25      	ldr	r2, [pc, #148]	; (80066a0 <TIM_Base_SetConfig+0x134>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d007      	beq.n	800661e <TIM_Base_SetConfig+0xb2>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a24      	ldr	r2, [pc, #144]	; (80066a4 <TIM_Base_SetConfig+0x138>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d003      	beq.n	800661e <TIM_Base_SetConfig+0xb2>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a23      	ldr	r2, [pc, #140]	; (80066a8 <TIM_Base_SetConfig+0x13c>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d108      	bne.n	8006630 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006624:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	4313      	orrs	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	4313      	orrs	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	689a      	ldr	r2, [r3, #8]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a0a      	ldr	r2, [pc, #40]	; (8006680 <TIM_Base_SetConfig+0x114>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d003      	beq.n	8006664 <TIM_Base_SetConfig+0xf8>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a0c      	ldr	r2, [pc, #48]	; (8006690 <TIM_Base_SetConfig+0x124>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d103      	bne.n	800666c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	691a      	ldr	r2, [r3, #16]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	615a      	str	r2, [r3, #20]
}
 8006672:	bf00      	nop
 8006674:	3714      	adds	r7, #20
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	40010000 	.word	0x40010000
 8006684:	40000400 	.word	0x40000400
 8006688:	40000800 	.word	0x40000800
 800668c:	40000c00 	.word	0x40000c00
 8006690:	40010400 	.word	0x40010400
 8006694:	40014000 	.word	0x40014000
 8006698:	40014400 	.word	0x40014400
 800669c:	40014800 	.word	0x40014800
 80066a0:	40001800 	.word	0x40001800
 80066a4:	40001c00 	.word	0x40001c00
 80066a8:	40002000 	.word	0x40002000

080066ac <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b086      	sub	sp, #24
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066b6:	2300      	movs	r3, #0
 80066b8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066c8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	4b3e      	ldr	r3, [pc, #248]	; (80067d0 <TIM_SlaveTimer_SetConfig+0x124>)
 80066d8:	4013      	ands	r3, r2
 80066da:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	2b70      	cmp	r3, #112	; 0x70
 80066f4:	d01a      	beq.n	800672c <TIM_SlaveTimer_SetConfig+0x80>
 80066f6:	2b70      	cmp	r3, #112	; 0x70
 80066f8:	d860      	bhi.n	80067bc <TIM_SlaveTimer_SetConfig+0x110>
 80066fa:	2b60      	cmp	r3, #96	; 0x60
 80066fc:	d054      	beq.n	80067a8 <TIM_SlaveTimer_SetConfig+0xfc>
 80066fe:	2b60      	cmp	r3, #96	; 0x60
 8006700:	d85c      	bhi.n	80067bc <TIM_SlaveTimer_SetConfig+0x110>
 8006702:	2b50      	cmp	r3, #80	; 0x50
 8006704:	d046      	beq.n	8006794 <TIM_SlaveTimer_SetConfig+0xe8>
 8006706:	2b50      	cmp	r3, #80	; 0x50
 8006708:	d858      	bhi.n	80067bc <TIM_SlaveTimer_SetConfig+0x110>
 800670a:	2b40      	cmp	r3, #64	; 0x40
 800670c:	d019      	beq.n	8006742 <TIM_SlaveTimer_SetConfig+0x96>
 800670e:	2b40      	cmp	r3, #64	; 0x40
 8006710:	d854      	bhi.n	80067bc <TIM_SlaveTimer_SetConfig+0x110>
 8006712:	2b30      	cmp	r3, #48	; 0x30
 8006714:	d055      	beq.n	80067c2 <TIM_SlaveTimer_SetConfig+0x116>
 8006716:	2b30      	cmp	r3, #48	; 0x30
 8006718:	d850      	bhi.n	80067bc <TIM_SlaveTimer_SetConfig+0x110>
 800671a:	2b20      	cmp	r3, #32
 800671c:	d051      	beq.n	80067c2 <TIM_SlaveTimer_SetConfig+0x116>
 800671e:	2b20      	cmp	r3, #32
 8006720:	d84c      	bhi.n	80067bc <TIM_SlaveTimer_SetConfig+0x110>
 8006722:	2b00      	cmp	r3, #0
 8006724:	d04d      	beq.n	80067c2 <TIM_SlaveTimer_SetConfig+0x116>
 8006726:	2b10      	cmp	r3, #16
 8006728:	d04b      	beq.n	80067c2 <TIM_SlaveTimer_SetConfig+0x116>
 800672a:	e047      	b.n	80067bc <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6818      	ldr	r0, [r3, #0]
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	68d9      	ldr	r1, [r3, #12]
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	689a      	ldr	r2, [r3, #8]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	f000 f9ee 	bl	8006b1c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006740:	e040      	b.n	80067c4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b05      	cmp	r3, #5
 8006748:	d101      	bne.n	800674e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e03b      	b.n	80067c6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	6a1a      	ldr	r2, [r3, #32]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f022 0201 	bic.w	r2, r2, #1
 8006764:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006774:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	011b      	lsls	r3, r3, #4
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	4313      	orrs	r3, r2
 8006780:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	621a      	str	r2, [r3, #32]
      break;
 8006792:	e017      	b.n	80067c4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6818      	ldr	r0, [r3, #0]
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	6899      	ldr	r1, [r3, #8]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	461a      	mov	r2, r3
 80067a2:	f000 f88b 	bl	80068bc <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80067a6:	e00d      	b.n	80067c4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6818      	ldr	r0, [r3, #0]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	6899      	ldr	r1, [r3, #8]
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	461a      	mov	r2, r3
 80067b6:	f000 f8ed 	bl	8006994 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80067ba:	e003      	b.n	80067c4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	75fb      	strb	r3, [r7, #23]
      break;
 80067c0:	e000      	b.n	80067c4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80067c2:	bf00      	nop
  }

  return status;
 80067c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3718      	adds	r7, #24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	fffefff8 	.word	0xfffefff8

080067d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]
 80067e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	f023 0201 	bic.w	r2, r3, #1
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6a1b      	ldr	r3, [r3, #32]
 80067f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	4a28      	ldr	r2, [pc, #160]	; (80068a0 <TIM_TI1_SetConfig+0xcc>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d01b      	beq.n	800683a <TIM_TI1_SetConfig+0x66>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006808:	d017      	beq.n	800683a <TIM_TI1_SetConfig+0x66>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	4a25      	ldr	r2, [pc, #148]	; (80068a4 <TIM_TI1_SetConfig+0xd0>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d013      	beq.n	800683a <TIM_TI1_SetConfig+0x66>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	4a24      	ldr	r2, [pc, #144]	; (80068a8 <TIM_TI1_SetConfig+0xd4>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d00f      	beq.n	800683a <TIM_TI1_SetConfig+0x66>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	4a23      	ldr	r2, [pc, #140]	; (80068ac <TIM_TI1_SetConfig+0xd8>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d00b      	beq.n	800683a <TIM_TI1_SetConfig+0x66>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	4a22      	ldr	r2, [pc, #136]	; (80068b0 <TIM_TI1_SetConfig+0xdc>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d007      	beq.n	800683a <TIM_TI1_SetConfig+0x66>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	4a21      	ldr	r2, [pc, #132]	; (80068b4 <TIM_TI1_SetConfig+0xe0>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d003      	beq.n	800683a <TIM_TI1_SetConfig+0x66>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	4a20      	ldr	r2, [pc, #128]	; (80068b8 <TIM_TI1_SetConfig+0xe4>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d101      	bne.n	800683e <TIM_TI1_SetConfig+0x6a>
 800683a:	2301      	movs	r3, #1
 800683c:	e000      	b.n	8006840 <TIM_TI1_SetConfig+0x6c>
 800683e:	2300      	movs	r3, #0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d008      	beq.n	8006856 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	f023 0303 	bic.w	r3, r3, #3
 800684a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4313      	orrs	r3, r2
 8006852:	617b      	str	r3, [r7, #20]
 8006854:	e003      	b.n	800685e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f043 0301 	orr.w	r3, r3, #1
 800685c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006864:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	011b      	lsls	r3, r3, #4
 800686a:	b2db      	uxtb	r3, r3
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	4313      	orrs	r3, r2
 8006870:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	f023 030a 	bic.w	r3, r3, #10
 8006878:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	f003 030a 	and.w	r3, r3, #10
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	4313      	orrs	r3, r2
 8006884:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	621a      	str	r2, [r3, #32]
}
 8006892:	bf00      	nop
 8006894:	371c      	adds	r7, #28
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	40010000 	.word	0x40010000
 80068a4:	40000400 	.word	0x40000400
 80068a8:	40000800 	.word	0x40000800
 80068ac:	40000c00 	.word	0x40000c00
 80068b0:	40010400 	.word	0x40010400
 80068b4:	40014000 	.word	0x40014000
 80068b8:	40001800 	.word	0x40001800

080068bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6a1b      	ldr	r3, [r3, #32]
 80068cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	f023 0201 	bic.w	r2, r3, #1
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	011b      	lsls	r3, r3, #4
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f023 030a 	bic.w	r3, r3, #10
 80068f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	4313      	orrs	r3, r2
 8006900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	697a      	ldr	r2, [r7, #20]
 800690c:	621a      	str	r2, [r3, #32]
}
 800690e:	bf00      	nop
 8006910:	371c      	adds	r7, #28
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr

0800691a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800691a:	b480      	push	{r7}
 800691c:	b087      	sub	sp, #28
 800691e:	af00      	add	r7, sp, #0
 8006920:	60f8      	str	r0, [r7, #12]
 8006922:	60b9      	str	r1, [r7, #8]
 8006924:	607a      	str	r2, [r7, #4]
 8006926:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6a1b      	ldr	r3, [r3, #32]
 800692c:	f023 0210 	bic.w	r2, r3, #16
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006946:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	021b      	lsls	r3, r3, #8
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	4313      	orrs	r3, r2
 8006950:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006958:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	031b      	lsls	r3, r3, #12
 800695e:	b29b      	uxth	r3, r3
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	4313      	orrs	r3, r2
 8006964:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800696c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	011b      	lsls	r3, r3, #4
 8006972:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	4313      	orrs	r3, r2
 800697a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	621a      	str	r2, [r3, #32]
}
 8006988:	bf00      	nop
 800698a:	371c      	adds	r7, #28
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006994:	b480      	push	{r7}
 8006996:	b087      	sub	sp, #28
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6a1b      	ldr	r3, [r3, #32]
 80069a4:	f023 0210 	bic.w	r2, r3, #16
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	031b      	lsls	r3, r3, #12
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	011b      	lsls	r3, r3, #4
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	4313      	orrs	r3, r2
 80069da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	697a      	ldr	r2, [r7, #20]
 80069e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	621a      	str	r2, [r3, #32]
}
 80069e8:	bf00      	nop
 80069ea:	371c      	adds	r7, #28
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b087      	sub	sp, #28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
 8006a00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	69db      	ldr	r3, [r3, #28]
 8006a12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6a1b      	ldr	r3, [r3, #32]
 8006a18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f023 0303 	bic.w	r3, r3, #3
 8006a20:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a30:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	011b      	lsls	r3, r3, #4
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	697a      	ldr	r2, [r7, #20]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006a44:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	021b      	lsls	r3, r3, #8
 8006a4a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	621a      	str	r2, [r3, #32]
}
 8006a60:	bf00      	nop
 8006a62:	371c      	adds	r7, #28
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b087      	sub	sp, #28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
 8006a78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	69db      	ldr	r3, [r3, #28]
 8006a8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	021b      	lsls	r3, r3, #8
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006aaa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	031b      	lsls	r3, r3, #12
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	697a      	ldr	r2, [r7, #20]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006abe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	031b      	lsls	r3, r3, #12
 8006ac4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006ac8:	693a      	ldr	r2, [r7, #16]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	621a      	str	r2, [r3, #32]
}
 8006ada:	bf00      	nop
 8006adc:	371c      	adds	r7, #28
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b085      	sub	sp, #20
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
 8006aee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006afc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006afe:	683a      	ldr	r2, [r7, #0]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	f043 0307 	orr.w	r3, r3, #7
 8006b08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	609a      	str	r2, [r3, #8]
}
 8006b10:	bf00      	nop
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b087      	sub	sp, #28
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
 8006b28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	021a      	lsls	r2, r3, #8
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	431a      	orrs	r2, r3
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	697a      	ldr	r2, [r7, #20]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	697a      	ldr	r2, [r7, #20]
 8006b4e:	609a      	str	r2, [r3, #8]
}
 8006b50:	bf00      	nop
 8006b52:	371c      	adds	r7, #28
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b087      	sub	sp, #28
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f003 031f 	and.w	r3, r3, #31
 8006b6e:	2201      	movs	r2, #1
 8006b70:	fa02 f303 	lsl.w	r3, r2, r3
 8006b74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6a1a      	ldr	r2, [r3, #32]
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	43db      	mvns	r3, r3
 8006b7e:	401a      	ands	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6a1a      	ldr	r2, [r3, #32]
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	f003 031f 	and.w	r3, r3, #31
 8006b8e:	6879      	ldr	r1, [r7, #4]
 8006b90:	fa01 f303 	lsl.w	r3, r1, r3
 8006b94:	431a      	orrs	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	621a      	str	r2, [r3, #32]
}
 8006b9a:	bf00      	nop
 8006b9c:	371c      	adds	r7, #28
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
	...

08006ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d101      	bne.n	8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	e06d      	b.n	8006c9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a30      	ldr	r2, [pc, #192]	; (8006ca8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d004      	beq.n	8006bf4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a2f      	ldr	r2, [pc, #188]	; (8006cac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d108      	bne.n	8006c06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006bfa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a20      	ldr	r2, [pc, #128]	; (8006ca8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d022      	beq.n	8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c32:	d01d      	beq.n	8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a1d      	ldr	r2, [pc, #116]	; (8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d018      	beq.n	8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a1c      	ldr	r2, [pc, #112]	; (8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d013      	beq.n	8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a1a      	ldr	r2, [pc, #104]	; (8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d00e      	beq.n	8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a15      	ldr	r2, [pc, #84]	; (8006cac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d009      	beq.n	8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a16      	ldr	r2, [pc, #88]	; (8006cbc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d004      	beq.n	8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a15      	ldr	r2, [pc, #84]	; (8006cc0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d10c      	bne.n	8006c8a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3714      	adds	r7, #20
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr
 8006ca8:	40010000 	.word	0x40010000
 8006cac:	40010400 	.word	0x40010400
 8006cb0:	40000400 	.word	0x40000400
 8006cb4:	40000800 	.word	0x40000800
 8006cb8:	40000c00 	.word	0x40000c00
 8006cbc:	40014000 	.word	0x40014000
 8006cc0:	40001800 	.word	0x40001800

08006cc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e040      	b.n	8006d94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d106      	bne.n	8006d28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7fa fc1e 	bl	8001564 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2224      	movs	r2, #36	; 0x24
 8006d2c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 0201 	bic.w	r2, r2, #1
 8006d3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f82c 	bl	8006d9c <UART_SetConfig>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d101      	bne.n	8006d4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e022      	b.n	8006d94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d002      	beq.n	8006d5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fa84 	bl	8007264 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685a      	ldr	r2, [r3, #4]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689a      	ldr	r2, [r3, #8]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f042 0201 	orr.w	r2, r2, #1
 8006d8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fb0b 	bl	80073a8 <UART_CheckIdleState>
 8006d92:	4603      	mov	r3, r0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3708      	adds	r7, #8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b088      	sub	sp, #32
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006da4:	2300      	movs	r3, #0
 8006da6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689a      	ldr	r2, [r3, #8]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	431a      	orrs	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	431a      	orrs	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	69db      	ldr	r3, [r3, #28]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	4ba6      	ldr	r3, [pc, #664]	; (8007060 <UART_SetConfig+0x2c4>)
 8006dc8:	4013      	ands	r3, r2
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	6812      	ldr	r2, [r2, #0]
 8006dce:	6979      	ldr	r1, [r7, #20]
 8006dd0:	430b      	orrs	r3, r1
 8006dd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	68da      	ldr	r2, [r3, #12]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	430a      	orrs	r2, r1
 8006de8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	697a      	ldr	r2, [r7, #20]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	430a      	orrs	r2, r1
 8006e0c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a94      	ldr	r2, [pc, #592]	; (8007064 <UART_SetConfig+0x2c8>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d120      	bne.n	8006e5a <UART_SetConfig+0xbe>
 8006e18:	4b93      	ldr	r3, [pc, #588]	; (8007068 <UART_SetConfig+0x2cc>)
 8006e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e1e:	f003 0303 	and.w	r3, r3, #3
 8006e22:	2b03      	cmp	r3, #3
 8006e24:	d816      	bhi.n	8006e54 <UART_SetConfig+0xb8>
 8006e26:	a201      	add	r2, pc, #4	; (adr r2, 8006e2c <UART_SetConfig+0x90>)
 8006e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2c:	08006e3d 	.word	0x08006e3d
 8006e30:	08006e49 	.word	0x08006e49
 8006e34:	08006e43 	.word	0x08006e43
 8006e38:	08006e4f 	.word	0x08006e4f
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	77fb      	strb	r3, [r7, #31]
 8006e40:	e150      	b.n	80070e4 <UART_SetConfig+0x348>
 8006e42:	2302      	movs	r3, #2
 8006e44:	77fb      	strb	r3, [r7, #31]
 8006e46:	e14d      	b.n	80070e4 <UART_SetConfig+0x348>
 8006e48:	2304      	movs	r3, #4
 8006e4a:	77fb      	strb	r3, [r7, #31]
 8006e4c:	e14a      	b.n	80070e4 <UART_SetConfig+0x348>
 8006e4e:	2308      	movs	r3, #8
 8006e50:	77fb      	strb	r3, [r7, #31]
 8006e52:	e147      	b.n	80070e4 <UART_SetConfig+0x348>
 8006e54:	2310      	movs	r3, #16
 8006e56:	77fb      	strb	r3, [r7, #31]
 8006e58:	e144      	b.n	80070e4 <UART_SetConfig+0x348>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a83      	ldr	r2, [pc, #524]	; (800706c <UART_SetConfig+0x2d0>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d132      	bne.n	8006eca <UART_SetConfig+0x12e>
 8006e64:	4b80      	ldr	r3, [pc, #512]	; (8007068 <UART_SetConfig+0x2cc>)
 8006e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e6a:	f003 030c 	and.w	r3, r3, #12
 8006e6e:	2b0c      	cmp	r3, #12
 8006e70:	d828      	bhi.n	8006ec4 <UART_SetConfig+0x128>
 8006e72:	a201      	add	r2, pc, #4	; (adr r2, 8006e78 <UART_SetConfig+0xdc>)
 8006e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e78:	08006ead 	.word	0x08006ead
 8006e7c:	08006ec5 	.word	0x08006ec5
 8006e80:	08006ec5 	.word	0x08006ec5
 8006e84:	08006ec5 	.word	0x08006ec5
 8006e88:	08006eb9 	.word	0x08006eb9
 8006e8c:	08006ec5 	.word	0x08006ec5
 8006e90:	08006ec5 	.word	0x08006ec5
 8006e94:	08006ec5 	.word	0x08006ec5
 8006e98:	08006eb3 	.word	0x08006eb3
 8006e9c:	08006ec5 	.word	0x08006ec5
 8006ea0:	08006ec5 	.word	0x08006ec5
 8006ea4:	08006ec5 	.word	0x08006ec5
 8006ea8:	08006ebf 	.word	0x08006ebf
 8006eac:	2300      	movs	r3, #0
 8006eae:	77fb      	strb	r3, [r7, #31]
 8006eb0:	e118      	b.n	80070e4 <UART_SetConfig+0x348>
 8006eb2:	2302      	movs	r3, #2
 8006eb4:	77fb      	strb	r3, [r7, #31]
 8006eb6:	e115      	b.n	80070e4 <UART_SetConfig+0x348>
 8006eb8:	2304      	movs	r3, #4
 8006eba:	77fb      	strb	r3, [r7, #31]
 8006ebc:	e112      	b.n	80070e4 <UART_SetConfig+0x348>
 8006ebe:	2308      	movs	r3, #8
 8006ec0:	77fb      	strb	r3, [r7, #31]
 8006ec2:	e10f      	b.n	80070e4 <UART_SetConfig+0x348>
 8006ec4:	2310      	movs	r3, #16
 8006ec6:	77fb      	strb	r3, [r7, #31]
 8006ec8:	e10c      	b.n	80070e4 <UART_SetConfig+0x348>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a68      	ldr	r2, [pc, #416]	; (8007070 <UART_SetConfig+0x2d4>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d120      	bne.n	8006f16 <UART_SetConfig+0x17a>
 8006ed4:	4b64      	ldr	r3, [pc, #400]	; (8007068 <UART_SetConfig+0x2cc>)
 8006ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eda:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ede:	2b30      	cmp	r3, #48	; 0x30
 8006ee0:	d013      	beq.n	8006f0a <UART_SetConfig+0x16e>
 8006ee2:	2b30      	cmp	r3, #48	; 0x30
 8006ee4:	d814      	bhi.n	8006f10 <UART_SetConfig+0x174>
 8006ee6:	2b20      	cmp	r3, #32
 8006ee8:	d009      	beq.n	8006efe <UART_SetConfig+0x162>
 8006eea:	2b20      	cmp	r3, #32
 8006eec:	d810      	bhi.n	8006f10 <UART_SetConfig+0x174>
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d002      	beq.n	8006ef8 <UART_SetConfig+0x15c>
 8006ef2:	2b10      	cmp	r3, #16
 8006ef4:	d006      	beq.n	8006f04 <UART_SetConfig+0x168>
 8006ef6:	e00b      	b.n	8006f10 <UART_SetConfig+0x174>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	77fb      	strb	r3, [r7, #31]
 8006efc:	e0f2      	b.n	80070e4 <UART_SetConfig+0x348>
 8006efe:	2302      	movs	r3, #2
 8006f00:	77fb      	strb	r3, [r7, #31]
 8006f02:	e0ef      	b.n	80070e4 <UART_SetConfig+0x348>
 8006f04:	2304      	movs	r3, #4
 8006f06:	77fb      	strb	r3, [r7, #31]
 8006f08:	e0ec      	b.n	80070e4 <UART_SetConfig+0x348>
 8006f0a:	2308      	movs	r3, #8
 8006f0c:	77fb      	strb	r3, [r7, #31]
 8006f0e:	e0e9      	b.n	80070e4 <UART_SetConfig+0x348>
 8006f10:	2310      	movs	r3, #16
 8006f12:	77fb      	strb	r3, [r7, #31]
 8006f14:	e0e6      	b.n	80070e4 <UART_SetConfig+0x348>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a56      	ldr	r2, [pc, #344]	; (8007074 <UART_SetConfig+0x2d8>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d120      	bne.n	8006f62 <UART_SetConfig+0x1c6>
 8006f20:	4b51      	ldr	r3, [pc, #324]	; (8007068 <UART_SetConfig+0x2cc>)
 8006f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006f2a:	2bc0      	cmp	r3, #192	; 0xc0
 8006f2c:	d013      	beq.n	8006f56 <UART_SetConfig+0x1ba>
 8006f2e:	2bc0      	cmp	r3, #192	; 0xc0
 8006f30:	d814      	bhi.n	8006f5c <UART_SetConfig+0x1c0>
 8006f32:	2b80      	cmp	r3, #128	; 0x80
 8006f34:	d009      	beq.n	8006f4a <UART_SetConfig+0x1ae>
 8006f36:	2b80      	cmp	r3, #128	; 0x80
 8006f38:	d810      	bhi.n	8006f5c <UART_SetConfig+0x1c0>
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d002      	beq.n	8006f44 <UART_SetConfig+0x1a8>
 8006f3e:	2b40      	cmp	r3, #64	; 0x40
 8006f40:	d006      	beq.n	8006f50 <UART_SetConfig+0x1b4>
 8006f42:	e00b      	b.n	8006f5c <UART_SetConfig+0x1c0>
 8006f44:	2300      	movs	r3, #0
 8006f46:	77fb      	strb	r3, [r7, #31]
 8006f48:	e0cc      	b.n	80070e4 <UART_SetConfig+0x348>
 8006f4a:	2302      	movs	r3, #2
 8006f4c:	77fb      	strb	r3, [r7, #31]
 8006f4e:	e0c9      	b.n	80070e4 <UART_SetConfig+0x348>
 8006f50:	2304      	movs	r3, #4
 8006f52:	77fb      	strb	r3, [r7, #31]
 8006f54:	e0c6      	b.n	80070e4 <UART_SetConfig+0x348>
 8006f56:	2308      	movs	r3, #8
 8006f58:	77fb      	strb	r3, [r7, #31]
 8006f5a:	e0c3      	b.n	80070e4 <UART_SetConfig+0x348>
 8006f5c:	2310      	movs	r3, #16
 8006f5e:	77fb      	strb	r3, [r7, #31]
 8006f60:	e0c0      	b.n	80070e4 <UART_SetConfig+0x348>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a44      	ldr	r2, [pc, #272]	; (8007078 <UART_SetConfig+0x2dc>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d125      	bne.n	8006fb8 <UART_SetConfig+0x21c>
 8006f6c:	4b3e      	ldr	r3, [pc, #248]	; (8007068 <UART_SetConfig+0x2cc>)
 8006f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f7a:	d017      	beq.n	8006fac <UART_SetConfig+0x210>
 8006f7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f80:	d817      	bhi.n	8006fb2 <UART_SetConfig+0x216>
 8006f82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f86:	d00b      	beq.n	8006fa0 <UART_SetConfig+0x204>
 8006f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f8c:	d811      	bhi.n	8006fb2 <UART_SetConfig+0x216>
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d003      	beq.n	8006f9a <UART_SetConfig+0x1fe>
 8006f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f96:	d006      	beq.n	8006fa6 <UART_SetConfig+0x20a>
 8006f98:	e00b      	b.n	8006fb2 <UART_SetConfig+0x216>
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	77fb      	strb	r3, [r7, #31]
 8006f9e:	e0a1      	b.n	80070e4 <UART_SetConfig+0x348>
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	77fb      	strb	r3, [r7, #31]
 8006fa4:	e09e      	b.n	80070e4 <UART_SetConfig+0x348>
 8006fa6:	2304      	movs	r3, #4
 8006fa8:	77fb      	strb	r3, [r7, #31]
 8006faa:	e09b      	b.n	80070e4 <UART_SetConfig+0x348>
 8006fac:	2308      	movs	r3, #8
 8006fae:	77fb      	strb	r3, [r7, #31]
 8006fb0:	e098      	b.n	80070e4 <UART_SetConfig+0x348>
 8006fb2:	2310      	movs	r3, #16
 8006fb4:	77fb      	strb	r3, [r7, #31]
 8006fb6:	e095      	b.n	80070e4 <UART_SetConfig+0x348>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a2f      	ldr	r2, [pc, #188]	; (800707c <UART_SetConfig+0x2e0>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d125      	bne.n	800700e <UART_SetConfig+0x272>
 8006fc2:	4b29      	ldr	r3, [pc, #164]	; (8007068 <UART_SetConfig+0x2cc>)
 8006fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fc8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006fcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fd0:	d017      	beq.n	8007002 <UART_SetConfig+0x266>
 8006fd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fd6:	d817      	bhi.n	8007008 <UART_SetConfig+0x26c>
 8006fd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fdc:	d00b      	beq.n	8006ff6 <UART_SetConfig+0x25a>
 8006fde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fe2:	d811      	bhi.n	8007008 <UART_SetConfig+0x26c>
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d003      	beq.n	8006ff0 <UART_SetConfig+0x254>
 8006fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fec:	d006      	beq.n	8006ffc <UART_SetConfig+0x260>
 8006fee:	e00b      	b.n	8007008 <UART_SetConfig+0x26c>
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	77fb      	strb	r3, [r7, #31]
 8006ff4:	e076      	b.n	80070e4 <UART_SetConfig+0x348>
 8006ff6:	2302      	movs	r3, #2
 8006ff8:	77fb      	strb	r3, [r7, #31]
 8006ffa:	e073      	b.n	80070e4 <UART_SetConfig+0x348>
 8006ffc:	2304      	movs	r3, #4
 8006ffe:	77fb      	strb	r3, [r7, #31]
 8007000:	e070      	b.n	80070e4 <UART_SetConfig+0x348>
 8007002:	2308      	movs	r3, #8
 8007004:	77fb      	strb	r3, [r7, #31]
 8007006:	e06d      	b.n	80070e4 <UART_SetConfig+0x348>
 8007008:	2310      	movs	r3, #16
 800700a:	77fb      	strb	r3, [r7, #31]
 800700c:	e06a      	b.n	80070e4 <UART_SetConfig+0x348>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a1b      	ldr	r2, [pc, #108]	; (8007080 <UART_SetConfig+0x2e4>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d138      	bne.n	800708a <UART_SetConfig+0x2ee>
 8007018:	4b13      	ldr	r3, [pc, #76]	; (8007068 <UART_SetConfig+0x2cc>)
 800701a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800701e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007022:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007026:	d017      	beq.n	8007058 <UART_SetConfig+0x2bc>
 8007028:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800702c:	d82a      	bhi.n	8007084 <UART_SetConfig+0x2e8>
 800702e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007032:	d00b      	beq.n	800704c <UART_SetConfig+0x2b0>
 8007034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007038:	d824      	bhi.n	8007084 <UART_SetConfig+0x2e8>
 800703a:	2b00      	cmp	r3, #0
 800703c:	d003      	beq.n	8007046 <UART_SetConfig+0x2aa>
 800703e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007042:	d006      	beq.n	8007052 <UART_SetConfig+0x2b6>
 8007044:	e01e      	b.n	8007084 <UART_SetConfig+0x2e8>
 8007046:	2300      	movs	r3, #0
 8007048:	77fb      	strb	r3, [r7, #31]
 800704a:	e04b      	b.n	80070e4 <UART_SetConfig+0x348>
 800704c:	2302      	movs	r3, #2
 800704e:	77fb      	strb	r3, [r7, #31]
 8007050:	e048      	b.n	80070e4 <UART_SetConfig+0x348>
 8007052:	2304      	movs	r3, #4
 8007054:	77fb      	strb	r3, [r7, #31]
 8007056:	e045      	b.n	80070e4 <UART_SetConfig+0x348>
 8007058:	2308      	movs	r3, #8
 800705a:	77fb      	strb	r3, [r7, #31]
 800705c:	e042      	b.n	80070e4 <UART_SetConfig+0x348>
 800705e:	bf00      	nop
 8007060:	efff69f3 	.word	0xefff69f3
 8007064:	40011000 	.word	0x40011000
 8007068:	40023800 	.word	0x40023800
 800706c:	40004400 	.word	0x40004400
 8007070:	40004800 	.word	0x40004800
 8007074:	40004c00 	.word	0x40004c00
 8007078:	40005000 	.word	0x40005000
 800707c:	40011400 	.word	0x40011400
 8007080:	40007800 	.word	0x40007800
 8007084:	2310      	movs	r3, #16
 8007086:	77fb      	strb	r3, [r7, #31]
 8007088:	e02c      	b.n	80070e4 <UART_SetConfig+0x348>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a72      	ldr	r2, [pc, #456]	; (8007258 <UART_SetConfig+0x4bc>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d125      	bne.n	80070e0 <UART_SetConfig+0x344>
 8007094:	4b71      	ldr	r3, [pc, #452]	; (800725c <UART_SetConfig+0x4c0>)
 8007096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800709a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800709e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80070a2:	d017      	beq.n	80070d4 <UART_SetConfig+0x338>
 80070a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80070a8:	d817      	bhi.n	80070da <UART_SetConfig+0x33e>
 80070aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070ae:	d00b      	beq.n	80070c8 <UART_SetConfig+0x32c>
 80070b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070b4:	d811      	bhi.n	80070da <UART_SetConfig+0x33e>
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d003      	beq.n	80070c2 <UART_SetConfig+0x326>
 80070ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070be:	d006      	beq.n	80070ce <UART_SetConfig+0x332>
 80070c0:	e00b      	b.n	80070da <UART_SetConfig+0x33e>
 80070c2:	2300      	movs	r3, #0
 80070c4:	77fb      	strb	r3, [r7, #31]
 80070c6:	e00d      	b.n	80070e4 <UART_SetConfig+0x348>
 80070c8:	2302      	movs	r3, #2
 80070ca:	77fb      	strb	r3, [r7, #31]
 80070cc:	e00a      	b.n	80070e4 <UART_SetConfig+0x348>
 80070ce:	2304      	movs	r3, #4
 80070d0:	77fb      	strb	r3, [r7, #31]
 80070d2:	e007      	b.n	80070e4 <UART_SetConfig+0x348>
 80070d4:	2308      	movs	r3, #8
 80070d6:	77fb      	strb	r3, [r7, #31]
 80070d8:	e004      	b.n	80070e4 <UART_SetConfig+0x348>
 80070da:	2310      	movs	r3, #16
 80070dc:	77fb      	strb	r3, [r7, #31]
 80070de:	e001      	b.n	80070e4 <UART_SetConfig+0x348>
 80070e0:	2310      	movs	r3, #16
 80070e2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	69db      	ldr	r3, [r3, #28]
 80070e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070ec:	d15b      	bne.n	80071a6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80070ee:	7ffb      	ldrb	r3, [r7, #31]
 80070f0:	2b08      	cmp	r3, #8
 80070f2:	d828      	bhi.n	8007146 <UART_SetConfig+0x3aa>
 80070f4:	a201      	add	r2, pc, #4	; (adr r2, 80070fc <UART_SetConfig+0x360>)
 80070f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fa:	bf00      	nop
 80070fc:	08007121 	.word	0x08007121
 8007100:	08007129 	.word	0x08007129
 8007104:	08007131 	.word	0x08007131
 8007108:	08007147 	.word	0x08007147
 800710c:	08007137 	.word	0x08007137
 8007110:	08007147 	.word	0x08007147
 8007114:	08007147 	.word	0x08007147
 8007118:	08007147 	.word	0x08007147
 800711c:	0800713f 	.word	0x0800713f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007120:	f7fd fd18 	bl	8004b54 <HAL_RCC_GetPCLK1Freq>
 8007124:	61b8      	str	r0, [r7, #24]
        break;
 8007126:	e013      	b.n	8007150 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007128:	f7fd fd28 	bl	8004b7c <HAL_RCC_GetPCLK2Freq>
 800712c:	61b8      	str	r0, [r7, #24]
        break;
 800712e:	e00f      	b.n	8007150 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007130:	4b4b      	ldr	r3, [pc, #300]	; (8007260 <UART_SetConfig+0x4c4>)
 8007132:	61bb      	str	r3, [r7, #24]
        break;
 8007134:	e00c      	b.n	8007150 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007136:	f7fd fbfb 	bl	8004930 <HAL_RCC_GetSysClockFreq>
 800713a:	61b8      	str	r0, [r7, #24]
        break;
 800713c:	e008      	b.n	8007150 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800713e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007142:	61bb      	str	r3, [r7, #24]
        break;
 8007144:	e004      	b.n	8007150 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007146:	2300      	movs	r3, #0
 8007148:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	77bb      	strb	r3, [r7, #30]
        break;
 800714e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d074      	beq.n	8007240 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	005a      	lsls	r2, r3, #1
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	085b      	lsrs	r3, r3, #1
 8007160:	441a      	add	r2, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	fbb2 f3f3 	udiv	r3, r2, r3
 800716a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	2b0f      	cmp	r3, #15
 8007170:	d916      	bls.n	80071a0 <UART_SetConfig+0x404>
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007178:	d212      	bcs.n	80071a0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	b29b      	uxth	r3, r3
 800717e:	f023 030f 	bic.w	r3, r3, #15
 8007182:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	085b      	lsrs	r3, r3, #1
 8007188:	b29b      	uxth	r3, r3
 800718a:	f003 0307 	and.w	r3, r3, #7
 800718e:	b29a      	uxth	r2, r3
 8007190:	89fb      	ldrh	r3, [r7, #14]
 8007192:	4313      	orrs	r3, r2
 8007194:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	89fa      	ldrh	r2, [r7, #14]
 800719c:	60da      	str	r2, [r3, #12]
 800719e:	e04f      	b.n	8007240 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	77bb      	strb	r3, [r7, #30]
 80071a4:	e04c      	b.n	8007240 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80071a6:	7ffb      	ldrb	r3, [r7, #31]
 80071a8:	2b08      	cmp	r3, #8
 80071aa:	d828      	bhi.n	80071fe <UART_SetConfig+0x462>
 80071ac:	a201      	add	r2, pc, #4	; (adr r2, 80071b4 <UART_SetConfig+0x418>)
 80071ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b2:	bf00      	nop
 80071b4:	080071d9 	.word	0x080071d9
 80071b8:	080071e1 	.word	0x080071e1
 80071bc:	080071e9 	.word	0x080071e9
 80071c0:	080071ff 	.word	0x080071ff
 80071c4:	080071ef 	.word	0x080071ef
 80071c8:	080071ff 	.word	0x080071ff
 80071cc:	080071ff 	.word	0x080071ff
 80071d0:	080071ff 	.word	0x080071ff
 80071d4:	080071f7 	.word	0x080071f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071d8:	f7fd fcbc 	bl	8004b54 <HAL_RCC_GetPCLK1Freq>
 80071dc:	61b8      	str	r0, [r7, #24]
        break;
 80071de:	e013      	b.n	8007208 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071e0:	f7fd fccc 	bl	8004b7c <HAL_RCC_GetPCLK2Freq>
 80071e4:	61b8      	str	r0, [r7, #24]
        break;
 80071e6:	e00f      	b.n	8007208 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071e8:	4b1d      	ldr	r3, [pc, #116]	; (8007260 <UART_SetConfig+0x4c4>)
 80071ea:	61bb      	str	r3, [r7, #24]
        break;
 80071ec:	e00c      	b.n	8007208 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071ee:	f7fd fb9f 	bl	8004930 <HAL_RCC_GetSysClockFreq>
 80071f2:	61b8      	str	r0, [r7, #24]
        break;
 80071f4:	e008      	b.n	8007208 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071fa:	61bb      	str	r3, [r7, #24]
        break;
 80071fc:	e004      	b.n	8007208 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80071fe:	2300      	movs	r3, #0
 8007200:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	77bb      	strb	r3, [r7, #30]
        break;
 8007206:	bf00      	nop
    }

    if (pclk != 0U)
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d018      	beq.n	8007240 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	085a      	lsrs	r2, r3, #1
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	441a      	add	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007220:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	2b0f      	cmp	r3, #15
 8007226:	d909      	bls.n	800723c <UART_SetConfig+0x4a0>
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800722e:	d205      	bcs.n	800723c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	b29a      	uxth	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	60da      	str	r2, [r3, #12]
 800723a:	e001      	b.n	8007240 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800724c:	7fbb      	ldrb	r3, [r7, #30]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3720      	adds	r7, #32
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	40007c00 	.word	0x40007c00
 800725c:	40023800 	.word	0x40023800
 8007260:	00f42400 	.word	0x00f42400

08007264 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007270:	f003 0301 	and.w	r3, r3, #1
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00a      	beq.n	800728e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	430a      	orrs	r2, r1
 800728c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007292:	f003 0302 	and.w	r3, r3, #2
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00a      	beq.n	80072b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	430a      	orrs	r2, r1
 80072ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b4:	f003 0304 	and.w	r3, r3, #4
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00a      	beq.n	80072d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	430a      	orrs	r2, r1
 80072d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d6:	f003 0308 	and.w	r3, r3, #8
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00a      	beq.n	80072f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	430a      	orrs	r2, r1
 80072f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f8:	f003 0310 	and.w	r3, r3, #16
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00a      	beq.n	8007316 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	430a      	orrs	r2, r1
 8007314:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731a:	f003 0320 	and.w	r3, r3, #32
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00a      	beq.n	8007338 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	430a      	orrs	r2, r1
 8007336:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007340:	2b00      	cmp	r3, #0
 8007342:	d01a      	beq.n	800737a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	430a      	orrs	r2, r1
 8007358:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007362:	d10a      	bne.n	800737a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	430a      	orrs	r2, r1
 8007378:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00a      	beq.n	800739c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	430a      	orrs	r2, r1
 800739a:	605a      	str	r2, [r3, #4]
  }
}
 800739c:	bf00      	nop
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b086      	sub	sp, #24
 80073ac:	af02      	add	r7, sp, #8
 80073ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073b8:	f7fa fa88 	bl	80018cc <HAL_GetTick>
 80073bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 0308 	and.w	r3, r3, #8
 80073c8:	2b08      	cmp	r3, #8
 80073ca:	d10e      	bne.n	80073ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073d0:	9300      	str	r3, [sp, #0]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f831 	bl	8007442 <UART_WaitOnFlagUntilTimeout>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d001      	beq.n	80073ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073e6:	2303      	movs	r3, #3
 80073e8:	e027      	b.n	800743a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 0304 	and.w	r3, r3, #4
 80073f4:	2b04      	cmp	r3, #4
 80073f6:	d10e      	bne.n	8007416 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073fc:	9300      	str	r3, [sp, #0]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 f81b 	bl	8007442 <UART_WaitOnFlagUntilTimeout>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d001      	beq.n	8007416 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e011      	b.n	800743a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2220      	movs	r2, #32
 800741a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2220      	movs	r2, #32
 8007420:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}

08007442 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b09c      	sub	sp, #112	; 0x70
 8007446:	af00      	add	r7, sp, #0
 8007448:	60f8      	str	r0, [r7, #12]
 800744a:	60b9      	str	r1, [r7, #8]
 800744c:	603b      	str	r3, [r7, #0]
 800744e:	4613      	mov	r3, r2
 8007450:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007452:	e0a7      	b.n	80075a4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007454:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745a:	f000 80a3 	beq.w	80075a4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800745e:	f7fa fa35 	bl	80018cc <HAL_GetTick>
 8007462:	4602      	mov	r2, r0
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800746a:	429a      	cmp	r2, r3
 800746c:	d302      	bcc.n	8007474 <UART_WaitOnFlagUntilTimeout+0x32>
 800746e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007470:	2b00      	cmp	r3, #0
 8007472:	d13f      	bne.n	80074f4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800747c:	e853 3f00 	ldrex	r3, [r3]
 8007480:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007484:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007488:	667b      	str	r3, [r7, #100]	; 0x64
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	461a      	mov	r2, r3
 8007490:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007492:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007494:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007496:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007498:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800749a:	e841 2300 	strex	r3, r2, [r1]
 800749e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80074a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1e6      	bne.n	8007474 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	3308      	adds	r3, #8
 80074ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074b0:	e853 3f00 	ldrex	r3, [r3]
 80074b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b8:	f023 0301 	bic.w	r3, r3, #1
 80074bc:	663b      	str	r3, [r7, #96]	; 0x60
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	3308      	adds	r3, #8
 80074c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80074c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80074c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80074cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074ce:	e841 2300 	strex	r3, r2, [r1]
 80074d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80074d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1e5      	bne.n	80074a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2220      	movs	r2, #32
 80074de:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2220      	movs	r2, #32
 80074e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80074f0:	2303      	movs	r3, #3
 80074f2:	e068      	b.n	80075c6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 0304 	and.w	r3, r3, #4
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d050      	beq.n	80075a4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	69db      	ldr	r3, [r3, #28]
 8007508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800750c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007510:	d148      	bne.n	80075a4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800751a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007524:	e853 3f00 	ldrex	r3, [r3]
 8007528:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800752a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007530:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	461a      	mov	r2, r3
 8007538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800753a:	637b      	str	r3, [r7, #52]	; 0x34
 800753c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007540:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007542:	e841 2300 	strex	r3, r2, [r1]
 8007546:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1e6      	bne.n	800751c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	3308      	adds	r3, #8
 8007554:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	e853 3f00 	ldrex	r3, [r3]
 800755c:	613b      	str	r3, [r7, #16]
   return(result);
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	f023 0301 	bic.w	r3, r3, #1
 8007564:	66bb      	str	r3, [r7, #104]	; 0x68
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	3308      	adds	r3, #8
 800756c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800756e:	623a      	str	r2, [r7, #32]
 8007570:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007572:	69f9      	ldr	r1, [r7, #28]
 8007574:	6a3a      	ldr	r2, [r7, #32]
 8007576:	e841 2300 	strex	r3, r2, [r1]
 800757a:	61bb      	str	r3, [r7, #24]
   return(result);
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1e5      	bne.n	800754e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2220      	movs	r2, #32
 8007586:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2220      	movs	r2, #32
 800758c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2220      	movs	r2, #32
 8007594:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2200      	movs	r2, #0
 800759c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80075a0:	2303      	movs	r3, #3
 80075a2:	e010      	b.n	80075c6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	69da      	ldr	r2, [r3, #28]
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	4013      	ands	r3, r2
 80075ae:	68ba      	ldr	r2, [r7, #8]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	bf0c      	ite	eq
 80075b4:	2301      	moveq	r3, #1
 80075b6:	2300      	movne	r3, #0
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	461a      	mov	r2, r3
 80075bc:	79fb      	ldrb	r3, [r7, #7]
 80075be:	429a      	cmp	r2, r3
 80075c0:	f43f af48 	beq.w	8007454 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3770      	adds	r7, #112	; 0x70
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
	...

080075d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075d0:	b084      	sub	sp, #16
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b084      	sub	sp, #16
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
 80075da:	f107 001c 	add.w	r0, r7, #28
 80075de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d120      	bne.n	800762a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	68da      	ldr	r2, [r3, #12]
 80075f8:	4b20      	ldr	r3, [pc, #128]	; (800767c <USB_CoreInit+0xac>)
 80075fa:	4013      	ands	r3, r2
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800760c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800760e:	2b01      	cmp	r3, #1
 8007610:	d105      	bne.n	800761e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f001 fbee 	bl	8008e00 <USB_CoreReset>
 8007624:	4603      	mov	r3, r0
 8007626:	73fb      	strb	r3, [r7, #15]
 8007628:	e010      	b.n	800764c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f001 fbe2 	bl	8008e00 <USB_CoreReset>
 800763c:	4603      	mov	r3, r0
 800763e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007644:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800764c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764e:	2b01      	cmp	r3, #1
 8007650:	d10b      	bne.n	800766a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	f043 0206 	orr.w	r2, r3, #6
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	f043 0220 	orr.w	r2, r3, #32
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800766a:	7bfb      	ldrb	r3, [r7, #15]
}
 800766c:	4618      	mov	r0, r3
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007676:	b004      	add	sp, #16
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	ffbdffbf 	.word	0xffbdffbf

08007680 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007680:	b480      	push	{r7}
 8007682:	b087      	sub	sp, #28
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	4613      	mov	r3, r2
 800768c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800768e:	79fb      	ldrb	r3, [r7, #7]
 8007690:	2b02      	cmp	r3, #2
 8007692:	d165      	bne.n	8007760 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	4a41      	ldr	r2, [pc, #260]	; (800779c <USB_SetTurnaroundTime+0x11c>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d906      	bls.n	80076aa <USB_SetTurnaroundTime+0x2a>
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	4a40      	ldr	r2, [pc, #256]	; (80077a0 <USB_SetTurnaroundTime+0x120>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d202      	bcs.n	80076aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80076a4:	230f      	movs	r3, #15
 80076a6:	617b      	str	r3, [r7, #20]
 80076a8:	e062      	b.n	8007770 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	4a3c      	ldr	r2, [pc, #240]	; (80077a0 <USB_SetTurnaroundTime+0x120>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d306      	bcc.n	80076c0 <USB_SetTurnaroundTime+0x40>
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	4a3b      	ldr	r2, [pc, #236]	; (80077a4 <USB_SetTurnaroundTime+0x124>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d202      	bcs.n	80076c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80076ba:	230e      	movs	r3, #14
 80076bc:	617b      	str	r3, [r7, #20]
 80076be:	e057      	b.n	8007770 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	4a38      	ldr	r2, [pc, #224]	; (80077a4 <USB_SetTurnaroundTime+0x124>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d306      	bcc.n	80076d6 <USB_SetTurnaroundTime+0x56>
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	4a37      	ldr	r2, [pc, #220]	; (80077a8 <USB_SetTurnaroundTime+0x128>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d202      	bcs.n	80076d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80076d0:	230d      	movs	r3, #13
 80076d2:	617b      	str	r3, [r7, #20]
 80076d4:	e04c      	b.n	8007770 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	4a33      	ldr	r2, [pc, #204]	; (80077a8 <USB_SetTurnaroundTime+0x128>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d306      	bcc.n	80076ec <USB_SetTurnaroundTime+0x6c>
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	4a32      	ldr	r2, [pc, #200]	; (80077ac <USB_SetTurnaroundTime+0x12c>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d802      	bhi.n	80076ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80076e6:	230c      	movs	r3, #12
 80076e8:	617b      	str	r3, [r7, #20]
 80076ea:	e041      	b.n	8007770 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	4a2f      	ldr	r2, [pc, #188]	; (80077ac <USB_SetTurnaroundTime+0x12c>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d906      	bls.n	8007702 <USB_SetTurnaroundTime+0x82>
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	4a2e      	ldr	r2, [pc, #184]	; (80077b0 <USB_SetTurnaroundTime+0x130>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d802      	bhi.n	8007702 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80076fc:	230b      	movs	r3, #11
 80076fe:	617b      	str	r3, [r7, #20]
 8007700:	e036      	b.n	8007770 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	4a2a      	ldr	r2, [pc, #168]	; (80077b0 <USB_SetTurnaroundTime+0x130>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d906      	bls.n	8007718 <USB_SetTurnaroundTime+0x98>
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	4a29      	ldr	r2, [pc, #164]	; (80077b4 <USB_SetTurnaroundTime+0x134>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d802      	bhi.n	8007718 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007712:	230a      	movs	r3, #10
 8007714:	617b      	str	r3, [r7, #20]
 8007716:	e02b      	b.n	8007770 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	4a26      	ldr	r2, [pc, #152]	; (80077b4 <USB_SetTurnaroundTime+0x134>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d906      	bls.n	800772e <USB_SetTurnaroundTime+0xae>
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	4a25      	ldr	r2, [pc, #148]	; (80077b8 <USB_SetTurnaroundTime+0x138>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d202      	bcs.n	800772e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007728:	2309      	movs	r3, #9
 800772a:	617b      	str	r3, [r7, #20]
 800772c:	e020      	b.n	8007770 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	4a21      	ldr	r2, [pc, #132]	; (80077b8 <USB_SetTurnaroundTime+0x138>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d306      	bcc.n	8007744 <USB_SetTurnaroundTime+0xc4>
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	4a20      	ldr	r2, [pc, #128]	; (80077bc <USB_SetTurnaroundTime+0x13c>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d802      	bhi.n	8007744 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800773e:	2308      	movs	r3, #8
 8007740:	617b      	str	r3, [r7, #20]
 8007742:	e015      	b.n	8007770 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	4a1d      	ldr	r2, [pc, #116]	; (80077bc <USB_SetTurnaroundTime+0x13c>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d906      	bls.n	800775a <USB_SetTurnaroundTime+0xda>
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	4a1c      	ldr	r2, [pc, #112]	; (80077c0 <USB_SetTurnaroundTime+0x140>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d202      	bcs.n	800775a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007754:	2307      	movs	r3, #7
 8007756:	617b      	str	r3, [r7, #20]
 8007758:	e00a      	b.n	8007770 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800775a:	2306      	movs	r3, #6
 800775c:	617b      	str	r3, [r7, #20]
 800775e:	e007      	b.n	8007770 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007760:	79fb      	ldrb	r3, [r7, #7]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d102      	bne.n	800776c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007766:	2309      	movs	r3, #9
 8007768:	617b      	str	r3, [r7, #20]
 800776a:	e001      	b.n	8007770 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800776c:	2309      	movs	r3, #9
 800776e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	68da      	ldr	r2, [r3, #12]
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	029b      	lsls	r3, r3, #10
 8007784:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007788:	431a      	orrs	r2, r3
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	371c      	adds	r7, #28
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr
 800779c:	00d8acbf 	.word	0x00d8acbf
 80077a0:	00e4e1c0 	.word	0x00e4e1c0
 80077a4:	00f42400 	.word	0x00f42400
 80077a8:	01067380 	.word	0x01067380
 80077ac:	011a499f 	.word	0x011a499f
 80077b0:	01312cff 	.word	0x01312cff
 80077b4:	014ca43f 	.word	0x014ca43f
 80077b8:	016e3600 	.word	0x016e3600
 80077bc:	01a6ab1f 	.word	0x01a6ab1f
 80077c0:	01e84800 	.word	0x01e84800

080077c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	f043 0201 	orr.w	r2, r3, #1
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80077e6:	b480      	push	{r7}
 80077e8:	b083      	sub	sp, #12
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f023 0201 	bic.w	r2, r3, #1
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	460b      	mov	r3, r1
 8007812:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007814:	2300      	movs	r3, #0
 8007816:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007824:	78fb      	ldrb	r3, [r7, #3]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d115      	bne.n	8007856 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007836:	2001      	movs	r0, #1
 8007838:	f7fa f854 	bl	80018e4 <HAL_Delay>
      ms++;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	3301      	adds	r3, #1
 8007840:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f001 fa4b 	bl	8008cde <USB_GetMode>
 8007848:	4603      	mov	r3, r0
 800784a:	2b01      	cmp	r3, #1
 800784c:	d01e      	beq.n	800788c <USB_SetCurrentMode+0x84>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2b31      	cmp	r3, #49	; 0x31
 8007852:	d9f0      	bls.n	8007836 <USB_SetCurrentMode+0x2e>
 8007854:	e01a      	b.n	800788c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007856:	78fb      	ldrb	r3, [r7, #3]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d115      	bne.n	8007888 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007868:	2001      	movs	r0, #1
 800786a:	f7fa f83b 	bl	80018e4 <HAL_Delay>
      ms++;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	3301      	adds	r3, #1
 8007872:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f001 fa32 	bl	8008cde <USB_GetMode>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d005      	beq.n	800788c <USB_SetCurrentMode+0x84>
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2b31      	cmp	r3, #49	; 0x31
 8007884:	d9f0      	bls.n	8007868 <USB_SetCurrentMode+0x60>
 8007886:	e001      	b.n	800788c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e005      	b.n	8007898 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2b32      	cmp	r3, #50	; 0x32
 8007890:	d101      	bne.n	8007896 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e000      	b.n	8007898 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3710      	adds	r7, #16
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078a0:	b084      	sub	sp, #16
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b086      	sub	sp, #24
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
 80078aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80078ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80078b2:	2300      	movs	r3, #0
 80078b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80078ba:	2300      	movs	r3, #0
 80078bc:	613b      	str	r3, [r7, #16]
 80078be:	e009      	b.n	80078d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	3340      	adds	r3, #64	; 0x40
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	4413      	add	r3, r2
 80078ca:	2200      	movs	r2, #0
 80078cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	3301      	adds	r3, #1
 80078d2:	613b      	str	r3, [r7, #16]
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	2b0e      	cmp	r3, #14
 80078d8:	d9f2      	bls.n	80078c0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80078da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d11c      	bne.n	800791a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078ee:	f043 0302 	orr.w	r3, r3, #2
 80078f2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	601a      	str	r2, [r3, #0]
 8007918:	e005      	b.n	8007926 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800792c:	461a      	mov	r2, r3
 800792e:	2300      	movs	r3, #0
 8007930:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007938:	4619      	mov	r1, r3
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007940:	461a      	mov	r2, r3
 8007942:	680b      	ldr	r3, [r1, #0]
 8007944:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007948:	2b01      	cmp	r3, #1
 800794a:	d10c      	bne.n	8007966 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800794c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794e:	2b00      	cmp	r3, #0
 8007950:	d104      	bne.n	800795c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007952:	2100      	movs	r1, #0
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 f965 	bl	8007c24 <USB_SetDevSpeed>
 800795a:	e008      	b.n	800796e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800795c:	2101      	movs	r1, #1
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f960 	bl	8007c24 <USB_SetDevSpeed>
 8007964:	e003      	b.n	800796e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007966:	2103      	movs	r1, #3
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f95b 	bl	8007c24 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800796e:	2110      	movs	r1, #16
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f8f3 	bl	8007b5c <USB_FlushTxFifo>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d001      	beq.n	8007980 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 f91f 	bl	8007bc4 <USB_FlushRxFifo>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d001      	beq.n	8007990 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007996:	461a      	mov	r2, r3
 8007998:	2300      	movs	r3, #0
 800799a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a2:	461a      	mov	r2, r3
 80079a4:	2300      	movs	r3, #0
 80079a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ae:	461a      	mov	r2, r3
 80079b0:	2300      	movs	r3, #0
 80079b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079b4:	2300      	movs	r3, #0
 80079b6:	613b      	str	r3, [r7, #16]
 80079b8:	e043      	b.n	8007a42 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	015a      	lsls	r2, r3, #5
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	4413      	add	r3, r2
 80079c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079d0:	d118      	bne.n	8007a04 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d10a      	bne.n	80079ee <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	015a      	lsls	r2, r3, #5
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	4413      	add	r3, r2
 80079e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e4:	461a      	mov	r2, r3
 80079e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80079ea:	6013      	str	r3, [r2, #0]
 80079ec:	e013      	b.n	8007a16 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	015a      	lsls	r2, r3, #5
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	4413      	add	r3, r2
 80079f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079fa:	461a      	mov	r2, r3
 80079fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a00:	6013      	str	r3, [r2, #0]
 8007a02:	e008      	b.n	8007a16 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	015a      	lsls	r2, r3, #5
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a10:	461a      	mov	r2, r3
 8007a12:	2300      	movs	r3, #0
 8007a14:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	015a      	lsls	r2, r3, #5
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a22:	461a      	mov	r2, r3
 8007a24:	2300      	movs	r3, #0
 8007a26:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	015a      	lsls	r2, r3, #5
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	4413      	add	r3, r2
 8007a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a34:	461a      	mov	r2, r3
 8007a36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	613b      	str	r3, [r7, #16]
 8007a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a44:	693a      	ldr	r2, [r7, #16]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d3b7      	bcc.n	80079ba <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	613b      	str	r3, [r7, #16]
 8007a4e:	e043      	b.n	8007ad8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	015a      	lsls	r2, r3, #5
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	4413      	add	r3, r2
 8007a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a66:	d118      	bne.n	8007a9a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10a      	bne.n	8007a84 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	015a      	lsls	r2, r3, #5
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	4413      	add	r3, r2
 8007a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a80:	6013      	str	r3, [r2, #0]
 8007a82:	e013      	b.n	8007aac <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	015a      	lsls	r2, r3, #5
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a90:	461a      	mov	r2, r3
 8007a92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a96:	6013      	str	r3, [r2, #0]
 8007a98:	e008      	b.n	8007aac <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	015a      	lsls	r2, r3, #5
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	015a      	lsls	r2, r3, #5
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ab8:	461a      	mov	r2, r3
 8007aba:	2300      	movs	r3, #0
 8007abc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	015a      	lsls	r2, r3, #5
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aca:	461a      	mov	r2, r3
 8007acc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ad0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	613b      	str	r3, [r7, #16]
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d3b7      	bcc.n	8007a50 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007aee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007af2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007b00:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d105      	bne.n	8007b14 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	f043 0210 	orr.w	r2, r3, #16
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	699a      	ldr	r2, [r3, #24]
 8007b18:	4b0e      	ldr	r3, [pc, #56]	; (8007b54 <USB_DevInit+0x2b4>)
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d005      	beq.n	8007b32 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	699b      	ldr	r3, [r3, #24]
 8007b2a:	f043 0208 	orr.w	r2, r3, #8
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d105      	bne.n	8007b44 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	699a      	ldr	r2, [r3, #24]
 8007b3c:	4b06      	ldr	r3, [pc, #24]	; (8007b58 <USB_DevInit+0x2b8>)
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007b44:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3718      	adds	r7, #24
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b50:	b004      	add	sp, #16
 8007b52:	4770      	bx	lr
 8007b54:	803c3800 	.word	0x803c3800
 8007b58:	40000004 	.word	0x40000004

08007b5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b085      	sub	sp, #20
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b66:	2300      	movs	r3, #0
 8007b68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	4a13      	ldr	r2, [pc, #76]	; (8007bc0 <USB_FlushTxFifo+0x64>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d901      	bls.n	8007b7c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	e01b      	b.n	8007bb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	daf2      	bge.n	8007b6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007b84:	2300      	movs	r3, #0
 8007b86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	019b      	lsls	r3, r3, #6
 8007b8c:	f043 0220 	orr.w	r2, r3, #32
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	3301      	adds	r3, #1
 8007b98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	4a08      	ldr	r2, [pc, #32]	; (8007bc0 <USB_FlushTxFifo+0x64>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d901      	bls.n	8007ba6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e006      	b.n	8007bb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	f003 0320 	and.w	r3, r3, #32
 8007bae:	2b20      	cmp	r3, #32
 8007bb0:	d0f0      	beq.n	8007b94 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3714      	adds	r7, #20
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr
 8007bc0:	00030d40 	.word	0x00030d40

08007bc4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	4a11      	ldr	r2, [pc, #68]	; (8007c20 <USB_FlushRxFifo+0x5c>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d901      	bls.n	8007be2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	e018      	b.n	8007c14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	daf2      	bge.n	8007bd0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007bea:	2300      	movs	r3, #0
 8007bec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2210      	movs	r2, #16
 8007bf2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	4a08      	ldr	r2, [pc, #32]	; (8007c20 <USB_FlushRxFifo+0x5c>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d901      	bls.n	8007c06 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e006      	b.n	8007c14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	f003 0310 	and.w	r3, r3, #16
 8007c0e:	2b10      	cmp	r3, #16
 8007c10:	d0f0      	beq.n	8007bf4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	00030d40 	.word	0x00030d40

08007c24 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	78fb      	ldrb	r3, [r7, #3]
 8007c3e:	68f9      	ldr	r1, [r7, #12]
 8007c40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c44:	4313      	orrs	r3, r2
 8007c46:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3714      	adds	r7, #20
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr

08007c56 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007c56:	b480      	push	{r7}
 8007c58:	b087      	sub	sp, #28
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	f003 0306 	and.w	r3, r3, #6
 8007c6e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d102      	bne.n	8007c7c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007c76:	2300      	movs	r3, #0
 8007c78:	75fb      	strb	r3, [r7, #23]
 8007c7a:	e00a      	b.n	8007c92 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d002      	beq.n	8007c88 <USB_GetDevSpeed+0x32>
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2b06      	cmp	r3, #6
 8007c86:	d102      	bne.n	8007c8e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007c88:	2302      	movs	r3, #2
 8007c8a:	75fb      	strb	r3, [r7, #23]
 8007c8c:	e001      	b.n	8007c92 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007c8e:	230f      	movs	r3, #15
 8007c90:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	371c      	adds	r7, #28
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	785b      	ldrb	r3, [r3, #1]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d139      	bne.n	8007d30 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cc2:	69da      	ldr	r2, [r3, #28]
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	f003 030f 	and.w	r3, r3, #15
 8007ccc:	2101      	movs	r1, #1
 8007cce:	fa01 f303 	lsl.w	r3, r1, r3
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	68f9      	ldr	r1, [r7, #12]
 8007cd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	015a      	lsls	r2, r3, #5
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d153      	bne.n	8007d9c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	015a      	lsls	r2, r3, #5
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	791b      	ldrb	r3, [r3, #4]
 8007d0e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d10:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	059b      	lsls	r3, r3, #22
 8007d16:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d18:	431a      	orrs	r2, r3
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	0159      	lsls	r1, r3, #5
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	440b      	add	r3, r1
 8007d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d26:	4619      	mov	r1, r3
 8007d28:	4b20      	ldr	r3, [pc, #128]	; (8007dac <USB_ActivateEndpoint+0x10c>)
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	600b      	str	r3, [r1, #0]
 8007d2e:	e035      	b.n	8007d9c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d36:	69da      	ldr	r2, [r3, #28]
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	f003 030f 	and.w	r3, r3, #15
 8007d40:	2101      	movs	r1, #1
 8007d42:	fa01 f303 	lsl.w	r3, r1, r3
 8007d46:	041b      	lsls	r3, r3, #16
 8007d48:	68f9      	ldr	r1, [r7, #12]
 8007d4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	015a      	lsls	r2, r3, #5
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	4413      	add	r3, r2
 8007d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d119      	bne.n	8007d9c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	015a      	lsls	r2, r3, #5
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	4413      	add	r3, r2
 8007d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	791b      	ldrb	r3, [r3, #4]
 8007d82:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007d84:	430b      	orrs	r3, r1
 8007d86:	431a      	orrs	r2, r3
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	0159      	lsls	r1, r3, #5
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	440b      	add	r3, r1
 8007d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d94:	4619      	mov	r1, r3
 8007d96:	4b05      	ldr	r3, [pc, #20]	; (8007dac <USB_ActivateEndpoint+0x10c>)
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3714      	adds	r7, #20
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	10008000 	.word	0x10008000

08007db0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	785b      	ldrb	r3, [r3, #1]
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d161      	bne.n	8007e90 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	015a      	lsls	r2, r3, #5
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007de2:	d11f      	bne.n	8007e24 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	015a      	lsls	r2, r3, #5
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	4413      	add	r3, r2
 8007dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	0151      	lsls	r1, r2, #5
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	440a      	add	r2, r1
 8007dfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dfe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e02:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	015a      	lsls	r2, r3, #5
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68ba      	ldr	r2, [r7, #8]
 8007e14:	0151      	lsls	r1, r2, #5
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	440a      	add	r2, r1
 8007e1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	f003 030f 	and.w	r3, r3, #15
 8007e34:	2101      	movs	r1, #1
 8007e36:	fa01 f303 	lsl.w	r3, r1, r3
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	43db      	mvns	r3, r3
 8007e3e:	68f9      	ldr	r1, [r7, #12]
 8007e40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e44:	4013      	ands	r3, r2
 8007e46:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e4e:	69da      	ldr	r2, [r3, #28]
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	f003 030f 	and.w	r3, r3, #15
 8007e58:	2101      	movs	r1, #1
 8007e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	43db      	mvns	r3, r3
 8007e62:	68f9      	ldr	r1, [r7, #12]
 8007e64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e68:	4013      	ands	r3, r2
 8007e6a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	015a      	lsls	r2, r3, #5
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	4413      	add	r3, r2
 8007e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	0159      	lsls	r1, r3, #5
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	440b      	add	r3, r1
 8007e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e86:	4619      	mov	r1, r3
 8007e88:	4b35      	ldr	r3, [pc, #212]	; (8007f60 <USB_DeactivateEndpoint+0x1b0>)
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	600b      	str	r3, [r1, #0]
 8007e8e:	e060      	b.n	8007f52 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	015a      	lsls	r2, r3, #5
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	4413      	add	r3, r2
 8007e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ea2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ea6:	d11f      	bne.n	8007ee8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	015a      	lsls	r2, r3, #5
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	4413      	add	r3, r2
 8007eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	0151      	lsls	r1, r2, #5
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	440a      	add	r2, r1
 8007ebe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ec2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007ec6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	015a      	lsls	r2, r3, #5
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	4413      	add	r3, r2
 8007ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68ba      	ldr	r2, [r7, #8]
 8007ed8:	0151      	lsls	r1, r2, #5
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	440a      	add	r2, r1
 8007ede:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ee2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ee6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	f003 030f 	and.w	r3, r3, #15
 8007ef8:	2101      	movs	r1, #1
 8007efa:	fa01 f303 	lsl.w	r3, r1, r3
 8007efe:	041b      	lsls	r3, r3, #16
 8007f00:	43db      	mvns	r3, r3
 8007f02:	68f9      	ldr	r1, [r7, #12]
 8007f04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f08:	4013      	ands	r3, r2
 8007f0a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f12:	69da      	ldr	r2, [r3, #28]
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	f003 030f 	and.w	r3, r3, #15
 8007f1c:	2101      	movs	r1, #1
 8007f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f22:	041b      	lsls	r3, r3, #16
 8007f24:	43db      	mvns	r3, r3
 8007f26:	68f9      	ldr	r1, [r7, #12]
 8007f28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f2c:	4013      	ands	r3, r2
 8007f2e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	015a      	lsls	r2, r3, #5
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	4413      	add	r3, r2
 8007f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	0159      	lsls	r1, r3, #5
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	440b      	add	r3, r1
 8007f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	4b05      	ldr	r3, [pc, #20]	; (8007f64 <USB_DeactivateEndpoint+0x1b4>)
 8007f4e:	4013      	ands	r3, r2
 8007f50:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3714      	adds	r7, #20
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr
 8007f60:	ec337800 	.word	0xec337800
 8007f64:	eff37800 	.word	0xeff37800

08007f68 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b08a      	sub	sp, #40	; 0x28
 8007f6c:	af02      	add	r7, sp, #8
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	4613      	mov	r3, r2
 8007f74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	785b      	ldrb	r3, [r3, #1]
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	f040 8163 	bne.w	8008250 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	699b      	ldr	r3, [r3, #24]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d132      	bne.n	8007ff8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	015a      	lsls	r2, r3, #5
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	4413      	add	r3, r2
 8007f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f9e:	691a      	ldr	r2, [r3, #16]
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	0159      	lsls	r1, r3, #5
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	440b      	add	r3, r1
 8007fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fac:	4619      	mov	r1, r3
 8007fae:	4ba5      	ldr	r3, [pc, #660]	; (8008244 <USB_EPStartXfer+0x2dc>)
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	015a      	lsls	r2, r3, #5
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	4413      	add	r3, r2
 8007fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	69ba      	ldr	r2, [r7, #24]
 8007fc4:	0151      	lsls	r1, r2, #5
 8007fc6:	69fa      	ldr	r2, [r7, #28]
 8007fc8:	440a      	add	r2, r1
 8007fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007fd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	015a      	lsls	r2, r3, #5
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	4413      	add	r3, r2
 8007fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe0:	691a      	ldr	r2, [r3, #16]
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	0159      	lsls	r1, r3, #5
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	440b      	add	r3, r1
 8007fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fee:	4619      	mov	r1, r3
 8007ff0:	4b95      	ldr	r3, [pc, #596]	; (8008248 <USB_EPStartXfer+0x2e0>)
 8007ff2:	4013      	ands	r3, r2
 8007ff4:	610b      	str	r3, [r1, #16]
 8007ff6:	e074      	b.n	80080e2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	015a      	lsls	r2, r3, #5
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	4413      	add	r3, r2
 8008000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008004:	691a      	ldr	r2, [r3, #16]
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	0159      	lsls	r1, r3, #5
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	440b      	add	r3, r1
 800800e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008012:	4619      	mov	r1, r3
 8008014:	4b8c      	ldr	r3, [pc, #560]	; (8008248 <USB_EPStartXfer+0x2e0>)
 8008016:	4013      	ands	r3, r2
 8008018:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	015a      	lsls	r2, r3, #5
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	4413      	add	r3, r2
 8008022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008026:	691a      	ldr	r2, [r3, #16]
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	0159      	lsls	r1, r3, #5
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	440b      	add	r3, r1
 8008030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008034:	4619      	mov	r1, r3
 8008036:	4b83      	ldr	r3, [pc, #524]	; (8008244 <USB_EPStartXfer+0x2dc>)
 8008038:	4013      	ands	r3, r2
 800803a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	015a      	lsls	r2, r3, #5
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	4413      	add	r3, r2
 8008044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008048:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	6999      	ldr	r1, [r3, #24]
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	440b      	add	r3, r1
 8008054:	1e59      	subs	r1, r3, #1
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	fbb1 f3f3 	udiv	r3, r1, r3
 800805e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008060:	4b7a      	ldr	r3, [pc, #488]	; (800824c <USB_EPStartXfer+0x2e4>)
 8008062:	400b      	ands	r3, r1
 8008064:	69b9      	ldr	r1, [r7, #24]
 8008066:	0148      	lsls	r0, r1, #5
 8008068:	69f9      	ldr	r1, [r7, #28]
 800806a:	4401      	add	r1, r0
 800806c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008070:	4313      	orrs	r3, r2
 8008072:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	015a      	lsls	r2, r3, #5
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	4413      	add	r3, r2
 800807c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008080:	691a      	ldr	r2, [r3, #16]
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	699b      	ldr	r3, [r3, #24]
 8008086:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800808a:	69b9      	ldr	r1, [r7, #24]
 800808c:	0148      	lsls	r0, r1, #5
 800808e:	69f9      	ldr	r1, [r7, #28]
 8008090:	4401      	add	r1, r0
 8008092:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008096:	4313      	orrs	r3, r2
 8008098:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	791b      	ldrb	r3, [r3, #4]
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d11f      	bne.n	80080e2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	015a      	lsls	r2, r3, #5
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	4413      	add	r3, r2
 80080aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	69ba      	ldr	r2, [r7, #24]
 80080b2:	0151      	lsls	r1, r2, #5
 80080b4:	69fa      	ldr	r2, [r7, #28]
 80080b6:	440a      	add	r2, r1
 80080b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080bc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80080c0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	015a      	lsls	r2, r3, #5
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	4413      	add	r3, r2
 80080ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ce:	691b      	ldr	r3, [r3, #16]
 80080d0:	69ba      	ldr	r2, [r7, #24]
 80080d2:	0151      	lsls	r1, r2, #5
 80080d4:	69fa      	ldr	r2, [r7, #28]
 80080d6:	440a      	add	r2, r1
 80080d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80080e0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80080e2:	79fb      	ldrb	r3, [r7, #7]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d14b      	bne.n	8008180 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	695b      	ldr	r3, [r3, #20]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d009      	beq.n	8008104 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80080f0:	69bb      	ldr	r3, [r7, #24]
 80080f2:	015a      	lsls	r2, r3, #5
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	4413      	add	r3, r2
 80080f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080fc:	461a      	mov	r2, r3
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	695b      	ldr	r3, [r3, #20]
 8008102:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	791b      	ldrb	r3, [r3, #4]
 8008108:	2b01      	cmp	r3, #1
 800810a:	d128      	bne.n	800815e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008118:	2b00      	cmp	r3, #0
 800811a:	d110      	bne.n	800813e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	015a      	lsls	r2, r3, #5
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	4413      	add	r3, r2
 8008124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	69ba      	ldr	r2, [r7, #24]
 800812c:	0151      	lsls	r1, r2, #5
 800812e:	69fa      	ldr	r2, [r7, #28]
 8008130:	440a      	add	r2, r1
 8008132:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008136:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800813a:	6013      	str	r3, [r2, #0]
 800813c:	e00f      	b.n	800815e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	015a      	lsls	r2, r3, #5
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	4413      	add	r3, r2
 8008146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	69ba      	ldr	r2, [r7, #24]
 800814e:	0151      	lsls	r1, r2, #5
 8008150:	69fa      	ldr	r2, [r7, #28]
 8008152:	440a      	add	r2, r1
 8008154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800815c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	015a      	lsls	r2, r3, #5
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	4413      	add	r3, r2
 8008166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	69ba      	ldr	r2, [r7, #24]
 800816e:	0151      	lsls	r1, r2, #5
 8008170:	69fa      	ldr	r2, [r7, #28]
 8008172:	440a      	add	r2, r1
 8008174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008178:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800817c:	6013      	str	r3, [r2, #0]
 800817e:	e137      	b.n	80083f0 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	015a      	lsls	r2, r3, #5
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	4413      	add	r3, r2
 8008188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	69ba      	ldr	r2, [r7, #24]
 8008190:	0151      	lsls	r1, r2, #5
 8008192:	69fa      	ldr	r2, [r7, #28]
 8008194:	440a      	add	r2, r1
 8008196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800819a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800819e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	791b      	ldrb	r3, [r3, #4]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d015      	beq.n	80081d4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	699b      	ldr	r3, [r3, #24]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f000 811f 	beq.w	80083f0 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	f003 030f 	and.w	r3, r3, #15
 80081c2:	2101      	movs	r1, #1
 80081c4:	fa01 f303 	lsl.w	r3, r1, r3
 80081c8:	69f9      	ldr	r1, [r7, #28]
 80081ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081ce:	4313      	orrs	r3, r2
 80081d0:	634b      	str	r3, [r1, #52]	; 0x34
 80081d2:	e10d      	b.n	80083f0 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d110      	bne.n	8008206 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	015a      	lsls	r2, r3, #5
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	4413      	add	r3, r2
 80081ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	69ba      	ldr	r2, [r7, #24]
 80081f4:	0151      	lsls	r1, r2, #5
 80081f6:	69fa      	ldr	r2, [r7, #28]
 80081f8:	440a      	add	r2, r1
 80081fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008202:	6013      	str	r3, [r2, #0]
 8008204:	e00f      	b.n	8008226 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	015a      	lsls	r2, r3, #5
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	4413      	add	r3, r2
 800820e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	69ba      	ldr	r2, [r7, #24]
 8008216:	0151      	lsls	r1, r2, #5
 8008218:	69fa      	ldr	r2, [r7, #28]
 800821a:	440a      	add	r2, r1
 800821c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008224:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	6919      	ldr	r1, [r3, #16]
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	781a      	ldrb	r2, [r3, #0]
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	699b      	ldr	r3, [r3, #24]
 8008232:	b298      	uxth	r0, r3
 8008234:	79fb      	ldrb	r3, [r7, #7]
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	4603      	mov	r3, r0
 800823a:	68f8      	ldr	r0, [r7, #12]
 800823c:	f000 faea 	bl	8008814 <USB_WritePacket>
 8008240:	e0d6      	b.n	80083f0 <USB_EPStartXfer+0x488>
 8008242:	bf00      	nop
 8008244:	e007ffff 	.word	0xe007ffff
 8008248:	fff80000 	.word	0xfff80000
 800824c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	015a      	lsls	r2, r3, #5
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	4413      	add	r3, r2
 8008258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800825c:	691a      	ldr	r2, [r3, #16]
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	0159      	lsls	r1, r3, #5
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	440b      	add	r3, r1
 8008266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800826a:	4619      	mov	r1, r3
 800826c:	4b63      	ldr	r3, [pc, #396]	; (80083fc <USB_EPStartXfer+0x494>)
 800826e:	4013      	ands	r3, r2
 8008270:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	015a      	lsls	r2, r3, #5
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	4413      	add	r3, r2
 800827a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800827e:	691a      	ldr	r2, [r3, #16]
 8008280:	69bb      	ldr	r3, [r7, #24]
 8008282:	0159      	lsls	r1, r3, #5
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	440b      	add	r3, r1
 8008288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800828c:	4619      	mov	r1, r3
 800828e:	4b5c      	ldr	r3, [pc, #368]	; (8008400 <USB_EPStartXfer+0x498>)
 8008290:	4013      	ands	r3, r2
 8008292:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	699b      	ldr	r3, [r3, #24]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d123      	bne.n	80082e4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	015a      	lsls	r2, r3, #5
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	4413      	add	r3, r2
 80082a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082a8:	691a      	ldr	r2, [r3, #16]
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082b2:	69b9      	ldr	r1, [r7, #24]
 80082b4:	0148      	lsls	r0, r1, #5
 80082b6:	69f9      	ldr	r1, [r7, #28]
 80082b8:	4401      	add	r1, r0
 80082ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80082be:	4313      	orrs	r3, r2
 80082c0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	015a      	lsls	r2, r3, #5
 80082c6:	69fb      	ldr	r3, [r7, #28]
 80082c8:	4413      	add	r3, r2
 80082ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	69ba      	ldr	r2, [r7, #24]
 80082d2:	0151      	lsls	r1, r2, #5
 80082d4:	69fa      	ldr	r2, [r7, #28]
 80082d6:	440a      	add	r2, r1
 80082d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80082e0:	6113      	str	r3, [r2, #16]
 80082e2:	e037      	b.n	8008354 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	699a      	ldr	r2, [r3, #24]
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	4413      	add	r3, r2
 80082ee:	1e5a      	subs	r2, r3, #1
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80082f8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	68db      	ldr	r3, [r3, #12]
 80082fe:	8afa      	ldrh	r2, [r7, #22]
 8008300:	fb03 f202 	mul.w	r2, r3, r2
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	015a      	lsls	r2, r3, #5
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	4413      	add	r3, r2
 8008310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008314:	691a      	ldr	r2, [r3, #16]
 8008316:	8afb      	ldrh	r3, [r7, #22]
 8008318:	04d9      	lsls	r1, r3, #19
 800831a:	4b3a      	ldr	r3, [pc, #232]	; (8008404 <USB_EPStartXfer+0x49c>)
 800831c:	400b      	ands	r3, r1
 800831e:	69b9      	ldr	r1, [r7, #24]
 8008320:	0148      	lsls	r0, r1, #5
 8008322:	69f9      	ldr	r1, [r7, #28]
 8008324:	4401      	add	r1, r0
 8008326:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800832a:	4313      	orrs	r3, r2
 800832c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	015a      	lsls	r2, r3, #5
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	4413      	add	r3, r2
 8008336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800833a:	691a      	ldr	r2, [r3, #16]
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	69db      	ldr	r3, [r3, #28]
 8008340:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008344:	69b9      	ldr	r1, [r7, #24]
 8008346:	0148      	lsls	r0, r1, #5
 8008348:	69f9      	ldr	r1, [r7, #28]
 800834a:	4401      	add	r1, r0
 800834c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008350:	4313      	orrs	r3, r2
 8008352:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008354:	79fb      	ldrb	r3, [r7, #7]
 8008356:	2b01      	cmp	r3, #1
 8008358:	d10d      	bne.n	8008376 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d009      	beq.n	8008376 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	6919      	ldr	r1, [r3, #16]
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	015a      	lsls	r2, r3, #5
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	4413      	add	r3, r2
 800836e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008372:	460a      	mov	r2, r1
 8008374:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	791b      	ldrb	r3, [r3, #4]
 800837a:	2b01      	cmp	r3, #1
 800837c:	d128      	bne.n	80083d0 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800838a:	2b00      	cmp	r3, #0
 800838c:	d110      	bne.n	80083b0 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	015a      	lsls	r2, r3, #5
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	4413      	add	r3, r2
 8008396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	69ba      	ldr	r2, [r7, #24]
 800839e:	0151      	lsls	r1, r2, #5
 80083a0:	69fa      	ldr	r2, [r7, #28]
 80083a2:	440a      	add	r2, r1
 80083a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80083ac:	6013      	str	r3, [r2, #0]
 80083ae:	e00f      	b.n	80083d0 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	015a      	lsls	r2, r3, #5
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	4413      	add	r3, r2
 80083b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	69ba      	ldr	r2, [r7, #24]
 80083c0:	0151      	lsls	r1, r2, #5
 80083c2:	69fa      	ldr	r2, [r7, #28]
 80083c4:	440a      	add	r2, r1
 80083c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	015a      	lsls	r2, r3, #5
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	4413      	add	r3, r2
 80083d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	69ba      	ldr	r2, [r7, #24]
 80083e0:	0151      	lsls	r1, r2, #5
 80083e2:	69fa      	ldr	r2, [r7, #28]
 80083e4:	440a      	add	r2, r1
 80083e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80083ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3720      	adds	r7, #32
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	fff80000 	.word	0xfff80000
 8008400:	e007ffff 	.word	0xe007ffff
 8008404:	1ff80000 	.word	0x1ff80000

08008408 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008408:	b480      	push	{r7}
 800840a:	b087      	sub	sp, #28
 800840c:	af00      	add	r7, sp, #0
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	60b9      	str	r1, [r7, #8]
 8008412:	4613      	mov	r3, r2
 8008414:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	785b      	ldrb	r3, [r3, #1]
 8008424:	2b01      	cmp	r3, #1
 8008426:	f040 80ce 	bne.w	80085c6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	699b      	ldr	r3, [r3, #24]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d132      	bne.n	8008498 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	015a      	lsls	r2, r3, #5
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	4413      	add	r3, r2
 800843a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800843e:	691a      	ldr	r2, [r3, #16]
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	0159      	lsls	r1, r3, #5
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	440b      	add	r3, r1
 8008448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800844c:	4619      	mov	r1, r3
 800844e:	4b9a      	ldr	r3, [pc, #616]	; (80086b8 <USB_EP0StartXfer+0x2b0>)
 8008450:	4013      	ands	r3, r2
 8008452:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	015a      	lsls	r2, r3, #5
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	4413      	add	r3, r2
 800845c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	693a      	ldr	r2, [r7, #16]
 8008464:	0151      	lsls	r1, r2, #5
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	440a      	add	r2, r1
 800846a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800846e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008472:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	015a      	lsls	r2, r3, #5
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	4413      	add	r3, r2
 800847c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008480:	691a      	ldr	r2, [r3, #16]
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	0159      	lsls	r1, r3, #5
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	440b      	add	r3, r1
 800848a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800848e:	4619      	mov	r1, r3
 8008490:	4b8a      	ldr	r3, [pc, #552]	; (80086bc <USB_EP0StartXfer+0x2b4>)
 8008492:	4013      	ands	r3, r2
 8008494:	610b      	str	r3, [r1, #16]
 8008496:	e04e      	b.n	8008536 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	015a      	lsls	r2, r3, #5
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	4413      	add	r3, r2
 80084a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084a4:	691a      	ldr	r2, [r3, #16]
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	0159      	lsls	r1, r3, #5
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	440b      	add	r3, r1
 80084ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084b2:	4619      	mov	r1, r3
 80084b4:	4b81      	ldr	r3, [pc, #516]	; (80086bc <USB_EP0StartXfer+0x2b4>)
 80084b6:	4013      	ands	r3, r2
 80084b8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	015a      	lsls	r2, r3, #5
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	4413      	add	r3, r2
 80084c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c6:	691a      	ldr	r2, [r3, #16]
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	0159      	lsls	r1, r3, #5
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	440b      	add	r3, r1
 80084d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084d4:	4619      	mov	r1, r3
 80084d6:	4b78      	ldr	r3, [pc, #480]	; (80086b8 <USB_EP0StartXfer+0x2b0>)
 80084d8:	4013      	ands	r3, r2
 80084da:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	699a      	ldr	r2, [r3, #24]
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d903      	bls.n	80084f0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	68da      	ldr	r2, [r3, #12]
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	015a      	lsls	r2, r3, #5
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	4413      	add	r3, r2
 80084f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	693a      	ldr	r2, [r7, #16]
 8008500:	0151      	lsls	r1, r2, #5
 8008502:	697a      	ldr	r2, [r7, #20]
 8008504:	440a      	add	r2, r1
 8008506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800850a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800850e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	015a      	lsls	r2, r3, #5
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	4413      	add	r3, r2
 8008518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800851c:	691a      	ldr	r2, [r3, #16]
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	699b      	ldr	r3, [r3, #24]
 8008522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008526:	6939      	ldr	r1, [r7, #16]
 8008528:	0148      	lsls	r0, r1, #5
 800852a:	6979      	ldr	r1, [r7, #20]
 800852c:	4401      	add	r1, r0
 800852e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008532:	4313      	orrs	r3, r2
 8008534:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008536:	79fb      	ldrb	r3, [r7, #7]
 8008538:	2b01      	cmp	r3, #1
 800853a:	d11e      	bne.n	800857a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	695b      	ldr	r3, [r3, #20]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d009      	beq.n	8008558 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	015a      	lsls	r2, r3, #5
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	4413      	add	r3, r2
 800854c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008550:	461a      	mov	r2, r3
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	015a      	lsls	r2, r3, #5
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	4413      	add	r3, r2
 8008560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	693a      	ldr	r2, [r7, #16]
 8008568:	0151      	lsls	r1, r2, #5
 800856a:	697a      	ldr	r2, [r7, #20]
 800856c:	440a      	add	r2, r1
 800856e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008572:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008576:	6013      	str	r3, [r2, #0]
 8008578:	e097      	b.n	80086aa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	015a      	lsls	r2, r3, #5
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	4413      	add	r3, r2
 8008582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	693a      	ldr	r2, [r7, #16]
 800858a:	0151      	lsls	r1, r2, #5
 800858c:	697a      	ldr	r2, [r7, #20]
 800858e:	440a      	add	r2, r1
 8008590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008594:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008598:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	f000 8083 	beq.w	80086aa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	f003 030f 	and.w	r3, r3, #15
 80085b4:	2101      	movs	r1, #1
 80085b6:	fa01 f303 	lsl.w	r3, r1, r3
 80085ba:	6979      	ldr	r1, [r7, #20]
 80085bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085c0:	4313      	orrs	r3, r2
 80085c2:	634b      	str	r3, [r1, #52]	; 0x34
 80085c4:	e071      	b.n	80086aa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	015a      	lsls	r2, r3, #5
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	4413      	add	r3, r2
 80085ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085d2:	691a      	ldr	r2, [r3, #16]
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	0159      	lsls	r1, r3, #5
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	440b      	add	r3, r1
 80085dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085e0:	4619      	mov	r1, r3
 80085e2:	4b36      	ldr	r3, [pc, #216]	; (80086bc <USB_EP0StartXfer+0x2b4>)
 80085e4:	4013      	ands	r3, r2
 80085e6:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	015a      	lsls	r2, r3, #5
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	4413      	add	r3, r2
 80085f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085f4:	691a      	ldr	r2, [r3, #16]
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	0159      	lsls	r1, r3, #5
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	440b      	add	r3, r1
 80085fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008602:	4619      	mov	r1, r3
 8008604:	4b2c      	ldr	r3, [pc, #176]	; (80086b8 <USB_EP0StartXfer+0x2b0>)
 8008606:	4013      	ands	r3, r2
 8008608:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	699b      	ldr	r3, [r3, #24]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d003      	beq.n	800861a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	68da      	ldr	r2, [r3, #12]
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	68da      	ldr	r2, [r3, #12]
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	015a      	lsls	r2, r3, #5
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	4413      	add	r3, r2
 800862a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	693a      	ldr	r2, [r7, #16]
 8008632:	0151      	lsls	r1, r2, #5
 8008634:	697a      	ldr	r2, [r7, #20]
 8008636:	440a      	add	r2, r1
 8008638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800863c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008640:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	015a      	lsls	r2, r3, #5
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	4413      	add	r3, r2
 800864a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800864e:	691a      	ldr	r2, [r3, #16]
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	69db      	ldr	r3, [r3, #28]
 8008654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008658:	6939      	ldr	r1, [r7, #16]
 800865a:	0148      	lsls	r0, r1, #5
 800865c:	6979      	ldr	r1, [r7, #20]
 800865e:	4401      	add	r1, r0
 8008660:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008664:	4313      	orrs	r3, r2
 8008666:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008668:	79fb      	ldrb	r3, [r7, #7]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d10d      	bne.n	800868a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d009      	beq.n	800868a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	6919      	ldr	r1, [r3, #16]
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	015a      	lsls	r2, r3, #5
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	4413      	add	r3, r2
 8008682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008686:	460a      	mov	r2, r1
 8008688:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	015a      	lsls	r2, r3, #5
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	4413      	add	r3, r2
 8008692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	693a      	ldr	r2, [r7, #16]
 800869a:	0151      	lsls	r1, r2, #5
 800869c:	697a      	ldr	r2, [r7, #20]
 800869e:	440a      	add	r2, r1
 80086a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	371c      	adds	r7, #28
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr
 80086b8:	e007ffff 	.word	0xe007ffff
 80086bc:	fff80000 	.word	0xfff80000

080086c0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b087      	sub	sp, #28
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80086ca:	2300      	movs	r3, #0
 80086cc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80086ce:	2300      	movs	r3, #0
 80086d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	785b      	ldrb	r3, [r3, #1]
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d14a      	bne.n	8008774 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	015a      	lsls	r2, r3, #5
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	4413      	add	r3, r2
 80086e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086f6:	f040 8086 	bne.w	8008806 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	015a      	lsls	r2, r3, #5
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	4413      	add	r3, r2
 8008704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	683a      	ldr	r2, [r7, #0]
 800870c:	7812      	ldrb	r2, [r2, #0]
 800870e:	0151      	lsls	r1, r2, #5
 8008710:	693a      	ldr	r2, [r7, #16]
 8008712:	440a      	add	r2, r1
 8008714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008718:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800871c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	015a      	lsls	r2, r3, #5
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	4413      	add	r3, r2
 8008728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	683a      	ldr	r2, [r7, #0]
 8008730:	7812      	ldrb	r2, [r2, #0]
 8008732:	0151      	lsls	r1, r2, #5
 8008734:	693a      	ldr	r2, [r7, #16]
 8008736:	440a      	add	r2, r1
 8008738:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800873c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008740:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	3301      	adds	r3, #1
 8008746:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f242 7210 	movw	r2, #10000	; 0x2710
 800874e:	4293      	cmp	r3, r2
 8008750:	d902      	bls.n	8008758 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	75fb      	strb	r3, [r7, #23]
          break;
 8008756:	e056      	b.n	8008806 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	015a      	lsls	r2, r3, #5
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	4413      	add	r3, r2
 8008762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800876c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008770:	d0e7      	beq.n	8008742 <USB_EPStopXfer+0x82>
 8008772:	e048      	b.n	8008806 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	015a      	lsls	r2, r3, #5
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	4413      	add	r3, r2
 800877e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008788:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800878c:	d13b      	bne.n	8008806 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	015a      	lsls	r2, r3, #5
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	4413      	add	r3, r2
 8008798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	683a      	ldr	r2, [r7, #0]
 80087a0:	7812      	ldrb	r2, [r2, #0]
 80087a2:	0151      	lsls	r1, r2, #5
 80087a4:	693a      	ldr	r2, [r7, #16]
 80087a6:	440a      	add	r2, r1
 80087a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80087b0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	015a      	lsls	r2, r3, #5
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	4413      	add	r3, r2
 80087bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	683a      	ldr	r2, [r7, #0]
 80087c4:	7812      	ldrb	r2, [r2, #0]
 80087c6:	0151      	lsls	r1, r2, #5
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	440a      	add	r2, r1
 80087cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	3301      	adds	r3, #1
 80087da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f242 7210 	movw	r2, #10000	; 0x2710
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d902      	bls.n	80087ec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	75fb      	strb	r3, [r7, #23]
          break;
 80087ea:	e00c      	b.n	8008806 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	015a      	lsls	r2, r3, #5
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	4413      	add	r3, r2
 80087f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008800:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008804:	d0e7      	beq.n	80087d6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008806:	7dfb      	ldrb	r3, [r7, #23]
}
 8008808:	4618      	mov	r0, r3
 800880a:	371c      	adds	r7, #28
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008814:	b480      	push	{r7}
 8008816:	b089      	sub	sp, #36	; 0x24
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	4611      	mov	r1, r2
 8008820:	461a      	mov	r2, r3
 8008822:	460b      	mov	r3, r1
 8008824:	71fb      	strb	r3, [r7, #7]
 8008826:	4613      	mov	r3, r2
 8008828:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008832:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008836:	2b00      	cmp	r3, #0
 8008838:	d123      	bne.n	8008882 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800883a:	88bb      	ldrh	r3, [r7, #4]
 800883c:	3303      	adds	r3, #3
 800883e:	089b      	lsrs	r3, r3, #2
 8008840:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008842:	2300      	movs	r3, #0
 8008844:	61bb      	str	r3, [r7, #24]
 8008846:	e018      	b.n	800887a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008848:	79fb      	ldrb	r3, [r7, #7]
 800884a:	031a      	lsls	r2, r3, #12
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	4413      	add	r3, r2
 8008850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008854:	461a      	mov	r2, r3
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	3301      	adds	r3, #1
 8008860:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	3301      	adds	r3, #1
 8008866:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	3301      	adds	r3, #1
 800886c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	3301      	adds	r3, #1
 8008872:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	3301      	adds	r3, #1
 8008878:	61bb      	str	r3, [r7, #24]
 800887a:	69ba      	ldr	r2, [r7, #24]
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	429a      	cmp	r2, r3
 8008880:	d3e2      	bcc.n	8008848 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3724      	adds	r7, #36	; 0x24
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008890:	b480      	push	{r7}
 8008892:	b08b      	sub	sp, #44	; 0x2c
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	4613      	mov	r3, r2
 800889c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80088a6:	88fb      	ldrh	r3, [r7, #6]
 80088a8:	089b      	lsrs	r3, r3, #2
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80088ae:	88fb      	ldrh	r3, [r7, #6]
 80088b0:	f003 0303 	and.w	r3, r3, #3
 80088b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80088b6:	2300      	movs	r3, #0
 80088b8:	623b      	str	r3, [r7, #32]
 80088ba:	e014      	b.n	80088e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80088c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ca:	3301      	adds	r3, #1
 80088cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80088ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d0:	3301      	adds	r3, #1
 80088d2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80088d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d6:	3301      	adds	r3, #1
 80088d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	3301      	adds	r3, #1
 80088de:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80088e0:	6a3b      	ldr	r3, [r7, #32]
 80088e2:	3301      	adds	r3, #1
 80088e4:	623b      	str	r3, [r7, #32]
 80088e6:	6a3a      	ldr	r2, [r7, #32]
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d3e6      	bcc.n	80088bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80088ee:	8bfb      	ldrh	r3, [r7, #30]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d01e      	beq.n	8008932 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80088f4:	2300      	movs	r3, #0
 80088f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088fe:	461a      	mov	r2, r3
 8008900:	f107 0310 	add.w	r3, r7, #16
 8008904:	6812      	ldr	r2, [r2, #0]
 8008906:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008908:	693a      	ldr	r2, [r7, #16]
 800890a:	6a3b      	ldr	r3, [r7, #32]
 800890c:	b2db      	uxtb	r3, r3
 800890e:	00db      	lsls	r3, r3, #3
 8008910:	fa22 f303 	lsr.w	r3, r2, r3
 8008914:	b2da      	uxtb	r2, r3
 8008916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008918:	701a      	strb	r2, [r3, #0]
      i++;
 800891a:	6a3b      	ldr	r3, [r7, #32]
 800891c:	3301      	adds	r3, #1
 800891e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008922:	3301      	adds	r3, #1
 8008924:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008926:	8bfb      	ldrh	r3, [r7, #30]
 8008928:	3b01      	subs	r3, #1
 800892a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800892c:	8bfb      	ldrh	r3, [r7, #30]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1ea      	bne.n	8008908 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008934:	4618      	mov	r0, r3
 8008936:	372c      	adds	r7, #44	; 0x2c
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008940:	b480      	push	{r7}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	785b      	ldrb	r3, [r3, #1]
 8008958:	2b01      	cmp	r3, #1
 800895a:	d12c      	bne.n	80089b6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	015a      	lsls	r2, r3, #5
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	4413      	add	r3, r2
 8008964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	db12      	blt.n	8008994 <USB_EPSetStall+0x54>
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00f      	beq.n	8008994 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	015a      	lsls	r2, r3, #5
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	4413      	add	r3, r2
 800897c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	68ba      	ldr	r2, [r7, #8]
 8008984:	0151      	lsls	r1, r2, #5
 8008986:	68fa      	ldr	r2, [r7, #12]
 8008988:	440a      	add	r2, r1
 800898a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800898e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008992:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	015a      	lsls	r2, r3, #5
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	4413      	add	r3, r2
 800899c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	68ba      	ldr	r2, [r7, #8]
 80089a4:	0151      	lsls	r1, r2, #5
 80089a6:	68fa      	ldr	r2, [r7, #12]
 80089a8:	440a      	add	r2, r1
 80089aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80089b2:	6013      	str	r3, [r2, #0]
 80089b4:	e02b      	b.n	8008a0e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	015a      	lsls	r2, r3, #5
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	4413      	add	r3, r2
 80089be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	db12      	blt.n	80089ee <USB_EPSetStall+0xae>
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00f      	beq.n	80089ee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	015a      	lsls	r2, r3, #5
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	4413      	add	r3, r2
 80089d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	68ba      	ldr	r2, [r7, #8]
 80089de:	0151      	lsls	r1, r2, #5
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	440a      	add	r2, r1
 80089e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80089ec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	015a      	lsls	r2, r3, #5
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	4413      	add	r3, r2
 80089f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	68ba      	ldr	r2, [r7, #8]
 80089fe:	0151      	lsls	r1, r2, #5
 8008a00:	68fa      	ldr	r2, [r7, #12]
 8008a02:	440a      	add	r2, r1
 8008a04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008a0c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3714      	adds	r7, #20
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b085      	sub	sp, #20
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	785b      	ldrb	r3, [r3, #1]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d128      	bne.n	8008a8a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	015a      	lsls	r2, r3, #5
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	4413      	add	r3, r2
 8008a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	68ba      	ldr	r2, [r7, #8]
 8008a48:	0151      	lsls	r1, r2, #5
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	440a      	add	r2, r1
 8008a4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a56:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	791b      	ldrb	r3, [r3, #4]
 8008a5c:	2b03      	cmp	r3, #3
 8008a5e:	d003      	beq.n	8008a68 <USB_EPClearStall+0x4c>
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	791b      	ldrb	r3, [r3, #4]
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d138      	bne.n	8008ada <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	015a      	lsls	r2, r3, #5
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	4413      	add	r3, r2
 8008a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	68ba      	ldr	r2, [r7, #8]
 8008a78:	0151      	lsls	r1, r2, #5
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	440a      	add	r2, r1
 8008a7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a86:	6013      	str	r3, [r2, #0]
 8008a88:	e027      	b.n	8008ada <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	015a      	lsls	r2, r3, #5
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	4413      	add	r3, r2
 8008a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	68ba      	ldr	r2, [r7, #8]
 8008a9a:	0151      	lsls	r1, r2, #5
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	440a      	add	r2, r1
 8008aa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008aa4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008aa8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	791b      	ldrb	r3, [r3, #4]
 8008aae:	2b03      	cmp	r3, #3
 8008ab0:	d003      	beq.n	8008aba <USB_EPClearStall+0x9e>
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	791b      	ldrb	r3, [r3, #4]
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d10f      	bne.n	8008ada <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	015a      	lsls	r2, r3, #5
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	68ba      	ldr	r2, [r7, #8]
 8008aca:	0151      	lsls	r1, r2, #5
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	440a      	add	r2, r1
 8008ad0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ad8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3714      	adds	r7, #20
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	460b      	mov	r3, r1
 8008af2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b06:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008b0a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	78fb      	ldrb	r3, [r7, #3]
 8008b16:	011b      	lsls	r3, r3, #4
 8008b18:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008b1c:	68f9      	ldr	r1, [r7, #12]
 8008b1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b22:	4313      	orrs	r3, r2
 8008b24:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3714      	adds	r7, #20
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b4e:	f023 0303 	bic.w	r3, r3, #3
 8008b52:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b62:	f023 0302 	bic.w	r3, r3, #2
 8008b66:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008b68:	2300      	movs	r3, #0
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3714      	adds	r7, #20
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr

08008b76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008b76:	b480      	push	{r7}
 8008b78:	b085      	sub	sp, #20
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b90:	f023 0303 	bic.w	r3, r3, #3
 8008b94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	68fa      	ldr	r2, [r7, #12]
 8008ba0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ba4:	f043 0302 	orr.w	r3, r3, #2
 8008ba8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3714      	adds	r7, #20
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b085      	sub	sp, #20
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	695b      	ldr	r3, [r3, #20]
 8008bc4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	699b      	ldr	r3, [r3, #24]
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	4013      	ands	r3, r2
 8008bce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3714      	adds	r7, #20
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr

08008bde <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008bde:	b480      	push	{r7}
 8008be0:	b085      	sub	sp, #20
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bf0:	699b      	ldr	r3, [r3, #24]
 8008bf2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bfa:	69db      	ldr	r3, [r3, #28]
 8008bfc:	68ba      	ldr	r2, [r7, #8]
 8008bfe:	4013      	ands	r3, r2
 8008c00:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	0c1b      	lsrs	r3, r3, #16
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3714      	adds	r7, #20
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr

08008c12 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c12:	b480      	push	{r7}
 8008c14:	b085      	sub	sp, #20
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c24:	699b      	ldr	r3, [r3, #24]
 8008c26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c2e:	69db      	ldr	r3, [r3, #28]
 8008c30:	68ba      	ldr	r2, [r7, #8]
 8008c32:	4013      	ands	r3, r2
 8008c34:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	b29b      	uxth	r3, r3
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3714      	adds	r7, #20
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr

08008c46 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008c46:	b480      	push	{r7}
 8008c48:	b085      	sub	sp, #20
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
 8008c4e:	460b      	mov	r3, r1
 8008c50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008c56:	78fb      	ldrb	r3, [r7, #3]
 8008c58:	015a      	lsls	r2, r3, #5
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c6c:	695b      	ldr	r3, [r3, #20]
 8008c6e:	68ba      	ldr	r2, [r7, #8]
 8008c70:	4013      	ands	r3, r2
 8008c72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008c74:	68bb      	ldr	r3, [r7, #8]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3714      	adds	r7, #20
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr

08008c82 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008c82:	b480      	push	{r7}
 8008c84:	b087      	sub	sp, #28
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ca4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008ca6:	78fb      	ldrb	r3, [r7, #3]
 8008ca8:	f003 030f 	and.w	r3, r3, #15
 8008cac:	68fa      	ldr	r2, [r7, #12]
 8008cae:	fa22 f303 	lsr.w	r3, r2, r3
 8008cb2:	01db      	lsls	r3, r3, #7
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	693a      	ldr	r2, [r7, #16]
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008cbc:	78fb      	ldrb	r3, [r7, #3]
 8008cbe:	015a      	lsls	r2, r3, #5
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	4413      	add	r3, r2
 8008cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	693a      	ldr	r2, [r7, #16]
 8008ccc:	4013      	ands	r3, r2
 8008cce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008cd0:	68bb      	ldr	r3, [r7, #8]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	371c      	adds	r7, #28
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr

08008cde <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008cde:	b480      	push	{r7}
 8008ce0:	b083      	sub	sp, #12
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	695b      	ldr	r3, [r3, #20]
 8008cea:	f003 0301 	and.w	r3, r3, #1
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	370c      	adds	r7, #12
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr
	...

08008cfc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d16:	4619      	mov	r1, r3
 8008d18:	4b09      	ldr	r3, [pc, #36]	; (8008d40 <USB_ActivateSetup+0x44>)
 8008d1a:	4013      	ands	r3, r2
 8008d1c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d32:	2300      	movs	r3, #0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3714      	adds	r7, #20
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr
 8008d40:	fffff800 	.word	0xfffff800

08008d44 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b087      	sub	sp, #28
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	607a      	str	r2, [r7, #4]
 8008d50:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	333c      	adds	r3, #60	; 0x3c
 8008d5a:	3304      	adds	r3, #4
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	4a26      	ldr	r2, [pc, #152]	; (8008dfc <USB_EP0_OutStart+0xb8>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d90a      	bls.n	8008d7e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d78:	d101      	bne.n	8008d7e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	e037      	b.n	8008dee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d84:	461a      	mov	r2, r3
 8008d86:	2300      	movs	r3, #0
 8008d88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	697a      	ldr	r2, [r7, #20]
 8008da8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dac:	f043 0318 	orr.w	r3, r3, #24
 8008db0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008db8:	691b      	ldr	r3, [r3, #16]
 8008dba:	697a      	ldr	r2, [r7, #20]
 8008dbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dc0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008dc4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008dc6:	7afb      	ldrb	r3, [r7, #11]
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d10f      	bne.n	8008dec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	697a      	ldr	r2, [r7, #20]
 8008de2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008de6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008dea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	371c      	adds	r7, #28
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	4f54300a 	.word	0x4f54300a

08008e00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b085      	sub	sp, #20
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	4a13      	ldr	r2, [pc, #76]	; (8008e64 <USB_CoreReset+0x64>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d901      	bls.n	8008e1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008e1a:	2303      	movs	r3, #3
 8008e1c:	e01b      	b.n	8008e56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	daf2      	bge.n	8008e0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008e26:	2300      	movs	r3, #0
 8008e28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	691b      	ldr	r3, [r3, #16]
 8008e2e:	f043 0201 	orr.w	r2, r3, #1
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	4a09      	ldr	r2, [pc, #36]	; (8008e64 <USB_CoreReset+0x64>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d901      	bls.n	8008e48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008e44:	2303      	movs	r3, #3
 8008e46:	e006      	b.n	8008e56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	f003 0301 	and.w	r3, r3, #1
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d0f0      	beq.n	8008e36 <USB_CoreReset+0x36>

  return HAL_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3714      	adds	r7, #20
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	00030d40 	.word	0x00030d40

08008e68 <HiL_Init_MSGQ>:
#include "HiL_MSGQ.h"

extern osMessageQueueId_t USB_MSGQ_Rx;
//extern osMessageQueueId_t USB_MSGQ_Tx;

uint8_t HiL_Init_MSGQ (void) {
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	af00      	add	r7, sp, #0

	USB_MSGQ_Rx = osMessageQueueNew(HiL_USB_MSQG_len, sizeof(MSGQ_obj), NULL);
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	2104      	movs	r1, #4
 8008e70:	200a      	movs	r0, #10
 8008e72:	f002 fbbf 	bl	800b5f4 <osMessageQueueNew>
 8008e76:	4603      	mov	r3, r0
 8008e78:	4a05      	ldr	r2, [pc, #20]	; (8008e90 <HiL_Init_MSGQ+0x28>)
 8008e7a:	6013      	str	r3, [r2, #0]
  if (USB_MSGQ_Rx == NULL) {
 8008e7c:	4b04      	ldr	r3, [pc, #16]	; (8008e90 <HiL_Init_MSGQ+0x28>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d101      	bne.n	8008e88 <HiL_Init_MSGQ+0x20>
	  return -1;
 8008e84:	23ff      	movs	r3, #255	; 0xff
 8008e86:	e000      	b.n	8008e8a <HiL_Init_MSGQ+0x22>
  }
//  USB_MSGQ_Tx = osMessageQueueNew(10, sizeof(MSGQ_obj), NULL);
//    if (USB_MSGQ_Tx == NULL) {
//  	  return -1;
//    }
  return 0;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	200005fc 	.word	0x200005fc

08008e94 <HAL_TIM_IC_CaptureCallback>:
uint32_t Cnt_full = 0;
uint32_t Cnt_high = 0;															// Variables for HAL_TIM_IC_CaptureCallback()
uint8_t Duty = 0;


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {						// Timer callback code on interrupts from rising and falling edges
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a10      	ldr	r2, [pc, #64]	; (8008ee4 <HAL_TIM_IC_CaptureCallback+0x50>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d11a      	bne.n	8008edc <HAL_TIM_IC_CaptureCallback+0x48>
		// Used for duty cycle measurements

		//#define TIMER_CLOCK_FREQ 96000000 // APB2 Timer Clock. With 96 MHz, 16 bit res -> Reload/wraparound freq @ 732 Hz
																				// -> Tested lowest measureable pwm freq is 1.7 kHz

		Cnt_full = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) + 1;
 8008ea6:	2100      	movs	r1, #0
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f7fd fafd 	bl	80064a8 <HAL_TIM_ReadCapturedValue>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	4a0d      	ldr	r2, [pc, #52]	; (8008ee8 <HAL_TIM_IC_CaptureCallback+0x54>)
 8008eb4:	6013      	str	r3, [r2, #0]
		Cnt_high = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8008eb6:	2104      	movs	r1, #4
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f7fd faf5 	bl	80064a8 <HAL_TIM_ReadCapturedValue>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	4a0a      	ldr	r2, [pc, #40]	; (8008eec <HAL_TIM_IC_CaptureCallback+0x58>)
 8008ec2:	6013      	str	r3, [r2, #0]

		Duty =  100 * Cnt_high / Cnt_full;
 8008ec4:	4b09      	ldr	r3, [pc, #36]	; (8008eec <HAL_TIM_IC_CaptureCallback+0x58>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2264      	movs	r2, #100	; 0x64
 8008eca:	fb03 f202 	mul.w	r2, r3, r2
 8008ece:	4b06      	ldr	r3, [pc, #24]	; (8008ee8 <HAL_TIM_IC_CaptureCallback+0x54>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ed6:	b2da      	uxtb	r2, r3
 8008ed8:	4b05      	ldr	r3, [pc, #20]	; (8008ef0 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8008eda:	701a      	strb	r2, [r3, #0]
	}
}
 8008edc:	bf00      	nop
 8008ede:	3708      	adds	r7, #8
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	40010000 	.word	0x40010000
 8008ee8:	2000065c 	.word	0x2000065c
 8008eec:	20000660 	.word	0x20000660
 8008ef0:	20000664 	.word	0x20000664

08008ef4 <HiL_controller_copy_array>:

static uint8_t recieved_data[HiL_MSGQ_Buf_arr_len];
	   uint8_t controller_reply[2];

void HiL_controller_copy_array(uint8_t* to_be_copied)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b085      	sub	sp, #20
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i<HiL_MSGQ_Buf_arr_len; i++)
 8008efc:	2300      	movs	r3, #0
 8008efe:	73fb      	strb	r3, [r7, #15]
 8008f00:	e009      	b.n	8008f16 <HiL_controller_copy_array+0x22>
	{
		recieved_data[i] = to_be_copied[i];
 8008f02:	7bfb      	ldrb	r3, [r7, #15]
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	441a      	add	r2, r3
 8008f08:	7bfb      	ldrb	r3, [r7, #15]
 8008f0a:	7811      	ldrb	r1, [r2, #0]
 8008f0c:	4a07      	ldr	r2, [pc, #28]	; (8008f2c <HiL_controller_copy_array+0x38>)
 8008f0e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i<HiL_MSGQ_Buf_arr_len; i++)
 8008f10:	7bfb      	ldrb	r3, [r7, #15]
 8008f12:	3301      	adds	r3, #1
 8008f14:	73fb      	strb	r3, [r7, #15]
 8008f16:	7bfb      	ldrb	r3, [r7, #15]
 8008f18:	2b03      	cmp	r3, #3
 8008f1a:	d9f2      	bls.n	8008f02 <HiL_controller_copy_array+0xe>
	}
}
 8008f1c:	bf00      	nop
 8008f1e:	bf00      	nop
 8008f20:	3714      	adds	r7, #20
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	20000668 	.word	0x20000668

08008f30 <HiL_controller_read_message>:

//parses message, and tries to execute commands.
void HiL_controller_read_message(uint8_t* recieved_data)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
	//reset status array
	controller_reply[CONTROLLER_VALUE1] = 0;
 8008f38:	4b32      	ldr	r3, [pc, #200]	; (8009004 <HiL_controller_read_message+0xd4>)
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	701a      	strb	r2, [r3, #0]
	controller_reply[CONTROLLER_VALUE2] = 0;
 8008f3e:	4b31      	ldr	r3, [pc, #196]	; (8009004 <HiL_controller_read_message+0xd4>)
 8008f40:	2200      	movs	r2, #0
 8008f42:	705a      	strb	r2, [r3, #1]

	// gets newest instruction
	HiL_controller_copy_array(recieved_data);
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f7ff ffd5 	bl	8008ef4 <HiL_controller_copy_array>

	// identify the message content
	switch(recieved_data[CONTROLLER_REQUEST])
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	2b03      	cmp	r3, #3
 8008f50:	d847      	bhi.n	8008fe2 <HiL_controller_read_message+0xb2>
 8008f52:	a201      	add	r2, pc, #4	; (adr r2, 8008f58 <HiL_controller_read_message+0x28>)
 8008f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f58:	08008f69 	.word	0x08008f69
 8008f5c:	08008f6f 	.word	0x08008f6f
 8008f60:	08008f9d 	.word	0x08008f9d
 8008f64:	08008fcb 	.word	0x08008fcb
	{

		case CONTROLLER_REQUEST_GET: 

			HiL_controller_send_message();
 8008f68:	f000 f84e 	bl	8009008 <HiL_controller_send_message>
			break;
 8008f6c:	e045      	b.n	8008ffa <HiL_controller_read_message+0xca>


		case CONTROLLER_REQUEST_ACTUATE:
			
			controller_reply[CONTROLLER_VALUE1] =  HiL_mcu_commands_binary_action(
													recieved_data[CONTROLLER_OBJECT],
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	3301      	adds	r3, #1
			controller_reply[CONTROLLER_VALUE1] =  HiL_mcu_commands_binary_action(
 8008f72:	781a      	ldrb	r2, [r3, #0]
													recieved_data[CONTROLLER_ACTION1]);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	3302      	adds	r3, #2
			controller_reply[CONTROLLER_VALUE1] =  HiL_mcu_commands_binary_action(
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	4610      	mov	r0, r2
 8008f7e:	f000 f8b5 	bl	80090ec <HiL_mcu_commands_binary_action>
 8008f82:	4603      	mov	r3, r0
 8008f84:	461a      	mov	r2, r3
 8008f86:	4b1f      	ldr	r3, [pc, #124]	; (8009004 <HiL_controller_read_message+0xd4>)
 8008f88:	701a      	strb	r2, [r3, #0]
			
			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 8008f8a:	4b1e      	ldr	r3, [pc, #120]	; (8009004 <HiL_controller_read_message+0xd4>)
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	4a1d      	ldr	r2, [pc, #116]	; (8009004 <HiL_controller_read_message+0xd4>)
 8008f90:	7852      	ldrb	r2, [r2, #1]
 8008f92:	4611      	mov	r1, r2
 8008f94:	4618      	mov	r0, r3
 8008f96:	f000 f86f 	bl	8009078 <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);			
			break;
 8008f9a:	e02e      	b.n	8008ffa <HiL_controller_read_message+0xca>

		case CONTROLLER_REQUEST_POTENTIOMETER:
	

			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_potentiometer_emulator(
													recieved_data[CONTROLLER_ACTION1],
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	3302      	adds	r3, #2
			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_potentiometer_emulator(
 8008fa0:	781a      	ldrb	r2, [r3, #0]
													recieved_data[CONTROLLER_ACTION2]);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	3303      	adds	r3, #3
			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_potentiometer_emulator(
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	4619      	mov	r1, r3
 8008faa:	4610      	mov	r0, r2
 8008fac:	f000 f87a 	bl	80090a4 <HiL_mcu_commands_potentiometer_emulator>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	4b13      	ldr	r3, [pc, #76]	; (8009004 <HiL_controller_read_message+0xd4>)
 8008fb6:	701a      	strb	r2, [r3, #0]

			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 8008fb8:	4b12      	ldr	r3, [pc, #72]	; (8009004 <HiL_controller_read_message+0xd4>)
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	4a11      	ldr	r2, [pc, #68]	; (8009004 <HiL_controller_read_message+0xd4>)
 8008fbe:	7852      	ldrb	r2, [r2, #1]
 8008fc0:	4611      	mov	r1, r2
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f000 f858 	bl	8009078 <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);

			break;
 8008fc8:	e017      	b.n	8008ffa <HiL_controller_read_message+0xca>
			

		case CONTROLLER_REQUEST_SHT20:
			
			controller_reply[CONTROLLER_VALUE1] = CONTROLLER_ERROR_NO_SUPPORT;
 8008fca:	4b0e      	ldr	r3, [pc, #56]	; (8009004 <HiL_controller_read_message+0xd4>)
 8008fcc:	2202      	movs	r2, #2
 8008fce:	701a      	strb	r2, [r3, #0]

			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 8008fd0:	4b0c      	ldr	r3, [pc, #48]	; (8009004 <HiL_controller_read_message+0xd4>)
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	4a0b      	ldr	r2, [pc, #44]	; (8009004 <HiL_controller_read_message+0xd4>)
 8008fd6:	7852      	ldrb	r2, [r2, #1]
 8008fd8:	4611      	mov	r1, r2
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f000 f84c 	bl	8009078 <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);
			
			break;
 8008fe0:	e00b      	b.n	8008ffa <HiL_controller_read_message+0xca>


		default: 

			// Reply with error
			controller_reply[CONTROLLER_VALUE1] = CONTROLLER_ERROR_UNSPECIFIED;
 8008fe2:	4b08      	ldr	r3, [pc, #32]	; (8009004 <HiL_controller_read_message+0xd4>)
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	701a      	strb	r2, [r3, #0]

			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 8008fe8:	4b06      	ldr	r3, [pc, #24]	; (8009004 <HiL_controller_read_message+0xd4>)
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	4a05      	ldr	r2, [pc, #20]	; (8009004 <HiL_controller_read_message+0xd4>)
 8008fee:	7852      	ldrb	r2, [r2, #1]
 8008ff0:	4611      	mov	r1, r2
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f000 f840 	bl	8009078 <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);
			
	}	
}
 8008ff8:	bf00      	nop
 8008ffa:	bf00      	nop
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	2000066c 	.word	0x2000066c

08009008 <HiL_controller_send_message>:

void HiL_controller_send_message()
{
 8009008:	b580      	push	{r7, lr}
 800900a:	af00      	add	r7, sp, #0
	
	switch(recieved_data[CONTROLLER_GET_GROUP])
 800900c:	4b18      	ldr	r3, [pc, #96]	; (8009070 <HiL_controller_send_message+0x68>)
 800900e:	785b      	ldrb	r3, [r3, #1]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d002      	beq.n	800901a <HiL_controller_send_message+0x12>
 8009014:	2b01      	cmp	r3, #1
 8009016:	d012      	beq.n	800903e <HiL_controller_send_message+0x36>
 8009018:	e020      	b.n	800905c <HiL_controller_send_message+0x54>
	{
		
		case CONTROLLER_GET_GROUP_BINARY:
			
			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_binary_status(recieved_data[CONTROLLER_GET_OBJECT]);
 800901a:	4b15      	ldr	r3, [pc, #84]	; (8009070 <HiL_controller_send_message+0x68>)
 800901c:	789b      	ldrb	r3, [r3, #2]
 800901e:	4618      	mov	r0, r3
 8009020:	f000 f90e 	bl	8009240 <HiL_mcu_commands_binary_status>
 8009024:	4603      	mov	r3, r0
 8009026:	461a      	mov	r2, r3
 8009028:	4b12      	ldr	r3, [pc, #72]	; (8009074 <HiL_controller_send_message+0x6c>)
 800902a:	701a      	strb	r2, [r3, #0]
			
			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800902c:	4b11      	ldr	r3, [pc, #68]	; (8009074 <HiL_controller_send_message+0x6c>)
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	4a10      	ldr	r2, [pc, #64]	; (8009074 <HiL_controller_send_message+0x6c>)
 8009032:	7852      	ldrb	r2, [r2, #1]
 8009034:	4611      	mov	r1, r2
 8009036:	4618      	mov	r0, r3
 8009038:	f000 f81e 	bl	8009078 <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);
			break;
 800903c:	e016      	b.n	800906c <HiL_controller_send_message+0x64>

		case CONTROLLER_REQUEST_PWM_MEASURE:


			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_PWM_measure();
 800903e:	f000 f989 	bl	8009354 <HiL_mcu_commands_PWM_measure>
 8009042:	4603      	mov	r3, r0
 8009044:	461a      	mov	r2, r3
 8009046:	4b0b      	ldr	r3, [pc, #44]	; (8009074 <HiL_controller_send_message+0x6c>)
 8009048:	701a      	strb	r2, [r3, #0]

			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800904a:	4b0a      	ldr	r3, [pc, #40]	; (8009074 <HiL_controller_send_message+0x6c>)
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	4a09      	ldr	r2, [pc, #36]	; (8009074 <HiL_controller_send_message+0x6c>)
 8009050:	7852      	ldrb	r2, [r2, #1]
 8009052:	4611      	mov	r1, r2
 8009054:	4618      	mov	r0, r3
 8009056:	f000 f80f 	bl	8009078 <HiL_gateway_transmit_message>
										 controller_reply[CONTROLLER_VALUE2]);

			break;
 800905a:	e007      	b.n	800906c <HiL_controller_send_message+0x64>

		default:
			// Reply with error
			controller_reply[CONTROLLER_VALUE1] = CONTROLLER_ERROR_NO_SUPPORT;
 800905c:	4b05      	ldr	r3, [pc, #20]	; (8009074 <HiL_controller_send_message+0x6c>)
 800905e:	2202      	movs	r2, #2
 8009060:	701a      	strb	r2, [r3, #0]
			HiL_gateway_transmit_message(0,32);
 8009062:	2120      	movs	r1, #32
 8009064:	2000      	movs	r0, #0
 8009066:	f000 f807 	bl	8009078 <HiL_gateway_transmit_message>
	}
}
 800906a:	bf00      	nop
 800906c:	bf00      	nop
 800906e:	bd80      	pop	{r7, pc}
 8009070:	20000668 	.word	0x20000668
 8009074:	2000066c 	.word	0x2000066c

08009078 <HiL_gateway_transmit_message>:


#include "HiL_gateway.h"

void HiL_gateway_transmit_message(uint8_t value1, uint8_t value2)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	4603      	mov	r3, r0
 8009080:	460a      	mov	r2, r1
 8009082:	71fb      	strb	r3, [r7, #7]
 8009084:	4613      	mov	r3, r2
 8009086:	71bb      	strb	r3, [r7, #6]
	uint8_t values[2];
	values[0] = value1;
 8009088:	79fb      	ldrb	r3, [r7, #7]
 800908a:	733b      	strb	r3, [r7, #12]
	values[1] = value2;
 800908c:	79bb      	ldrb	r3, [r7, #6]
 800908e:	737b      	strb	r3, [r7, #13]

	CDC_Transmit_FS( /*(uint8_t *)*/ values, sizeof(values));		// Transmit what's been recieved in our msg queue
 8009090:	f107 030c 	add.w	r3, r7, #12
 8009094:	2102      	movs	r1, #2
 8009096:	4618      	mov	r0, r3
 8009098:	f005 fa74 	bl	800e584 <CDC_Transmit_FS>
}
 800909c:	bf00      	nop
 800909e:	3710      	adds	r7, #16
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <HiL_mcu_commands_potentiometer_emulator>:
extern uint8_t Duty;
extern TIM_HandleTypeDef htim1;


uint8_t HiL_mcu_commands_potentiometer_emulator(uint8_t value1, uint8_t value2)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	4603      	mov	r3, r0
 80090ac:	460a      	mov	r2, r1
 80090ae:	71fb      	strb	r3, [r7, #7]
 80090b0:	4613      	mov	r3, r2
 80090b2:	71bb      	strb	r3, [r7, #6]

	uint16_t desired_output_voltage = value1 + (value2 << 8);
 80090b4:	79fb      	ldrb	r3, [r7, #7]
 80090b6:	b29a      	uxth	r2, r3
 80090b8:	79bb      	ldrb	r3, [r7, #6]
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	021b      	lsls	r3, r3, #8
 80090be:	b29b      	uxth	r3, r3
 80090c0:	4413      	add	r3, r2
 80090c2:	81fb      	strh	r3, [r7, #14]

	if( (desired_output_voltage < 0) || (desired_output_voltage > 4095) ){
 80090c4:	89fb      	ldrh	r3, [r7, #14]
 80090c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090ca:	d301      	bcc.n	80090d0 <HiL_mcu_commands_potentiometer_emulator+0x2c>
		return 3; //error: out of bounds
 80090cc:	2303      	movs	r3, #3
 80090ce:	e006      	b.n	80090de <HiL_mcu_commands_potentiometer_emulator+0x3a>
	}

	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, desired_output_voltage);
 80090d0:	89fb      	ldrh	r3, [r7, #14]
 80090d2:	2200      	movs	r2, #0
 80090d4:	2100      	movs	r1, #0
 80090d6:	4804      	ldr	r0, [pc, #16]	; (80090e8 <HiL_mcu_commands_potentiometer_emulator+0x44>)
 80090d8:	f7f8 fed4 	bl	8001e84 <HAL_DAC_SetValue>
	return 0;
 80090dc:	2300      	movs	r3, #0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	20000330 	.word	0x20000330

080090ec <HiL_mcu_commands_binary_action>:


uint8_t HiL_mcu_commands_binary_action (uint8_t binary_object, uint8_t desired_state)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	4603      	mov	r3, r0
 80090f4:	460a      	mov	r2, r1
 80090f6:	71fb      	strb	r3, [r7, #7]
 80090f8:	4613      	mov	r3, r2
 80090fa:	71bb      	strb	r3, [r7, #6]

	GPIO_PinState pin_state;
	
	if (desired_state == ON)
 80090fc:	79bb      	ldrb	r3, [r7, #6]
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d102      	bne.n	8009108 <HiL_mcu_commands_binary_action+0x1c>
	{
		pin_state = GPIO_PIN_SET;
 8009102:	2301      	movs	r3, #1
 8009104:	73fb      	strb	r3, [r7, #15]
 8009106:	e007      	b.n	8009118 <HiL_mcu_commands_binary_action+0x2c>
	}
	else if (desired_state == OFF)
 8009108:	79bb      	ldrb	r3, [r7, #6]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d102      	bne.n	8009114 <HiL_mcu_commands_binary_action+0x28>
	{
		pin_state = GPIO_PIN_RESET;
 800910e:	2300      	movs	r3, #0
 8009110:	73fb      	strb	r3, [r7, #15]
 8009112:	e001      	b.n	8009118 <HiL_mcu_commands_binary_action+0x2c>
	}
	else
	{
		return CONTROLLER_ERROR_BAD_REQUEST; // Invalid state indication
 8009114:	2303      	movs	r3, #3
 8009116:	e082      	b.n	800921e <HiL_mcu_commands_binary_action+0x132>
	}

	switch (binary_object)
 8009118:	79fb      	ldrb	r3, [r7, #7]
 800911a:	2b0c      	cmp	r3, #12
 800911c:	d87c      	bhi.n	8009218 <HiL_mcu_commands_binary_action+0x12c>
 800911e:	a201      	add	r2, pc, #4	; (adr r2, 8009124 <HiL_mcu_commands_binary_action+0x38>)
 8009120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009124:	08009159 	.word	0x08009159
 8009128:	08009169 	.word	0x08009169
 800912c:	08009179 	.word	0x08009179
 8009130:	08009187 	.word	0x08009187
 8009134:	08009197 	.word	0x08009197
 8009138:	080091a5 	.word	0x080091a5
 800913c:	080091b3 	.word	0x080091b3
 8009140:	080091c1 	.word	0x080091c1
 8009144:	080091cf 	.word	0x080091cf
 8009148:	080091dd 	.word	0x080091dd
 800914c:	080091ed 	.word	0x080091ed
 8009150:	080091fb 	.word	0x080091fb
 8009154:	0800920b 	.word	0x0800920b
	{

		case HiL_SW5:
			HAL_GPIO_WritePin(HiL_SW5_GPIO_Port, HiL_SW5_Pin, pin_state);
 8009158:	7bfb      	ldrb	r3, [r7, #15]
 800915a:	461a      	mov	r2, r3
 800915c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009160:	4831      	ldr	r0, [pc, #196]	; (8009228 <HiL_mcu_commands_binary_action+0x13c>)
 8009162:	f7f9 fc01 	bl	8002968 <HAL_GPIO_WritePin>
			break;
 8009166:	e059      	b.n	800921c <HiL_mcu_commands_binary_action+0x130>

		case HiL_SW6:
			HAL_GPIO_WritePin(HiL_SW6_GPIO_Port, HiL_SW6_Pin, pin_state);
 8009168:	7bfb      	ldrb	r3, [r7, #15]
 800916a:	461a      	mov	r2, r3
 800916c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009170:	482d      	ldr	r0, [pc, #180]	; (8009228 <HiL_mcu_commands_binary_action+0x13c>)
 8009172:	f7f9 fbf9 	bl	8002968 <HAL_GPIO_WritePin>
			break;
 8009176:	e051      	b.n	800921c <HiL_mcu_commands_binary_action+0x130>

		case HiL_SW7:
			HAL_GPIO_WritePin(HiL_SW7_GPIO_Port, HiL_SW7_Pin, pin_state);
 8009178:	7bfb      	ldrb	r3, [r7, #15]
 800917a:	461a      	mov	r2, r3
 800917c:	2110      	movs	r1, #16
 800917e:	482a      	ldr	r0, [pc, #168]	; (8009228 <HiL_mcu_commands_binary_action+0x13c>)
 8009180:	f7f9 fbf2 	bl	8002968 <HAL_GPIO_WritePin>
			break;
 8009184:	e04a      	b.n	800921c <HiL_mcu_commands_binary_action+0x130>

		case HiL_SW8:
			HAL_GPIO_WritePin(HiL_SW8_GPIO_Port, HiL_SW8_Pin, pin_state);
 8009186:	7bfb      	ldrb	r3, [r7, #15]
 8009188:	461a      	mov	r2, r3
 800918a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800918e:	4826      	ldr	r0, [pc, #152]	; (8009228 <HiL_mcu_commands_binary_action+0x13c>)
 8009190:	f7f9 fbea 	bl	8002968 <HAL_GPIO_WritePin>
			break;
 8009194:	e042      	b.n	800921c <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_A:
			HAL_GPIO_WritePin(HiL_button3_A_GPIO_Port, HiL_button3_A_Pin, pin_state);
 8009196:	7bfb      	ldrb	r3, [r7, #15]
 8009198:	461a      	mov	r2, r3
 800919a:	2108      	movs	r1, #8
 800919c:	4823      	ldr	r0, [pc, #140]	; (800922c <HiL_mcu_commands_binary_action+0x140>)
 800919e:	f7f9 fbe3 	bl	8002968 <HAL_GPIO_WritePin>
			break;
 80091a2:	e03b      	b.n	800921c <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_B:
			HAL_GPIO_WritePin(HiL_button3_B_GPIO_Port, HiL_button3_B_Pin, pin_state);
 80091a4:	7bfb      	ldrb	r3, [r7, #15]
 80091a6:	461a      	mov	r2, r3
 80091a8:	2104      	movs	r1, #4
 80091aa:	4820      	ldr	r0, [pc, #128]	; (800922c <HiL_mcu_commands_binary_action+0x140>)
 80091ac:	f7f9 fbdc 	bl	8002968 <HAL_GPIO_WritePin>
			break;
 80091b0:	e034      	b.n	800921c <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_C:
			HAL_GPIO_WritePin(HiL_button3_C_GPIO_Port, HiL_button3_C_Pin, pin_state);
 80091b2:	7bfb      	ldrb	r3, [r7, #15]
 80091b4:	461a      	mov	r2, r3
 80091b6:	2110      	movs	r1, #16
 80091b8:	481d      	ldr	r0, [pc, #116]	; (8009230 <HiL_mcu_commands_binary_action+0x144>)
 80091ba:	f7f9 fbd5 	bl	8002968 <HAL_GPIO_WritePin>
			break;
 80091be:	e02d      	b.n	800921c <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_D:
			HAL_GPIO_WritePin(HiL_button3_D_GPIO_Port, HiL_button3_D_Pin, pin_state);
 80091c0:	7bfb      	ldrb	r3, [r7, #15]
 80091c2:	461a      	mov	r2, r3
 80091c4:	2120      	movs	r1, #32
 80091c6:	481a      	ldr	r0, [pc, #104]	; (8009230 <HiL_mcu_commands_binary_action+0x144>)
 80091c8:	f7f9 fbce 	bl	8002968 <HAL_GPIO_WritePin>
			break;
 80091cc:	e026      	b.n	800921c <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_center:
			HAL_GPIO_WritePin(HiL_button3_center_GPIO_Port, HiL_button3_center_Pin, pin_state);
 80091ce:	7bfb      	ldrb	r3, [r7, #15]
 80091d0:	461a      	mov	r2, r3
 80091d2:	2140      	movs	r1, #64	; 0x40
 80091d4:	4816      	ldr	r0, [pc, #88]	; (8009230 <HiL_mcu_commands_binary_action+0x144>)
 80091d6:	f7f9 fbc7 	bl	8002968 <HAL_GPIO_WritePin>
			break;
 80091da:	e01f      	b.n	800921c <HiL_mcu_commands_binary_action+0x130>

		case HiL_TL1_Car:
			HAL_GPIO_WritePin(HiL_TL1_Car_GPIO_Port, HiL_TL1_Car_Pin, pin_state);
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
 80091de:	461a      	mov	r2, r3
 80091e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80091e4:	4813      	ldr	r0, [pc, #76]	; (8009234 <HiL_mcu_commands_binary_action+0x148>)
 80091e6:	f7f9 fbbf 	bl	8002968 <HAL_GPIO_WritePin>
			break;
 80091ea:	e017      	b.n	800921c <HiL_mcu_commands_binary_action+0x130>

		case HiL_TL2_Car:
			HAL_GPIO_WritePin(HiL_TL2_Car_GPIO_Port, HiL_TL2_Car_Pin, pin_state);
 80091ec:	7bfb      	ldrb	r3, [r7, #15]
 80091ee:	461a      	mov	r2, r3
 80091f0:	2180      	movs	r1, #128	; 0x80
 80091f2:	4811      	ldr	r0, [pc, #68]	; (8009238 <HiL_mcu_commands_binary_action+0x14c>)
 80091f4:	f7f9 fbb8 	bl	8002968 <HAL_GPIO_WritePin>
			break;
 80091f8:	e010      	b.n	800921c <HiL_mcu_commands_binary_action+0x130>

		case HiL_TL3_Car:
			HAL_GPIO_WritePin(HiL_TL3_Car_GPIO_Port, HiL_TL3_Car_Pin, pin_state);
 80091fa:	7bfb      	ldrb	r3, [r7, #15]
 80091fc:	461a      	mov	r2, r3
 80091fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009202:	480e      	ldr	r0, [pc, #56]	; (800923c <HiL_mcu_commands_binary_action+0x150>)
 8009204:	f7f9 fbb0 	bl	8002968 <HAL_GPIO_WritePin>
			break;
 8009208:	e008      	b.n	800921c <HiL_mcu_commands_binary_action+0x130>

		case HiL_TL4_Car:
			HAL_GPIO_WritePin(HiL_TL4_Car_GPIO_Port, HiL_TL4_Car_Pin, pin_state);
 800920a:	7bfb      	ldrb	r3, [r7, #15]
 800920c:	461a      	mov	r2, r3
 800920e:	2104      	movs	r1, #4
 8009210:	4807      	ldr	r0, [pc, #28]	; (8009230 <HiL_mcu_commands_binary_action+0x144>)
 8009212:	f7f9 fba9 	bl	8002968 <HAL_GPIO_WritePin>
			break;
 8009216:	e001      	b.n	800921c <HiL_mcu_commands_binary_action+0x130>

		default:
			return CONTROLLER_ERROR_NO_SUPPORT; // Switch not currently supported
 8009218:	2302      	movs	r3, #2
 800921a:	e000      	b.n	800921e <HiL_mcu_commands_binary_action+0x132>

	}

	return 0; // Function returned successfully 
 800921c:	2300      	movs	r3, #0
	
}
 800921e:	4618      	mov	r0, r3
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	40020400 	.word	0x40020400
 800922c:	40021800 	.word	0x40021800
 8009230:	40020c00 	.word	0x40020c00
 8009234:	40020800 	.word	0x40020800
 8009238:	40021400 	.word	0x40021400
 800923c:	40020000 	.word	0x40020000

08009240 <HiL_mcu_commands_binary_status>:

uint8_t HiL_mcu_commands_binary_status (uint8_t binary_object)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	4603      	mov	r3, r0
 8009248:	71fb      	strb	r3, [r7, #7]
	switch (binary_object)
 800924a:	79fb      	ldrb	r3, [r7, #7]
 800924c:	2b0c      	cmp	r3, #12
 800924e:	d870      	bhi.n	8009332 <HiL_mcu_commands_binary_status+0xf2>
 8009250:	a201      	add	r2, pc, #4	; (adr r2, 8009258 <HiL_mcu_commands_binary_status+0x18>)
 8009252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009256:	bf00      	nop
 8009258:	0800928d 	.word	0x0800928d
 800925c:	0800929b 	.word	0x0800929b
 8009260:	080092a9 	.word	0x080092a9
 8009264:	080092b5 	.word	0x080092b5
 8009268:	080092c3 	.word	0x080092c3
 800926c:	080092cf 	.word	0x080092cf
 8009270:	080092db 	.word	0x080092db
 8009274:	080092e7 	.word	0x080092e7
 8009278:	080092f3 	.word	0x080092f3
 800927c:	080092ff 	.word	0x080092ff
 8009280:	0800930d 	.word	0x0800930d
 8009284:	08009319 	.word	0x08009319
 8009288:	08009327 	.word	0x08009327
	{

		case HiL_SW5:
			return HAL_GPIO_ReadPin(HiL_SW5_GPIO_Port, HiL_SW5_Pin);
 800928c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009290:	482a      	ldr	r0, [pc, #168]	; (800933c <HiL_mcu_commands_binary_status+0xfc>)
 8009292:	f7f9 fb51 	bl	8002938 <HAL_GPIO_ReadPin>
 8009296:	4603      	mov	r3, r0
 8009298:	e04c      	b.n	8009334 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_SW6:
			return HAL_GPIO_ReadPin(HiL_SW6_GPIO_Port, HiL_SW6_Pin);
 800929a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800929e:	4827      	ldr	r0, [pc, #156]	; (800933c <HiL_mcu_commands_binary_status+0xfc>)
 80092a0:	f7f9 fb4a 	bl	8002938 <HAL_GPIO_ReadPin>
 80092a4:	4603      	mov	r3, r0
 80092a6:	e045      	b.n	8009334 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_SW7:
			return HAL_GPIO_ReadPin(HiL_SW7_GPIO_Port, HiL_SW7_Pin);
 80092a8:	2110      	movs	r1, #16
 80092aa:	4824      	ldr	r0, [pc, #144]	; (800933c <HiL_mcu_commands_binary_status+0xfc>)
 80092ac:	f7f9 fb44 	bl	8002938 <HAL_GPIO_ReadPin>
 80092b0:	4603      	mov	r3, r0
 80092b2:	e03f      	b.n	8009334 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_SW8:
			return HAL_GPIO_ReadPin(HiL_SW8_GPIO_Port, HiL_SW8_Pin);
 80092b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80092b8:	4820      	ldr	r0, [pc, #128]	; (800933c <HiL_mcu_commands_binary_status+0xfc>)
 80092ba:	f7f9 fb3d 	bl	8002938 <HAL_GPIO_ReadPin>
 80092be:	4603      	mov	r3, r0
 80092c0:	e038      	b.n	8009334 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_A:
			return HAL_GPIO_ReadPin(HiL_button3_A_GPIO_Port, HiL_button3_A_Pin);
 80092c2:	2108      	movs	r1, #8
 80092c4:	481e      	ldr	r0, [pc, #120]	; (8009340 <HiL_mcu_commands_binary_status+0x100>)
 80092c6:	f7f9 fb37 	bl	8002938 <HAL_GPIO_ReadPin>
 80092ca:	4603      	mov	r3, r0
 80092cc:	e032      	b.n	8009334 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_B:
			return HAL_GPIO_ReadPin(HiL_button3_B_GPIO_Port, HiL_button3_B_Pin);
 80092ce:	2104      	movs	r1, #4
 80092d0:	481b      	ldr	r0, [pc, #108]	; (8009340 <HiL_mcu_commands_binary_status+0x100>)
 80092d2:	f7f9 fb31 	bl	8002938 <HAL_GPIO_ReadPin>
 80092d6:	4603      	mov	r3, r0
 80092d8:	e02c      	b.n	8009334 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_C:
			return HAL_GPIO_ReadPin(HiL_button3_C_GPIO_Port, HiL_button3_C_Pin);
 80092da:	2110      	movs	r1, #16
 80092dc:	4819      	ldr	r0, [pc, #100]	; (8009344 <HiL_mcu_commands_binary_status+0x104>)
 80092de:	f7f9 fb2b 	bl	8002938 <HAL_GPIO_ReadPin>
 80092e2:	4603      	mov	r3, r0
 80092e4:	e026      	b.n	8009334 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_D:
			return HAL_GPIO_ReadPin(HiL_button3_D_GPIO_Port, HiL_button3_D_Pin);
 80092e6:	2120      	movs	r1, #32
 80092e8:	4816      	ldr	r0, [pc, #88]	; (8009344 <HiL_mcu_commands_binary_status+0x104>)
 80092ea:	f7f9 fb25 	bl	8002938 <HAL_GPIO_ReadPin>
 80092ee:	4603      	mov	r3, r0
 80092f0:	e020      	b.n	8009334 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_center:
			return HAL_GPIO_ReadPin(HiL_button3_center_GPIO_Port, HiL_button3_center_Pin);
 80092f2:	2140      	movs	r1, #64	; 0x40
 80092f4:	4813      	ldr	r0, [pc, #76]	; (8009344 <HiL_mcu_commands_binary_status+0x104>)
 80092f6:	f7f9 fb1f 	bl	8002938 <HAL_GPIO_ReadPin>
 80092fa:	4603      	mov	r3, r0
 80092fc:	e01a      	b.n	8009334 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_TL1_Car:
			return HAL_GPIO_ReadPin(HiL_TL1_Car_GPIO_Port, HiL_TL1_Car_Pin);
 80092fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009302:	4811      	ldr	r0, [pc, #68]	; (8009348 <HiL_mcu_commands_binary_status+0x108>)
 8009304:	f7f9 fb18 	bl	8002938 <HAL_GPIO_ReadPin>
 8009308:	4603      	mov	r3, r0
 800930a:	e013      	b.n	8009334 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_TL2_Car:
			return HAL_GPIO_ReadPin(HiL_TL2_Car_GPIO_Port, HiL_TL2_Car_Pin);
 800930c:	2180      	movs	r1, #128	; 0x80
 800930e:	480f      	ldr	r0, [pc, #60]	; (800934c <HiL_mcu_commands_binary_status+0x10c>)
 8009310:	f7f9 fb12 	bl	8002938 <HAL_GPIO_ReadPin>
 8009314:	4603      	mov	r3, r0
 8009316:	e00d      	b.n	8009334 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_TL3_Car:
			return HAL_GPIO_ReadPin(HiL_TL3_Car_GPIO_Port, HiL_TL3_Car_Pin);
 8009318:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800931c:	480c      	ldr	r0, [pc, #48]	; (8009350 <HiL_mcu_commands_binary_status+0x110>)
 800931e:	f7f9 fb0b 	bl	8002938 <HAL_GPIO_ReadPin>
 8009322:	4603      	mov	r3, r0
 8009324:	e006      	b.n	8009334 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_TL4_Car:
			return HAL_GPIO_ReadPin(HiL_TL4_Car_GPIO_Port, HiL_TL4_Car_Pin);
 8009326:	2104      	movs	r1, #4
 8009328:	4806      	ldr	r0, [pc, #24]	; (8009344 <HiL_mcu_commands_binary_status+0x104>)
 800932a:	f7f9 fb05 	bl	8002938 <HAL_GPIO_ReadPin>
 800932e:	4603      	mov	r3, r0
 8009330:	e000      	b.n	8009334 <HiL_mcu_commands_binary_status+0xf4>

		default:
			return CONTROLLER_ERROR_NO_SUPPORT; // Switch not currently supported
 8009332:	2302      	movs	r3, #2

	}
}
 8009334:	4618      	mov	r0, r3
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	40020400 	.word	0x40020400
 8009340:	40021800 	.word	0x40021800
 8009344:	40020c00 	.word	0x40020c00
 8009348:	40020800 	.word	0x40020800
 800934c:	40021400 	.word	0x40021400
 8009350:	40020000 	.word	0x40020000

08009354 <HiL_mcu_commands_PWM_measure>:

uint8_t HiL_mcu_commands_PWM_measure ()
{
 8009354:	b580      	push	{r7, lr}
 8009356:	af00      	add	r7, sp, #0
													// Start timers and interrupts
		HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); // Primary channel - rising edge - rinse and repeat
 8009358:	2100      	movs	r1, #0
 800935a:	480b      	ldr	r0, [pc, #44]	; (8009388 <HiL_mcu_commands_PWM_measure+0x34>)
 800935c:	f7fc fbce 	bl	8005afc <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);    // Secondary channel - falling edge - stop second counter
 8009360:	2104      	movs	r1, #4
 8009362:	4809      	ldr	r0, [pc, #36]	; (8009388 <HiL_mcu_commands_PWM_measure+0x34>)
 8009364:	f7fc fa54 	bl	8005810 <HAL_TIM_IC_Start>

		osDelay(1);				//	Wait for  pwm-period to complete. Smallest tick time is currently 1 millisecond. PWM freq is 8 kHz, so this is slow
 8009368:	2001      	movs	r0, #1
 800936a:	f002 f915 	bl	800b598 <osDelay>

												   // Stop timers and interrupts
		HAL_TIM_IC_Stop_IT(&htim1, TIM_CHANNEL_1); // Primary channel - rising edge - rinse and repeat
 800936e:	2100      	movs	r1, #0
 8009370:	4805      	ldr	r0, [pc, #20]	; (8009388 <HiL_mcu_commands_PWM_measure+0x34>)
 8009372:	f7fc fd13 	bl	8005d9c <HAL_TIM_IC_Stop_IT>
		HAL_TIM_IC_Stop(&htim1, TIM_CHANNEL_2);    // Secondary channel - falling edge - stop second counter
 8009376:	2104      	movs	r1, #4
 8009378:	4803      	ldr	r0, [pc, #12]	; (8009388 <HiL_mcu_commands_PWM_measure+0x34>)
 800937a:	f7fc fb4d 	bl	8005a18 <HAL_TIM_IC_Stop>



		return Duty;
 800937e:	4b03      	ldr	r3, [pc, #12]	; (800938c <HiL_mcu_commands_PWM_measure+0x38>)
 8009380:	781b      	ldrb	r3, [r3, #0]
}
 8009382:	4618      	mov	r0, r3
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	20000510 	.word	0x20000510
 800938c:	20000664 	.word	0x20000664

08009390 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	460b      	mov	r3, r1
 800939a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800939c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80093a0:	f005 fde4 	bl	800ef6c <malloc>
 80093a4:	4603      	mov	r3, r0
 80093a6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d109      	bne.n	80093c2 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	32b0      	adds	r2, #176	; 0xb0
 80093b8:	2100      	movs	r1, #0
 80093ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80093be:	2302      	movs	r3, #2
 80093c0:	e0d4      	b.n	800956c <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80093c2:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80093c6:	2100      	movs	r1, #0
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	f005 fded 	bl	800efa8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	32b0      	adds	r2, #176	; 0xb0
 80093d8:	68f9      	ldr	r1, [r7, #12]
 80093da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	32b0      	adds	r2, #176	; 0xb0
 80093e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	7c1b      	ldrb	r3, [r3, #16]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d138      	bne.n	800946c <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80093fa:	4b5e      	ldr	r3, [pc, #376]	; (8009574 <USBD_CDC_Init+0x1e4>)
 80093fc:	7819      	ldrb	r1, [r3, #0]
 80093fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009402:	2202      	movs	r2, #2
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f005 fbe2 	bl	800ebce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800940a:	4b5a      	ldr	r3, [pc, #360]	; (8009574 <USBD_CDC_Init+0x1e4>)
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	f003 020f 	and.w	r2, r3, #15
 8009412:	6879      	ldr	r1, [r7, #4]
 8009414:	4613      	mov	r3, r2
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	4413      	add	r3, r2
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	440b      	add	r3, r1
 800941e:	3324      	adds	r3, #36	; 0x24
 8009420:	2201      	movs	r2, #1
 8009422:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009424:	4b54      	ldr	r3, [pc, #336]	; (8009578 <USBD_CDC_Init+0x1e8>)
 8009426:	7819      	ldrb	r1, [r3, #0]
 8009428:	f44f 7300 	mov.w	r3, #512	; 0x200
 800942c:	2202      	movs	r2, #2
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f005 fbcd 	bl	800ebce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009434:	4b50      	ldr	r3, [pc, #320]	; (8009578 <USBD_CDC_Init+0x1e8>)
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	f003 020f 	and.w	r2, r3, #15
 800943c:	6879      	ldr	r1, [r7, #4]
 800943e:	4613      	mov	r3, r2
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	4413      	add	r3, r2
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	440b      	add	r3, r1
 8009448:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800944c:	2201      	movs	r2, #1
 800944e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009450:	4b4a      	ldr	r3, [pc, #296]	; (800957c <USBD_CDC_Init+0x1ec>)
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	f003 020f 	and.w	r2, r3, #15
 8009458:	6879      	ldr	r1, [r7, #4]
 800945a:	4613      	mov	r3, r2
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	4413      	add	r3, r2
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	440b      	add	r3, r1
 8009464:	3326      	adds	r3, #38	; 0x26
 8009466:	2210      	movs	r2, #16
 8009468:	801a      	strh	r2, [r3, #0]
 800946a:	e035      	b.n	80094d8 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800946c:	4b41      	ldr	r3, [pc, #260]	; (8009574 <USBD_CDC_Init+0x1e4>)
 800946e:	7819      	ldrb	r1, [r3, #0]
 8009470:	2340      	movs	r3, #64	; 0x40
 8009472:	2202      	movs	r2, #2
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f005 fbaa 	bl	800ebce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800947a:	4b3e      	ldr	r3, [pc, #248]	; (8009574 <USBD_CDC_Init+0x1e4>)
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	f003 020f 	and.w	r2, r3, #15
 8009482:	6879      	ldr	r1, [r7, #4]
 8009484:	4613      	mov	r3, r2
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	4413      	add	r3, r2
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	440b      	add	r3, r1
 800948e:	3324      	adds	r3, #36	; 0x24
 8009490:	2201      	movs	r2, #1
 8009492:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009494:	4b38      	ldr	r3, [pc, #224]	; (8009578 <USBD_CDC_Init+0x1e8>)
 8009496:	7819      	ldrb	r1, [r3, #0]
 8009498:	2340      	movs	r3, #64	; 0x40
 800949a:	2202      	movs	r2, #2
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f005 fb96 	bl	800ebce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80094a2:	4b35      	ldr	r3, [pc, #212]	; (8009578 <USBD_CDC_Init+0x1e8>)
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	f003 020f 	and.w	r2, r3, #15
 80094aa:	6879      	ldr	r1, [r7, #4]
 80094ac:	4613      	mov	r3, r2
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	4413      	add	r3, r2
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	440b      	add	r3, r1
 80094b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80094ba:	2201      	movs	r2, #1
 80094bc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80094be:	4b2f      	ldr	r3, [pc, #188]	; (800957c <USBD_CDC_Init+0x1ec>)
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	f003 020f 	and.w	r2, r3, #15
 80094c6:	6879      	ldr	r1, [r7, #4]
 80094c8:	4613      	mov	r3, r2
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	4413      	add	r3, r2
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	440b      	add	r3, r1
 80094d2:	3326      	adds	r3, #38	; 0x26
 80094d4:	2210      	movs	r2, #16
 80094d6:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80094d8:	4b28      	ldr	r3, [pc, #160]	; (800957c <USBD_CDC_Init+0x1ec>)
 80094da:	7819      	ldrb	r1, [r3, #0]
 80094dc:	2308      	movs	r3, #8
 80094de:	2203      	movs	r2, #3
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f005 fb74 	bl	800ebce <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80094e6:	4b25      	ldr	r3, [pc, #148]	; (800957c <USBD_CDC_Init+0x1ec>)
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	f003 020f 	and.w	r2, r3, #15
 80094ee:	6879      	ldr	r1, [r7, #4]
 80094f0:	4613      	mov	r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4413      	add	r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	440b      	add	r3, r1
 80094fa:	3324      	adds	r3, #36	; 0x24
 80094fc:	2201      	movs	r2, #1
 80094fe:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2200      	movs	r2, #0
 8009504:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	33b0      	adds	r3, #176	; 0xb0
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	4413      	add	r3, r2
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2200      	movs	r2, #0
 8009520:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2200      	movs	r2, #0
 8009528:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009532:	2b00      	cmp	r3, #0
 8009534:	d101      	bne.n	800953a <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8009536:	2302      	movs	r3, #2
 8009538:	e018      	b.n	800956c <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	7c1b      	ldrb	r3, [r3, #16]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d10a      	bne.n	8009558 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009542:	4b0d      	ldr	r3, [pc, #52]	; (8009578 <USBD_CDC_Init+0x1e8>)
 8009544:	7819      	ldrb	r1, [r3, #0]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800954c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f005 fc2b 	bl	800edac <USBD_LL_PrepareReceive>
 8009556:	e008      	b.n	800956a <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009558:	4b07      	ldr	r3, [pc, #28]	; (8009578 <USBD_CDC_Init+0x1e8>)
 800955a:	7819      	ldrb	r1, [r3, #0]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009562:	2340      	movs	r3, #64	; 0x40
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f005 fc21 	bl	800edac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800956a:	2300      	movs	r3, #0
}
 800956c:	4618      	mov	r0, r3
 800956e:	3710      	adds	r7, #16
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}
 8009574:	20000093 	.word	0x20000093
 8009578:	20000094 	.word	0x20000094
 800957c:	20000095 	.word	0x20000095

08009580 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	460b      	mov	r3, r1
 800958a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800958c:	4b3a      	ldr	r3, [pc, #232]	; (8009678 <USBD_CDC_DeInit+0xf8>)
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	4619      	mov	r1, r3
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f005 fb41 	bl	800ec1a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009598:	4b37      	ldr	r3, [pc, #220]	; (8009678 <USBD_CDC_DeInit+0xf8>)
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	f003 020f 	and.w	r2, r3, #15
 80095a0:	6879      	ldr	r1, [r7, #4]
 80095a2:	4613      	mov	r3, r2
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	4413      	add	r3, r2
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	440b      	add	r3, r1
 80095ac:	3324      	adds	r3, #36	; 0x24
 80095ae:	2200      	movs	r2, #0
 80095b0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80095b2:	4b32      	ldr	r3, [pc, #200]	; (800967c <USBD_CDC_DeInit+0xfc>)
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	4619      	mov	r1, r3
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f005 fb2e 	bl	800ec1a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80095be:	4b2f      	ldr	r3, [pc, #188]	; (800967c <USBD_CDC_DeInit+0xfc>)
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	f003 020f 	and.w	r2, r3, #15
 80095c6:	6879      	ldr	r1, [r7, #4]
 80095c8:	4613      	mov	r3, r2
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	4413      	add	r3, r2
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	440b      	add	r3, r1
 80095d2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80095d6:	2200      	movs	r2, #0
 80095d8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80095da:	4b29      	ldr	r3, [pc, #164]	; (8009680 <USBD_CDC_DeInit+0x100>)
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	4619      	mov	r1, r3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f005 fb1a 	bl	800ec1a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80095e6:	4b26      	ldr	r3, [pc, #152]	; (8009680 <USBD_CDC_DeInit+0x100>)
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	f003 020f 	and.w	r2, r3, #15
 80095ee:	6879      	ldr	r1, [r7, #4]
 80095f0:	4613      	mov	r3, r2
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	4413      	add	r3, r2
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	440b      	add	r3, r1
 80095fa:	3324      	adds	r3, #36	; 0x24
 80095fc:	2200      	movs	r2, #0
 80095fe:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009600:	4b1f      	ldr	r3, [pc, #124]	; (8009680 <USBD_CDC_DeInit+0x100>)
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	f003 020f 	and.w	r2, r3, #15
 8009608:	6879      	ldr	r1, [r7, #4]
 800960a:	4613      	mov	r3, r2
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	4413      	add	r3, r2
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	440b      	add	r3, r1
 8009614:	3326      	adds	r3, #38	; 0x26
 8009616:	2200      	movs	r2, #0
 8009618:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	32b0      	adds	r2, #176	; 0xb0
 8009624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d01f      	beq.n	800966c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	33b0      	adds	r3, #176	; 0xb0
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	4413      	add	r3, r2
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	32b0      	adds	r2, #176	; 0xb0
 800964a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800964e:	4618      	mov	r0, r3
 8009650:	f005 fc94 	bl	800ef7c <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	32b0      	adds	r2, #176	; 0xb0
 800965e:	2100      	movs	r1, #0
 8009660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800966c:	2300      	movs	r3, #0
}
 800966e:	4618      	mov	r0, r3
 8009670:	3708      	adds	r7, #8
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	20000093 	.word	0x20000093
 800967c:	20000094 	.word	0x20000094
 8009680:	20000095 	.word	0x20000095

08009684 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b086      	sub	sp, #24
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	32b0      	adds	r2, #176	; 0xb0
 8009698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800969c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800969e:	2300      	movs	r3, #0
 80096a0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80096a2:	2300      	movs	r3, #0
 80096a4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80096a6:	2300      	movs	r3, #0
 80096a8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d101      	bne.n	80096b4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80096b0:	2303      	movs	r3, #3
 80096b2:	e0bf      	b.n	8009834 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d050      	beq.n	8009762 <USBD_CDC_Setup+0xde>
 80096c0:	2b20      	cmp	r3, #32
 80096c2:	f040 80af 	bne.w	8009824 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	88db      	ldrh	r3, [r3, #6]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d03a      	beq.n	8009744 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	b25b      	sxtb	r3, r3
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	da1b      	bge.n	8009710 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	33b0      	adds	r3, #176	; 0xb0
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	4413      	add	r3, r2
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	683a      	ldr	r2, [r7, #0]
 80096ec:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80096ee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80096f0:	683a      	ldr	r2, [r7, #0]
 80096f2:	88d2      	ldrh	r2, [r2, #6]
 80096f4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	88db      	ldrh	r3, [r3, #6]
 80096fa:	2b07      	cmp	r3, #7
 80096fc:	bf28      	it	cs
 80096fe:	2307      	movcs	r3, #7
 8009700:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	89fa      	ldrh	r2, [r7, #14]
 8009706:	4619      	mov	r1, r3
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f001 fdad 	bl	800b268 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800970e:	e090      	b.n	8009832 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	785a      	ldrb	r2, [r3, #1]
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	88db      	ldrh	r3, [r3, #6]
 800971e:	2b3f      	cmp	r3, #63	; 0x3f
 8009720:	d803      	bhi.n	800972a <USBD_CDC_Setup+0xa6>
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	88db      	ldrh	r3, [r3, #6]
 8009726:	b2da      	uxtb	r2, r3
 8009728:	e000      	b.n	800972c <USBD_CDC_Setup+0xa8>
 800972a:	2240      	movs	r2, #64	; 0x40
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009732:	6939      	ldr	r1, [r7, #16]
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800973a:	461a      	mov	r2, r3
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f001 fdbf 	bl	800b2c0 <USBD_CtlPrepareRx>
      break;
 8009742:	e076      	b.n	8009832 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	33b0      	adds	r3, #176	; 0xb0
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	4413      	add	r3, r2
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	683a      	ldr	r2, [r7, #0]
 8009758:	7850      	ldrb	r0, [r2, #1]
 800975a:	2200      	movs	r2, #0
 800975c:	6839      	ldr	r1, [r7, #0]
 800975e:	4798      	blx	r3
      break;
 8009760:	e067      	b.n	8009832 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	785b      	ldrb	r3, [r3, #1]
 8009766:	2b0b      	cmp	r3, #11
 8009768:	d851      	bhi.n	800980e <USBD_CDC_Setup+0x18a>
 800976a:	a201      	add	r2, pc, #4	; (adr r2, 8009770 <USBD_CDC_Setup+0xec>)
 800976c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009770:	080097a1 	.word	0x080097a1
 8009774:	0800981d 	.word	0x0800981d
 8009778:	0800980f 	.word	0x0800980f
 800977c:	0800980f 	.word	0x0800980f
 8009780:	0800980f 	.word	0x0800980f
 8009784:	0800980f 	.word	0x0800980f
 8009788:	0800980f 	.word	0x0800980f
 800978c:	0800980f 	.word	0x0800980f
 8009790:	0800980f 	.word	0x0800980f
 8009794:	0800980f 	.word	0x0800980f
 8009798:	080097cb 	.word	0x080097cb
 800979c:	080097f5 	.word	0x080097f5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	2b03      	cmp	r3, #3
 80097aa:	d107      	bne.n	80097bc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80097ac:	f107 030a 	add.w	r3, r7, #10
 80097b0:	2202      	movs	r2, #2
 80097b2:	4619      	mov	r1, r3
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f001 fd57 	bl	800b268 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80097ba:	e032      	b.n	8009822 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80097bc:	6839      	ldr	r1, [r7, #0]
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f001 fce1 	bl	800b186 <USBD_CtlError>
            ret = USBD_FAIL;
 80097c4:	2303      	movs	r3, #3
 80097c6:	75fb      	strb	r3, [r7, #23]
          break;
 80097c8:	e02b      	b.n	8009822 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	2b03      	cmp	r3, #3
 80097d4:	d107      	bne.n	80097e6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80097d6:	f107 030d 	add.w	r3, r7, #13
 80097da:	2201      	movs	r2, #1
 80097dc:	4619      	mov	r1, r3
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f001 fd42 	bl	800b268 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80097e4:	e01d      	b.n	8009822 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80097e6:	6839      	ldr	r1, [r7, #0]
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f001 fccc 	bl	800b186 <USBD_CtlError>
            ret = USBD_FAIL;
 80097ee:	2303      	movs	r3, #3
 80097f0:	75fb      	strb	r3, [r7, #23]
          break;
 80097f2:	e016      	b.n	8009822 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	2b03      	cmp	r3, #3
 80097fe:	d00f      	beq.n	8009820 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009800:	6839      	ldr	r1, [r7, #0]
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f001 fcbf 	bl	800b186 <USBD_CtlError>
            ret = USBD_FAIL;
 8009808:	2303      	movs	r3, #3
 800980a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800980c:	e008      	b.n	8009820 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800980e:	6839      	ldr	r1, [r7, #0]
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f001 fcb8 	bl	800b186 <USBD_CtlError>
          ret = USBD_FAIL;
 8009816:	2303      	movs	r3, #3
 8009818:	75fb      	strb	r3, [r7, #23]
          break;
 800981a:	e002      	b.n	8009822 <USBD_CDC_Setup+0x19e>
          break;
 800981c:	bf00      	nop
 800981e:	e008      	b.n	8009832 <USBD_CDC_Setup+0x1ae>
          break;
 8009820:	bf00      	nop
      }
      break;
 8009822:	e006      	b.n	8009832 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009824:	6839      	ldr	r1, [r7, #0]
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f001 fcad 	bl	800b186 <USBD_CtlError>
      ret = USBD_FAIL;
 800982c:	2303      	movs	r3, #3
 800982e:	75fb      	strb	r3, [r7, #23]
      break;
 8009830:	bf00      	nop
  }

  return (uint8_t)ret;
 8009832:	7dfb      	ldrb	r3, [r7, #23]
}
 8009834:	4618      	mov	r0, r3
 8009836:	3718      	adds	r7, #24
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	460b      	mov	r3, r1
 8009846:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800984e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	32b0      	adds	r2, #176	; 0xb0
 800985a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d101      	bne.n	8009866 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009862:	2303      	movs	r3, #3
 8009864:	e065      	b.n	8009932 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	32b0      	adds	r2, #176	; 0xb0
 8009870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009874:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009876:	78fb      	ldrb	r3, [r7, #3]
 8009878:	f003 020f 	and.w	r2, r3, #15
 800987c:	6879      	ldr	r1, [r7, #4]
 800987e:	4613      	mov	r3, r2
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	4413      	add	r3, r2
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	440b      	add	r3, r1
 8009888:	3318      	adds	r3, #24
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d02f      	beq.n	80098f0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009890:	78fb      	ldrb	r3, [r7, #3]
 8009892:	f003 020f 	and.w	r2, r3, #15
 8009896:	6879      	ldr	r1, [r7, #4]
 8009898:	4613      	mov	r3, r2
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	4413      	add	r3, r2
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	440b      	add	r3, r1
 80098a2:	3318      	adds	r3, #24
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	78fb      	ldrb	r3, [r7, #3]
 80098a8:	f003 010f 	and.w	r1, r3, #15
 80098ac:	68f8      	ldr	r0, [r7, #12]
 80098ae:	460b      	mov	r3, r1
 80098b0:	00db      	lsls	r3, r3, #3
 80098b2:	440b      	add	r3, r1
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	4403      	add	r3, r0
 80098b8:	3348      	adds	r3, #72	; 0x48
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	fbb2 f1f3 	udiv	r1, r2, r3
 80098c0:	fb01 f303 	mul.w	r3, r1, r3
 80098c4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d112      	bne.n	80098f0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80098ca:	78fb      	ldrb	r3, [r7, #3]
 80098cc:	f003 020f 	and.w	r2, r3, #15
 80098d0:	6879      	ldr	r1, [r7, #4]
 80098d2:	4613      	mov	r3, r2
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	4413      	add	r3, r2
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	440b      	add	r3, r1
 80098dc:	3318      	adds	r3, #24
 80098de:	2200      	movs	r2, #0
 80098e0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80098e2:	78f9      	ldrb	r1, [r7, #3]
 80098e4:	2300      	movs	r3, #0
 80098e6:	2200      	movs	r2, #0
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f005 fa3e 	bl	800ed6a <USBD_LL_Transmit>
 80098ee:	e01f      	b.n	8009930 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	2200      	movs	r2, #0
 80098f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	33b0      	adds	r3, #176	; 0xb0
 8009902:	009b      	lsls	r3, r3, #2
 8009904:	4413      	add	r3, r2
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	691b      	ldr	r3, [r3, #16]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d010      	beq.n	8009930 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	33b0      	adds	r3, #176	; 0xb0
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	4413      	add	r3, r2
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	691b      	ldr	r3, [r3, #16]
 8009920:	68ba      	ldr	r2, [r7, #8]
 8009922:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009926:	68ba      	ldr	r2, [r7, #8]
 8009928:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800992c:	78fa      	ldrb	r2, [r7, #3]
 800992e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009930:	2300      	movs	r3, #0
}
 8009932:	4618      	mov	r0, r3
 8009934:	3710      	adds	r7, #16
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}

0800993a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800993a:	b580      	push	{r7, lr}
 800993c:	b084      	sub	sp, #16
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
 8009942:	460b      	mov	r3, r1
 8009944:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	32b0      	adds	r2, #176	; 0xb0
 8009950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009954:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	32b0      	adds	r2, #176	; 0xb0
 8009960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d101      	bne.n	800996c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009968:	2303      	movs	r3, #3
 800996a:	e01a      	b.n	80099a2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800996c:	78fb      	ldrb	r3, [r7, #3]
 800996e:	4619      	mov	r1, r3
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f005 fa3c 	bl	800edee <USBD_LL_GetRxDataSize>
 8009976:	4602      	mov	r2, r0
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	33b0      	adds	r3, #176	; 0xb0
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	4413      	add	r3, r2
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	68db      	ldr	r3, [r3, #12]
 8009990:	68fa      	ldr	r2, [r7, #12]
 8009992:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009996:	68fa      	ldr	r2, [r7, #12]
 8009998:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800999c:	4611      	mov	r1, r2
 800999e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80099a0:	2300      	movs	r3, #0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3710      	adds	r7, #16
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}

080099aa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b084      	sub	sp, #16
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	32b0      	adds	r2, #176	; 0xb0
 80099bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d101      	bne.n	80099cc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80099c8:	2303      	movs	r3, #3
 80099ca:	e025      	b.n	8009a18 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	33b0      	adds	r3, #176	; 0xb0
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	4413      	add	r3, r2
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d01a      	beq.n	8009a16 <USBD_CDC_EP0_RxReady+0x6c>
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80099e6:	2bff      	cmp	r3, #255	; 0xff
 80099e8:	d015      	beq.n	8009a16 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	33b0      	adds	r3, #176	; 0xb0
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	4413      	add	r3, r2
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	68fa      	ldr	r2, [r7, #12]
 80099fe:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009a02:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009a04:	68fa      	ldr	r2, [r7, #12]
 8009a06:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009a0a:	b292      	uxth	r2, r2
 8009a0c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	22ff      	movs	r2, #255	; 0xff
 8009a12:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009a16:	2300      	movs	r3, #0
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3710      	adds	r7, #16
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b086      	sub	sp, #24
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009a28:	2182      	movs	r1, #130	; 0x82
 8009a2a:	4818      	ldr	r0, [pc, #96]	; (8009a8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009a2c:	f000 fd49 	bl	800a4c2 <USBD_GetEpDesc>
 8009a30:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009a32:	2101      	movs	r1, #1
 8009a34:	4815      	ldr	r0, [pc, #84]	; (8009a8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009a36:	f000 fd44 	bl	800a4c2 <USBD_GetEpDesc>
 8009a3a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009a3c:	2181      	movs	r1, #129	; 0x81
 8009a3e:	4813      	ldr	r0, [pc, #76]	; (8009a8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009a40:	f000 fd3f 	bl	800a4c2 <USBD_GetEpDesc>
 8009a44:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d002      	beq.n	8009a52 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	2210      	movs	r2, #16
 8009a50:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d006      	beq.n	8009a66 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a60:	711a      	strb	r2, [r3, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d006      	beq.n	8009a7a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a74:	711a      	strb	r2, [r3, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2243      	movs	r2, #67	; 0x43
 8009a7e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009a80:	4b02      	ldr	r3, [pc, #8]	; (8009a8c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3718      	adds	r7, #24
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	20000050 	.word	0x20000050

08009a90 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b086      	sub	sp, #24
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009a98:	2182      	movs	r1, #130	; 0x82
 8009a9a:	4818      	ldr	r0, [pc, #96]	; (8009afc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009a9c:	f000 fd11 	bl	800a4c2 <USBD_GetEpDesc>
 8009aa0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009aa2:	2101      	movs	r1, #1
 8009aa4:	4815      	ldr	r0, [pc, #84]	; (8009afc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009aa6:	f000 fd0c 	bl	800a4c2 <USBD_GetEpDesc>
 8009aaa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009aac:	2181      	movs	r1, #129	; 0x81
 8009aae:	4813      	ldr	r0, [pc, #76]	; (8009afc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009ab0:	f000 fd07 	bl	800a4c2 <USBD_GetEpDesc>
 8009ab4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d002      	beq.n	8009ac2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	2210      	movs	r2, #16
 8009ac0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d006      	beq.n	8009ad6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	2200      	movs	r2, #0
 8009acc:	711a      	strb	r2, [r3, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f042 0202 	orr.w	r2, r2, #2
 8009ad4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d006      	beq.n	8009aea <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	711a      	strb	r2, [r3, #4]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f042 0202 	orr.w	r2, r2, #2
 8009ae8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2243      	movs	r2, #67	; 0x43
 8009aee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009af0:	4b02      	ldr	r3, [pc, #8]	; (8009afc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3718      	adds	r7, #24
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	20000050 	.word	0x20000050

08009b00 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b086      	sub	sp, #24
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009b08:	2182      	movs	r1, #130	; 0x82
 8009b0a:	4818      	ldr	r0, [pc, #96]	; (8009b6c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009b0c:	f000 fcd9 	bl	800a4c2 <USBD_GetEpDesc>
 8009b10:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009b12:	2101      	movs	r1, #1
 8009b14:	4815      	ldr	r0, [pc, #84]	; (8009b6c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009b16:	f000 fcd4 	bl	800a4c2 <USBD_GetEpDesc>
 8009b1a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009b1c:	2181      	movs	r1, #129	; 0x81
 8009b1e:	4813      	ldr	r0, [pc, #76]	; (8009b6c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009b20:	f000 fccf 	bl	800a4c2 <USBD_GetEpDesc>
 8009b24:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d002      	beq.n	8009b32 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	2210      	movs	r2, #16
 8009b30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d006      	beq.n	8009b46 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b40:	711a      	strb	r2, [r3, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d006      	beq.n	8009b5a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b54:	711a      	strb	r2, [r3, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2243      	movs	r2, #67	; 0x43
 8009b5e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009b60:	4b02      	ldr	r3, [pc, #8]	; (8009b6c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3718      	adds	r7, #24
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	20000050 	.word	0x20000050

08009b70 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	220a      	movs	r2, #10
 8009b7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009b7e:	4b03      	ldr	r3, [pc, #12]	; (8009b8c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr
 8009b8c:	2000000c 	.word	0x2000000c

08009b90 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d101      	bne.n	8009ba4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009ba0:	2303      	movs	r3, #3
 8009ba2:	e009      	b.n	8009bb8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	33b0      	adds	r3, #176	; 0xb0
 8009bae:	009b      	lsls	r3, r3, #2
 8009bb0:	4413      	add	r3, r2
 8009bb2:	683a      	ldr	r2, [r7, #0]
 8009bb4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009bb6:	2300      	movs	r3, #0
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b087      	sub	sp, #28
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	32b0      	adds	r2, #176	; 0xb0
 8009bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bde:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d101      	bne.n	8009bea <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009be6:	2303      	movs	r3, #3
 8009be8:	e008      	b.n	8009bfc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	68ba      	ldr	r2, [r7, #8]
 8009bee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009bfa:	2300      	movs	r3, #0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	371c      	adds	r7, #28
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b085      	sub	sp, #20
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	32b0      	adds	r2, #176	; 0xb0
 8009c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c20:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d101      	bne.n	8009c2c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009c28:	2303      	movs	r3, #3
 8009c2a:	e004      	b.n	8009c36 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	683a      	ldr	r2, [r7, #0]
 8009c30:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009c34:	2300      	movs	r3, #0
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3714      	adds	r7, #20
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
	...

08009c44 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	32b0      	adds	r2, #176	; 0xb0
 8009c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c5a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d101      	bne.n	8009c6a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009c66:	2303      	movs	r3, #3
 8009c68:	e025      	b.n	8009cb6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d11f      	bne.n	8009cb4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	2201      	movs	r2, #1
 8009c78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009c7c:	4b10      	ldr	r3, [pc, #64]	; (8009cc0 <USBD_CDC_TransmitPacket+0x7c>)
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	f003 020f 	and.w	r2, r3, #15
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	4613      	mov	r3, r2
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	4413      	add	r3, r2
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	4403      	add	r3, r0
 8009c96:	3318      	adds	r3, #24
 8009c98:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009c9a:	4b09      	ldr	r3, [pc, #36]	; (8009cc0 <USBD_CDC_TransmitPacket+0x7c>)
 8009c9c:	7819      	ldrb	r1, [r3, #0]
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f005 f85d 	bl	800ed6a <USBD_LL_Transmit>

    ret = USBD_OK;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3710      	adds	r7, #16
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	20000093 	.word	0x20000093

08009cc4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	32b0      	adds	r2, #176	; 0xb0
 8009cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cda:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	32b0      	adds	r2, #176	; 0xb0
 8009ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d101      	bne.n	8009cf2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009cee:	2303      	movs	r3, #3
 8009cf0:	e018      	b.n	8009d24 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	7c1b      	ldrb	r3, [r3, #16]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d10a      	bne.n	8009d10 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009cfa:	4b0c      	ldr	r3, [pc, #48]	; (8009d2c <USBD_CDC_ReceivePacket+0x68>)
 8009cfc:	7819      	ldrb	r1, [r3, #0]
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f005 f84f 	bl	800edac <USBD_LL_PrepareReceive>
 8009d0e:	e008      	b.n	8009d22 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d10:	4b06      	ldr	r3, [pc, #24]	; (8009d2c <USBD_CDC_ReceivePacket+0x68>)
 8009d12:	7819      	ldrb	r1, [r3, #0]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d1a:	2340      	movs	r3, #64	; 0x40
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f005 f845 	bl	800edac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009d22:	2300      	movs	r3, #0
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3710      	adds	r7, #16
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	20000094 	.word	0x20000094

08009d30 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b086      	sub	sp, #24
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	4613      	mov	r3, r2
 8009d3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d101      	bne.n	8009d48 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009d44:	2303      	movs	r3, #3
 8009d46:	e01f      	b.n	8009d88 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d003      	beq.n	8009d6e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	68ba      	ldr	r2, [r7, #8]
 8009d6a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2201      	movs	r2, #1
 8009d72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	79fa      	ldrb	r2, [r7, #7]
 8009d7a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	f004 febf 	bl	800eb00 <USBD_LL_Init>
 8009d82:	4603      	mov	r3, r0
 8009d84:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3718      	adds	r7, #24
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d101      	bne.n	8009da8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009da4:	2303      	movs	r3, #3
 8009da6:	e025      	b.n	8009df4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	683a      	ldr	r2, [r7, #0]
 8009dac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	32ae      	adds	r2, #174	; 0xae
 8009dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00f      	beq.n	8009de4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	32ae      	adds	r2, #174	; 0xae
 8009dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd4:	f107 020e 	add.w	r2, r7, #14
 8009dd8:	4610      	mov	r0, r2
 8009dda:	4798      	blx	r3
 8009ddc:	4602      	mov	r2, r0
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009dea:	1c5a      	adds	r2, r3, #1
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009df2:	2300      	movs	r3, #0
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3710      	adds	r7, #16
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b082      	sub	sp, #8
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f004 fec7 	bl	800eb98 <USBD_LL_Start>
 8009e0a:	4603      	mov	r3, r0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3708      	adds	r7, #8
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009e1c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	370c      	adds	r7, #12
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr

08009e2a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b084      	sub	sp, #16
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
 8009e32:	460b      	mov	r3, r1
 8009e34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e36:	2300      	movs	r3, #0
 8009e38:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d009      	beq.n	8009e58 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	78fa      	ldrb	r2, [r7, #3]
 8009e4e:	4611      	mov	r1, r2
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	4798      	blx	r3
 8009e54:	4603      	mov	r3, r0
 8009e56:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b084      	sub	sp, #16
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	78fa      	ldrb	r2, [r7, #3]
 8009e7c:	4611      	mov	r1, r2
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	4798      	blx	r3
 8009e82:	4603      	mov	r3, r0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d001      	beq.n	8009e8c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009e88:	2303      	movs	r3, #3
 8009e8a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3710      	adds	r7, #16
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b084      	sub	sp, #16
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
 8009e9e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ea6:	6839      	ldr	r1, [r7, #0]
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f001 f932 	bl	800b112 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009eca:	f003 031f 	and.w	r3, r3, #31
 8009ece:	2b02      	cmp	r3, #2
 8009ed0:	d01a      	beq.n	8009f08 <USBD_LL_SetupStage+0x72>
 8009ed2:	2b02      	cmp	r3, #2
 8009ed4:	d822      	bhi.n	8009f1c <USBD_LL_SetupStage+0x86>
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d002      	beq.n	8009ee0 <USBD_LL_SetupStage+0x4a>
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d00a      	beq.n	8009ef4 <USBD_LL_SetupStage+0x5e>
 8009ede:	e01d      	b.n	8009f1c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 fb5f 	bl	800a5ac <USBD_StdDevReq>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	73fb      	strb	r3, [r7, #15]
      break;
 8009ef2:	e020      	b.n	8009f36 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009efa:	4619      	mov	r1, r3
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 fbc7 	bl	800a690 <USBD_StdItfReq>
 8009f02:	4603      	mov	r3, r0
 8009f04:	73fb      	strb	r3, [r7, #15]
      break;
 8009f06:	e016      	b.n	8009f36 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009f0e:	4619      	mov	r1, r3
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 fc29 	bl	800a768 <USBD_StdEPReq>
 8009f16:	4603      	mov	r3, r0
 8009f18:	73fb      	strb	r3, [r7, #15]
      break;
 8009f1a:	e00c      	b.n	8009f36 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009f22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	4619      	mov	r1, r3
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f004 fe94 	bl	800ec58 <USBD_LL_StallEP>
 8009f30:	4603      	mov	r3, r0
 8009f32:	73fb      	strb	r3, [r7, #15]
      break;
 8009f34:	bf00      	nop
  }

  return ret;
 8009f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3710      	adds	r7, #16
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b086      	sub	sp, #24
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	460b      	mov	r3, r1
 8009f4a:	607a      	str	r2, [r7, #4]
 8009f4c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009f52:	7afb      	ldrb	r3, [r7, #11]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d16e      	bne.n	800a036 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009f5e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009f66:	2b03      	cmp	r3, #3
 8009f68:	f040 8098 	bne.w	800a09c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	689a      	ldr	r2, [r3, #8]
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d913      	bls.n	8009fa0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	689a      	ldr	r2, [r3, #8]
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	1ad2      	subs	r2, r2, r3
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	68da      	ldr	r2, [r3, #12]
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	bf28      	it	cs
 8009f92:	4613      	movcs	r3, r2
 8009f94:	461a      	mov	r2, r3
 8009f96:	6879      	ldr	r1, [r7, #4]
 8009f98:	68f8      	ldr	r0, [r7, #12]
 8009f9a:	f001 f9ae 	bl	800b2fa <USBD_CtlContinueRx>
 8009f9e:	e07d      	b.n	800a09c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009fa6:	f003 031f 	and.w	r3, r3, #31
 8009faa:	2b02      	cmp	r3, #2
 8009fac:	d014      	beq.n	8009fd8 <USBD_LL_DataOutStage+0x98>
 8009fae:	2b02      	cmp	r3, #2
 8009fb0:	d81d      	bhi.n	8009fee <USBD_LL_DataOutStage+0xae>
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d002      	beq.n	8009fbc <USBD_LL_DataOutStage+0x7c>
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d003      	beq.n	8009fc2 <USBD_LL_DataOutStage+0x82>
 8009fba:	e018      	b.n	8009fee <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	75bb      	strb	r3, [r7, #22]
            break;
 8009fc0:	e018      	b.n	8009ff4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	4619      	mov	r1, r3
 8009fcc:	68f8      	ldr	r0, [r7, #12]
 8009fce:	f000 fa5e 	bl	800a48e <USBD_CoreFindIF>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	75bb      	strb	r3, [r7, #22]
            break;
 8009fd6:	e00d      	b.n	8009ff4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	68f8      	ldr	r0, [r7, #12]
 8009fe4:	f000 fa60 	bl	800a4a8 <USBD_CoreFindEP>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	75bb      	strb	r3, [r7, #22]
            break;
 8009fec:	e002      	b.n	8009ff4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	75bb      	strb	r3, [r7, #22]
            break;
 8009ff2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009ff4:	7dbb      	ldrb	r3, [r7, #22]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d119      	bne.n	800a02e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a000:	b2db      	uxtb	r3, r3
 800a002:	2b03      	cmp	r3, #3
 800a004:	d113      	bne.n	800a02e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a006:	7dba      	ldrb	r2, [r7, #22]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	32ae      	adds	r2, #174	; 0xae
 800a00c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a010:	691b      	ldr	r3, [r3, #16]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d00b      	beq.n	800a02e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a016:	7dba      	ldrb	r2, [r7, #22]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a01e:	7dba      	ldrb	r2, [r7, #22]
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	32ae      	adds	r2, #174	; 0xae
 800a024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a028:	691b      	ldr	r3, [r3, #16]
 800a02a:	68f8      	ldr	r0, [r7, #12]
 800a02c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a02e:	68f8      	ldr	r0, [r7, #12]
 800a030:	f001 f974 	bl	800b31c <USBD_CtlSendStatus>
 800a034:	e032      	b.n	800a09c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a036:	7afb      	ldrb	r3, [r7, #11]
 800a038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	4619      	mov	r1, r3
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f000 fa31 	bl	800a4a8 <USBD_CoreFindEP>
 800a046:	4603      	mov	r3, r0
 800a048:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a04a:	7dbb      	ldrb	r3, [r7, #22]
 800a04c:	2bff      	cmp	r3, #255	; 0xff
 800a04e:	d025      	beq.n	800a09c <USBD_LL_DataOutStage+0x15c>
 800a050:	7dbb      	ldrb	r3, [r7, #22]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d122      	bne.n	800a09c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	2b03      	cmp	r3, #3
 800a060:	d117      	bne.n	800a092 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a062:	7dba      	ldrb	r2, [r7, #22]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	32ae      	adds	r2, #174	; 0xae
 800a068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a06c:	699b      	ldr	r3, [r3, #24]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d00f      	beq.n	800a092 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a072:	7dba      	ldrb	r2, [r7, #22]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a07a:	7dba      	ldrb	r2, [r7, #22]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	32ae      	adds	r2, #174	; 0xae
 800a080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a084:	699b      	ldr	r3, [r3, #24]
 800a086:	7afa      	ldrb	r2, [r7, #11]
 800a088:	4611      	mov	r1, r2
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	4798      	blx	r3
 800a08e:	4603      	mov	r3, r0
 800a090:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a092:	7dfb      	ldrb	r3, [r7, #23]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d001      	beq.n	800a09c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a098:	7dfb      	ldrb	r3, [r7, #23]
 800a09a:	e000      	b.n	800a09e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a09c:	2300      	movs	r3, #0
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3718      	adds	r7, #24
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}

0800a0a6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b086      	sub	sp, #24
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	60f8      	str	r0, [r7, #12]
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	607a      	str	r2, [r7, #4]
 800a0b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a0b4:	7afb      	ldrb	r3, [r7, #11]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d16f      	bne.n	800a19a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	3314      	adds	r3, #20
 800a0be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a0c6:	2b02      	cmp	r3, #2
 800a0c8:	d15a      	bne.n	800a180 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	689a      	ldr	r2, [r3, #8]
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	68db      	ldr	r3, [r3, #12]
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d914      	bls.n	800a100 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	689a      	ldr	r2, [r3, #8]
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	68db      	ldr	r3, [r3, #12]
 800a0de:	1ad2      	subs	r2, r2, r3
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	6879      	ldr	r1, [r7, #4]
 800a0ec:	68f8      	ldr	r0, [r7, #12]
 800a0ee:	f001 f8d6 	bl	800b29e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	2100      	movs	r1, #0
 800a0f8:	68f8      	ldr	r0, [r7, #12]
 800a0fa:	f004 fe57 	bl	800edac <USBD_LL_PrepareReceive>
 800a0fe:	e03f      	b.n	800a180 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	68da      	ldr	r2, [r3, #12]
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	689b      	ldr	r3, [r3, #8]
 800a108:	429a      	cmp	r2, r3
 800a10a:	d11c      	bne.n	800a146 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	685a      	ldr	r2, [r3, #4]
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a114:	429a      	cmp	r2, r3
 800a116:	d316      	bcc.n	800a146 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	685a      	ldr	r2, [r3, #4]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a122:	429a      	cmp	r2, r3
 800a124:	d20f      	bcs.n	800a146 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a126:	2200      	movs	r2, #0
 800a128:	2100      	movs	r1, #0
 800a12a:	68f8      	ldr	r0, [r7, #12]
 800a12c:	f001 f8b7 	bl	800b29e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2200      	movs	r2, #0
 800a134:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a138:	2300      	movs	r3, #0
 800a13a:	2200      	movs	r2, #0
 800a13c:	2100      	movs	r1, #0
 800a13e:	68f8      	ldr	r0, [r7, #12]
 800a140:	f004 fe34 	bl	800edac <USBD_LL_PrepareReceive>
 800a144:	e01c      	b.n	800a180 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	2b03      	cmp	r3, #3
 800a150:	d10f      	bne.n	800a172 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d009      	beq.n	800a172 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2200      	movs	r2, #0
 800a162:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	68f8      	ldr	r0, [r7, #12]
 800a170:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a172:	2180      	movs	r1, #128	; 0x80
 800a174:	68f8      	ldr	r0, [r7, #12]
 800a176:	f004 fd6f 	bl	800ec58 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	f001 f8e1 	bl	800b342 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d03a      	beq.n	800a200 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a18a:	68f8      	ldr	r0, [r7, #12]
 800a18c:	f7ff fe42 	bl	8009e14 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2200      	movs	r2, #0
 800a194:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a198:	e032      	b.n	800a200 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a19a:	7afb      	ldrb	r3, [r7, #11]
 800a19c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	f000 f97f 	bl	800a4a8 <USBD_CoreFindEP>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a1ae:	7dfb      	ldrb	r3, [r7, #23]
 800a1b0:	2bff      	cmp	r3, #255	; 0xff
 800a1b2:	d025      	beq.n	800a200 <USBD_LL_DataInStage+0x15a>
 800a1b4:	7dfb      	ldrb	r3, [r7, #23]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d122      	bne.n	800a200 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	2b03      	cmp	r3, #3
 800a1c4:	d11c      	bne.n	800a200 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a1c6:	7dfa      	ldrb	r2, [r7, #23]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	32ae      	adds	r2, #174	; 0xae
 800a1cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1d0:	695b      	ldr	r3, [r3, #20]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d014      	beq.n	800a200 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a1d6:	7dfa      	ldrb	r2, [r7, #23]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a1de:	7dfa      	ldrb	r2, [r7, #23]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	32ae      	adds	r2, #174	; 0xae
 800a1e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1e8:	695b      	ldr	r3, [r3, #20]
 800a1ea:	7afa      	ldrb	r2, [r7, #11]
 800a1ec:	4611      	mov	r1, r2
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	4798      	blx	r3
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a1f6:	7dbb      	ldrb	r3, [r7, #22]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d001      	beq.n	800a200 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a1fc:	7dbb      	ldrb	r3, [r7, #22]
 800a1fe:	e000      	b.n	800a202 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a200:	2300      	movs	r3, #0
}
 800a202:	4618      	mov	r0, r3
 800a204:	3718      	adds	r7, #24
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b084      	sub	sp, #16
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a212:	2300      	movs	r3, #0
 800a214:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2201      	movs	r2, #1
 800a21a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2200      	movs	r2, #0
 800a222:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2200      	movs	r2, #0
 800a22a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a242:	2b00      	cmp	r3, #0
 800a244:	d014      	beq.n	800a270 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d00e      	beq.n	800a270 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	6852      	ldr	r2, [r2, #4]
 800a25e:	b2d2      	uxtb	r2, r2
 800a260:	4611      	mov	r1, r2
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	4798      	blx	r3
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d001      	beq.n	800a270 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a26c:	2303      	movs	r3, #3
 800a26e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a270:	2340      	movs	r3, #64	; 0x40
 800a272:	2200      	movs	r2, #0
 800a274:	2100      	movs	r1, #0
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f004 fca9 	bl	800ebce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2201      	movs	r2, #1
 800a280:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2240      	movs	r2, #64	; 0x40
 800a288:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a28c:	2340      	movs	r3, #64	; 0x40
 800a28e:	2200      	movs	r2, #0
 800a290:	2180      	movs	r1, #128	; 0x80
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f004 fc9b 	bl	800ebce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2201      	movs	r2, #1
 800a29c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2240      	movs	r2, #64	; 0x40
 800a2a2:	621a      	str	r2, [r3, #32]

  return ret;
 800a2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3710      	adds	r7, #16
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}

0800a2ae <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a2ae:	b480      	push	{r7}
 800a2b0:	b083      	sub	sp, #12
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	6078      	str	r0, [r7, #4]
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	78fa      	ldrb	r2, [r7, #3]
 800a2be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a2c0:	2300      	movs	r3, #0
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	370c      	adds	r7, #12
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr

0800a2ce <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a2ce:	b480      	push	{r7}
 800a2d0:	b083      	sub	sp, #12
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2dc:	b2da      	uxtb	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2204      	movs	r2, #4
 800a2e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a2ec:	2300      	movs	r3, #0
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	370c      	adds	r7, #12
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr

0800a2fa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a2fa:	b480      	push	{r7}
 800a2fc:	b083      	sub	sp, #12
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	2b04      	cmp	r3, #4
 800a30c:	d106      	bne.n	800a31c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a314:	b2da      	uxtb	r2, r3
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a31c:	2300      	movs	r3, #0
}
 800a31e:	4618      	mov	r0, r3
 800a320:	370c      	adds	r7, #12
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr

0800a32a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a32a:	b580      	push	{r7, lr}
 800a32c:	b082      	sub	sp, #8
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	2b03      	cmp	r3, #3
 800a33c:	d110      	bne.n	800a360 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a344:	2b00      	cmp	r3, #0
 800a346:	d00b      	beq.n	800a360 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a34e:	69db      	ldr	r3, [r3, #28]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d005      	beq.n	800a360 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a35a:	69db      	ldr	r3, [r3, #28]
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a360:	2300      	movs	r3, #0
}
 800a362:	4618      	mov	r0, r3
 800a364:	3708      	adds	r7, #8
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}

0800a36a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a36a:	b580      	push	{r7, lr}
 800a36c:	b082      	sub	sp, #8
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
 800a372:	460b      	mov	r3, r1
 800a374:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	32ae      	adds	r2, #174	; 0xae
 800a380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d101      	bne.n	800a38c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a388:	2303      	movs	r3, #3
 800a38a:	e01c      	b.n	800a3c6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a392:	b2db      	uxtb	r3, r3
 800a394:	2b03      	cmp	r3, #3
 800a396:	d115      	bne.n	800a3c4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	32ae      	adds	r2, #174	; 0xae
 800a3a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3a6:	6a1b      	ldr	r3, [r3, #32]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d00b      	beq.n	800a3c4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	32ae      	adds	r2, #174	; 0xae
 800a3b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3ba:	6a1b      	ldr	r3, [r3, #32]
 800a3bc:	78fa      	ldrb	r2, [r7, #3]
 800a3be:	4611      	mov	r1, r2
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3708      	adds	r7, #8
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}

0800a3ce <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b082      	sub	sp, #8
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	32ae      	adds	r2, #174	; 0xae
 800a3e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d101      	bne.n	800a3f0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a3ec:	2303      	movs	r3, #3
 800a3ee:	e01c      	b.n	800a42a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3f6:	b2db      	uxtb	r3, r3
 800a3f8:	2b03      	cmp	r3, #3
 800a3fa:	d115      	bne.n	800a428 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	32ae      	adds	r2, #174	; 0xae
 800a406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d00b      	beq.n	800a428 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	32ae      	adds	r2, #174	; 0xae
 800a41a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a420:	78fa      	ldrb	r2, [r7, #3]
 800a422:	4611      	mov	r1, r2
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a428:	2300      	movs	r3, #0
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3708      	adds	r7, #8
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}

0800a432 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a432:	b480      	push	{r7}
 800a434:	b083      	sub	sp, #12
 800a436:	af00      	add	r7, sp, #0
 800a438:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a43a:	2300      	movs	r3, #0
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	370c      	adds	r7, #12
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a450:	2300      	movs	r3, #0
 800a452:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2201      	movs	r2, #1
 800a458:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00e      	beq.n	800a484 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	687a      	ldr	r2, [r7, #4]
 800a470:	6852      	ldr	r2, [r2, #4]
 800a472:	b2d2      	uxtb	r2, r2
 800a474:	4611      	mov	r1, r2
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	4798      	blx	r3
 800a47a:	4603      	mov	r3, r0
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d001      	beq.n	800a484 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a480:	2303      	movs	r3, #3
 800a482:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a484:	7bfb      	ldrb	r3, [r7, #15]
}
 800a486:	4618      	mov	r0, r3
 800a488:	3710      	adds	r7, #16
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a48e:	b480      	push	{r7}
 800a490:	b083      	sub	sp, #12
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
 800a496:	460b      	mov	r3, r1
 800a498:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a49a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	370c      	adds	r7, #12
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a6:	4770      	bx	lr

0800a4a8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b083      	sub	sp, #12
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a4b4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	370c      	adds	r7, #12
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr

0800a4c2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a4c2:	b580      	push	{r7, lr}
 800a4c4:	b086      	sub	sp, #24
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	885b      	ldrh	r3, [r3, #2]
 800a4de:	b29a      	uxth	r2, r3
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d920      	bls.n	800a52c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a4f2:	e013      	b.n	800a51c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a4f4:	f107 030a 	add.w	r3, r7, #10
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	6978      	ldr	r0, [r7, #20]
 800a4fc:	f000 f81b 	bl	800a536 <USBD_GetNextDesc>
 800a500:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	785b      	ldrb	r3, [r3, #1]
 800a506:	2b05      	cmp	r3, #5
 800a508:	d108      	bne.n	800a51c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	789b      	ldrb	r3, [r3, #2]
 800a512:	78fa      	ldrb	r2, [r7, #3]
 800a514:	429a      	cmp	r2, r3
 800a516:	d008      	beq.n	800a52a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a518:	2300      	movs	r3, #0
 800a51a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	885b      	ldrh	r3, [r3, #2]
 800a520:	b29a      	uxth	r2, r3
 800a522:	897b      	ldrh	r3, [r7, #10]
 800a524:	429a      	cmp	r2, r3
 800a526:	d8e5      	bhi.n	800a4f4 <USBD_GetEpDesc+0x32>
 800a528:	e000      	b.n	800a52c <USBD_GetEpDesc+0x6a>
          break;
 800a52a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a52c:	693b      	ldr	r3, [r7, #16]
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3718      	adds	r7, #24
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}

0800a536 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a536:	b480      	push	{r7}
 800a538:	b085      	sub	sp, #20
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
 800a53e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	881a      	ldrh	r2, [r3, #0]
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	4413      	add	r3, r2
 800a550:	b29a      	uxth	r2, r3
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	461a      	mov	r2, r3
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	4413      	add	r3, r2
 800a560:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a562:	68fb      	ldr	r3, [r7, #12]
}
 800a564:	4618      	mov	r0, r3
 800a566:	3714      	adds	r7, #20
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a570:	b480      	push	{r7}
 800a572:	b087      	sub	sp, #28
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	3301      	adds	r3, #1
 800a586:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a58e:	8a3b      	ldrh	r3, [r7, #16]
 800a590:	021b      	lsls	r3, r3, #8
 800a592:	b21a      	sxth	r2, r3
 800a594:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a598:	4313      	orrs	r3, r2
 800a59a:	b21b      	sxth	r3, r3
 800a59c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a59e:	89fb      	ldrh	r3, [r7, #14]
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	371c      	adds	r7, #28
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5c2:	2b40      	cmp	r3, #64	; 0x40
 800a5c4:	d005      	beq.n	800a5d2 <USBD_StdDevReq+0x26>
 800a5c6:	2b40      	cmp	r3, #64	; 0x40
 800a5c8:	d857      	bhi.n	800a67a <USBD_StdDevReq+0xce>
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d00f      	beq.n	800a5ee <USBD_StdDevReq+0x42>
 800a5ce:	2b20      	cmp	r3, #32
 800a5d0:	d153      	bne.n	800a67a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	32ae      	adds	r2, #174	; 0xae
 800a5dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5e0:	689b      	ldr	r3, [r3, #8]
 800a5e2:	6839      	ldr	r1, [r7, #0]
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	4798      	blx	r3
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	73fb      	strb	r3, [r7, #15]
      break;
 800a5ec:	e04a      	b.n	800a684 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	785b      	ldrb	r3, [r3, #1]
 800a5f2:	2b09      	cmp	r3, #9
 800a5f4:	d83b      	bhi.n	800a66e <USBD_StdDevReq+0xc2>
 800a5f6:	a201      	add	r2, pc, #4	; (adr r2, 800a5fc <USBD_StdDevReq+0x50>)
 800a5f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5fc:	0800a651 	.word	0x0800a651
 800a600:	0800a665 	.word	0x0800a665
 800a604:	0800a66f 	.word	0x0800a66f
 800a608:	0800a65b 	.word	0x0800a65b
 800a60c:	0800a66f 	.word	0x0800a66f
 800a610:	0800a62f 	.word	0x0800a62f
 800a614:	0800a625 	.word	0x0800a625
 800a618:	0800a66f 	.word	0x0800a66f
 800a61c:	0800a647 	.word	0x0800a647
 800a620:	0800a639 	.word	0x0800a639
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a624:	6839      	ldr	r1, [r7, #0]
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 fa3c 	bl	800aaa4 <USBD_GetDescriptor>
          break;
 800a62c:	e024      	b.n	800a678 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a62e:	6839      	ldr	r1, [r7, #0]
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 fbcb 	bl	800adcc <USBD_SetAddress>
          break;
 800a636:	e01f      	b.n	800a678 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a638:	6839      	ldr	r1, [r7, #0]
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 fc0a 	bl	800ae54 <USBD_SetConfig>
 800a640:	4603      	mov	r3, r0
 800a642:	73fb      	strb	r3, [r7, #15]
          break;
 800a644:	e018      	b.n	800a678 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a646:	6839      	ldr	r1, [r7, #0]
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 fcad 	bl	800afa8 <USBD_GetConfig>
          break;
 800a64e:	e013      	b.n	800a678 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a650:	6839      	ldr	r1, [r7, #0]
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 fcde 	bl	800b014 <USBD_GetStatus>
          break;
 800a658:	e00e      	b.n	800a678 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a65a:	6839      	ldr	r1, [r7, #0]
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 fd0d 	bl	800b07c <USBD_SetFeature>
          break;
 800a662:	e009      	b.n	800a678 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a664:	6839      	ldr	r1, [r7, #0]
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f000 fd31 	bl	800b0ce <USBD_ClrFeature>
          break;
 800a66c:	e004      	b.n	800a678 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a66e:	6839      	ldr	r1, [r7, #0]
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 fd88 	bl	800b186 <USBD_CtlError>
          break;
 800a676:	bf00      	nop
      }
      break;
 800a678:	e004      	b.n	800a684 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a67a:	6839      	ldr	r1, [r7, #0]
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 fd82 	bl	800b186 <USBD_CtlError>
      break;
 800a682:	bf00      	nop
  }

  return ret;
 800a684:	7bfb      	ldrb	r3, [r7, #15]
}
 800a686:	4618      	mov	r0, r3
 800a688:	3710      	adds	r7, #16
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
 800a68e:	bf00      	nop

0800a690 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b084      	sub	sp, #16
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a69a:	2300      	movs	r3, #0
 800a69c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a6a6:	2b40      	cmp	r3, #64	; 0x40
 800a6a8:	d005      	beq.n	800a6b6 <USBD_StdItfReq+0x26>
 800a6aa:	2b40      	cmp	r3, #64	; 0x40
 800a6ac:	d852      	bhi.n	800a754 <USBD_StdItfReq+0xc4>
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d001      	beq.n	800a6b6 <USBD_StdItfReq+0x26>
 800a6b2:	2b20      	cmp	r3, #32
 800a6b4:	d14e      	bne.n	800a754 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	3b01      	subs	r3, #1
 800a6c0:	2b02      	cmp	r3, #2
 800a6c2:	d840      	bhi.n	800a746 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	889b      	ldrh	r3, [r3, #4]
 800a6c8:	b2db      	uxtb	r3, r3
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d836      	bhi.n	800a73c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	889b      	ldrh	r3, [r3, #4]
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f7ff fed9 	bl	800a48e <USBD_CoreFindIF>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a6e0:	7bbb      	ldrb	r3, [r7, #14]
 800a6e2:	2bff      	cmp	r3, #255	; 0xff
 800a6e4:	d01d      	beq.n	800a722 <USBD_StdItfReq+0x92>
 800a6e6:	7bbb      	ldrb	r3, [r7, #14]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d11a      	bne.n	800a722 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a6ec:	7bba      	ldrb	r2, [r7, #14]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	32ae      	adds	r2, #174	; 0xae
 800a6f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6f6:	689b      	ldr	r3, [r3, #8]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d00f      	beq.n	800a71c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a6fc:	7bba      	ldrb	r2, [r7, #14]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a704:	7bba      	ldrb	r2, [r7, #14]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	32ae      	adds	r2, #174	; 0xae
 800a70a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	6839      	ldr	r1, [r7, #0]
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	4798      	blx	r3
 800a716:	4603      	mov	r3, r0
 800a718:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a71a:	e004      	b.n	800a726 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a71c:	2303      	movs	r3, #3
 800a71e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a720:	e001      	b.n	800a726 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a722:	2303      	movs	r3, #3
 800a724:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	88db      	ldrh	r3, [r3, #6]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d110      	bne.n	800a750 <USBD_StdItfReq+0xc0>
 800a72e:	7bfb      	ldrb	r3, [r7, #15]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d10d      	bne.n	800a750 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f000 fdf1 	bl	800b31c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a73a:	e009      	b.n	800a750 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a73c:	6839      	ldr	r1, [r7, #0]
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 fd21 	bl	800b186 <USBD_CtlError>
          break;
 800a744:	e004      	b.n	800a750 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a746:	6839      	ldr	r1, [r7, #0]
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 fd1c 	bl	800b186 <USBD_CtlError>
          break;
 800a74e:	e000      	b.n	800a752 <USBD_StdItfReq+0xc2>
          break;
 800a750:	bf00      	nop
      }
      break;
 800a752:	e004      	b.n	800a75e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a754:	6839      	ldr	r1, [r7, #0]
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 fd15 	bl	800b186 <USBD_CtlError>
      break;
 800a75c:	bf00      	nop
  }

  return ret;
 800a75e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a760:	4618      	mov	r0, r3
 800a762:	3710      	adds	r7, #16
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b084      	sub	sp, #16
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a772:	2300      	movs	r3, #0
 800a774:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	889b      	ldrh	r3, [r3, #4]
 800a77a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a784:	2b40      	cmp	r3, #64	; 0x40
 800a786:	d007      	beq.n	800a798 <USBD_StdEPReq+0x30>
 800a788:	2b40      	cmp	r3, #64	; 0x40
 800a78a:	f200 817f 	bhi.w	800aa8c <USBD_StdEPReq+0x324>
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d02a      	beq.n	800a7e8 <USBD_StdEPReq+0x80>
 800a792:	2b20      	cmp	r3, #32
 800a794:	f040 817a 	bne.w	800aa8c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a798:	7bbb      	ldrb	r3, [r7, #14]
 800a79a:	4619      	mov	r1, r3
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f7ff fe83 	bl	800a4a8 <USBD_CoreFindEP>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a7a6:	7b7b      	ldrb	r3, [r7, #13]
 800a7a8:	2bff      	cmp	r3, #255	; 0xff
 800a7aa:	f000 8174 	beq.w	800aa96 <USBD_StdEPReq+0x32e>
 800a7ae:	7b7b      	ldrb	r3, [r7, #13]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	f040 8170 	bne.w	800aa96 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a7b6:	7b7a      	ldrb	r2, [r7, #13]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a7be:	7b7a      	ldrb	r2, [r7, #13]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	32ae      	adds	r2, #174	; 0xae
 800a7c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7c8:	689b      	ldr	r3, [r3, #8]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	f000 8163 	beq.w	800aa96 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a7d0:	7b7a      	ldrb	r2, [r7, #13]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	32ae      	adds	r2, #174	; 0xae
 800a7d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7da:	689b      	ldr	r3, [r3, #8]
 800a7dc:	6839      	ldr	r1, [r7, #0]
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	4798      	blx	r3
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a7e6:	e156      	b.n	800aa96 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	785b      	ldrb	r3, [r3, #1]
 800a7ec:	2b03      	cmp	r3, #3
 800a7ee:	d008      	beq.n	800a802 <USBD_StdEPReq+0x9a>
 800a7f0:	2b03      	cmp	r3, #3
 800a7f2:	f300 8145 	bgt.w	800aa80 <USBD_StdEPReq+0x318>
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	f000 809b 	beq.w	800a932 <USBD_StdEPReq+0x1ca>
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d03c      	beq.n	800a87a <USBD_StdEPReq+0x112>
 800a800:	e13e      	b.n	800aa80 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a808:	b2db      	uxtb	r3, r3
 800a80a:	2b02      	cmp	r3, #2
 800a80c:	d002      	beq.n	800a814 <USBD_StdEPReq+0xac>
 800a80e:	2b03      	cmp	r3, #3
 800a810:	d016      	beq.n	800a840 <USBD_StdEPReq+0xd8>
 800a812:	e02c      	b.n	800a86e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a814:	7bbb      	ldrb	r3, [r7, #14]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d00d      	beq.n	800a836 <USBD_StdEPReq+0xce>
 800a81a:	7bbb      	ldrb	r3, [r7, #14]
 800a81c:	2b80      	cmp	r3, #128	; 0x80
 800a81e:	d00a      	beq.n	800a836 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a820:	7bbb      	ldrb	r3, [r7, #14]
 800a822:	4619      	mov	r1, r3
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f004 fa17 	bl	800ec58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a82a:	2180      	movs	r1, #128	; 0x80
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f004 fa13 	bl	800ec58 <USBD_LL_StallEP>
 800a832:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a834:	e020      	b.n	800a878 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a836:	6839      	ldr	r1, [r7, #0]
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 fca4 	bl	800b186 <USBD_CtlError>
              break;
 800a83e:	e01b      	b.n	800a878 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	885b      	ldrh	r3, [r3, #2]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d10e      	bne.n	800a866 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a848:	7bbb      	ldrb	r3, [r7, #14]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d00b      	beq.n	800a866 <USBD_StdEPReq+0xfe>
 800a84e:	7bbb      	ldrb	r3, [r7, #14]
 800a850:	2b80      	cmp	r3, #128	; 0x80
 800a852:	d008      	beq.n	800a866 <USBD_StdEPReq+0xfe>
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	88db      	ldrh	r3, [r3, #6]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d104      	bne.n	800a866 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a85c:	7bbb      	ldrb	r3, [r7, #14]
 800a85e:	4619      	mov	r1, r3
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f004 f9f9 	bl	800ec58 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 fd58 	bl	800b31c <USBD_CtlSendStatus>

              break;
 800a86c:	e004      	b.n	800a878 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a86e:	6839      	ldr	r1, [r7, #0]
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 fc88 	bl	800b186 <USBD_CtlError>
              break;
 800a876:	bf00      	nop
          }
          break;
 800a878:	e107      	b.n	800aa8a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a880:	b2db      	uxtb	r3, r3
 800a882:	2b02      	cmp	r3, #2
 800a884:	d002      	beq.n	800a88c <USBD_StdEPReq+0x124>
 800a886:	2b03      	cmp	r3, #3
 800a888:	d016      	beq.n	800a8b8 <USBD_StdEPReq+0x150>
 800a88a:	e04b      	b.n	800a924 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a88c:	7bbb      	ldrb	r3, [r7, #14]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d00d      	beq.n	800a8ae <USBD_StdEPReq+0x146>
 800a892:	7bbb      	ldrb	r3, [r7, #14]
 800a894:	2b80      	cmp	r3, #128	; 0x80
 800a896:	d00a      	beq.n	800a8ae <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a898:	7bbb      	ldrb	r3, [r7, #14]
 800a89a:	4619      	mov	r1, r3
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f004 f9db 	bl	800ec58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8a2:	2180      	movs	r1, #128	; 0x80
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f004 f9d7 	bl	800ec58 <USBD_LL_StallEP>
 800a8aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a8ac:	e040      	b.n	800a930 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a8ae:	6839      	ldr	r1, [r7, #0]
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 fc68 	bl	800b186 <USBD_CtlError>
              break;
 800a8b6:	e03b      	b.n	800a930 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	885b      	ldrh	r3, [r3, #2]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d136      	bne.n	800a92e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a8c0:	7bbb      	ldrb	r3, [r7, #14]
 800a8c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d004      	beq.n	800a8d4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a8ca:	7bbb      	ldrb	r3, [r7, #14]
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f004 f9e1 	bl	800ec96 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 fd21 	bl	800b31c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a8da:	7bbb      	ldrb	r3, [r7, #14]
 800a8dc:	4619      	mov	r1, r3
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f7ff fde2 	bl	800a4a8 <USBD_CoreFindEP>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a8e8:	7b7b      	ldrb	r3, [r7, #13]
 800a8ea:	2bff      	cmp	r3, #255	; 0xff
 800a8ec:	d01f      	beq.n	800a92e <USBD_StdEPReq+0x1c6>
 800a8ee:	7b7b      	ldrb	r3, [r7, #13]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d11c      	bne.n	800a92e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a8f4:	7b7a      	ldrb	r2, [r7, #13]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a8fc:	7b7a      	ldrb	r2, [r7, #13]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	32ae      	adds	r2, #174	; 0xae
 800a902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a906:	689b      	ldr	r3, [r3, #8]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d010      	beq.n	800a92e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a90c:	7b7a      	ldrb	r2, [r7, #13]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	32ae      	adds	r2, #174	; 0xae
 800a912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a916:	689b      	ldr	r3, [r3, #8]
 800a918:	6839      	ldr	r1, [r7, #0]
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	4798      	blx	r3
 800a91e:	4603      	mov	r3, r0
 800a920:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a922:	e004      	b.n	800a92e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a924:	6839      	ldr	r1, [r7, #0]
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 fc2d 	bl	800b186 <USBD_CtlError>
              break;
 800a92c:	e000      	b.n	800a930 <USBD_StdEPReq+0x1c8>
              break;
 800a92e:	bf00      	nop
          }
          break;
 800a930:	e0ab      	b.n	800aa8a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	2b02      	cmp	r3, #2
 800a93c:	d002      	beq.n	800a944 <USBD_StdEPReq+0x1dc>
 800a93e:	2b03      	cmp	r3, #3
 800a940:	d032      	beq.n	800a9a8 <USBD_StdEPReq+0x240>
 800a942:	e097      	b.n	800aa74 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a944:	7bbb      	ldrb	r3, [r7, #14]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d007      	beq.n	800a95a <USBD_StdEPReq+0x1f2>
 800a94a:	7bbb      	ldrb	r3, [r7, #14]
 800a94c:	2b80      	cmp	r3, #128	; 0x80
 800a94e:	d004      	beq.n	800a95a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a950:	6839      	ldr	r1, [r7, #0]
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 fc17 	bl	800b186 <USBD_CtlError>
                break;
 800a958:	e091      	b.n	800aa7e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a95a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	da0b      	bge.n	800a97a <USBD_StdEPReq+0x212>
 800a962:	7bbb      	ldrb	r3, [r7, #14]
 800a964:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a968:	4613      	mov	r3, r2
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	4413      	add	r3, r2
 800a96e:	009b      	lsls	r3, r3, #2
 800a970:	3310      	adds	r3, #16
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	4413      	add	r3, r2
 800a976:	3304      	adds	r3, #4
 800a978:	e00b      	b.n	800a992 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a97a:	7bbb      	ldrb	r3, [r7, #14]
 800a97c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a980:	4613      	mov	r3, r2
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	4413      	add	r3, r2
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a98c:	687a      	ldr	r2, [r7, #4]
 800a98e:	4413      	add	r3, r2
 800a990:	3304      	adds	r3, #4
 800a992:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	2200      	movs	r2, #0
 800a998:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	2202      	movs	r2, #2
 800a99e:	4619      	mov	r1, r3
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 fc61 	bl	800b268 <USBD_CtlSendData>
              break;
 800a9a6:	e06a      	b.n	800aa7e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a9a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	da11      	bge.n	800a9d4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a9b0:	7bbb      	ldrb	r3, [r7, #14]
 800a9b2:	f003 020f 	and.w	r2, r3, #15
 800a9b6:	6879      	ldr	r1, [r7, #4]
 800a9b8:	4613      	mov	r3, r2
 800a9ba:	009b      	lsls	r3, r3, #2
 800a9bc:	4413      	add	r3, r2
 800a9be:	009b      	lsls	r3, r3, #2
 800a9c0:	440b      	add	r3, r1
 800a9c2:	3324      	adds	r3, #36	; 0x24
 800a9c4:	881b      	ldrh	r3, [r3, #0]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d117      	bne.n	800a9fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a9ca:	6839      	ldr	r1, [r7, #0]
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f000 fbda 	bl	800b186 <USBD_CtlError>
                  break;
 800a9d2:	e054      	b.n	800aa7e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a9d4:	7bbb      	ldrb	r3, [r7, #14]
 800a9d6:	f003 020f 	and.w	r2, r3, #15
 800a9da:	6879      	ldr	r1, [r7, #4]
 800a9dc:	4613      	mov	r3, r2
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	4413      	add	r3, r2
 800a9e2:	009b      	lsls	r3, r3, #2
 800a9e4:	440b      	add	r3, r1
 800a9e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a9ea:	881b      	ldrh	r3, [r3, #0]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d104      	bne.n	800a9fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a9f0:	6839      	ldr	r1, [r7, #0]
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 fbc7 	bl	800b186 <USBD_CtlError>
                  break;
 800a9f8:	e041      	b.n	800aa7e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	da0b      	bge.n	800aa1a <USBD_StdEPReq+0x2b2>
 800aa02:	7bbb      	ldrb	r3, [r7, #14]
 800aa04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa08:	4613      	mov	r3, r2
 800aa0a:	009b      	lsls	r3, r3, #2
 800aa0c:	4413      	add	r3, r2
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	3310      	adds	r3, #16
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	4413      	add	r3, r2
 800aa16:	3304      	adds	r3, #4
 800aa18:	e00b      	b.n	800aa32 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa1a:	7bbb      	ldrb	r3, [r7, #14]
 800aa1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa20:	4613      	mov	r3, r2
 800aa22:	009b      	lsls	r3, r3, #2
 800aa24:	4413      	add	r3, r2
 800aa26:	009b      	lsls	r3, r3, #2
 800aa28:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	4413      	add	r3, r2
 800aa30:	3304      	adds	r3, #4
 800aa32:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aa34:	7bbb      	ldrb	r3, [r7, #14]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d002      	beq.n	800aa40 <USBD_StdEPReq+0x2d8>
 800aa3a:	7bbb      	ldrb	r3, [r7, #14]
 800aa3c:	2b80      	cmp	r3, #128	; 0x80
 800aa3e:	d103      	bne.n	800aa48 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	2200      	movs	r2, #0
 800aa44:	601a      	str	r2, [r3, #0]
 800aa46:	e00e      	b.n	800aa66 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800aa48:	7bbb      	ldrb	r3, [r7, #14]
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f004 f941 	bl	800ecd4 <USBD_LL_IsStallEP>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d003      	beq.n	800aa60 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	601a      	str	r2, [r3, #0]
 800aa5e:	e002      	b.n	800aa66 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	2200      	movs	r2, #0
 800aa64:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	2202      	movs	r2, #2
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f000 fbfb 	bl	800b268 <USBD_CtlSendData>
              break;
 800aa72:	e004      	b.n	800aa7e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800aa74:	6839      	ldr	r1, [r7, #0]
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 fb85 	bl	800b186 <USBD_CtlError>
              break;
 800aa7c:	bf00      	nop
          }
          break;
 800aa7e:	e004      	b.n	800aa8a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800aa80:	6839      	ldr	r1, [r7, #0]
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 fb7f 	bl	800b186 <USBD_CtlError>
          break;
 800aa88:	bf00      	nop
      }
      break;
 800aa8a:	e005      	b.n	800aa98 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800aa8c:	6839      	ldr	r1, [r7, #0]
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 fb79 	bl	800b186 <USBD_CtlError>
      break;
 800aa94:	e000      	b.n	800aa98 <USBD_StdEPReq+0x330>
      break;
 800aa96:	bf00      	nop
  }

  return ret;
 800aa98:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3710      	adds	r7, #16
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
	...

0800aaa4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aaae:	2300      	movs	r3, #0
 800aab0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aab2:	2300      	movs	r3, #0
 800aab4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aab6:	2300      	movs	r3, #0
 800aab8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	885b      	ldrh	r3, [r3, #2]
 800aabe:	0a1b      	lsrs	r3, r3, #8
 800aac0:	b29b      	uxth	r3, r3
 800aac2:	3b01      	subs	r3, #1
 800aac4:	2b0e      	cmp	r3, #14
 800aac6:	f200 8152 	bhi.w	800ad6e <USBD_GetDescriptor+0x2ca>
 800aaca:	a201      	add	r2, pc, #4	; (adr r2, 800aad0 <USBD_GetDescriptor+0x2c>)
 800aacc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aad0:	0800ab41 	.word	0x0800ab41
 800aad4:	0800ab59 	.word	0x0800ab59
 800aad8:	0800ab99 	.word	0x0800ab99
 800aadc:	0800ad6f 	.word	0x0800ad6f
 800aae0:	0800ad6f 	.word	0x0800ad6f
 800aae4:	0800ad0f 	.word	0x0800ad0f
 800aae8:	0800ad3b 	.word	0x0800ad3b
 800aaec:	0800ad6f 	.word	0x0800ad6f
 800aaf0:	0800ad6f 	.word	0x0800ad6f
 800aaf4:	0800ad6f 	.word	0x0800ad6f
 800aaf8:	0800ad6f 	.word	0x0800ad6f
 800aafc:	0800ad6f 	.word	0x0800ad6f
 800ab00:	0800ad6f 	.word	0x0800ad6f
 800ab04:	0800ad6f 	.word	0x0800ad6f
 800ab08:	0800ab0d 	.word	0x0800ab0d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab12:	69db      	ldr	r3, [r3, #28]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d00b      	beq.n	800ab30 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab1e:	69db      	ldr	r3, [r3, #28]
 800ab20:	687a      	ldr	r2, [r7, #4]
 800ab22:	7c12      	ldrb	r2, [r2, #16]
 800ab24:	f107 0108 	add.w	r1, r7, #8
 800ab28:	4610      	mov	r0, r2
 800ab2a:	4798      	blx	r3
 800ab2c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab2e:	e126      	b.n	800ad7e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ab30:	6839      	ldr	r1, [r7, #0]
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 fb27 	bl	800b186 <USBD_CtlError>
        err++;
 800ab38:	7afb      	ldrb	r3, [r7, #11]
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	72fb      	strb	r3, [r7, #11]
      break;
 800ab3e:	e11e      	b.n	800ad7e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	7c12      	ldrb	r2, [r2, #16]
 800ab4c:	f107 0108 	add.w	r1, r7, #8
 800ab50:	4610      	mov	r0, r2
 800ab52:	4798      	blx	r3
 800ab54:	60f8      	str	r0, [r7, #12]
      break;
 800ab56:	e112      	b.n	800ad7e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	7c1b      	ldrb	r3, [r3, #16]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d10d      	bne.n	800ab7c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab68:	f107 0208 	add.w	r2, r7, #8
 800ab6c:	4610      	mov	r0, r2
 800ab6e:	4798      	blx	r3
 800ab70:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	3301      	adds	r3, #1
 800ab76:	2202      	movs	r2, #2
 800ab78:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ab7a:	e100      	b.n	800ad7e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab84:	f107 0208 	add.w	r2, r7, #8
 800ab88:	4610      	mov	r0, r2
 800ab8a:	4798      	blx	r3
 800ab8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	3301      	adds	r3, #1
 800ab92:	2202      	movs	r2, #2
 800ab94:	701a      	strb	r2, [r3, #0]
      break;
 800ab96:	e0f2      	b.n	800ad7e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	885b      	ldrh	r3, [r3, #2]
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	2b05      	cmp	r3, #5
 800aba0:	f200 80ac 	bhi.w	800acfc <USBD_GetDescriptor+0x258>
 800aba4:	a201      	add	r2, pc, #4	; (adr r2, 800abac <USBD_GetDescriptor+0x108>)
 800aba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abaa:	bf00      	nop
 800abac:	0800abc5 	.word	0x0800abc5
 800abb0:	0800abf9 	.word	0x0800abf9
 800abb4:	0800ac2d 	.word	0x0800ac2d
 800abb8:	0800ac61 	.word	0x0800ac61
 800abbc:	0800ac95 	.word	0x0800ac95
 800abc0:	0800acc9 	.word	0x0800acc9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d00b      	beq.n	800abe8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	7c12      	ldrb	r2, [r2, #16]
 800abdc:	f107 0108 	add.w	r1, r7, #8
 800abe0:	4610      	mov	r0, r2
 800abe2:	4798      	blx	r3
 800abe4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abe6:	e091      	b.n	800ad0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800abe8:	6839      	ldr	r1, [r7, #0]
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f000 facb 	bl	800b186 <USBD_CtlError>
            err++;
 800abf0:	7afb      	ldrb	r3, [r7, #11]
 800abf2:	3301      	adds	r3, #1
 800abf4:	72fb      	strb	r3, [r7, #11]
          break;
 800abf6:	e089      	b.n	800ad0c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abfe:	689b      	ldr	r3, [r3, #8]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d00b      	beq.n	800ac1c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	7c12      	ldrb	r2, [r2, #16]
 800ac10:	f107 0108 	add.w	r1, r7, #8
 800ac14:	4610      	mov	r0, r2
 800ac16:	4798      	blx	r3
 800ac18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac1a:	e077      	b.n	800ad0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac1c:	6839      	ldr	r1, [r7, #0]
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 fab1 	bl	800b186 <USBD_CtlError>
            err++;
 800ac24:	7afb      	ldrb	r3, [r7, #11]
 800ac26:	3301      	adds	r3, #1
 800ac28:	72fb      	strb	r3, [r7, #11]
          break;
 800ac2a:	e06f      	b.n	800ad0c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac32:	68db      	ldr	r3, [r3, #12]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d00b      	beq.n	800ac50 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac3e:	68db      	ldr	r3, [r3, #12]
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	7c12      	ldrb	r2, [r2, #16]
 800ac44:	f107 0108 	add.w	r1, r7, #8
 800ac48:	4610      	mov	r0, r2
 800ac4a:	4798      	blx	r3
 800ac4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac4e:	e05d      	b.n	800ad0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac50:	6839      	ldr	r1, [r7, #0]
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 fa97 	bl	800b186 <USBD_CtlError>
            err++;
 800ac58:	7afb      	ldrb	r3, [r7, #11]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	72fb      	strb	r3, [r7, #11]
          break;
 800ac5e:	e055      	b.n	800ad0c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac66:	691b      	ldr	r3, [r3, #16]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d00b      	beq.n	800ac84 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac72:	691b      	ldr	r3, [r3, #16]
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	7c12      	ldrb	r2, [r2, #16]
 800ac78:	f107 0108 	add.w	r1, r7, #8
 800ac7c:	4610      	mov	r0, r2
 800ac7e:	4798      	blx	r3
 800ac80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac82:	e043      	b.n	800ad0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac84:	6839      	ldr	r1, [r7, #0]
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f000 fa7d 	bl	800b186 <USBD_CtlError>
            err++;
 800ac8c:	7afb      	ldrb	r3, [r7, #11]
 800ac8e:	3301      	adds	r3, #1
 800ac90:	72fb      	strb	r3, [r7, #11]
          break;
 800ac92:	e03b      	b.n	800ad0c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac9a:	695b      	ldr	r3, [r3, #20]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d00b      	beq.n	800acb8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aca6:	695b      	ldr	r3, [r3, #20]
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	7c12      	ldrb	r2, [r2, #16]
 800acac:	f107 0108 	add.w	r1, r7, #8
 800acb0:	4610      	mov	r0, r2
 800acb2:	4798      	blx	r3
 800acb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acb6:	e029      	b.n	800ad0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800acb8:	6839      	ldr	r1, [r7, #0]
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f000 fa63 	bl	800b186 <USBD_CtlError>
            err++;
 800acc0:	7afb      	ldrb	r3, [r7, #11]
 800acc2:	3301      	adds	r3, #1
 800acc4:	72fb      	strb	r3, [r7, #11]
          break;
 800acc6:	e021      	b.n	800ad0c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acce:	699b      	ldr	r3, [r3, #24]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d00b      	beq.n	800acec <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acda:	699b      	ldr	r3, [r3, #24]
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	7c12      	ldrb	r2, [r2, #16]
 800ace0:	f107 0108 	add.w	r1, r7, #8
 800ace4:	4610      	mov	r0, r2
 800ace6:	4798      	blx	r3
 800ace8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acea:	e00f      	b.n	800ad0c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800acec:	6839      	ldr	r1, [r7, #0]
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 fa49 	bl	800b186 <USBD_CtlError>
            err++;
 800acf4:	7afb      	ldrb	r3, [r7, #11]
 800acf6:	3301      	adds	r3, #1
 800acf8:	72fb      	strb	r3, [r7, #11]
          break;
 800acfa:	e007      	b.n	800ad0c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800acfc:	6839      	ldr	r1, [r7, #0]
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 fa41 	bl	800b186 <USBD_CtlError>
          err++;
 800ad04:	7afb      	ldrb	r3, [r7, #11]
 800ad06:	3301      	adds	r3, #1
 800ad08:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ad0a:	bf00      	nop
      }
      break;
 800ad0c:	e037      	b.n	800ad7e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	7c1b      	ldrb	r3, [r3, #16]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d109      	bne.n	800ad2a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad1e:	f107 0208 	add.w	r2, r7, #8
 800ad22:	4610      	mov	r0, r2
 800ad24:	4798      	blx	r3
 800ad26:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad28:	e029      	b.n	800ad7e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ad2a:	6839      	ldr	r1, [r7, #0]
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f000 fa2a 	bl	800b186 <USBD_CtlError>
        err++;
 800ad32:	7afb      	ldrb	r3, [r7, #11]
 800ad34:	3301      	adds	r3, #1
 800ad36:	72fb      	strb	r3, [r7, #11]
      break;
 800ad38:	e021      	b.n	800ad7e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	7c1b      	ldrb	r3, [r3, #16]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d10d      	bne.n	800ad5e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad4a:	f107 0208 	add.w	r2, r7, #8
 800ad4e:	4610      	mov	r0, r2
 800ad50:	4798      	blx	r3
 800ad52:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	3301      	adds	r3, #1
 800ad58:	2207      	movs	r2, #7
 800ad5a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad5c:	e00f      	b.n	800ad7e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ad5e:	6839      	ldr	r1, [r7, #0]
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 fa10 	bl	800b186 <USBD_CtlError>
        err++;
 800ad66:	7afb      	ldrb	r3, [r7, #11]
 800ad68:	3301      	adds	r3, #1
 800ad6a:	72fb      	strb	r3, [r7, #11]
      break;
 800ad6c:	e007      	b.n	800ad7e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ad6e:	6839      	ldr	r1, [r7, #0]
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f000 fa08 	bl	800b186 <USBD_CtlError>
      err++;
 800ad76:	7afb      	ldrb	r3, [r7, #11]
 800ad78:	3301      	adds	r3, #1
 800ad7a:	72fb      	strb	r3, [r7, #11]
      break;
 800ad7c:	bf00      	nop
  }

  if (err != 0U)
 800ad7e:	7afb      	ldrb	r3, [r7, #11]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d11e      	bne.n	800adc2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	88db      	ldrh	r3, [r3, #6]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d016      	beq.n	800adba <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ad8c:	893b      	ldrh	r3, [r7, #8]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00e      	beq.n	800adb0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	88da      	ldrh	r2, [r3, #6]
 800ad96:	893b      	ldrh	r3, [r7, #8]
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	bf28      	it	cs
 800ad9c:	4613      	movcs	r3, r2
 800ad9e:	b29b      	uxth	r3, r3
 800ada0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ada2:	893b      	ldrh	r3, [r7, #8]
 800ada4:	461a      	mov	r2, r3
 800ada6:	68f9      	ldr	r1, [r7, #12]
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 fa5d 	bl	800b268 <USBD_CtlSendData>
 800adae:	e009      	b.n	800adc4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800adb0:	6839      	ldr	r1, [r7, #0]
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 f9e7 	bl	800b186 <USBD_CtlError>
 800adb8:	e004      	b.n	800adc4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 faae 	bl	800b31c <USBD_CtlSendStatus>
 800adc0:	e000      	b.n	800adc4 <USBD_GetDescriptor+0x320>
    return;
 800adc2:	bf00      	nop
  }
}
 800adc4:	3710      	adds	r7, #16
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop

0800adcc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b084      	sub	sp, #16
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	889b      	ldrh	r3, [r3, #4]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d131      	bne.n	800ae42 <USBD_SetAddress+0x76>
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	88db      	ldrh	r3, [r3, #6]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d12d      	bne.n	800ae42 <USBD_SetAddress+0x76>
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	885b      	ldrh	r3, [r3, #2]
 800adea:	2b7f      	cmp	r3, #127	; 0x7f
 800adec:	d829      	bhi.n	800ae42 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	885b      	ldrh	r3, [r3, #2]
 800adf2:	b2db      	uxtb	r3, r3
 800adf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adf8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae00:	b2db      	uxtb	r3, r3
 800ae02:	2b03      	cmp	r3, #3
 800ae04:	d104      	bne.n	800ae10 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ae06:	6839      	ldr	r1, [r7, #0]
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f000 f9bc 	bl	800b186 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae0e:	e01d      	b.n	800ae4c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	7bfa      	ldrb	r2, [r7, #15]
 800ae14:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ae18:	7bfb      	ldrb	r3, [r7, #15]
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f003 ff85 	bl	800ed2c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 fa7a 	bl	800b31c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ae28:	7bfb      	ldrb	r3, [r7, #15]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d004      	beq.n	800ae38 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2202      	movs	r2, #2
 800ae32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae36:	e009      	b.n	800ae4c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae40:	e004      	b.n	800ae4c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ae42:	6839      	ldr	r1, [r7, #0]
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 f99e 	bl	800b186 <USBD_CtlError>
  }
}
 800ae4a:	bf00      	nop
 800ae4c:	bf00      	nop
 800ae4e:	3710      	adds	r7, #16
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	885b      	ldrh	r3, [r3, #2]
 800ae66:	b2da      	uxtb	r2, r3
 800ae68:	4b4e      	ldr	r3, [pc, #312]	; (800afa4 <USBD_SetConfig+0x150>)
 800ae6a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ae6c:	4b4d      	ldr	r3, [pc, #308]	; (800afa4 <USBD_SetConfig+0x150>)
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	d905      	bls.n	800ae80 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ae74:	6839      	ldr	r1, [r7, #0]
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 f985 	bl	800b186 <USBD_CtlError>
    return USBD_FAIL;
 800ae7c:	2303      	movs	r3, #3
 800ae7e:	e08c      	b.n	800af9a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae86:	b2db      	uxtb	r3, r3
 800ae88:	2b02      	cmp	r3, #2
 800ae8a:	d002      	beq.n	800ae92 <USBD_SetConfig+0x3e>
 800ae8c:	2b03      	cmp	r3, #3
 800ae8e:	d029      	beq.n	800aee4 <USBD_SetConfig+0x90>
 800ae90:	e075      	b.n	800af7e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ae92:	4b44      	ldr	r3, [pc, #272]	; (800afa4 <USBD_SetConfig+0x150>)
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d020      	beq.n	800aedc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ae9a:	4b42      	ldr	r3, [pc, #264]	; (800afa4 <USBD_SetConfig+0x150>)
 800ae9c:	781b      	ldrb	r3, [r3, #0]
 800ae9e:	461a      	mov	r2, r3
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aea4:	4b3f      	ldr	r3, [pc, #252]	; (800afa4 <USBD_SetConfig+0x150>)
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	4619      	mov	r1, r3
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f7fe ffbd 	bl	8009e2a <USBD_SetClassConfig>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800aeb4:	7bfb      	ldrb	r3, [r7, #15]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d008      	beq.n	800aecc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800aeba:	6839      	ldr	r1, [r7, #0]
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 f962 	bl	800b186 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2202      	movs	r2, #2
 800aec6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aeca:	e065      	b.n	800af98 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 fa25 	bl	800b31c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2203      	movs	r2, #3
 800aed6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aeda:	e05d      	b.n	800af98 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 fa1d 	bl	800b31c <USBD_CtlSendStatus>
      break;
 800aee2:	e059      	b.n	800af98 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800aee4:	4b2f      	ldr	r3, [pc, #188]	; (800afa4 <USBD_SetConfig+0x150>)
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d112      	bne.n	800af12 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2202      	movs	r2, #2
 800aef0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800aef4:	4b2b      	ldr	r3, [pc, #172]	; (800afa4 <USBD_SetConfig+0x150>)
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	461a      	mov	r2, r3
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aefe:	4b29      	ldr	r3, [pc, #164]	; (800afa4 <USBD_SetConfig+0x150>)
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	4619      	mov	r1, r3
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f7fe ffac 	bl	8009e62 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 fa06 	bl	800b31c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800af10:	e042      	b.n	800af98 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800af12:	4b24      	ldr	r3, [pc, #144]	; (800afa4 <USBD_SetConfig+0x150>)
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	461a      	mov	r2, r3
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	685b      	ldr	r3, [r3, #4]
 800af1c:	429a      	cmp	r2, r3
 800af1e:	d02a      	beq.n	800af76 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	b2db      	uxtb	r3, r3
 800af26:	4619      	mov	r1, r3
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f7fe ff9a 	bl	8009e62 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800af2e:	4b1d      	ldr	r3, [pc, #116]	; (800afa4 <USBD_SetConfig+0x150>)
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	461a      	mov	r2, r3
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800af38:	4b1a      	ldr	r3, [pc, #104]	; (800afa4 <USBD_SetConfig+0x150>)
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	4619      	mov	r1, r3
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f7fe ff73 	bl	8009e2a <USBD_SetClassConfig>
 800af44:	4603      	mov	r3, r0
 800af46:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800af48:	7bfb      	ldrb	r3, [r7, #15]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d00f      	beq.n	800af6e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800af4e:	6839      	ldr	r1, [r7, #0]
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 f918 	bl	800b186 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	b2db      	uxtb	r3, r3
 800af5c:	4619      	mov	r1, r3
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f7fe ff7f 	bl	8009e62 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2202      	movs	r2, #2
 800af68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800af6c:	e014      	b.n	800af98 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 f9d4 	bl	800b31c <USBD_CtlSendStatus>
      break;
 800af74:	e010      	b.n	800af98 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f000 f9d0 	bl	800b31c <USBD_CtlSendStatus>
      break;
 800af7c:	e00c      	b.n	800af98 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800af7e:	6839      	ldr	r1, [r7, #0]
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 f900 	bl	800b186 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800af86:	4b07      	ldr	r3, [pc, #28]	; (800afa4 <USBD_SetConfig+0x150>)
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	4619      	mov	r1, r3
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f7fe ff68 	bl	8009e62 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800af92:	2303      	movs	r3, #3
 800af94:	73fb      	strb	r3, [r7, #15]
      break;
 800af96:	bf00      	nop
  }

  return ret;
 800af98:	7bfb      	ldrb	r3, [r7, #15]
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3710      	adds	r7, #16
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
 800afa2:	bf00      	nop
 800afa4:	2000066e 	.word	0x2000066e

0800afa8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	88db      	ldrh	r3, [r3, #6]
 800afb6:	2b01      	cmp	r3, #1
 800afb8:	d004      	beq.n	800afc4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800afba:	6839      	ldr	r1, [r7, #0]
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 f8e2 	bl	800b186 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800afc2:	e023      	b.n	800b00c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	2b02      	cmp	r3, #2
 800afce:	dc02      	bgt.n	800afd6 <USBD_GetConfig+0x2e>
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	dc03      	bgt.n	800afdc <USBD_GetConfig+0x34>
 800afd4:	e015      	b.n	800b002 <USBD_GetConfig+0x5a>
 800afd6:	2b03      	cmp	r3, #3
 800afd8:	d00b      	beq.n	800aff2 <USBD_GetConfig+0x4a>
 800afda:	e012      	b.n	800b002 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2200      	movs	r2, #0
 800afe0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	3308      	adds	r3, #8
 800afe6:	2201      	movs	r2, #1
 800afe8:	4619      	mov	r1, r3
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 f93c 	bl	800b268 <USBD_CtlSendData>
        break;
 800aff0:	e00c      	b.n	800b00c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	3304      	adds	r3, #4
 800aff6:	2201      	movs	r2, #1
 800aff8:	4619      	mov	r1, r3
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f000 f934 	bl	800b268 <USBD_CtlSendData>
        break;
 800b000:	e004      	b.n	800b00c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b002:	6839      	ldr	r1, [r7, #0]
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f000 f8be 	bl	800b186 <USBD_CtlError>
        break;
 800b00a:	bf00      	nop
}
 800b00c:	bf00      	nop
 800b00e:	3708      	adds	r7, #8
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b024:	b2db      	uxtb	r3, r3
 800b026:	3b01      	subs	r3, #1
 800b028:	2b02      	cmp	r3, #2
 800b02a:	d81e      	bhi.n	800b06a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	88db      	ldrh	r3, [r3, #6]
 800b030:	2b02      	cmp	r3, #2
 800b032:	d004      	beq.n	800b03e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b034:	6839      	ldr	r1, [r7, #0]
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 f8a5 	bl	800b186 <USBD_CtlError>
        break;
 800b03c:	e01a      	b.n	800b074 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2201      	movs	r2, #1
 800b042:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d005      	beq.n	800b05a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	68db      	ldr	r3, [r3, #12]
 800b052:	f043 0202 	orr.w	r2, r3, #2
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	330c      	adds	r3, #12
 800b05e:	2202      	movs	r2, #2
 800b060:	4619      	mov	r1, r3
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 f900 	bl	800b268 <USBD_CtlSendData>
      break;
 800b068:	e004      	b.n	800b074 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b06a:	6839      	ldr	r1, [r7, #0]
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f000 f88a 	bl	800b186 <USBD_CtlError>
      break;
 800b072:	bf00      	nop
  }
}
 800b074:	bf00      	nop
 800b076:	3708      	adds	r7, #8
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b082      	sub	sp, #8
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	885b      	ldrh	r3, [r3, #2]
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d107      	bne.n	800b09e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2201      	movs	r2, #1
 800b092:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f000 f940 	bl	800b31c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b09c:	e013      	b.n	800b0c6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	885b      	ldrh	r3, [r3, #2]
 800b0a2:	2b02      	cmp	r3, #2
 800b0a4:	d10b      	bne.n	800b0be <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	889b      	ldrh	r3, [r3, #4]
 800b0aa:	0a1b      	lsrs	r3, r3, #8
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	b2da      	uxtb	r2, r3
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f000 f930 	bl	800b31c <USBD_CtlSendStatus>
}
 800b0bc:	e003      	b.n	800b0c6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b0be:	6839      	ldr	r1, [r7, #0]
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 f860 	bl	800b186 <USBD_CtlError>
}
 800b0c6:	bf00      	nop
 800b0c8:	3708      	adds	r7, #8
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b082      	sub	sp, #8
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
 800b0d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	3b01      	subs	r3, #1
 800b0e2:	2b02      	cmp	r3, #2
 800b0e4:	d80b      	bhi.n	800b0fe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	885b      	ldrh	r3, [r3, #2]
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d10c      	bne.n	800b108 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 f910 	bl	800b31c <USBD_CtlSendStatus>
      }
      break;
 800b0fc:	e004      	b.n	800b108 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b0fe:	6839      	ldr	r1, [r7, #0]
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f000 f840 	bl	800b186 <USBD_CtlError>
      break;
 800b106:	e000      	b.n	800b10a <USBD_ClrFeature+0x3c>
      break;
 800b108:	bf00      	nop
  }
}
 800b10a:	bf00      	nop
 800b10c:	3708      	adds	r7, #8
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b084      	sub	sp, #16
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
 800b11a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	781a      	ldrb	r2, [r3, #0]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	3301      	adds	r3, #1
 800b12c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	781a      	ldrb	r2, [r3, #0]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	3301      	adds	r3, #1
 800b13a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b13c:	68f8      	ldr	r0, [r7, #12]
 800b13e:	f7ff fa17 	bl	800a570 <SWAPBYTE>
 800b142:	4603      	mov	r3, r0
 800b144:	461a      	mov	r2, r3
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	3301      	adds	r3, #1
 800b14e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	3301      	adds	r3, #1
 800b154:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b156:	68f8      	ldr	r0, [r7, #12]
 800b158:	f7ff fa0a 	bl	800a570 <SWAPBYTE>
 800b15c:	4603      	mov	r3, r0
 800b15e:	461a      	mov	r2, r3
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	3301      	adds	r3, #1
 800b168:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	3301      	adds	r3, #1
 800b16e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b170:	68f8      	ldr	r0, [r7, #12]
 800b172:	f7ff f9fd 	bl	800a570 <SWAPBYTE>
 800b176:	4603      	mov	r3, r0
 800b178:	461a      	mov	r2, r3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	80da      	strh	r2, [r3, #6]
}
 800b17e:	bf00      	nop
 800b180:	3710      	adds	r7, #16
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}

0800b186 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b186:	b580      	push	{r7, lr}
 800b188:	b082      	sub	sp, #8
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
 800b18e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b190:	2180      	movs	r1, #128	; 0x80
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f003 fd60 	bl	800ec58 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b198:	2100      	movs	r1, #0
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f003 fd5c 	bl	800ec58 <USBD_LL_StallEP>
}
 800b1a0:	bf00      	nop
 800b1a2:	3708      	adds	r7, #8
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b086      	sub	sp, #24
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	60b9      	str	r1, [r7, #8]
 800b1b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d036      	beq.n	800b22c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b1c2:	6938      	ldr	r0, [r7, #16]
 800b1c4:	f000 f836 	bl	800b234 <USBD_GetLen>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	005b      	lsls	r3, r3, #1
 800b1d0:	b29a      	uxth	r2, r3
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b1d6:	7dfb      	ldrb	r3, [r7, #23]
 800b1d8:	68ba      	ldr	r2, [r7, #8]
 800b1da:	4413      	add	r3, r2
 800b1dc:	687a      	ldr	r2, [r7, #4]
 800b1de:	7812      	ldrb	r2, [r2, #0]
 800b1e0:	701a      	strb	r2, [r3, #0]
  idx++;
 800b1e2:	7dfb      	ldrb	r3, [r7, #23]
 800b1e4:	3301      	adds	r3, #1
 800b1e6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b1e8:	7dfb      	ldrb	r3, [r7, #23]
 800b1ea:	68ba      	ldr	r2, [r7, #8]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	2203      	movs	r2, #3
 800b1f0:	701a      	strb	r2, [r3, #0]
  idx++;
 800b1f2:	7dfb      	ldrb	r3, [r7, #23]
 800b1f4:	3301      	adds	r3, #1
 800b1f6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b1f8:	e013      	b.n	800b222 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b1fa:	7dfb      	ldrb	r3, [r7, #23]
 800b1fc:	68ba      	ldr	r2, [r7, #8]
 800b1fe:	4413      	add	r3, r2
 800b200:	693a      	ldr	r2, [r7, #16]
 800b202:	7812      	ldrb	r2, [r2, #0]
 800b204:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	3301      	adds	r3, #1
 800b20a:	613b      	str	r3, [r7, #16]
    idx++;
 800b20c:	7dfb      	ldrb	r3, [r7, #23]
 800b20e:	3301      	adds	r3, #1
 800b210:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b212:	7dfb      	ldrb	r3, [r7, #23]
 800b214:	68ba      	ldr	r2, [r7, #8]
 800b216:	4413      	add	r3, r2
 800b218:	2200      	movs	r2, #0
 800b21a:	701a      	strb	r2, [r3, #0]
    idx++;
 800b21c:	7dfb      	ldrb	r3, [r7, #23]
 800b21e:	3301      	adds	r3, #1
 800b220:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d1e7      	bne.n	800b1fa <USBD_GetString+0x52>
 800b22a:	e000      	b.n	800b22e <USBD_GetString+0x86>
    return;
 800b22c:	bf00      	nop
  }
}
 800b22e:	3718      	adds	r7, #24
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b234:	b480      	push	{r7}
 800b236:	b085      	sub	sp, #20
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b23c:	2300      	movs	r3, #0
 800b23e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b244:	e005      	b.n	800b252 <USBD_GetLen+0x1e>
  {
    len++;
 800b246:	7bfb      	ldrb	r3, [r7, #15]
 800b248:	3301      	adds	r3, #1
 800b24a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	3301      	adds	r3, #1
 800b250:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d1f5      	bne.n	800b246 <USBD_GetLen+0x12>
  }

  return len;
 800b25a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3714      	adds	r7, #20
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr

0800b268 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b084      	sub	sp, #16
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2202      	movs	r2, #2
 800b278:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	687a      	ldr	r2, [r7, #4]
 800b286:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	68ba      	ldr	r2, [r7, #8]
 800b28c:	2100      	movs	r1, #0
 800b28e:	68f8      	ldr	r0, [r7, #12]
 800b290:	f003 fd6b 	bl	800ed6a <USBD_LL_Transmit>

  return USBD_OK;
 800b294:	2300      	movs	r3, #0
}
 800b296:	4618      	mov	r0, r3
 800b298:	3710      	adds	r7, #16
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}

0800b29e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b29e:	b580      	push	{r7, lr}
 800b2a0:	b084      	sub	sp, #16
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	60f8      	str	r0, [r7, #12]
 800b2a6:	60b9      	str	r1, [r7, #8]
 800b2a8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	68ba      	ldr	r2, [r7, #8]
 800b2ae:	2100      	movs	r1, #0
 800b2b0:	68f8      	ldr	r0, [r7, #12]
 800b2b2:	f003 fd5a 	bl	800ed6a <USBD_LL_Transmit>

  return USBD_OK;
 800b2b6:	2300      	movs	r3, #0
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3710      	adds	r7, #16
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	60b9      	str	r1, [r7, #8]
 800b2ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2203      	movs	r2, #3
 800b2d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	687a      	ldr	r2, [r7, #4]
 800b2e0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	68ba      	ldr	r2, [r7, #8]
 800b2e8:	2100      	movs	r1, #0
 800b2ea:	68f8      	ldr	r0, [r7, #12]
 800b2ec:	f003 fd5e 	bl	800edac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b2f0:	2300      	movs	r3, #0
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3710      	adds	r7, #16
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}

0800b2fa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b2fa:	b580      	push	{r7, lr}
 800b2fc:	b084      	sub	sp, #16
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	60f8      	str	r0, [r7, #12]
 800b302:	60b9      	str	r1, [r7, #8]
 800b304:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	68ba      	ldr	r2, [r7, #8]
 800b30a:	2100      	movs	r1, #0
 800b30c:	68f8      	ldr	r0, [r7, #12]
 800b30e:	f003 fd4d 	bl	800edac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b312:	2300      	movs	r3, #0
}
 800b314:	4618      	mov	r0, r3
 800b316:	3710      	adds	r7, #16
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}

0800b31c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b082      	sub	sp, #8
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2204      	movs	r2, #4
 800b328:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b32c:	2300      	movs	r3, #0
 800b32e:	2200      	movs	r2, #0
 800b330:	2100      	movs	r1, #0
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f003 fd19 	bl	800ed6a <USBD_LL_Transmit>

  return USBD_OK;
 800b338:	2300      	movs	r3, #0
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3708      	adds	r7, #8
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}

0800b342 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b342:	b580      	push	{r7, lr}
 800b344:	b082      	sub	sp, #8
 800b346:	af00      	add	r7, sp, #0
 800b348:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2205      	movs	r2, #5
 800b34e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b352:	2300      	movs	r3, #0
 800b354:	2200      	movs	r2, #0
 800b356:	2100      	movs	r1, #0
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f003 fd27 	bl	800edac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b35e:	2300      	movs	r3, #0
}
 800b360:	4618      	mov	r0, r3
 800b362:	3708      	adds	r7, #8
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b368:	b480      	push	{r7}
 800b36a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800b36c:	bf00      	nop
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr
	...

0800b378 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b378:	b480      	push	{r7}
 800b37a:	b085      	sub	sp, #20
 800b37c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b37e:	f3ef 8305 	mrs	r3, IPSR
 800b382:	60bb      	str	r3, [r7, #8]
  return(result);
 800b384:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b386:	2b00      	cmp	r3, #0
 800b388:	d10f      	bne.n	800b3aa <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b38a:	f3ef 8310 	mrs	r3, PRIMASK
 800b38e:	607b      	str	r3, [r7, #4]
  return(result);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d105      	bne.n	800b3a2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b396:	f3ef 8311 	mrs	r3, BASEPRI
 800b39a:	603b      	str	r3, [r7, #0]
  return(result);
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d007      	beq.n	800b3b2 <osKernelInitialize+0x3a>
 800b3a2:	4b0e      	ldr	r3, [pc, #56]	; (800b3dc <osKernelInitialize+0x64>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	2b02      	cmp	r3, #2
 800b3a8:	d103      	bne.n	800b3b2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800b3aa:	f06f 0305 	mvn.w	r3, #5
 800b3ae:	60fb      	str	r3, [r7, #12]
 800b3b0:	e00c      	b.n	800b3cc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b3b2:	4b0a      	ldr	r3, [pc, #40]	; (800b3dc <osKernelInitialize+0x64>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d105      	bne.n	800b3c6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b3ba:	4b08      	ldr	r3, [pc, #32]	; (800b3dc <osKernelInitialize+0x64>)
 800b3bc:	2201      	movs	r2, #1
 800b3be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	60fb      	str	r3, [r7, #12]
 800b3c4:	e002      	b.n	800b3cc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800b3c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b3ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3714      	adds	r7, #20
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d8:	4770      	bx	lr
 800b3da:	bf00      	nop
 800b3dc:	20000670 	.word	0x20000670

0800b3e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3e6:	f3ef 8305 	mrs	r3, IPSR
 800b3ea:	60bb      	str	r3, [r7, #8]
  return(result);
 800b3ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d10f      	bne.n	800b412 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3f2:	f3ef 8310 	mrs	r3, PRIMASK
 800b3f6:	607b      	str	r3, [r7, #4]
  return(result);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d105      	bne.n	800b40a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b3fe:	f3ef 8311 	mrs	r3, BASEPRI
 800b402:	603b      	str	r3, [r7, #0]
  return(result);
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d007      	beq.n	800b41a <osKernelStart+0x3a>
 800b40a:	4b0f      	ldr	r3, [pc, #60]	; (800b448 <osKernelStart+0x68>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	2b02      	cmp	r3, #2
 800b410:	d103      	bne.n	800b41a <osKernelStart+0x3a>
    stat = osErrorISR;
 800b412:	f06f 0305 	mvn.w	r3, #5
 800b416:	60fb      	str	r3, [r7, #12]
 800b418:	e010      	b.n	800b43c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b41a:	4b0b      	ldr	r3, [pc, #44]	; (800b448 <osKernelStart+0x68>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	2b01      	cmp	r3, #1
 800b420:	d109      	bne.n	800b436 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b422:	f7ff ffa1 	bl	800b368 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b426:	4b08      	ldr	r3, [pc, #32]	; (800b448 <osKernelStart+0x68>)
 800b428:	2202      	movs	r2, #2
 800b42a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b42c:	f001 fafe 	bl	800ca2c <vTaskStartScheduler>
      stat = osOK;
 800b430:	2300      	movs	r3, #0
 800b432:	60fb      	str	r3, [r7, #12]
 800b434:	e002      	b.n	800b43c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800b436:	f04f 33ff 	mov.w	r3, #4294967295
 800b43a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b43c:	68fb      	ldr	r3, [r7, #12]
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3710      	adds	r7, #16
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}
 800b446:	bf00      	nop
 800b448:	20000670 	.word	0x20000670

0800b44c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b090      	sub	sp, #64	; 0x40
 800b450:	af04      	add	r7, sp, #16
 800b452:	60f8      	str	r0, [r7, #12]
 800b454:	60b9      	str	r1, [r7, #8]
 800b456:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b458:	2300      	movs	r3, #0
 800b45a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b45c:	f3ef 8305 	mrs	r3, IPSR
 800b460:	61fb      	str	r3, [r7, #28]
  return(result);
 800b462:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800b464:	2b00      	cmp	r3, #0
 800b466:	f040 8090 	bne.w	800b58a <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b46a:	f3ef 8310 	mrs	r3, PRIMASK
 800b46e:	61bb      	str	r3, [r7, #24]
  return(result);
 800b470:	69bb      	ldr	r3, [r7, #24]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d105      	bne.n	800b482 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b476:	f3ef 8311 	mrs	r3, BASEPRI
 800b47a:	617b      	str	r3, [r7, #20]
  return(result);
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d003      	beq.n	800b48a <osThreadNew+0x3e>
 800b482:	4b44      	ldr	r3, [pc, #272]	; (800b594 <osThreadNew+0x148>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	2b02      	cmp	r3, #2
 800b488:	d07f      	beq.n	800b58a <osThreadNew+0x13e>
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d07c      	beq.n	800b58a <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800b490:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b494:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800b496:	2318      	movs	r3, #24
 800b498:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800b49a:	2300      	movs	r3, #0
 800b49c:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800b49e:	f04f 33ff 	mov.w	r3, #4294967295
 800b4a2:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d045      	beq.n	800b536 <osThreadNew+0xea>
      if (attr->name != NULL) {
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d002      	beq.n	800b4b8 <osThreadNew+0x6c>
        name = attr->name;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	699b      	ldr	r3, [r3, #24]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d002      	beq.n	800b4c6 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	699b      	ldr	r3, [r3, #24]
 800b4c4:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d008      	beq.n	800b4de <osThreadNew+0x92>
 800b4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ce:	2b38      	cmp	r3, #56	; 0x38
 800b4d0:	d805      	bhi.n	800b4de <osThreadNew+0x92>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	685b      	ldr	r3, [r3, #4]
 800b4d6:	f003 0301 	and.w	r3, r3, #1
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d001      	beq.n	800b4e2 <osThreadNew+0x96>
        return (NULL);
 800b4de:	2300      	movs	r3, #0
 800b4e0:	e054      	b.n	800b58c <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	695b      	ldr	r3, [r3, #20]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d003      	beq.n	800b4f2 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	695b      	ldr	r3, [r3, #20]
 800b4ee:	089b      	lsrs	r3, r3, #2
 800b4f0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	689b      	ldr	r3, [r3, #8]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d00e      	beq.n	800b518 <osThreadNew+0xcc>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	68db      	ldr	r3, [r3, #12]
 800b4fe:	2bbb      	cmp	r3, #187	; 0xbb
 800b500:	d90a      	bls.n	800b518 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b506:	2b00      	cmp	r3, #0
 800b508:	d006      	beq.n	800b518 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	695b      	ldr	r3, [r3, #20]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d002      	beq.n	800b518 <osThreadNew+0xcc>
        mem = 1;
 800b512:	2301      	movs	r3, #1
 800b514:	623b      	str	r3, [r7, #32]
 800b516:	e010      	b.n	800b53a <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	689b      	ldr	r3, [r3, #8]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d10c      	bne.n	800b53a <osThreadNew+0xee>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	68db      	ldr	r3, [r3, #12]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d108      	bne.n	800b53a <osThreadNew+0xee>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	691b      	ldr	r3, [r3, #16]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d104      	bne.n	800b53a <osThreadNew+0xee>
          mem = 0;
 800b530:	2300      	movs	r3, #0
 800b532:	623b      	str	r3, [r7, #32]
 800b534:	e001      	b.n	800b53a <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800b536:	2300      	movs	r3, #0
 800b538:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b53a:	6a3b      	ldr	r3, [r7, #32]
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	d110      	bne.n	800b562 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b548:	9202      	str	r2, [sp, #8]
 800b54a:	9301      	str	r3, [sp, #4]
 800b54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b54e:	9300      	str	r3, [sp, #0]
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b554:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b556:	68f8      	ldr	r0, [r7, #12]
 800b558:	f001 f872 	bl	800c640 <xTaskCreateStatic>
 800b55c:	4603      	mov	r3, r0
 800b55e:	613b      	str	r3, [r7, #16]
 800b560:	e013      	b.n	800b58a <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800b562:	6a3b      	ldr	r3, [r7, #32]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d110      	bne.n	800b58a <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56a:	b29a      	uxth	r2, r3
 800b56c:	f107 0310 	add.w	r3, r7, #16
 800b570:	9301      	str	r3, [sp, #4]
 800b572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b574:	9300      	str	r3, [sp, #0]
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b57a:	68f8      	ldr	r0, [r7, #12]
 800b57c:	f001 f8c3 	bl	800c706 <xTaskCreate>
 800b580:	4603      	mov	r3, r0
 800b582:	2b01      	cmp	r3, #1
 800b584:	d001      	beq.n	800b58a <osThreadNew+0x13e>
          hTask = NULL;
 800b586:	2300      	movs	r3, #0
 800b588:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b58a:	693b      	ldr	r3, [r7, #16]
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3730      	adds	r7, #48	; 0x30
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}
 800b594:	20000670 	.word	0x20000670

0800b598 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800b598:	b580      	push	{r7, lr}
 800b59a:	b086      	sub	sp, #24
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5a0:	f3ef 8305 	mrs	r3, IPSR
 800b5a4:	613b      	str	r3, [r7, #16]
  return(result);
 800b5a6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d10f      	bne.n	800b5cc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5ac:	f3ef 8310 	mrs	r3, PRIMASK
 800b5b0:	60fb      	str	r3, [r7, #12]
  return(result);
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d105      	bne.n	800b5c4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b5b8:	f3ef 8311 	mrs	r3, BASEPRI
 800b5bc:	60bb      	str	r3, [r7, #8]
  return(result);
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d007      	beq.n	800b5d4 <osDelay+0x3c>
 800b5c4:	4b0a      	ldr	r3, [pc, #40]	; (800b5f0 <osDelay+0x58>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	2b02      	cmp	r3, #2
 800b5ca:	d103      	bne.n	800b5d4 <osDelay+0x3c>
    stat = osErrorISR;
 800b5cc:	f06f 0305 	mvn.w	r3, #5
 800b5d0:	617b      	str	r3, [r7, #20]
 800b5d2:	e007      	b.n	800b5e4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d002      	beq.n	800b5e4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f001 f9ee 	bl	800c9c0 <vTaskDelay>
    }
  }

  return (stat);
 800b5e4:	697b      	ldr	r3, [r7, #20]
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3718      	adds	r7, #24
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	20000670 	.word	0x20000670

0800b5f4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b08c      	sub	sp, #48	; 0x30
 800b5f8:	af02      	add	r7, sp, #8
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	60b9      	str	r1, [r7, #8]
 800b5fe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b600:	2300      	movs	r3, #0
 800b602:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b604:	f3ef 8305 	mrs	r3, IPSR
 800b608:	61bb      	str	r3, [r7, #24]
  return(result);
 800b60a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d16f      	bne.n	800b6f0 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b610:	f3ef 8310 	mrs	r3, PRIMASK
 800b614:	617b      	str	r3, [r7, #20]
  return(result);
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d105      	bne.n	800b628 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b61c:	f3ef 8311 	mrs	r3, BASEPRI
 800b620:	613b      	str	r3, [r7, #16]
  return(result);
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d003      	beq.n	800b630 <osMessageQueueNew+0x3c>
 800b628:	4b34      	ldr	r3, [pc, #208]	; (800b6fc <osMessageQueueNew+0x108>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	2b02      	cmp	r3, #2
 800b62e:	d05f      	beq.n	800b6f0 <osMessageQueueNew+0xfc>
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d05c      	beq.n	800b6f0 <osMessageQueueNew+0xfc>
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d059      	beq.n	800b6f0 <osMessageQueueNew+0xfc>
    mem = -1;
 800b63c:	f04f 33ff 	mov.w	r3, #4294967295
 800b640:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d029      	beq.n	800b69c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	689b      	ldr	r3, [r3, #8]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d012      	beq.n	800b676 <osMessageQueueNew+0x82>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	68db      	ldr	r3, [r3, #12]
 800b654:	2b4f      	cmp	r3, #79	; 0x4f
 800b656:	d90e      	bls.n	800b676 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d00a      	beq.n	800b676 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	695a      	ldr	r2, [r3, #20]
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	68b9      	ldr	r1, [r7, #8]
 800b668:	fb01 f303 	mul.w	r3, r1, r3
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d302      	bcc.n	800b676 <osMessageQueueNew+0x82>
        mem = 1;
 800b670:	2301      	movs	r3, #1
 800b672:	623b      	str	r3, [r7, #32]
 800b674:	e014      	b.n	800b6a0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	689b      	ldr	r3, [r3, #8]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d110      	bne.n	800b6a0 <osMessageQueueNew+0xac>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	68db      	ldr	r3, [r3, #12]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d10c      	bne.n	800b6a0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d108      	bne.n	800b6a0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	695b      	ldr	r3, [r3, #20]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d104      	bne.n	800b6a0 <osMessageQueueNew+0xac>
          mem = 0;
 800b696:	2300      	movs	r3, #0
 800b698:	623b      	str	r3, [r7, #32]
 800b69a:	e001      	b.n	800b6a0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800b69c:	2300      	movs	r3, #0
 800b69e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b6a0:	6a3b      	ldr	r3, [r7, #32]
 800b6a2:	2b01      	cmp	r3, #1
 800b6a4:	d10b      	bne.n	800b6be <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	691a      	ldr	r2, [r3, #16]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	689b      	ldr	r3, [r3, #8]
 800b6ae:	2100      	movs	r1, #0
 800b6b0:	9100      	str	r1, [sp, #0]
 800b6b2:	68b9      	ldr	r1, [r7, #8]
 800b6b4:	68f8      	ldr	r0, [r7, #12]
 800b6b6:	f000 fa5b 	bl	800bb70 <xQueueGenericCreateStatic>
 800b6ba:	6278      	str	r0, [r7, #36]	; 0x24
 800b6bc:	e008      	b.n	800b6d0 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800b6be:	6a3b      	ldr	r3, [r7, #32]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d105      	bne.n	800b6d0 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	68b9      	ldr	r1, [r7, #8]
 800b6c8:	68f8      	ldr	r0, [r7, #12]
 800b6ca:	f000 fad3 	bl	800bc74 <xQueueGenericCreate>
 800b6ce:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00c      	beq.n	800b6f0 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d003      	beq.n	800b6e4 <osMessageQueueNew+0xf0>
        name = attr->name;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	61fb      	str	r3, [r7, #28]
 800b6e2:	e001      	b.n	800b6e8 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800b6e8:	69f9      	ldr	r1, [r7, #28]
 800b6ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b6ec:	f000 ff4a 	bl	800c584 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3728      	adds	r7, #40	; 0x28
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
 800b6fa:	bf00      	nop
 800b6fc:	20000670 	.word	0x20000670

0800b700 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b700:	b580      	push	{r7, lr}
 800b702:	b08a      	sub	sp, #40	; 0x28
 800b704:	af00      	add	r7, sp, #0
 800b706:	60f8      	str	r0, [r7, #12]
 800b708:	60b9      	str	r1, [r7, #8]
 800b70a:	603b      	str	r3, [r7, #0]
 800b70c:	4613      	mov	r3, r2
 800b70e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b714:	2300      	movs	r3, #0
 800b716:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b718:	f3ef 8305 	mrs	r3, IPSR
 800b71c:	61fb      	str	r3, [r7, #28]
  return(result);
 800b71e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800b720:	2b00      	cmp	r3, #0
 800b722:	d10f      	bne.n	800b744 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b724:	f3ef 8310 	mrs	r3, PRIMASK
 800b728:	61bb      	str	r3, [r7, #24]
  return(result);
 800b72a:	69bb      	ldr	r3, [r7, #24]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d105      	bne.n	800b73c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b730:	f3ef 8311 	mrs	r3, BASEPRI
 800b734:	617b      	str	r3, [r7, #20]
  return(result);
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d02c      	beq.n	800b796 <osMessageQueuePut+0x96>
 800b73c:	4b28      	ldr	r3, [pc, #160]	; (800b7e0 <osMessageQueuePut+0xe0>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	2b02      	cmp	r3, #2
 800b742:	d128      	bne.n	800b796 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b744:	6a3b      	ldr	r3, [r7, #32]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d005      	beq.n	800b756 <osMessageQueuePut+0x56>
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d002      	beq.n	800b756 <osMessageQueuePut+0x56>
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d003      	beq.n	800b75e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800b756:	f06f 0303 	mvn.w	r3, #3
 800b75a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b75c:	e039      	b.n	800b7d2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800b75e:	2300      	movs	r3, #0
 800b760:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b762:	f107 0210 	add.w	r2, r7, #16
 800b766:	2300      	movs	r3, #0
 800b768:	68b9      	ldr	r1, [r7, #8]
 800b76a:	6a38      	ldr	r0, [r7, #32]
 800b76c:	f000 fbee 	bl	800bf4c <xQueueGenericSendFromISR>
 800b770:	4603      	mov	r3, r0
 800b772:	2b01      	cmp	r3, #1
 800b774:	d003      	beq.n	800b77e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800b776:	f06f 0302 	mvn.w	r3, #2
 800b77a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b77c:	e029      	b.n	800b7d2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d026      	beq.n	800b7d2 <osMessageQueuePut+0xd2>
 800b784:	4b17      	ldr	r3, [pc, #92]	; (800b7e4 <osMessageQueuePut+0xe4>)
 800b786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b78a:	601a      	str	r2, [r3, #0]
 800b78c:	f3bf 8f4f 	dsb	sy
 800b790:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b794:	e01d      	b.n	800b7d2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b796:	6a3b      	ldr	r3, [r7, #32]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d002      	beq.n	800b7a2 <osMessageQueuePut+0xa2>
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d103      	bne.n	800b7aa <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800b7a2:	f06f 0303 	mvn.w	r3, #3
 800b7a6:	627b      	str	r3, [r7, #36]	; 0x24
 800b7a8:	e014      	b.n	800b7d4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	683a      	ldr	r2, [r7, #0]
 800b7ae:	68b9      	ldr	r1, [r7, #8]
 800b7b0:	6a38      	ldr	r0, [r7, #32]
 800b7b2:	f000 fac5 	bl	800bd40 <xQueueGenericSend>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	d00b      	beq.n	800b7d4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d003      	beq.n	800b7ca <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800b7c2:	f06f 0301 	mvn.w	r3, #1
 800b7c6:	627b      	str	r3, [r7, #36]	; 0x24
 800b7c8:	e004      	b.n	800b7d4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800b7ca:	f06f 0302 	mvn.w	r3, #2
 800b7ce:	627b      	str	r3, [r7, #36]	; 0x24
 800b7d0:	e000      	b.n	800b7d4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b7d2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800b7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3728      	adds	r7, #40	; 0x28
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	20000670 	.word	0x20000670
 800b7e4:	e000ed04 	.word	0xe000ed04

0800b7e8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b08a      	sub	sp, #40	; 0x28
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	60f8      	str	r0, [r7, #12]
 800b7f0:	60b9      	str	r1, [r7, #8]
 800b7f2:	607a      	str	r2, [r7, #4]
 800b7f4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7fe:	f3ef 8305 	mrs	r3, IPSR
 800b802:	61fb      	str	r3, [r7, #28]
  return(result);
 800b804:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800b806:	2b00      	cmp	r3, #0
 800b808:	d10f      	bne.n	800b82a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b80a:	f3ef 8310 	mrs	r3, PRIMASK
 800b80e:	61bb      	str	r3, [r7, #24]
  return(result);
 800b810:	69bb      	ldr	r3, [r7, #24]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d105      	bne.n	800b822 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b816:	f3ef 8311 	mrs	r3, BASEPRI
 800b81a:	617b      	str	r3, [r7, #20]
  return(result);
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d02c      	beq.n	800b87c <osMessageQueueGet+0x94>
 800b822:	4b28      	ldr	r3, [pc, #160]	; (800b8c4 <osMessageQueueGet+0xdc>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	2b02      	cmp	r3, #2
 800b828:	d128      	bne.n	800b87c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b82a:	6a3b      	ldr	r3, [r7, #32]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d005      	beq.n	800b83c <osMessageQueueGet+0x54>
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d002      	beq.n	800b83c <osMessageQueueGet+0x54>
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d003      	beq.n	800b844 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800b83c:	f06f 0303 	mvn.w	r3, #3
 800b840:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b842:	e038      	b.n	800b8b6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800b844:	2300      	movs	r3, #0
 800b846:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b848:	f107 0310 	add.w	r3, r7, #16
 800b84c:	461a      	mov	r2, r3
 800b84e:	68b9      	ldr	r1, [r7, #8]
 800b850:	6a38      	ldr	r0, [r7, #32]
 800b852:	f000 fd01 	bl	800c258 <xQueueReceiveFromISR>
 800b856:	4603      	mov	r3, r0
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d003      	beq.n	800b864 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800b85c:	f06f 0302 	mvn.w	r3, #2
 800b860:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b862:	e028      	b.n	800b8b6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d025      	beq.n	800b8b6 <osMessageQueueGet+0xce>
 800b86a:	4b17      	ldr	r3, [pc, #92]	; (800b8c8 <osMessageQueueGet+0xe0>)
 800b86c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b870:	601a      	str	r2, [r3, #0]
 800b872:	f3bf 8f4f 	dsb	sy
 800b876:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b87a:	e01c      	b.n	800b8b6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b87c:	6a3b      	ldr	r3, [r7, #32]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d002      	beq.n	800b888 <osMessageQueueGet+0xa0>
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d103      	bne.n	800b890 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800b888:	f06f 0303 	mvn.w	r3, #3
 800b88c:	627b      	str	r3, [r7, #36]	; 0x24
 800b88e:	e013      	b.n	800b8b8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b890:	683a      	ldr	r2, [r7, #0]
 800b892:	68b9      	ldr	r1, [r7, #8]
 800b894:	6a38      	ldr	r0, [r7, #32]
 800b896:	f000 fbf9 	bl	800c08c <xQueueReceive>
 800b89a:	4603      	mov	r3, r0
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d00b      	beq.n	800b8b8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d003      	beq.n	800b8ae <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800b8a6:	f06f 0301 	mvn.w	r3, #1
 800b8aa:	627b      	str	r3, [r7, #36]	; 0x24
 800b8ac:	e004      	b.n	800b8b8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800b8ae:	f06f 0302 	mvn.w	r3, #2
 800b8b2:	627b      	str	r3, [r7, #36]	; 0x24
 800b8b4:	e000      	b.n	800b8b8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b8b6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800b8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3728      	adds	r7, #40	; 0x28
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	20000670 	.word	0x20000670
 800b8c8:	e000ed04 	.word	0xe000ed04

0800b8cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b8cc:	b480      	push	{r7}
 800b8ce:	b085      	sub	sp, #20
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	60f8      	str	r0, [r7, #12]
 800b8d4:	60b9      	str	r1, [r7, #8]
 800b8d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	4a07      	ldr	r2, [pc, #28]	; (800b8f8 <vApplicationGetIdleTaskMemory+0x2c>)
 800b8dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	4a06      	ldr	r2, [pc, #24]	; (800b8fc <vApplicationGetIdleTaskMemory+0x30>)
 800b8e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b8ea:	601a      	str	r2, [r3, #0]
}
 800b8ec:	bf00      	nop
 800b8ee:	3714      	adds	r7, #20
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr
 800b8f8:	20000674 	.word	0x20000674
 800b8fc:	20000730 	.word	0x20000730

0800b900 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b900:	b480      	push	{r7}
 800b902:	b085      	sub	sp, #20
 800b904:	af00      	add	r7, sp, #0
 800b906:	60f8      	str	r0, [r7, #12]
 800b908:	60b9      	str	r1, [r7, #8]
 800b90a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	4a07      	ldr	r2, [pc, #28]	; (800b92c <vApplicationGetTimerTaskMemory+0x2c>)
 800b910:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	4a06      	ldr	r2, [pc, #24]	; (800b930 <vApplicationGetTimerTaskMemory+0x30>)
 800b916:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b91e:	601a      	str	r2, [r3, #0]
}
 800b920:	bf00      	nop
 800b922:	3714      	adds	r7, #20
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr
 800b92c:	20000b30 	.word	0x20000b30
 800b930:	20000bec 	.word	0x20000bec

0800b934 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f103 0208 	add.w	r2, r3, #8
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f04f 32ff 	mov.w	r2, #4294967295
 800b94c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f103 0208 	add.w	r2, r3, #8
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f103 0208 	add.w	r2, r3, #8
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2200      	movs	r2, #0
 800b966:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b968:	bf00      	nop
 800b96a:	370c      	adds	r7, #12
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr

0800b974 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b974:	b480      	push	{r7}
 800b976:	b083      	sub	sp, #12
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2200      	movs	r2, #0
 800b980:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b982:	bf00      	nop
 800b984:	370c      	adds	r7, #12
 800b986:	46bd      	mov	sp, r7
 800b988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98c:	4770      	bx	lr

0800b98e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b98e:	b480      	push	{r7}
 800b990:	b085      	sub	sp, #20
 800b992:	af00      	add	r7, sp, #0
 800b994:	6078      	str	r0, [r7, #4]
 800b996:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	685b      	ldr	r3, [r3, #4]
 800b99c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	689a      	ldr	r2, [r3, #8]
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	689b      	ldr	r3, [r3, #8]
 800b9b0:	683a      	ldr	r2, [r7, #0]
 800b9b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	683a      	ldr	r2, [r7, #0]
 800b9b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	687a      	ldr	r2, [r7, #4]
 800b9be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	1c5a      	adds	r2, r3, #1
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	601a      	str	r2, [r3, #0]
}
 800b9ca:	bf00      	nop
 800b9cc:	3714      	adds	r7, #20
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr

0800b9d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b9d6:	b480      	push	{r7}
 800b9d8:	b085      	sub	sp, #20
 800b9da:	af00      	add	r7, sp, #0
 800b9dc:	6078      	str	r0, [r7, #4]
 800b9de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ec:	d103      	bne.n	800b9f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	691b      	ldr	r3, [r3, #16]
 800b9f2:	60fb      	str	r3, [r7, #12]
 800b9f4:	e00c      	b.n	800ba10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	3308      	adds	r3, #8
 800b9fa:	60fb      	str	r3, [r7, #12]
 800b9fc:	e002      	b.n	800ba04 <vListInsert+0x2e>
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	685b      	ldr	r3, [r3, #4]
 800ba02:	60fb      	str	r3, [r7, #12]
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	68ba      	ldr	r2, [r7, #8]
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d2f6      	bcs.n	800b9fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	685a      	ldr	r2, [r3, #4]
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	685b      	ldr	r3, [r3, #4]
 800ba1c:	683a      	ldr	r2, [r7, #0]
 800ba1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	68fa      	ldr	r2, [r7, #12]
 800ba24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	683a      	ldr	r2, [r7, #0]
 800ba2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	687a      	ldr	r2, [r7, #4]
 800ba30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	1c5a      	adds	r2, r3, #1
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	601a      	str	r2, [r3, #0]
}
 800ba3c:	bf00      	nop
 800ba3e:	3714      	adds	r7, #20
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr

0800ba48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b085      	sub	sp, #20
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	691b      	ldr	r3, [r3, #16]
 800ba54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	6892      	ldr	r2, [r2, #8]
 800ba5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	689b      	ldr	r3, [r3, #8]
 800ba64:	687a      	ldr	r2, [r7, #4]
 800ba66:	6852      	ldr	r2, [r2, #4]
 800ba68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	685b      	ldr	r3, [r3, #4]
 800ba6e:	687a      	ldr	r2, [r7, #4]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d103      	bne.n	800ba7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	689a      	ldr	r2, [r3, #8]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	1e5a      	subs	r2, r3, #1
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3714      	adds	r7, #20
 800ba94:	46bd      	mov	sp, r7
 800ba96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9a:	4770      	bx	lr

0800ba9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b084      	sub	sp, #16
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
 800baa4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d10c      	bne.n	800baca <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab4:	b672      	cpsid	i
 800bab6:	f383 8811 	msr	BASEPRI, r3
 800baba:	f3bf 8f6f 	isb	sy
 800babe:	f3bf 8f4f 	dsb	sy
 800bac2:	b662      	cpsie	i
 800bac4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bac6:	bf00      	nop
 800bac8:	e7fe      	b.n	800bac8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800baca:	f002 f96f 	bl	800ddac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681a      	ldr	r2, [r3, #0]
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bad6:	68f9      	ldr	r1, [r7, #12]
 800bad8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bada:	fb01 f303 	mul.w	r3, r1, r3
 800bade:	441a      	add	r2, r3
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2200      	movs	r2, #0
 800bae8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681a      	ldr	r2, [r3, #0]
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bafa:	3b01      	subs	r3, #1
 800bafc:	68f9      	ldr	r1, [r7, #12]
 800bafe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bb00:	fb01 f303 	mul.w	r3, r1, r3
 800bb04:	441a      	add	r2, r3
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	22ff      	movs	r2, #255	; 0xff
 800bb0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	22ff      	movs	r2, #255	; 0xff
 800bb16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d114      	bne.n	800bb4a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	691b      	ldr	r3, [r3, #16]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d01a      	beq.n	800bb5e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	3310      	adds	r3, #16
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f001 fa25 	bl	800cf7c <xTaskRemoveFromEventList>
 800bb32:	4603      	mov	r3, r0
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d012      	beq.n	800bb5e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bb38:	4b0c      	ldr	r3, [pc, #48]	; (800bb6c <xQueueGenericReset+0xd0>)
 800bb3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb3e:	601a      	str	r2, [r3, #0]
 800bb40:	f3bf 8f4f 	dsb	sy
 800bb44:	f3bf 8f6f 	isb	sy
 800bb48:	e009      	b.n	800bb5e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	3310      	adds	r3, #16
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f7ff fef0 	bl	800b934 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	3324      	adds	r3, #36	; 0x24
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f7ff feeb 	bl	800b934 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bb5e:	f002 f959 	bl	800de14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bb62:	2301      	movs	r3, #1
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3710      	adds	r7, #16
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}
 800bb6c:	e000ed04 	.word	0xe000ed04

0800bb70 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b08e      	sub	sp, #56	; 0x38
 800bb74:	af02      	add	r7, sp, #8
 800bb76:	60f8      	str	r0, [r7, #12]
 800bb78:	60b9      	str	r1, [r7, #8]
 800bb7a:	607a      	str	r2, [r7, #4]
 800bb7c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d10c      	bne.n	800bb9e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800bb84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb88:	b672      	cpsid	i
 800bb8a:	f383 8811 	msr	BASEPRI, r3
 800bb8e:	f3bf 8f6f 	isb	sy
 800bb92:	f3bf 8f4f 	dsb	sy
 800bb96:	b662      	cpsie	i
 800bb98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bb9a:	bf00      	nop
 800bb9c:	e7fe      	b.n	800bb9c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d10c      	bne.n	800bbbe <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800bba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba8:	b672      	cpsid	i
 800bbaa:	f383 8811 	msr	BASEPRI, r3
 800bbae:	f3bf 8f6f 	isb	sy
 800bbb2:	f3bf 8f4f 	dsb	sy
 800bbb6:	b662      	cpsie	i
 800bbb8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bbba:	bf00      	nop
 800bbbc:	e7fe      	b.n	800bbbc <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d002      	beq.n	800bbca <xQueueGenericCreateStatic+0x5a>
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d001      	beq.n	800bbce <xQueueGenericCreateStatic+0x5e>
 800bbca:	2301      	movs	r3, #1
 800bbcc:	e000      	b.n	800bbd0 <xQueueGenericCreateStatic+0x60>
 800bbce:	2300      	movs	r3, #0
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d10c      	bne.n	800bbee <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800bbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd8:	b672      	cpsid	i
 800bbda:	f383 8811 	msr	BASEPRI, r3
 800bbde:	f3bf 8f6f 	isb	sy
 800bbe2:	f3bf 8f4f 	dsb	sy
 800bbe6:	b662      	cpsie	i
 800bbe8:	623b      	str	r3, [r7, #32]
}
 800bbea:	bf00      	nop
 800bbec:	e7fe      	b.n	800bbec <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d102      	bne.n	800bbfa <xQueueGenericCreateStatic+0x8a>
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d101      	bne.n	800bbfe <xQueueGenericCreateStatic+0x8e>
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	e000      	b.n	800bc00 <xQueueGenericCreateStatic+0x90>
 800bbfe:	2300      	movs	r3, #0
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d10c      	bne.n	800bc1e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800bc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc08:	b672      	cpsid	i
 800bc0a:	f383 8811 	msr	BASEPRI, r3
 800bc0e:	f3bf 8f6f 	isb	sy
 800bc12:	f3bf 8f4f 	dsb	sy
 800bc16:	b662      	cpsie	i
 800bc18:	61fb      	str	r3, [r7, #28]
}
 800bc1a:	bf00      	nop
 800bc1c:	e7fe      	b.n	800bc1c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bc1e:	2350      	movs	r3, #80	; 0x50
 800bc20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	2b50      	cmp	r3, #80	; 0x50
 800bc26:	d00c      	beq.n	800bc42 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800bc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2c:	b672      	cpsid	i
 800bc2e:	f383 8811 	msr	BASEPRI, r3
 800bc32:	f3bf 8f6f 	isb	sy
 800bc36:	f3bf 8f4f 	dsb	sy
 800bc3a:	b662      	cpsie	i
 800bc3c:	61bb      	str	r3, [r7, #24]
}
 800bc3e:	bf00      	nop
 800bc40:	e7fe      	b.n	800bc40 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bc42:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d00d      	beq.n	800bc6a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bc4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc50:	2201      	movs	r2, #1
 800bc52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bc56:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bc5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc5c:	9300      	str	r3, [sp, #0]
 800bc5e:	4613      	mov	r3, r2
 800bc60:	687a      	ldr	r2, [r7, #4]
 800bc62:	68b9      	ldr	r1, [r7, #8]
 800bc64:	68f8      	ldr	r0, [r7, #12]
 800bc66:	f000 f847 	bl	800bcf8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bc6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3730      	adds	r7, #48	; 0x30
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b08a      	sub	sp, #40	; 0x28
 800bc78:	af02      	add	r7, sp, #8
 800bc7a:	60f8      	str	r0, [r7, #12]
 800bc7c:	60b9      	str	r1, [r7, #8]
 800bc7e:	4613      	mov	r3, r2
 800bc80:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d10c      	bne.n	800bca2 <xQueueGenericCreate+0x2e>
	__asm volatile
 800bc88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc8c:	b672      	cpsid	i
 800bc8e:	f383 8811 	msr	BASEPRI, r3
 800bc92:	f3bf 8f6f 	isb	sy
 800bc96:	f3bf 8f4f 	dsb	sy
 800bc9a:	b662      	cpsie	i
 800bc9c:	613b      	str	r3, [r7, #16]
}
 800bc9e:	bf00      	nop
 800bca0:	e7fe      	b.n	800bca0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d102      	bne.n	800bcae <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	61fb      	str	r3, [r7, #28]
 800bcac:	e004      	b.n	800bcb8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	68ba      	ldr	r2, [r7, #8]
 800bcb2:	fb02 f303 	mul.w	r3, r2, r3
 800bcb6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bcb8:	69fb      	ldr	r3, [r7, #28]
 800bcba:	3350      	adds	r3, #80	; 0x50
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f002 f9a1 	bl	800e004 <pvPortMalloc>
 800bcc2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bcc4:	69bb      	ldr	r3, [r7, #24]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d011      	beq.n	800bcee <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bcca:	69bb      	ldr	r3, [r7, #24]
 800bccc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	3350      	adds	r3, #80	; 0x50
 800bcd2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bcd4:	69bb      	ldr	r3, [r7, #24]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bcdc:	79fa      	ldrb	r2, [r7, #7]
 800bcde:	69bb      	ldr	r3, [r7, #24]
 800bce0:	9300      	str	r3, [sp, #0]
 800bce2:	4613      	mov	r3, r2
 800bce4:	697a      	ldr	r2, [r7, #20]
 800bce6:	68b9      	ldr	r1, [r7, #8]
 800bce8:	68f8      	ldr	r0, [r7, #12]
 800bcea:	f000 f805 	bl	800bcf8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bcee:	69bb      	ldr	r3, [r7, #24]
	}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3720      	adds	r7, #32
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b084      	sub	sp, #16
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	607a      	str	r2, [r7, #4]
 800bd04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d103      	bne.n	800bd14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bd0c:	69bb      	ldr	r3, [r7, #24]
 800bd0e:	69ba      	ldr	r2, [r7, #24]
 800bd10:	601a      	str	r2, [r3, #0]
 800bd12:	e002      	b.n	800bd1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bd14:	69bb      	ldr	r3, [r7, #24]
 800bd16:	687a      	ldr	r2, [r7, #4]
 800bd18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bd1a:	69bb      	ldr	r3, [r7, #24]
 800bd1c:	68fa      	ldr	r2, [r7, #12]
 800bd1e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bd20:	69bb      	ldr	r3, [r7, #24]
 800bd22:	68ba      	ldr	r2, [r7, #8]
 800bd24:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bd26:	2101      	movs	r1, #1
 800bd28:	69b8      	ldr	r0, [r7, #24]
 800bd2a:	f7ff feb7 	bl	800ba9c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bd2e:	69bb      	ldr	r3, [r7, #24]
 800bd30:	78fa      	ldrb	r2, [r7, #3]
 800bd32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bd36:	bf00      	nop
 800bd38:	3710      	adds	r7, #16
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
	...

0800bd40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b08e      	sub	sp, #56	; 0x38
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	60b9      	str	r1, [r7, #8]
 800bd4a:	607a      	str	r2, [r7, #4]
 800bd4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d10c      	bne.n	800bd76 <xQueueGenericSend+0x36>
	__asm volatile
 800bd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd60:	b672      	cpsid	i
 800bd62:	f383 8811 	msr	BASEPRI, r3
 800bd66:	f3bf 8f6f 	isb	sy
 800bd6a:	f3bf 8f4f 	dsb	sy
 800bd6e:	b662      	cpsie	i
 800bd70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bd72:	bf00      	nop
 800bd74:	e7fe      	b.n	800bd74 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d103      	bne.n	800bd84 <xQueueGenericSend+0x44>
 800bd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d101      	bne.n	800bd88 <xQueueGenericSend+0x48>
 800bd84:	2301      	movs	r3, #1
 800bd86:	e000      	b.n	800bd8a <xQueueGenericSend+0x4a>
 800bd88:	2300      	movs	r3, #0
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d10c      	bne.n	800bda8 <xQueueGenericSend+0x68>
	__asm volatile
 800bd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd92:	b672      	cpsid	i
 800bd94:	f383 8811 	msr	BASEPRI, r3
 800bd98:	f3bf 8f6f 	isb	sy
 800bd9c:	f3bf 8f4f 	dsb	sy
 800bda0:	b662      	cpsie	i
 800bda2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bda4:	bf00      	nop
 800bda6:	e7fe      	b.n	800bda6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	2b02      	cmp	r3, #2
 800bdac:	d103      	bne.n	800bdb6 <xQueueGenericSend+0x76>
 800bdae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdb2:	2b01      	cmp	r3, #1
 800bdb4:	d101      	bne.n	800bdba <xQueueGenericSend+0x7a>
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	e000      	b.n	800bdbc <xQueueGenericSend+0x7c>
 800bdba:	2300      	movs	r3, #0
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d10c      	bne.n	800bdda <xQueueGenericSend+0x9a>
	__asm volatile
 800bdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc4:	b672      	cpsid	i
 800bdc6:	f383 8811 	msr	BASEPRI, r3
 800bdca:	f3bf 8f6f 	isb	sy
 800bdce:	f3bf 8f4f 	dsb	sy
 800bdd2:	b662      	cpsie	i
 800bdd4:	623b      	str	r3, [r7, #32]
}
 800bdd6:	bf00      	nop
 800bdd8:	e7fe      	b.n	800bdd8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bdda:	f001 fa99 	bl	800d310 <xTaskGetSchedulerState>
 800bdde:	4603      	mov	r3, r0
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d102      	bne.n	800bdea <xQueueGenericSend+0xaa>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d101      	bne.n	800bdee <xQueueGenericSend+0xae>
 800bdea:	2301      	movs	r3, #1
 800bdec:	e000      	b.n	800bdf0 <xQueueGenericSend+0xb0>
 800bdee:	2300      	movs	r3, #0
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d10c      	bne.n	800be0e <xQueueGenericSend+0xce>
	__asm volatile
 800bdf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf8:	b672      	cpsid	i
 800bdfa:	f383 8811 	msr	BASEPRI, r3
 800bdfe:	f3bf 8f6f 	isb	sy
 800be02:	f3bf 8f4f 	dsb	sy
 800be06:	b662      	cpsie	i
 800be08:	61fb      	str	r3, [r7, #28]
}
 800be0a:	bf00      	nop
 800be0c:	e7fe      	b.n	800be0c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be0e:	f001 ffcd 	bl	800ddac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800be12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d302      	bcc.n	800be24 <xQueueGenericSend+0xe4>
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	2b02      	cmp	r3, #2
 800be22:	d129      	bne.n	800be78 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800be24:	683a      	ldr	r2, [r7, #0]
 800be26:	68b9      	ldr	r1, [r7, #8]
 800be28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be2a:	f000 fa9b 	bl	800c364 <prvCopyDataToQueue>
 800be2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be34:	2b00      	cmp	r3, #0
 800be36:	d010      	beq.n	800be5a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3a:	3324      	adds	r3, #36	; 0x24
 800be3c:	4618      	mov	r0, r3
 800be3e:	f001 f89d 	bl	800cf7c <xTaskRemoveFromEventList>
 800be42:	4603      	mov	r3, r0
 800be44:	2b00      	cmp	r3, #0
 800be46:	d013      	beq.n	800be70 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800be48:	4b3f      	ldr	r3, [pc, #252]	; (800bf48 <xQueueGenericSend+0x208>)
 800be4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be4e:	601a      	str	r2, [r3, #0]
 800be50:	f3bf 8f4f 	dsb	sy
 800be54:	f3bf 8f6f 	isb	sy
 800be58:	e00a      	b.n	800be70 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800be5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d007      	beq.n	800be70 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800be60:	4b39      	ldr	r3, [pc, #228]	; (800bf48 <xQueueGenericSend+0x208>)
 800be62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be66:	601a      	str	r2, [r3, #0]
 800be68:	f3bf 8f4f 	dsb	sy
 800be6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800be70:	f001 ffd0 	bl	800de14 <vPortExitCritical>
				return pdPASS;
 800be74:	2301      	movs	r3, #1
 800be76:	e063      	b.n	800bf40 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d103      	bne.n	800be86 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800be7e:	f001 ffc9 	bl	800de14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800be82:	2300      	movs	r3, #0
 800be84:	e05c      	b.n	800bf40 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d106      	bne.n	800be9a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be8c:	f107 0314 	add.w	r3, r7, #20
 800be90:	4618      	mov	r0, r3
 800be92:	f001 f8d9 	bl	800d048 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be96:	2301      	movs	r3, #1
 800be98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be9a:	f001 ffbb 	bl	800de14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be9e:	f000 fe39 	bl	800cb14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bea2:	f001 ff83 	bl	800ddac <vPortEnterCritical>
 800bea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800beac:	b25b      	sxtb	r3, r3
 800beae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beb2:	d103      	bne.n	800bebc <xQueueGenericSend+0x17c>
 800beb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb6:	2200      	movs	r2, #0
 800beb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bebe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bec2:	b25b      	sxtb	r3, r3
 800bec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bec8:	d103      	bne.n	800bed2 <xQueueGenericSend+0x192>
 800beca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800becc:	2200      	movs	r2, #0
 800bece:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bed2:	f001 ff9f 	bl	800de14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bed6:	1d3a      	adds	r2, r7, #4
 800bed8:	f107 0314 	add.w	r3, r7, #20
 800bedc:	4611      	mov	r1, r2
 800bede:	4618      	mov	r0, r3
 800bee0:	f001 f8c8 	bl	800d074 <xTaskCheckForTimeOut>
 800bee4:	4603      	mov	r3, r0
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d124      	bne.n	800bf34 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800beea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800beec:	f000 fb32 	bl	800c554 <prvIsQueueFull>
 800bef0:	4603      	mov	r3, r0
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d018      	beq.n	800bf28 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef8:	3310      	adds	r3, #16
 800befa:	687a      	ldr	r2, [r7, #4]
 800befc:	4611      	mov	r1, r2
 800befe:	4618      	mov	r0, r3
 800bf00:	f000 ffe8 	bl	800ced4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bf04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf06:	f000 fabd 	bl	800c484 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bf0a:	f000 fe11 	bl	800cb30 <xTaskResumeAll>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	f47f af7c 	bne.w	800be0e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800bf16:	4b0c      	ldr	r3, [pc, #48]	; (800bf48 <xQueueGenericSend+0x208>)
 800bf18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf1c:	601a      	str	r2, [r3, #0]
 800bf1e:	f3bf 8f4f 	dsb	sy
 800bf22:	f3bf 8f6f 	isb	sy
 800bf26:	e772      	b.n	800be0e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bf28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf2a:	f000 faab 	bl	800c484 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bf2e:	f000 fdff 	bl	800cb30 <xTaskResumeAll>
 800bf32:	e76c      	b.n	800be0e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bf34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf36:	f000 faa5 	bl	800c484 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf3a:	f000 fdf9 	bl	800cb30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bf3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3738      	adds	r7, #56	; 0x38
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}
 800bf48:	e000ed04 	.word	0xe000ed04

0800bf4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b08e      	sub	sp, #56	; 0x38
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	607a      	str	r2, [r7, #4]
 800bf58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bf5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d10c      	bne.n	800bf7e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800bf64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf68:	b672      	cpsid	i
 800bf6a:	f383 8811 	msr	BASEPRI, r3
 800bf6e:	f3bf 8f6f 	isb	sy
 800bf72:	f3bf 8f4f 	dsb	sy
 800bf76:	b662      	cpsie	i
 800bf78:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bf7a:	bf00      	nop
 800bf7c:	e7fe      	b.n	800bf7c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d103      	bne.n	800bf8c <xQueueGenericSendFromISR+0x40>
 800bf84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d101      	bne.n	800bf90 <xQueueGenericSendFromISR+0x44>
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	e000      	b.n	800bf92 <xQueueGenericSendFromISR+0x46>
 800bf90:	2300      	movs	r3, #0
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d10c      	bne.n	800bfb0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800bf96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf9a:	b672      	cpsid	i
 800bf9c:	f383 8811 	msr	BASEPRI, r3
 800bfa0:	f3bf 8f6f 	isb	sy
 800bfa4:	f3bf 8f4f 	dsb	sy
 800bfa8:	b662      	cpsie	i
 800bfaa:	623b      	str	r3, [r7, #32]
}
 800bfac:	bf00      	nop
 800bfae:	e7fe      	b.n	800bfae <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	2b02      	cmp	r3, #2
 800bfb4:	d103      	bne.n	800bfbe <xQueueGenericSendFromISR+0x72>
 800bfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfba:	2b01      	cmp	r3, #1
 800bfbc:	d101      	bne.n	800bfc2 <xQueueGenericSendFromISR+0x76>
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	e000      	b.n	800bfc4 <xQueueGenericSendFromISR+0x78>
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d10c      	bne.n	800bfe2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800bfc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfcc:	b672      	cpsid	i
 800bfce:	f383 8811 	msr	BASEPRI, r3
 800bfd2:	f3bf 8f6f 	isb	sy
 800bfd6:	f3bf 8f4f 	dsb	sy
 800bfda:	b662      	cpsie	i
 800bfdc:	61fb      	str	r3, [r7, #28]
}
 800bfde:	bf00      	nop
 800bfe0:	e7fe      	b.n	800bfe0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bfe2:	f001 ffcb 	bl	800df7c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bfe6:	f3ef 8211 	mrs	r2, BASEPRI
 800bfea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfee:	b672      	cpsid	i
 800bff0:	f383 8811 	msr	BASEPRI, r3
 800bff4:	f3bf 8f6f 	isb	sy
 800bff8:	f3bf 8f4f 	dsb	sy
 800bffc:	b662      	cpsie	i
 800bffe:	61ba      	str	r2, [r7, #24]
 800c000:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c002:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c004:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c008:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c00e:	429a      	cmp	r2, r3
 800c010:	d302      	bcc.n	800c018 <xQueueGenericSendFromISR+0xcc>
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	2b02      	cmp	r3, #2
 800c016:	d12c      	bne.n	800c072 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c01e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c022:	683a      	ldr	r2, [r7, #0]
 800c024:	68b9      	ldr	r1, [r7, #8]
 800c026:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c028:	f000 f99c 	bl	800c364 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c02c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c030:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c034:	d112      	bne.n	800c05c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d016      	beq.n	800c06c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c040:	3324      	adds	r3, #36	; 0x24
 800c042:	4618      	mov	r0, r3
 800c044:	f000 ff9a 	bl	800cf7c <xTaskRemoveFromEventList>
 800c048:	4603      	mov	r3, r0
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d00e      	beq.n	800c06c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d00b      	beq.n	800c06c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2201      	movs	r2, #1
 800c058:	601a      	str	r2, [r3, #0]
 800c05a:	e007      	b.n	800c06c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c05c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c060:	3301      	adds	r3, #1
 800c062:	b2db      	uxtb	r3, r3
 800c064:	b25a      	sxtb	r2, r3
 800c066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c06c:	2301      	movs	r3, #1
 800c06e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c070:	e001      	b.n	800c076 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c072:	2300      	movs	r3, #0
 800c074:	637b      	str	r3, [r7, #52]	; 0x34
 800c076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c078:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c080:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c084:	4618      	mov	r0, r3
 800c086:	3738      	adds	r7, #56	; 0x38
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}

0800c08c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b08c      	sub	sp, #48	; 0x30
 800c090:	af00      	add	r7, sp, #0
 800c092:	60f8      	str	r0, [r7, #12]
 800c094:	60b9      	str	r1, [r7, #8]
 800c096:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c098:	2300      	movs	r3, #0
 800c09a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d10c      	bne.n	800c0c0 <xQueueReceive+0x34>
	__asm volatile
 800c0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0aa:	b672      	cpsid	i
 800c0ac:	f383 8811 	msr	BASEPRI, r3
 800c0b0:	f3bf 8f6f 	isb	sy
 800c0b4:	f3bf 8f4f 	dsb	sy
 800c0b8:	b662      	cpsie	i
 800c0ba:	623b      	str	r3, [r7, #32]
}
 800c0bc:	bf00      	nop
 800c0be:	e7fe      	b.n	800c0be <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d103      	bne.n	800c0ce <xQueueReceive+0x42>
 800c0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d101      	bne.n	800c0d2 <xQueueReceive+0x46>
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	e000      	b.n	800c0d4 <xQueueReceive+0x48>
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d10c      	bne.n	800c0f2 <xQueueReceive+0x66>
	__asm volatile
 800c0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0dc:	b672      	cpsid	i
 800c0de:	f383 8811 	msr	BASEPRI, r3
 800c0e2:	f3bf 8f6f 	isb	sy
 800c0e6:	f3bf 8f4f 	dsb	sy
 800c0ea:	b662      	cpsie	i
 800c0ec:	61fb      	str	r3, [r7, #28]
}
 800c0ee:	bf00      	nop
 800c0f0:	e7fe      	b.n	800c0f0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c0f2:	f001 f90d 	bl	800d310 <xTaskGetSchedulerState>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d102      	bne.n	800c102 <xQueueReceive+0x76>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d101      	bne.n	800c106 <xQueueReceive+0x7a>
 800c102:	2301      	movs	r3, #1
 800c104:	e000      	b.n	800c108 <xQueueReceive+0x7c>
 800c106:	2300      	movs	r3, #0
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d10c      	bne.n	800c126 <xQueueReceive+0x9a>
	__asm volatile
 800c10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c110:	b672      	cpsid	i
 800c112:	f383 8811 	msr	BASEPRI, r3
 800c116:	f3bf 8f6f 	isb	sy
 800c11a:	f3bf 8f4f 	dsb	sy
 800c11e:	b662      	cpsie	i
 800c120:	61bb      	str	r3, [r7, #24]
}
 800c122:	bf00      	nop
 800c124:	e7fe      	b.n	800c124 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c126:	f001 fe41 	bl	800ddac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c12e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c132:	2b00      	cmp	r3, #0
 800c134:	d01f      	beq.n	800c176 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c136:	68b9      	ldr	r1, [r7, #8]
 800c138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c13a:	f000 f97d 	bl	800c438 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c140:	1e5a      	subs	r2, r3, #1
 800c142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c144:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c148:	691b      	ldr	r3, [r3, #16]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d00f      	beq.n	800c16e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c150:	3310      	adds	r3, #16
 800c152:	4618      	mov	r0, r3
 800c154:	f000 ff12 	bl	800cf7c <xTaskRemoveFromEventList>
 800c158:	4603      	mov	r3, r0
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d007      	beq.n	800c16e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c15e:	4b3d      	ldr	r3, [pc, #244]	; (800c254 <xQueueReceive+0x1c8>)
 800c160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c164:	601a      	str	r2, [r3, #0]
 800c166:	f3bf 8f4f 	dsb	sy
 800c16a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c16e:	f001 fe51 	bl	800de14 <vPortExitCritical>
				return pdPASS;
 800c172:	2301      	movs	r3, #1
 800c174:	e069      	b.n	800c24a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d103      	bne.n	800c184 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c17c:	f001 fe4a 	bl	800de14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c180:	2300      	movs	r3, #0
 800c182:	e062      	b.n	800c24a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c186:	2b00      	cmp	r3, #0
 800c188:	d106      	bne.n	800c198 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c18a:	f107 0310 	add.w	r3, r7, #16
 800c18e:	4618      	mov	r0, r3
 800c190:	f000 ff5a 	bl	800d048 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c194:	2301      	movs	r3, #1
 800c196:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c198:	f001 fe3c 	bl	800de14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c19c:	f000 fcba 	bl	800cb14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c1a0:	f001 fe04 	bl	800ddac <vPortEnterCritical>
 800c1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1aa:	b25b      	sxtb	r3, r3
 800c1ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1b0:	d103      	bne.n	800c1ba <xQueueReceive+0x12e>
 800c1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1c0:	b25b      	sxtb	r3, r3
 800c1c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1c6:	d103      	bne.n	800c1d0 <xQueueReceive+0x144>
 800c1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1d0:	f001 fe20 	bl	800de14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c1d4:	1d3a      	adds	r2, r7, #4
 800c1d6:	f107 0310 	add.w	r3, r7, #16
 800c1da:	4611      	mov	r1, r2
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f000 ff49 	bl	800d074 <xTaskCheckForTimeOut>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d123      	bne.n	800c230 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c1e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1ea:	f000 f99d 	bl	800c528 <prvIsQueueEmpty>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d017      	beq.n	800c224 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f6:	3324      	adds	r3, #36	; 0x24
 800c1f8:	687a      	ldr	r2, [r7, #4]
 800c1fa:	4611      	mov	r1, r2
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f000 fe69 	bl	800ced4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c202:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c204:	f000 f93e 	bl	800c484 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c208:	f000 fc92 	bl	800cb30 <xTaskResumeAll>
 800c20c:	4603      	mov	r3, r0
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d189      	bne.n	800c126 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800c212:	4b10      	ldr	r3, [pc, #64]	; (800c254 <xQueueReceive+0x1c8>)
 800c214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c218:	601a      	str	r2, [r3, #0]
 800c21a:	f3bf 8f4f 	dsb	sy
 800c21e:	f3bf 8f6f 	isb	sy
 800c222:	e780      	b.n	800c126 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c224:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c226:	f000 f92d 	bl	800c484 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c22a:	f000 fc81 	bl	800cb30 <xTaskResumeAll>
 800c22e:	e77a      	b.n	800c126 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c230:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c232:	f000 f927 	bl	800c484 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c236:	f000 fc7b 	bl	800cb30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c23a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c23c:	f000 f974 	bl	800c528 <prvIsQueueEmpty>
 800c240:	4603      	mov	r3, r0
 800c242:	2b00      	cmp	r3, #0
 800c244:	f43f af6f 	beq.w	800c126 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c248:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3730      	adds	r7, #48	; 0x30
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}
 800c252:	bf00      	nop
 800c254:	e000ed04 	.word	0xe000ed04

0800c258 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b08e      	sub	sp, #56	; 0x38
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d10c      	bne.n	800c288 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800c26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c272:	b672      	cpsid	i
 800c274:	f383 8811 	msr	BASEPRI, r3
 800c278:	f3bf 8f6f 	isb	sy
 800c27c:	f3bf 8f4f 	dsb	sy
 800c280:	b662      	cpsie	i
 800c282:	623b      	str	r3, [r7, #32]
}
 800c284:	bf00      	nop
 800c286:	e7fe      	b.n	800c286 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d103      	bne.n	800c296 <xQueueReceiveFromISR+0x3e>
 800c28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c292:	2b00      	cmp	r3, #0
 800c294:	d101      	bne.n	800c29a <xQueueReceiveFromISR+0x42>
 800c296:	2301      	movs	r3, #1
 800c298:	e000      	b.n	800c29c <xQueueReceiveFromISR+0x44>
 800c29a:	2300      	movs	r3, #0
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d10c      	bne.n	800c2ba <xQueueReceiveFromISR+0x62>
	__asm volatile
 800c2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a4:	b672      	cpsid	i
 800c2a6:	f383 8811 	msr	BASEPRI, r3
 800c2aa:	f3bf 8f6f 	isb	sy
 800c2ae:	f3bf 8f4f 	dsb	sy
 800c2b2:	b662      	cpsie	i
 800c2b4:	61fb      	str	r3, [r7, #28]
}
 800c2b6:	bf00      	nop
 800c2b8:	e7fe      	b.n	800c2b8 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c2ba:	f001 fe5f 	bl	800df7c <vPortValidateInterruptPriority>
	__asm volatile
 800c2be:	f3ef 8211 	mrs	r2, BASEPRI
 800c2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c6:	b672      	cpsid	i
 800c2c8:	f383 8811 	msr	BASEPRI, r3
 800c2cc:	f3bf 8f6f 	isb	sy
 800c2d0:	f3bf 8f4f 	dsb	sy
 800c2d4:	b662      	cpsie	i
 800c2d6:	61ba      	str	r2, [r7, #24]
 800c2d8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c2da:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c2dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2e2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d02f      	beq.n	800c34a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c2f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c2f4:	68b9      	ldr	r1, [r7, #8]
 800c2f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2f8:	f000 f89e 	bl	800c438 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2fe:	1e5a      	subs	r2, r3, #1
 800c300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c302:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c304:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c30c:	d112      	bne.n	800c334 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c310:	691b      	ldr	r3, [r3, #16]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d016      	beq.n	800c344 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c318:	3310      	adds	r3, #16
 800c31a:	4618      	mov	r0, r3
 800c31c:	f000 fe2e 	bl	800cf7c <xTaskRemoveFromEventList>
 800c320:	4603      	mov	r3, r0
 800c322:	2b00      	cmp	r3, #0
 800c324:	d00e      	beq.n	800c344 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d00b      	beq.n	800c344 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2201      	movs	r2, #1
 800c330:	601a      	str	r2, [r3, #0]
 800c332:	e007      	b.n	800c344 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c338:	3301      	adds	r3, #1
 800c33a:	b2db      	uxtb	r3, r3
 800c33c:	b25a      	sxtb	r2, r3
 800c33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c344:	2301      	movs	r3, #1
 800c346:	637b      	str	r3, [r7, #52]	; 0x34
 800c348:	e001      	b.n	800c34e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800c34a:	2300      	movs	r3, #0
 800c34c:	637b      	str	r3, [r7, #52]	; 0x34
 800c34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c350:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	f383 8811 	msr	BASEPRI, r3
}
 800c358:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c35a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3738      	adds	r7, #56	; 0x38
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b086      	sub	sp, #24
 800c368:	af00      	add	r7, sp, #0
 800c36a:	60f8      	str	r0, [r7, #12]
 800c36c:	60b9      	str	r1, [r7, #8]
 800c36e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c370:	2300      	movs	r3, #0
 800c372:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c378:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d10d      	bne.n	800c39e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d14d      	bne.n	800c426 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	689b      	ldr	r3, [r3, #8]
 800c38e:	4618      	mov	r0, r3
 800c390:	f000 ffdc 	bl	800d34c <xTaskPriorityDisinherit>
 800c394:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	2200      	movs	r2, #0
 800c39a:	609a      	str	r2, [r3, #8]
 800c39c:	e043      	b.n	800c426 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d119      	bne.n	800c3d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	6858      	ldr	r0, [r3, #4]
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	68b9      	ldr	r1, [r7, #8]
 800c3b0:	f002 fdec 	bl	800ef8c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	685a      	ldr	r2, [r3, #4]
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3bc:	441a      	add	r2, r3
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	685a      	ldr	r2, [r3, #4]
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	689b      	ldr	r3, [r3, #8]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d32b      	bcc.n	800c426 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681a      	ldr	r2, [r3, #0]
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	605a      	str	r2, [r3, #4]
 800c3d6:	e026      	b.n	800c426 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	68d8      	ldr	r0, [r3, #12]
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3e0:	461a      	mov	r2, r3
 800c3e2:	68b9      	ldr	r1, [r7, #8]
 800c3e4:	f002 fdd2 	bl	800ef8c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	68da      	ldr	r2, [r3, #12]
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3f0:	425b      	negs	r3, r3
 800c3f2:	441a      	add	r2, r3
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	68da      	ldr	r2, [r3, #12]
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	429a      	cmp	r2, r3
 800c402:	d207      	bcs.n	800c414 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	689a      	ldr	r2, [r3, #8]
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c40c:	425b      	negs	r3, r3
 800c40e:	441a      	add	r2, r3
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2b02      	cmp	r3, #2
 800c418:	d105      	bne.n	800c426 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d002      	beq.n	800c426 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	3b01      	subs	r3, #1
 800c424:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	1c5a      	adds	r2, r3, #1
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c42e:	697b      	ldr	r3, [r7, #20]
}
 800c430:	4618      	mov	r0, r3
 800c432:	3718      	adds	r7, #24
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}

0800c438 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b082      	sub	sp, #8
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
 800c440:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c446:	2b00      	cmp	r3, #0
 800c448:	d018      	beq.n	800c47c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	68da      	ldr	r2, [r3, #12]
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c452:	441a      	add	r2, r3
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	68da      	ldr	r2, [r3, #12]
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	689b      	ldr	r3, [r3, #8]
 800c460:	429a      	cmp	r2, r3
 800c462:	d303      	bcc.n	800c46c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681a      	ldr	r2, [r3, #0]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	68d9      	ldr	r1, [r3, #12]
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c474:	461a      	mov	r2, r3
 800c476:	6838      	ldr	r0, [r7, #0]
 800c478:	f002 fd88 	bl	800ef8c <memcpy>
	}
}
 800c47c:	bf00      	nop
 800c47e:	3708      	adds	r7, #8
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}

0800c484 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b084      	sub	sp, #16
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c48c:	f001 fc8e 	bl	800ddac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c496:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c498:	e011      	b.n	800c4be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d012      	beq.n	800c4c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	3324      	adds	r3, #36	; 0x24
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f000 fd68 	bl	800cf7c <xTaskRemoveFromEventList>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d001      	beq.n	800c4b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c4b2:	f000 fe45 	bl	800d140 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c4b6:	7bfb      	ldrb	r3, [r7, #15]
 800c4b8:	3b01      	subs	r3, #1
 800c4ba:	b2db      	uxtb	r3, r3
 800c4bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c4be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	dce9      	bgt.n	800c49a <prvUnlockQueue+0x16>
 800c4c6:	e000      	b.n	800c4ca <prvUnlockQueue+0x46>
					break;
 800c4c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	22ff      	movs	r2, #255	; 0xff
 800c4ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c4d2:	f001 fc9f 	bl	800de14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c4d6:	f001 fc69 	bl	800ddac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c4e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c4e2:	e011      	b.n	800c508 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	691b      	ldr	r3, [r3, #16]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d012      	beq.n	800c512 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	3310      	adds	r3, #16
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f000 fd43 	bl	800cf7c <xTaskRemoveFromEventList>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d001      	beq.n	800c500 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c4fc:	f000 fe20 	bl	800d140 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c500:	7bbb      	ldrb	r3, [r7, #14]
 800c502:	3b01      	subs	r3, #1
 800c504:	b2db      	uxtb	r3, r3
 800c506:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c508:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	dce9      	bgt.n	800c4e4 <prvUnlockQueue+0x60>
 800c510:	e000      	b.n	800c514 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c512:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	22ff      	movs	r2, #255	; 0xff
 800c518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c51c:	f001 fc7a 	bl	800de14 <vPortExitCritical>
}
 800c520:	bf00      	nop
 800c522:	3710      	adds	r7, #16
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b084      	sub	sp, #16
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c530:	f001 fc3c 	bl	800ddac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d102      	bne.n	800c542 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c53c:	2301      	movs	r3, #1
 800c53e:	60fb      	str	r3, [r7, #12]
 800c540:	e001      	b.n	800c546 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c542:	2300      	movs	r3, #0
 800c544:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c546:	f001 fc65 	bl	800de14 <vPortExitCritical>

	return xReturn;
 800c54a:	68fb      	ldr	r3, [r7, #12]
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3710      	adds	r7, #16
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}

0800c554 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b084      	sub	sp, #16
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c55c:	f001 fc26 	bl	800ddac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c568:	429a      	cmp	r2, r3
 800c56a:	d102      	bne.n	800c572 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c56c:	2301      	movs	r3, #1
 800c56e:	60fb      	str	r3, [r7, #12]
 800c570:	e001      	b.n	800c576 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c572:	2300      	movs	r3, #0
 800c574:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c576:	f001 fc4d 	bl	800de14 <vPortExitCritical>

	return xReturn;
 800c57a:	68fb      	ldr	r3, [r7, #12]
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3710      	adds	r7, #16
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}

0800c584 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c584:	b480      	push	{r7}
 800c586:	b085      	sub	sp, #20
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c58e:	2300      	movs	r3, #0
 800c590:	60fb      	str	r3, [r7, #12]
 800c592:	e014      	b.n	800c5be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c594:	4a0f      	ldr	r2, [pc, #60]	; (800c5d4 <vQueueAddToRegistry+0x50>)
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d10b      	bne.n	800c5b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c5a0:	490c      	ldr	r1, [pc, #48]	; (800c5d4 <vQueueAddToRegistry+0x50>)
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	683a      	ldr	r2, [r7, #0]
 800c5a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c5aa:	4a0a      	ldr	r2, [pc, #40]	; (800c5d4 <vQueueAddToRegistry+0x50>)
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	00db      	lsls	r3, r3, #3
 800c5b0:	4413      	add	r3, r2
 800c5b2:	687a      	ldr	r2, [r7, #4]
 800c5b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c5b6:	e006      	b.n	800c5c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	60fb      	str	r3, [r7, #12]
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2b07      	cmp	r3, #7
 800c5c2:	d9e7      	bls.n	800c594 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c5c4:	bf00      	nop
 800c5c6:	bf00      	nop
 800c5c8:	3714      	adds	r7, #20
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d0:	4770      	bx	lr
 800c5d2:	bf00      	nop
 800c5d4:	200013ec 	.word	0x200013ec

0800c5d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b086      	sub	sp, #24
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	60f8      	str	r0, [r7, #12]
 800c5e0:	60b9      	str	r1, [r7, #8]
 800c5e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c5e8:	f001 fbe0 	bl	800ddac <vPortEnterCritical>
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c5f2:	b25b      	sxtb	r3, r3
 800c5f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5f8:	d103      	bne.n	800c602 <vQueueWaitForMessageRestricted+0x2a>
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c608:	b25b      	sxtb	r3, r3
 800c60a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c60e:	d103      	bne.n	800c618 <vQueueWaitForMessageRestricted+0x40>
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	2200      	movs	r2, #0
 800c614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c618:	f001 fbfc 	bl	800de14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c620:	2b00      	cmp	r3, #0
 800c622:	d106      	bne.n	800c632 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	3324      	adds	r3, #36	; 0x24
 800c628:	687a      	ldr	r2, [r7, #4]
 800c62a:	68b9      	ldr	r1, [r7, #8]
 800c62c:	4618      	mov	r0, r3
 800c62e:	f000 fc77 	bl	800cf20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c632:	6978      	ldr	r0, [r7, #20]
 800c634:	f7ff ff26 	bl	800c484 <prvUnlockQueue>
	}
 800c638:	bf00      	nop
 800c63a:	3718      	adds	r7, #24
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c640:	b580      	push	{r7, lr}
 800c642:	b08e      	sub	sp, #56	; 0x38
 800c644:	af04      	add	r7, sp, #16
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	60b9      	str	r1, [r7, #8]
 800c64a:	607a      	str	r2, [r7, #4]
 800c64c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c64e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c650:	2b00      	cmp	r3, #0
 800c652:	d10c      	bne.n	800c66e <xTaskCreateStatic+0x2e>
	__asm volatile
 800c654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c658:	b672      	cpsid	i
 800c65a:	f383 8811 	msr	BASEPRI, r3
 800c65e:	f3bf 8f6f 	isb	sy
 800c662:	f3bf 8f4f 	dsb	sy
 800c666:	b662      	cpsie	i
 800c668:	623b      	str	r3, [r7, #32]
}
 800c66a:	bf00      	nop
 800c66c:	e7fe      	b.n	800c66c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800c66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c670:	2b00      	cmp	r3, #0
 800c672:	d10c      	bne.n	800c68e <xTaskCreateStatic+0x4e>
	__asm volatile
 800c674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c678:	b672      	cpsid	i
 800c67a:	f383 8811 	msr	BASEPRI, r3
 800c67e:	f3bf 8f6f 	isb	sy
 800c682:	f3bf 8f4f 	dsb	sy
 800c686:	b662      	cpsie	i
 800c688:	61fb      	str	r3, [r7, #28]
}
 800c68a:	bf00      	nop
 800c68c:	e7fe      	b.n	800c68c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c68e:	23bc      	movs	r3, #188	; 0xbc
 800c690:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	2bbc      	cmp	r3, #188	; 0xbc
 800c696:	d00c      	beq.n	800c6b2 <xTaskCreateStatic+0x72>
	__asm volatile
 800c698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c69c:	b672      	cpsid	i
 800c69e:	f383 8811 	msr	BASEPRI, r3
 800c6a2:	f3bf 8f6f 	isb	sy
 800c6a6:	f3bf 8f4f 	dsb	sy
 800c6aa:	b662      	cpsie	i
 800c6ac:	61bb      	str	r3, [r7, #24]
}
 800c6ae:	bf00      	nop
 800c6b0:	e7fe      	b.n	800c6b0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c6b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d01e      	beq.n	800c6f8 <xTaskCreateStatic+0xb8>
 800c6ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d01b      	beq.n	800c6f8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6cc:	2202      	movs	r2, #2
 800c6ce:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	9303      	str	r3, [sp, #12]
 800c6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d8:	9302      	str	r3, [sp, #8]
 800c6da:	f107 0314 	add.w	r3, r7, #20
 800c6de:	9301      	str	r3, [sp, #4]
 800c6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e2:	9300      	str	r3, [sp, #0]
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	687a      	ldr	r2, [r7, #4]
 800c6e8:	68b9      	ldr	r1, [r7, #8]
 800c6ea:	68f8      	ldr	r0, [r7, #12]
 800c6ec:	f000 f850 	bl	800c790 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c6f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c6f2:	f000 f8f5 	bl	800c8e0 <prvAddNewTaskToReadyList>
 800c6f6:	e001      	b.n	800c6fc <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c6fc:	697b      	ldr	r3, [r7, #20]
	}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3728      	adds	r7, #40	; 0x28
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}

0800c706 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c706:	b580      	push	{r7, lr}
 800c708:	b08c      	sub	sp, #48	; 0x30
 800c70a:	af04      	add	r7, sp, #16
 800c70c:	60f8      	str	r0, [r7, #12]
 800c70e:	60b9      	str	r1, [r7, #8]
 800c710:	603b      	str	r3, [r7, #0]
 800c712:	4613      	mov	r3, r2
 800c714:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c716:	88fb      	ldrh	r3, [r7, #6]
 800c718:	009b      	lsls	r3, r3, #2
 800c71a:	4618      	mov	r0, r3
 800c71c:	f001 fc72 	bl	800e004 <pvPortMalloc>
 800c720:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d00e      	beq.n	800c746 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c728:	20bc      	movs	r0, #188	; 0xbc
 800c72a:	f001 fc6b 	bl	800e004 <pvPortMalloc>
 800c72e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c730:	69fb      	ldr	r3, [r7, #28]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d003      	beq.n	800c73e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c736:	69fb      	ldr	r3, [r7, #28]
 800c738:	697a      	ldr	r2, [r7, #20]
 800c73a:	631a      	str	r2, [r3, #48]	; 0x30
 800c73c:	e005      	b.n	800c74a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c73e:	6978      	ldr	r0, [r7, #20]
 800c740:	f001 fd2a 	bl	800e198 <vPortFree>
 800c744:	e001      	b.n	800c74a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c746:	2300      	movs	r3, #0
 800c748:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c74a:	69fb      	ldr	r3, [r7, #28]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d017      	beq.n	800c780 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c750:	69fb      	ldr	r3, [r7, #28]
 800c752:	2200      	movs	r2, #0
 800c754:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c758:	88fa      	ldrh	r2, [r7, #6]
 800c75a:	2300      	movs	r3, #0
 800c75c:	9303      	str	r3, [sp, #12]
 800c75e:	69fb      	ldr	r3, [r7, #28]
 800c760:	9302      	str	r3, [sp, #8]
 800c762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c764:	9301      	str	r3, [sp, #4]
 800c766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c768:	9300      	str	r3, [sp, #0]
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	68b9      	ldr	r1, [r7, #8]
 800c76e:	68f8      	ldr	r0, [r7, #12]
 800c770:	f000 f80e 	bl	800c790 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c774:	69f8      	ldr	r0, [r7, #28]
 800c776:	f000 f8b3 	bl	800c8e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c77a:	2301      	movs	r3, #1
 800c77c:	61bb      	str	r3, [r7, #24]
 800c77e:	e002      	b.n	800c786 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c780:	f04f 33ff 	mov.w	r3, #4294967295
 800c784:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c786:	69bb      	ldr	r3, [r7, #24]
	}
 800c788:	4618      	mov	r0, r3
 800c78a:	3720      	adds	r7, #32
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}

0800c790 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b088      	sub	sp, #32
 800c794:	af00      	add	r7, sp, #0
 800c796:	60f8      	str	r0, [r7, #12]
 800c798:	60b9      	str	r1, [r7, #8]
 800c79a:	607a      	str	r2, [r7, #4]
 800c79c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	009b      	lsls	r3, r3, #2
 800c7a6:	461a      	mov	r2, r3
 800c7a8:	21a5      	movs	r1, #165	; 0xa5
 800c7aa:	f002 fbfd 	bl	800efa8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c7b2:	6879      	ldr	r1, [r7, #4]
 800c7b4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c7b8:	440b      	add	r3, r1
 800c7ba:	009b      	lsls	r3, r3, #2
 800c7bc:	4413      	add	r3, r2
 800c7be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c7c0:	69bb      	ldr	r3, [r7, #24]
 800c7c2:	f023 0307 	bic.w	r3, r3, #7
 800c7c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c7c8:	69bb      	ldr	r3, [r7, #24]
 800c7ca:	f003 0307 	and.w	r3, r3, #7
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d00c      	beq.n	800c7ec <prvInitialiseNewTask+0x5c>
	__asm volatile
 800c7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d6:	b672      	cpsid	i
 800c7d8:	f383 8811 	msr	BASEPRI, r3
 800c7dc:	f3bf 8f6f 	isb	sy
 800c7e0:	f3bf 8f4f 	dsb	sy
 800c7e4:	b662      	cpsie	i
 800c7e6:	617b      	str	r3, [r7, #20]
}
 800c7e8:	bf00      	nop
 800c7ea:	e7fe      	b.n	800c7ea <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d01f      	beq.n	800c832 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	61fb      	str	r3, [r7, #28]
 800c7f6:	e012      	b.n	800c81e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c7f8:	68ba      	ldr	r2, [r7, #8]
 800c7fa:	69fb      	ldr	r3, [r7, #28]
 800c7fc:	4413      	add	r3, r2
 800c7fe:	7819      	ldrb	r1, [r3, #0]
 800c800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c802:	69fb      	ldr	r3, [r7, #28]
 800c804:	4413      	add	r3, r2
 800c806:	3334      	adds	r3, #52	; 0x34
 800c808:	460a      	mov	r2, r1
 800c80a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c80c:	68ba      	ldr	r2, [r7, #8]
 800c80e:	69fb      	ldr	r3, [r7, #28]
 800c810:	4413      	add	r3, r2
 800c812:	781b      	ldrb	r3, [r3, #0]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d006      	beq.n	800c826 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c818:	69fb      	ldr	r3, [r7, #28]
 800c81a:	3301      	adds	r3, #1
 800c81c:	61fb      	str	r3, [r7, #28]
 800c81e:	69fb      	ldr	r3, [r7, #28]
 800c820:	2b0f      	cmp	r3, #15
 800c822:	d9e9      	bls.n	800c7f8 <prvInitialiseNewTask+0x68>
 800c824:	e000      	b.n	800c828 <prvInitialiseNewTask+0x98>
			{
				break;
 800c826:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c82a:	2200      	movs	r2, #0
 800c82c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c830:	e003      	b.n	800c83a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c834:	2200      	movs	r2, #0
 800c836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c83c:	2b37      	cmp	r3, #55	; 0x37
 800c83e:	d901      	bls.n	800c844 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c840:	2337      	movs	r3, #55	; 0x37
 800c842:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c846:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c848:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c84c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c84e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c852:	2200      	movs	r2, #0
 800c854:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c858:	3304      	adds	r3, #4
 800c85a:	4618      	mov	r0, r3
 800c85c:	f7ff f88a 	bl	800b974 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c862:	3318      	adds	r3, #24
 800c864:	4618      	mov	r0, r3
 800c866:	f7ff f885 	bl	800b974 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c86c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c86e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c872:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c878:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c87c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c87e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c882:	2200      	movs	r2, #0
 800c884:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c88a:	2200      	movs	r2, #0
 800c88c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c892:	3354      	adds	r3, #84	; 0x54
 800c894:	2260      	movs	r2, #96	; 0x60
 800c896:	2100      	movs	r1, #0
 800c898:	4618      	mov	r0, r3
 800c89a:	f002 fb85 	bl	800efa8 <memset>
 800c89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a0:	4a0c      	ldr	r2, [pc, #48]	; (800c8d4 <prvInitialiseNewTask+0x144>)
 800c8a2:	659a      	str	r2, [r3, #88]	; 0x58
 800c8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a6:	4a0c      	ldr	r2, [pc, #48]	; (800c8d8 <prvInitialiseNewTask+0x148>)
 800c8a8:	65da      	str	r2, [r3, #92]	; 0x5c
 800c8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ac:	4a0b      	ldr	r2, [pc, #44]	; (800c8dc <prvInitialiseNewTask+0x14c>)
 800c8ae:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c8b0:	683a      	ldr	r2, [r7, #0]
 800c8b2:	68f9      	ldr	r1, [r7, #12]
 800c8b4:	69b8      	ldr	r0, [r7, #24]
 800c8b6:	f001 f96b 	bl	800db90 <pxPortInitialiseStack>
 800c8ba:	4602      	mov	r2, r0
 800c8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d002      	beq.n	800c8cc <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8cc:	bf00      	nop
 800c8ce:	3720      	adds	r7, #32
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}
 800c8d4:	0800f45c 	.word	0x0800f45c
 800c8d8:	0800f47c 	.word	0x0800f47c
 800c8dc:	0800f43c 	.word	0x0800f43c

0800c8e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b082      	sub	sp, #8
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c8e8:	f001 fa60 	bl	800ddac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c8ec:	4b2d      	ldr	r3, [pc, #180]	; (800c9a4 <prvAddNewTaskToReadyList+0xc4>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	3301      	adds	r3, #1
 800c8f2:	4a2c      	ldr	r2, [pc, #176]	; (800c9a4 <prvAddNewTaskToReadyList+0xc4>)
 800c8f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c8f6:	4b2c      	ldr	r3, [pc, #176]	; (800c9a8 <prvAddNewTaskToReadyList+0xc8>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d109      	bne.n	800c912 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c8fe:	4a2a      	ldr	r2, [pc, #168]	; (800c9a8 <prvAddNewTaskToReadyList+0xc8>)
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c904:	4b27      	ldr	r3, [pc, #156]	; (800c9a4 <prvAddNewTaskToReadyList+0xc4>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	2b01      	cmp	r3, #1
 800c90a:	d110      	bne.n	800c92e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c90c:	f000 fc3c 	bl	800d188 <prvInitialiseTaskLists>
 800c910:	e00d      	b.n	800c92e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c912:	4b26      	ldr	r3, [pc, #152]	; (800c9ac <prvAddNewTaskToReadyList+0xcc>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d109      	bne.n	800c92e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c91a:	4b23      	ldr	r3, [pc, #140]	; (800c9a8 <prvAddNewTaskToReadyList+0xc8>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c924:	429a      	cmp	r2, r3
 800c926:	d802      	bhi.n	800c92e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c928:	4a1f      	ldr	r2, [pc, #124]	; (800c9a8 <prvAddNewTaskToReadyList+0xc8>)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c92e:	4b20      	ldr	r3, [pc, #128]	; (800c9b0 <prvAddNewTaskToReadyList+0xd0>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	3301      	adds	r3, #1
 800c934:	4a1e      	ldr	r2, [pc, #120]	; (800c9b0 <prvAddNewTaskToReadyList+0xd0>)
 800c936:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c938:	4b1d      	ldr	r3, [pc, #116]	; (800c9b0 <prvAddNewTaskToReadyList+0xd0>)
 800c93a:	681a      	ldr	r2, [r3, #0]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c944:	4b1b      	ldr	r3, [pc, #108]	; (800c9b4 <prvAddNewTaskToReadyList+0xd4>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	429a      	cmp	r2, r3
 800c94a:	d903      	bls.n	800c954 <prvAddNewTaskToReadyList+0x74>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c950:	4a18      	ldr	r2, [pc, #96]	; (800c9b4 <prvAddNewTaskToReadyList+0xd4>)
 800c952:	6013      	str	r3, [r2, #0]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c958:	4613      	mov	r3, r2
 800c95a:	009b      	lsls	r3, r3, #2
 800c95c:	4413      	add	r3, r2
 800c95e:	009b      	lsls	r3, r3, #2
 800c960:	4a15      	ldr	r2, [pc, #84]	; (800c9b8 <prvAddNewTaskToReadyList+0xd8>)
 800c962:	441a      	add	r2, r3
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	3304      	adds	r3, #4
 800c968:	4619      	mov	r1, r3
 800c96a:	4610      	mov	r0, r2
 800c96c:	f7ff f80f 	bl	800b98e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c970:	f001 fa50 	bl	800de14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c974:	4b0d      	ldr	r3, [pc, #52]	; (800c9ac <prvAddNewTaskToReadyList+0xcc>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d00e      	beq.n	800c99a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c97c:	4b0a      	ldr	r3, [pc, #40]	; (800c9a8 <prvAddNewTaskToReadyList+0xc8>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c986:	429a      	cmp	r2, r3
 800c988:	d207      	bcs.n	800c99a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c98a:	4b0c      	ldr	r3, [pc, #48]	; (800c9bc <prvAddNewTaskToReadyList+0xdc>)
 800c98c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c990:	601a      	str	r2, [r3, #0]
 800c992:	f3bf 8f4f 	dsb	sy
 800c996:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c99a:	bf00      	nop
 800c99c:	3708      	adds	r7, #8
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}
 800c9a2:	bf00      	nop
 800c9a4:	20001900 	.word	0x20001900
 800c9a8:	2000142c 	.word	0x2000142c
 800c9ac:	2000190c 	.word	0x2000190c
 800c9b0:	2000191c 	.word	0x2000191c
 800c9b4:	20001908 	.word	0x20001908
 800c9b8:	20001430 	.word	0x20001430
 800c9bc:	e000ed04 	.word	0xe000ed04

0800c9c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b084      	sub	sp, #16
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d019      	beq.n	800ca06 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c9d2:	4b14      	ldr	r3, [pc, #80]	; (800ca24 <vTaskDelay+0x64>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d00c      	beq.n	800c9f4 <vTaskDelay+0x34>
	__asm volatile
 800c9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9de:	b672      	cpsid	i
 800c9e0:	f383 8811 	msr	BASEPRI, r3
 800c9e4:	f3bf 8f6f 	isb	sy
 800c9e8:	f3bf 8f4f 	dsb	sy
 800c9ec:	b662      	cpsie	i
 800c9ee:	60bb      	str	r3, [r7, #8]
}
 800c9f0:	bf00      	nop
 800c9f2:	e7fe      	b.n	800c9f2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800c9f4:	f000 f88e 	bl	800cb14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c9f8:	2100      	movs	r1, #0
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f000 fd18 	bl	800d430 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ca00:	f000 f896 	bl	800cb30 <xTaskResumeAll>
 800ca04:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d107      	bne.n	800ca1c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800ca0c:	4b06      	ldr	r3, [pc, #24]	; (800ca28 <vTaskDelay+0x68>)
 800ca0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca12:	601a      	str	r2, [r3, #0]
 800ca14:	f3bf 8f4f 	dsb	sy
 800ca18:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ca1c:	bf00      	nop
 800ca1e:	3710      	adds	r7, #16
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}
 800ca24:	20001928 	.word	0x20001928
 800ca28:	e000ed04 	.word	0xe000ed04

0800ca2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b08a      	sub	sp, #40	; 0x28
 800ca30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ca32:	2300      	movs	r3, #0
 800ca34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ca36:	2300      	movs	r3, #0
 800ca38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ca3a:	463a      	mov	r2, r7
 800ca3c:	1d39      	adds	r1, r7, #4
 800ca3e:	f107 0308 	add.w	r3, r7, #8
 800ca42:	4618      	mov	r0, r3
 800ca44:	f7fe ff42 	bl	800b8cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ca48:	6839      	ldr	r1, [r7, #0]
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	68ba      	ldr	r2, [r7, #8]
 800ca4e:	9202      	str	r2, [sp, #8]
 800ca50:	9301      	str	r3, [sp, #4]
 800ca52:	2300      	movs	r3, #0
 800ca54:	9300      	str	r3, [sp, #0]
 800ca56:	2300      	movs	r3, #0
 800ca58:	460a      	mov	r2, r1
 800ca5a:	4926      	ldr	r1, [pc, #152]	; (800caf4 <vTaskStartScheduler+0xc8>)
 800ca5c:	4826      	ldr	r0, [pc, #152]	; (800caf8 <vTaskStartScheduler+0xcc>)
 800ca5e:	f7ff fdef 	bl	800c640 <xTaskCreateStatic>
 800ca62:	4603      	mov	r3, r0
 800ca64:	4a25      	ldr	r2, [pc, #148]	; (800cafc <vTaskStartScheduler+0xd0>)
 800ca66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ca68:	4b24      	ldr	r3, [pc, #144]	; (800cafc <vTaskStartScheduler+0xd0>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d002      	beq.n	800ca76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ca70:	2301      	movs	r3, #1
 800ca72:	617b      	str	r3, [r7, #20]
 800ca74:	e001      	b.n	800ca7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ca76:	2300      	movs	r3, #0
 800ca78:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	2b01      	cmp	r3, #1
 800ca7e:	d102      	bne.n	800ca86 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ca80:	f000 fd2a 	bl	800d4d8 <xTimerCreateTimerTask>
 800ca84:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	d11d      	bne.n	800cac8 <vTaskStartScheduler+0x9c>
	__asm volatile
 800ca8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca90:	b672      	cpsid	i
 800ca92:	f383 8811 	msr	BASEPRI, r3
 800ca96:	f3bf 8f6f 	isb	sy
 800ca9a:	f3bf 8f4f 	dsb	sy
 800ca9e:	b662      	cpsie	i
 800caa0:	613b      	str	r3, [r7, #16]
}
 800caa2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800caa4:	4b16      	ldr	r3, [pc, #88]	; (800cb00 <vTaskStartScheduler+0xd4>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	3354      	adds	r3, #84	; 0x54
 800caaa:	4a16      	ldr	r2, [pc, #88]	; (800cb04 <vTaskStartScheduler+0xd8>)
 800caac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800caae:	4b16      	ldr	r3, [pc, #88]	; (800cb08 <vTaskStartScheduler+0xdc>)
 800cab0:	f04f 32ff 	mov.w	r2, #4294967295
 800cab4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cab6:	4b15      	ldr	r3, [pc, #84]	; (800cb0c <vTaskStartScheduler+0xe0>)
 800cab8:	2201      	movs	r2, #1
 800caba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cabc:	4b14      	ldr	r3, [pc, #80]	; (800cb10 <vTaskStartScheduler+0xe4>)
 800cabe:	2200      	movs	r2, #0
 800cac0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cac2:	f001 f8f5 	bl	800dcb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cac6:	e010      	b.n	800caea <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cace:	d10c      	bne.n	800caea <vTaskStartScheduler+0xbe>
	__asm volatile
 800cad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad4:	b672      	cpsid	i
 800cad6:	f383 8811 	msr	BASEPRI, r3
 800cada:	f3bf 8f6f 	isb	sy
 800cade:	f3bf 8f4f 	dsb	sy
 800cae2:	b662      	cpsie	i
 800cae4:	60fb      	str	r3, [r7, #12]
}
 800cae6:	bf00      	nop
 800cae8:	e7fe      	b.n	800cae8 <vTaskStartScheduler+0xbc>
}
 800caea:	bf00      	nop
 800caec:	3718      	adds	r7, #24
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}
 800caf2:	bf00      	nop
 800caf4:	0800f2f0 	.word	0x0800f2f0
 800caf8:	0800d159 	.word	0x0800d159
 800cafc:	20001924 	.word	0x20001924
 800cb00:	2000142c 	.word	0x2000142c
 800cb04:	20000110 	.word	0x20000110
 800cb08:	20001920 	.word	0x20001920
 800cb0c:	2000190c 	.word	0x2000190c
 800cb10:	20001904 	.word	0x20001904

0800cb14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cb14:	b480      	push	{r7}
 800cb16:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800cb18:	4b04      	ldr	r3, [pc, #16]	; (800cb2c <vTaskSuspendAll+0x18>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	3301      	adds	r3, #1
 800cb1e:	4a03      	ldr	r2, [pc, #12]	; (800cb2c <vTaskSuspendAll+0x18>)
 800cb20:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800cb22:	bf00      	nop
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr
 800cb2c:	20001928 	.word	0x20001928

0800cb30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b084      	sub	sp, #16
 800cb34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cb36:	2300      	movs	r3, #0
 800cb38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cb3e:	4b43      	ldr	r3, [pc, #268]	; (800cc4c <xTaskResumeAll+0x11c>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d10c      	bne.n	800cb60 <xTaskResumeAll+0x30>
	__asm volatile
 800cb46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb4a:	b672      	cpsid	i
 800cb4c:	f383 8811 	msr	BASEPRI, r3
 800cb50:	f3bf 8f6f 	isb	sy
 800cb54:	f3bf 8f4f 	dsb	sy
 800cb58:	b662      	cpsie	i
 800cb5a:	603b      	str	r3, [r7, #0]
}
 800cb5c:	bf00      	nop
 800cb5e:	e7fe      	b.n	800cb5e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cb60:	f001 f924 	bl	800ddac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cb64:	4b39      	ldr	r3, [pc, #228]	; (800cc4c <xTaskResumeAll+0x11c>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	3b01      	subs	r3, #1
 800cb6a:	4a38      	ldr	r2, [pc, #224]	; (800cc4c <xTaskResumeAll+0x11c>)
 800cb6c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb6e:	4b37      	ldr	r3, [pc, #220]	; (800cc4c <xTaskResumeAll+0x11c>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d162      	bne.n	800cc3c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cb76:	4b36      	ldr	r3, [pc, #216]	; (800cc50 <xTaskResumeAll+0x120>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d05e      	beq.n	800cc3c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb7e:	e02f      	b.n	800cbe0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb80:	4b34      	ldr	r3, [pc, #208]	; (800cc54 <xTaskResumeAll+0x124>)
 800cb82:	68db      	ldr	r3, [r3, #12]
 800cb84:	68db      	ldr	r3, [r3, #12]
 800cb86:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	3318      	adds	r3, #24
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f7fe ff5b 	bl	800ba48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	3304      	adds	r3, #4
 800cb96:	4618      	mov	r0, r3
 800cb98:	f7fe ff56 	bl	800ba48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cba0:	4b2d      	ldr	r3, [pc, #180]	; (800cc58 <xTaskResumeAll+0x128>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d903      	bls.n	800cbb0 <xTaskResumeAll+0x80>
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbac:	4a2a      	ldr	r2, [pc, #168]	; (800cc58 <xTaskResumeAll+0x128>)
 800cbae:	6013      	str	r3, [r2, #0]
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbb4:	4613      	mov	r3, r2
 800cbb6:	009b      	lsls	r3, r3, #2
 800cbb8:	4413      	add	r3, r2
 800cbba:	009b      	lsls	r3, r3, #2
 800cbbc:	4a27      	ldr	r2, [pc, #156]	; (800cc5c <xTaskResumeAll+0x12c>)
 800cbbe:	441a      	add	r2, r3
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	3304      	adds	r3, #4
 800cbc4:	4619      	mov	r1, r3
 800cbc6:	4610      	mov	r0, r2
 800cbc8:	f7fe fee1 	bl	800b98e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbd0:	4b23      	ldr	r3, [pc, #140]	; (800cc60 <xTaskResumeAll+0x130>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d302      	bcc.n	800cbe0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800cbda:	4b22      	ldr	r3, [pc, #136]	; (800cc64 <xTaskResumeAll+0x134>)
 800cbdc:	2201      	movs	r2, #1
 800cbde:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cbe0:	4b1c      	ldr	r3, [pc, #112]	; (800cc54 <xTaskResumeAll+0x124>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d1cb      	bne.n	800cb80 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d001      	beq.n	800cbf2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cbee:	f000 fb6f 	bl	800d2d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cbf2:	4b1d      	ldr	r3, [pc, #116]	; (800cc68 <xTaskResumeAll+0x138>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d010      	beq.n	800cc20 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cbfe:	f000 f847 	bl	800cc90 <xTaskIncrementTick>
 800cc02:	4603      	mov	r3, r0
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d002      	beq.n	800cc0e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800cc08:	4b16      	ldr	r3, [pc, #88]	; (800cc64 <xTaskResumeAll+0x134>)
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	3b01      	subs	r3, #1
 800cc12:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d1f1      	bne.n	800cbfe <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800cc1a:	4b13      	ldr	r3, [pc, #76]	; (800cc68 <xTaskResumeAll+0x138>)
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cc20:	4b10      	ldr	r3, [pc, #64]	; (800cc64 <xTaskResumeAll+0x134>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d009      	beq.n	800cc3c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cc28:	2301      	movs	r3, #1
 800cc2a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cc2c:	4b0f      	ldr	r3, [pc, #60]	; (800cc6c <xTaskResumeAll+0x13c>)
 800cc2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc32:	601a      	str	r2, [r3, #0]
 800cc34:	f3bf 8f4f 	dsb	sy
 800cc38:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cc3c:	f001 f8ea 	bl	800de14 <vPortExitCritical>

	return xAlreadyYielded;
 800cc40:	68bb      	ldr	r3, [r7, #8]
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3710      	adds	r7, #16
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}
 800cc4a:	bf00      	nop
 800cc4c:	20001928 	.word	0x20001928
 800cc50:	20001900 	.word	0x20001900
 800cc54:	200018c0 	.word	0x200018c0
 800cc58:	20001908 	.word	0x20001908
 800cc5c:	20001430 	.word	0x20001430
 800cc60:	2000142c 	.word	0x2000142c
 800cc64:	20001914 	.word	0x20001914
 800cc68:	20001910 	.word	0x20001910
 800cc6c:	e000ed04 	.word	0xe000ed04

0800cc70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cc70:	b480      	push	{r7}
 800cc72:	b083      	sub	sp, #12
 800cc74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cc76:	4b05      	ldr	r3, [pc, #20]	; (800cc8c <xTaskGetTickCount+0x1c>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cc7c:	687b      	ldr	r3, [r7, #4]
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	370c      	adds	r7, #12
 800cc82:	46bd      	mov	sp, r7
 800cc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc88:	4770      	bx	lr
 800cc8a:	bf00      	nop
 800cc8c:	20001904 	.word	0x20001904

0800cc90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b086      	sub	sp, #24
 800cc94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cc96:	2300      	movs	r3, #0
 800cc98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc9a:	4b50      	ldr	r3, [pc, #320]	; (800cddc <xTaskIncrementTick+0x14c>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	f040 808b 	bne.w	800cdba <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cca4:	4b4e      	ldr	r3, [pc, #312]	; (800cde0 <xTaskIncrementTick+0x150>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	3301      	adds	r3, #1
 800ccaa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ccac:	4a4c      	ldr	r2, [pc, #304]	; (800cde0 <xTaskIncrementTick+0x150>)
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d122      	bne.n	800ccfe <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800ccb8:	4b4a      	ldr	r3, [pc, #296]	; (800cde4 <xTaskIncrementTick+0x154>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d00c      	beq.n	800ccdc <xTaskIncrementTick+0x4c>
	__asm volatile
 800ccc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc6:	b672      	cpsid	i
 800ccc8:	f383 8811 	msr	BASEPRI, r3
 800cccc:	f3bf 8f6f 	isb	sy
 800ccd0:	f3bf 8f4f 	dsb	sy
 800ccd4:	b662      	cpsie	i
 800ccd6:	603b      	str	r3, [r7, #0]
}
 800ccd8:	bf00      	nop
 800ccda:	e7fe      	b.n	800ccda <xTaskIncrementTick+0x4a>
 800ccdc:	4b41      	ldr	r3, [pc, #260]	; (800cde4 <xTaskIncrementTick+0x154>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	60fb      	str	r3, [r7, #12]
 800cce2:	4b41      	ldr	r3, [pc, #260]	; (800cde8 <xTaskIncrementTick+0x158>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	4a3f      	ldr	r2, [pc, #252]	; (800cde4 <xTaskIncrementTick+0x154>)
 800cce8:	6013      	str	r3, [r2, #0]
 800ccea:	4a3f      	ldr	r2, [pc, #252]	; (800cde8 <xTaskIncrementTick+0x158>)
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	6013      	str	r3, [r2, #0]
 800ccf0:	4b3e      	ldr	r3, [pc, #248]	; (800cdec <xTaskIncrementTick+0x15c>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	4a3d      	ldr	r2, [pc, #244]	; (800cdec <xTaskIncrementTick+0x15c>)
 800ccf8:	6013      	str	r3, [r2, #0]
 800ccfa:	f000 fae9 	bl	800d2d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ccfe:	4b3c      	ldr	r3, [pc, #240]	; (800cdf0 <xTaskIncrementTick+0x160>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	693a      	ldr	r2, [r7, #16]
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d349      	bcc.n	800cd9c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd08:	4b36      	ldr	r3, [pc, #216]	; (800cde4 <xTaskIncrementTick+0x154>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d104      	bne.n	800cd1c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd12:	4b37      	ldr	r3, [pc, #220]	; (800cdf0 <xTaskIncrementTick+0x160>)
 800cd14:	f04f 32ff 	mov.w	r2, #4294967295
 800cd18:	601a      	str	r2, [r3, #0]
					break;
 800cd1a:	e03f      	b.n	800cd9c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd1c:	4b31      	ldr	r3, [pc, #196]	; (800cde4 <xTaskIncrementTick+0x154>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	68db      	ldr	r3, [r3, #12]
 800cd22:	68db      	ldr	r3, [r3, #12]
 800cd24:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cd2c:	693a      	ldr	r2, [r7, #16]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	429a      	cmp	r2, r3
 800cd32:	d203      	bcs.n	800cd3c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cd34:	4a2e      	ldr	r2, [pc, #184]	; (800cdf0 <xTaskIncrementTick+0x160>)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cd3a:	e02f      	b.n	800cd9c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	3304      	adds	r3, #4
 800cd40:	4618      	mov	r0, r3
 800cd42:	f7fe fe81 	bl	800ba48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d004      	beq.n	800cd58 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	3318      	adds	r3, #24
 800cd52:	4618      	mov	r0, r3
 800cd54:	f7fe fe78 	bl	800ba48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd5c:	4b25      	ldr	r3, [pc, #148]	; (800cdf4 <xTaskIncrementTick+0x164>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d903      	bls.n	800cd6c <xTaskIncrementTick+0xdc>
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd68:	4a22      	ldr	r2, [pc, #136]	; (800cdf4 <xTaskIncrementTick+0x164>)
 800cd6a:	6013      	str	r3, [r2, #0]
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd70:	4613      	mov	r3, r2
 800cd72:	009b      	lsls	r3, r3, #2
 800cd74:	4413      	add	r3, r2
 800cd76:	009b      	lsls	r3, r3, #2
 800cd78:	4a1f      	ldr	r2, [pc, #124]	; (800cdf8 <xTaskIncrementTick+0x168>)
 800cd7a:	441a      	add	r2, r3
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	3304      	adds	r3, #4
 800cd80:	4619      	mov	r1, r3
 800cd82:	4610      	mov	r0, r2
 800cd84:	f7fe fe03 	bl	800b98e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd8c:	4b1b      	ldr	r3, [pc, #108]	; (800cdfc <xTaskIncrementTick+0x16c>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd92:	429a      	cmp	r2, r3
 800cd94:	d3b8      	bcc.n	800cd08 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800cd96:	2301      	movs	r3, #1
 800cd98:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd9a:	e7b5      	b.n	800cd08 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cd9c:	4b17      	ldr	r3, [pc, #92]	; (800cdfc <xTaskIncrementTick+0x16c>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cda2:	4915      	ldr	r1, [pc, #84]	; (800cdf8 <xTaskIncrementTick+0x168>)
 800cda4:	4613      	mov	r3, r2
 800cda6:	009b      	lsls	r3, r3, #2
 800cda8:	4413      	add	r3, r2
 800cdaa:	009b      	lsls	r3, r3, #2
 800cdac:	440b      	add	r3, r1
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	2b01      	cmp	r3, #1
 800cdb2:	d907      	bls.n	800cdc4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	617b      	str	r3, [r7, #20]
 800cdb8:	e004      	b.n	800cdc4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800cdba:	4b11      	ldr	r3, [pc, #68]	; (800ce00 <xTaskIncrementTick+0x170>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	4a0f      	ldr	r2, [pc, #60]	; (800ce00 <xTaskIncrementTick+0x170>)
 800cdc2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800cdc4:	4b0f      	ldr	r3, [pc, #60]	; (800ce04 <xTaskIncrementTick+0x174>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d001      	beq.n	800cdd0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800cdcc:	2301      	movs	r3, #1
 800cdce:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800cdd0:	697b      	ldr	r3, [r7, #20]
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3718      	adds	r7, #24
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}
 800cdda:	bf00      	nop
 800cddc:	20001928 	.word	0x20001928
 800cde0:	20001904 	.word	0x20001904
 800cde4:	200018b8 	.word	0x200018b8
 800cde8:	200018bc 	.word	0x200018bc
 800cdec:	20001918 	.word	0x20001918
 800cdf0:	20001920 	.word	0x20001920
 800cdf4:	20001908 	.word	0x20001908
 800cdf8:	20001430 	.word	0x20001430
 800cdfc:	2000142c 	.word	0x2000142c
 800ce00:	20001910 	.word	0x20001910
 800ce04:	20001914 	.word	0x20001914

0800ce08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b085      	sub	sp, #20
 800ce0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ce0e:	4b2b      	ldr	r3, [pc, #172]	; (800cebc <vTaskSwitchContext+0xb4>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d003      	beq.n	800ce1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ce16:	4b2a      	ldr	r3, [pc, #168]	; (800cec0 <vTaskSwitchContext+0xb8>)
 800ce18:	2201      	movs	r2, #1
 800ce1a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ce1c:	e048      	b.n	800ceb0 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800ce1e:	4b28      	ldr	r3, [pc, #160]	; (800cec0 <vTaskSwitchContext+0xb8>)
 800ce20:	2200      	movs	r2, #0
 800ce22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce24:	4b27      	ldr	r3, [pc, #156]	; (800cec4 <vTaskSwitchContext+0xbc>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	60fb      	str	r3, [r7, #12]
 800ce2a:	e012      	b.n	800ce52 <vTaskSwitchContext+0x4a>
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d10c      	bne.n	800ce4c <vTaskSwitchContext+0x44>
	__asm volatile
 800ce32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce36:	b672      	cpsid	i
 800ce38:	f383 8811 	msr	BASEPRI, r3
 800ce3c:	f3bf 8f6f 	isb	sy
 800ce40:	f3bf 8f4f 	dsb	sy
 800ce44:	b662      	cpsie	i
 800ce46:	607b      	str	r3, [r7, #4]
}
 800ce48:	bf00      	nop
 800ce4a:	e7fe      	b.n	800ce4a <vTaskSwitchContext+0x42>
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	3b01      	subs	r3, #1
 800ce50:	60fb      	str	r3, [r7, #12]
 800ce52:	491d      	ldr	r1, [pc, #116]	; (800cec8 <vTaskSwitchContext+0xc0>)
 800ce54:	68fa      	ldr	r2, [r7, #12]
 800ce56:	4613      	mov	r3, r2
 800ce58:	009b      	lsls	r3, r3, #2
 800ce5a:	4413      	add	r3, r2
 800ce5c:	009b      	lsls	r3, r3, #2
 800ce5e:	440b      	add	r3, r1
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d0e2      	beq.n	800ce2c <vTaskSwitchContext+0x24>
 800ce66:	68fa      	ldr	r2, [r7, #12]
 800ce68:	4613      	mov	r3, r2
 800ce6a:	009b      	lsls	r3, r3, #2
 800ce6c:	4413      	add	r3, r2
 800ce6e:	009b      	lsls	r3, r3, #2
 800ce70:	4a15      	ldr	r2, [pc, #84]	; (800cec8 <vTaskSwitchContext+0xc0>)
 800ce72:	4413      	add	r3, r2
 800ce74:	60bb      	str	r3, [r7, #8]
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	685b      	ldr	r3, [r3, #4]
 800ce7a:	685a      	ldr	r2, [r3, #4]
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	605a      	str	r2, [r3, #4]
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	685a      	ldr	r2, [r3, #4]
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	3308      	adds	r3, #8
 800ce88:	429a      	cmp	r2, r3
 800ce8a:	d104      	bne.n	800ce96 <vTaskSwitchContext+0x8e>
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	685b      	ldr	r3, [r3, #4]
 800ce90:	685a      	ldr	r2, [r3, #4]
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	605a      	str	r2, [r3, #4]
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	685b      	ldr	r3, [r3, #4]
 800ce9a:	68db      	ldr	r3, [r3, #12]
 800ce9c:	4a0b      	ldr	r2, [pc, #44]	; (800cecc <vTaskSwitchContext+0xc4>)
 800ce9e:	6013      	str	r3, [r2, #0]
 800cea0:	4a08      	ldr	r2, [pc, #32]	; (800cec4 <vTaskSwitchContext+0xbc>)
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cea6:	4b09      	ldr	r3, [pc, #36]	; (800cecc <vTaskSwitchContext+0xc4>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	3354      	adds	r3, #84	; 0x54
 800ceac:	4a08      	ldr	r2, [pc, #32]	; (800ced0 <vTaskSwitchContext+0xc8>)
 800ceae:	6013      	str	r3, [r2, #0]
}
 800ceb0:	bf00      	nop
 800ceb2:	3714      	adds	r7, #20
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr
 800cebc:	20001928 	.word	0x20001928
 800cec0:	20001914 	.word	0x20001914
 800cec4:	20001908 	.word	0x20001908
 800cec8:	20001430 	.word	0x20001430
 800cecc:	2000142c 	.word	0x2000142c
 800ced0:	20000110 	.word	0x20000110

0800ced4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b084      	sub	sp, #16
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
 800cedc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d10c      	bne.n	800cefe <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800cee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee8:	b672      	cpsid	i
 800ceea:	f383 8811 	msr	BASEPRI, r3
 800ceee:	f3bf 8f6f 	isb	sy
 800cef2:	f3bf 8f4f 	dsb	sy
 800cef6:	b662      	cpsie	i
 800cef8:	60fb      	str	r3, [r7, #12]
}
 800cefa:	bf00      	nop
 800cefc:	e7fe      	b.n	800cefc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cefe:	4b07      	ldr	r3, [pc, #28]	; (800cf1c <vTaskPlaceOnEventList+0x48>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	3318      	adds	r3, #24
 800cf04:	4619      	mov	r1, r3
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f7fe fd65 	bl	800b9d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cf0c:	2101      	movs	r1, #1
 800cf0e:	6838      	ldr	r0, [r7, #0]
 800cf10:	f000 fa8e 	bl	800d430 <prvAddCurrentTaskToDelayedList>
}
 800cf14:	bf00      	nop
 800cf16:	3710      	adds	r7, #16
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}
 800cf1c:	2000142c 	.word	0x2000142c

0800cf20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b086      	sub	sp, #24
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	60f8      	str	r0, [r7, #12]
 800cf28:	60b9      	str	r1, [r7, #8]
 800cf2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d10c      	bne.n	800cf4c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800cf32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf36:	b672      	cpsid	i
 800cf38:	f383 8811 	msr	BASEPRI, r3
 800cf3c:	f3bf 8f6f 	isb	sy
 800cf40:	f3bf 8f4f 	dsb	sy
 800cf44:	b662      	cpsie	i
 800cf46:	617b      	str	r3, [r7, #20]
}
 800cf48:	bf00      	nop
 800cf4a:	e7fe      	b.n	800cf4a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cf4c:	4b0a      	ldr	r3, [pc, #40]	; (800cf78 <vTaskPlaceOnEventListRestricted+0x58>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	3318      	adds	r3, #24
 800cf52:	4619      	mov	r1, r3
 800cf54:	68f8      	ldr	r0, [r7, #12]
 800cf56:	f7fe fd1a 	bl	800b98e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d002      	beq.n	800cf66 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800cf60:	f04f 33ff 	mov.w	r3, #4294967295
 800cf64:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cf66:	6879      	ldr	r1, [r7, #4]
 800cf68:	68b8      	ldr	r0, [r7, #8]
 800cf6a:	f000 fa61 	bl	800d430 <prvAddCurrentTaskToDelayedList>
	}
 800cf6e:	bf00      	nop
 800cf70:	3718      	adds	r7, #24
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}
 800cf76:	bf00      	nop
 800cf78:	2000142c 	.word	0x2000142c

0800cf7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b086      	sub	sp, #24
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	68db      	ldr	r3, [r3, #12]
 800cf88:	68db      	ldr	r3, [r3, #12]
 800cf8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d10c      	bne.n	800cfac <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800cf92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf96:	b672      	cpsid	i
 800cf98:	f383 8811 	msr	BASEPRI, r3
 800cf9c:	f3bf 8f6f 	isb	sy
 800cfa0:	f3bf 8f4f 	dsb	sy
 800cfa4:	b662      	cpsie	i
 800cfa6:	60fb      	str	r3, [r7, #12]
}
 800cfa8:	bf00      	nop
 800cfaa:	e7fe      	b.n	800cfaa <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cfac:	693b      	ldr	r3, [r7, #16]
 800cfae:	3318      	adds	r3, #24
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f7fe fd49 	bl	800ba48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cfb6:	4b1e      	ldr	r3, [pc, #120]	; (800d030 <xTaskRemoveFromEventList+0xb4>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d11d      	bne.n	800cffa <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	3304      	adds	r3, #4
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f7fe fd40 	bl	800ba48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfcc:	4b19      	ldr	r3, [pc, #100]	; (800d034 <xTaskRemoveFromEventList+0xb8>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	d903      	bls.n	800cfdc <xTaskRemoveFromEventList+0x60>
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfd8:	4a16      	ldr	r2, [pc, #88]	; (800d034 <xTaskRemoveFromEventList+0xb8>)
 800cfda:	6013      	str	r3, [r2, #0]
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfe0:	4613      	mov	r3, r2
 800cfe2:	009b      	lsls	r3, r3, #2
 800cfe4:	4413      	add	r3, r2
 800cfe6:	009b      	lsls	r3, r3, #2
 800cfe8:	4a13      	ldr	r2, [pc, #76]	; (800d038 <xTaskRemoveFromEventList+0xbc>)
 800cfea:	441a      	add	r2, r3
 800cfec:	693b      	ldr	r3, [r7, #16]
 800cfee:	3304      	adds	r3, #4
 800cff0:	4619      	mov	r1, r3
 800cff2:	4610      	mov	r0, r2
 800cff4:	f7fe fccb 	bl	800b98e <vListInsertEnd>
 800cff8:	e005      	b.n	800d006 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	3318      	adds	r3, #24
 800cffe:	4619      	mov	r1, r3
 800d000:	480e      	ldr	r0, [pc, #56]	; (800d03c <xTaskRemoveFromEventList+0xc0>)
 800d002:	f7fe fcc4 	bl	800b98e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d00a:	4b0d      	ldr	r3, [pc, #52]	; (800d040 <xTaskRemoveFromEventList+0xc4>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d010:	429a      	cmp	r2, r3
 800d012:	d905      	bls.n	800d020 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d014:	2301      	movs	r3, #1
 800d016:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d018:	4b0a      	ldr	r3, [pc, #40]	; (800d044 <xTaskRemoveFromEventList+0xc8>)
 800d01a:	2201      	movs	r2, #1
 800d01c:	601a      	str	r2, [r3, #0]
 800d01e:	e001      	b.n	800d024 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800d020:	2300      	movs	r3, #0
 800d022:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d024:	697b      	ldr	r3, [r7, #20]
}
 800d026:	4618      	mov	r0, r3
 800d028:	3718      	adds	r7, #24
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}
 800d02e:	bf00      	nop
 800d030:	20001928 	.word	0x20001928
 800d034:	20001908 	.word	0x20001908
 800d038:	20001430 	.word	0x20001430
 800d03c:	200018c0 	.word	0x200018c0
 800d040:	2000142c 	.word	0x2000142c
 800d044:	20001914 	.word	0x20001914

0800d048 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d048:	b480      	push	{r7}
 800d04a:	b083      	sub	sp, #12
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d050:	4b06      	ldr	r3, [pc, #24]	; (800d06c <vTaskInternalSetTimeOutState+0x24>)
 800d052:	681a      	ldr	r2, [r3, #0]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d058:	4b05      	ldr	r3, [pc, #20]	; (800d070 <vTaskInternalSetTimeOutState+0x28>)
 800d05a:	681a      	ldr	r2, [r3, #0]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	605a      	str	r2, [r3, #4]
}
 800d060:	bf00      	nop
 800d062:	370c      	adds	r7, #12
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr
 800d06c:	20001918 	.word	0x20001918
 800d070:	20001904 	.word	0x20001904

0800d074 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b088      	sub	sp, #32
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d10c      	bne.n	800d09e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800d084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d088:	b672      	cpsid	i
 800d08a:	f383 8811 	msr	BASEPRI, r3
 800d08e:	f3bf 8f6f 	isb	sy
 800d092:	f3bf 8f4f 	dsb	sy
 800d096:	b662      	cpsie	i
 800d098:	613b      	str	r3, [r7, #16]
}
 800d09a:	bf00      	nop
 800d09c:	e7fe      	b.n	800d09c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d10c      	bne.n	800d0be <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800d0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a8:	b672      	cpsid	i
 800d0aa:	f383 8811 	msr	BASEPRI, r3
 800d0ae:	f3bf 8f6f 	isb	sy
 800d0b2:	f3bf 8f4f 	dsb	sy
 800d0b6:	b662      	cpsie	i
 800d0b8:	60fb      	str	r3, [r7, #12]
}
 800d0ba:	bf00      	nop
 800d0bc:	e7fe      	b.n	800d0bc <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800d0be:	f000 fe75 	bl	800ddac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d0c2:	4b1d      	ldr	r3, [pc, #116]	; (800d138 <xTaskCheckForTimeOut+0xc4>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	685b      	ldr	r3, [r3, #4]
 800d0cc:	69ba      	ldr	r2, [r7, #24]
 800d0ce:	1ad3      	subs	r3, r2, r3
 800d0d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0da:	d102      	bne.n	800d0e2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	61fb      	str	r3, [r7, #28]
 800d0e0:	e023      	b.n	800d12a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681a      	ldr	r2, [r3, #0]
 800d0e6:	4b15      	ldr	r3, [pc, #84]	; (800d13c <xTaskCheckForTimeOut+0xc8>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d007      	beq.n	800d0fe <xTaskCheckForTimeOut+0x8a>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	685b      	ldr	r3, [r3, #4]
 800d0f2:	69ba      	ldr	r2, [r7, #24]
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	d302      	bcc.n	800d0fe <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	61fb      	str	r3, [r7, #28]
 800d0fc:	e015      	b.n	800d12a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	697a      	ldr	r2, [r7, #20]
 800d104:	429a      	cmp	r2, r3
 800d106:	d20b      	bcs.n	800d120 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	681a      	ldr	r2, [r3, #0]
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	1ad2      	subs	r2, r2, r3
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f7ff ff97 	bl	800d048 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d11a:	2300      	movs	r3, #0
 800d11c:	61fb      	str	r3, [r7, #28]
 800d11e:	e004      	b.n	800d12a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	2200      	movs	r2, #0
 800d124:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d126:	2301      	movs	r3, #1
 800d128:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d12a:	f000 fe73 	bl	800de14 <vPortExitCritical>

	return xReturn;
 800d12e:	69fb      	ldr	r3, [r7, #28]
}
 800d130:	4618      	mov	r0, r3
 800d132:	3720      	adds	r7, #32
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}
 800d138:	20001904 	.word	0x20001904
 800d13c:	20001918 	.word	0x20001918

0800d140 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d140:	b480      	push	{r7}
 800d142:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d144:	4b03      	ldr	r3, [pc, #12]	; (800d154 <vTaskMissedYield+0x14>)
 800d146:	2201      	movs	r2, #1
 800d148:	601a      	str	r2, [r3, #0]
}
 800d14a:	bf00      	nop
 800d14c:	46bd      	mov	sp, r7
 800d14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d152:	4770      	bx	lr
 800d154:	20001914 	.word	0x20001914

0800d158 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b082      	sub	sp, #8
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d160:	f000 f852 	bl	800d208 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d164:	4b06      	ldr	r3, [pc, #24]	; (800d180 <prvIdleTask+0x28>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	2b01      	cmp	r3, #1
 800d16a:	d9f9      	bls.n	800d160 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d16c:	4b05      	ldr	r3, [pc, #20]	; (800d184 <prvIdleTask+0x2c>)
 800d16e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d172:	601a      	str	r2, [r3, #0]
 800d174:	f3bf 8f4f 	dsb	sy
 800d178:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d17c:	e7f0      	b.n	800d160 <prvIdleTask+0x8>
 800d17e:	bf00      	nop
 800d180:	20001430 	.word	0x20001430
 800d184:	e000ed04 	.word	0xe000ed04

0800d188 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d18e:	2300      	movs	r3, #0
 800d190:	607b      	str	r3, [r7, #4]
 800d192:	e00c      	b.n	800d1ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d194:	687a      	ldr	r2, [r7, #4]
 800d196:	4613      	mov	r3, r2
 800d198:	009b      	lsls	r3, r3, #2
 800d19a:	4413      	add	r3, r2
 800d19c:	009b      	lsls	r3, r3, #2
 800d19e:	4a12      	ldr	r2, [pc, #72]	; (800d1e8 <prvInitialiseTaskLists+0x60>)
 800d1a0:	4413      	add	r3, r2
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f7fe fbc6 	bl	800b934 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	3301      	adds	r3, #1
 800d1ac:	607b      	str	r3, [r7, #4]
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2b37      	cmp	r3, #55	; 0x37
 800d1b2:	d9ef      	bls.n	800d194 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d1b4:	480d      	ldr	r0, [pc, #52]	; (800d1ec <prvInitialiseTaskLists+0x64>)
 800d1b6:	f7fe fbbd 	bl	800b934 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d1ba:	480d      	ldr	r0, [pc, #52]	; (800d1f0 <prvInitialiseTaskLists+0x68>)
 800d1bc:	f7fe fbba 	bl	800b934 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d1c0:	480c      	ldr	r0, [pc, #48]	; (800d1f4 <prvInitialiseTaskLists+0x6c>)
 800d1c2:	f7fe fbb7 	bl	800b934 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d1c6:	480c      	ldr	r0, [pc, #48]	; (800d1f8 <prvInitialiseTaskLists+0x70>)
 800d1c8:	f7fe fbb4 	bl	800b934 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d1cc:	480b      	ldr	r0, [pc, #44]	; (800d1fc <prvInitialiseTaskLists+0x74>)
 800d1ce:	f7fe fbb1 	bl	800b934 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d1d2:	4b0b      	ldr	r3, [pc, #44]	; (800d200 <prvInitialiseTaskLists+0x78>)
 800d1d4:	4a05      	ldr	r2, [pc, #20]	; (800d1ec <prvInitialiseTaskLists+0x64>)
 800d1d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d1d8:	4b0a      	ldr	r3, [pc, #40]	; (800d204 <prvInitialiseTaskLists+0x7c>)
 800d1da:	4a05      	ldr	r2, [pc, #20]	; (800d1f0 <prvInitialiseTaskLists+0x68>)
 800d1dc:	601a      	str	r2, [r3, #0]
}
 800d1de:	bf00      	nop
 800d1e0:	3708      	adds	r7, #8
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}
 800d1e6:	bf00      	nop
 800d1e8:	20001430 	.word	0x20001430
 800d1ec:	20001890 	.word	0x20001890
 800d1f0:	200018a4 	.word	0x200018a4
 800d1f4:	200018c0 	.word	0x200018c0
 800d1f8:	200018d4 	.word	0x200018d4
 800d1fc:	200018ec 	.word	0x200018ec
 800d200:	200018b8 	.word	0x200018b8
 800d204:	200018bc 	.word	0x200018bc

0800d208 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b082      	sub	sp, #8
 800d20c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d20e:	e019      	b.n	800d244 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d210:	f000 fdcc 	bl	800ddac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d214:	4b10      	ldr	r3, [pc, #64]	; (800d258 <prvCheckTasksWaitingTermination+0x50>)
 800d216:	68db      	ldr	r3, [r3, #12]
 800d218:	68db      	ldr	r3, [r3, #12]
 800d21a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	3304      	adds	r3, #4
 800d220:	4618      	mov	r0, r3
 800d222:	f7fe fc11 	bl	800ba48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d226:	4b0d      	ldr	r3, [pc, #52]	; (800d25c <prvCheckTasksWaitingTermination+0x54>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	3b01      	subs	r3, #1
 800d22c:	4a0b      	ldr	r2, [pc, #44]	; (800d25c <prvCheckTasksWaitingTermination+0x54>)
 800d22e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d230:	4b0b      	ldr	r3, [pc, #44]	; (800d260 <prvCheckTasksWaitingTermination+0x58>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	3b01      	subs	r3, #1
 800d236:	4a0a      	ldr	r2, [pc, #40]	; (800d260 <prvCheckTasksWaitingTermination+0x58>)
 800d238:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d23a:	f000 fdeb 	bl	800de14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f000 f810 	bl	800d264 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d244:	4b06      	ldr	r3, [pc, #24]	; (800d260 <prvCheckTasksWaitingTermination+0x58>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d1e1      	bne.n	800d210 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d24c:	bf00      	nop
 800d24e:	bf00      	nop
 800d250:	3708      	adds	r7, #8
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}
 800d256:	bf00      	nop
 800d258:	200018d4 	.word	0x200018d4
 800d25c:	20001900 	.word	0x20001900
 800d260:	200018e8 	.word	0x200018e8

0800d264 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d264:	b580      	push	{r7, lr}
 800d266:	b084      	sub	sp, #16
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	3354      	adds	r3, #84	; 0x54
 800d270:	4618      	mov	r0, r3
 800d272:	f001 ff8f 	bl	800f194 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d108      	bne.n	800d292 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d284:	4618      	mov	r0, r3
 800d286:	f000 ff87 	bl	800e198 <vPortFree>
				vPortFree( pxTCB );
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f000 ff84 	bl	800e198 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d290:	e01a      	b.n	800d2c8 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d298:	2b01      	cmp	r3, #1
 800d29a:	d103      	bne.n	800d2a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f000 ff7b 	bl	800e198 <vPortFree>
	}
 800d2a2:	e011      	b.n	800d2c8 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d2aa:	2b02      	cmp	r3, #2
 800d2ac:	d00c      	beq.n	800d2c8 <prvDeleteTCB+0x64>
	__asm volatile
 800d2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b2:	b672      	cpsid	i
 800d2b4:	f383 8811 	msr	BASEPRI, r3
 800d2b8:	f3bf 8f6f 	isb	sy
 800d2bc:	f3bf 8f4f 	dsb	sy
 800d2c0:	b662      	cpsie	i
 800d2c2:	60fb      	str	r3, [r7, #12]
}
 800d2c4:	bf00      	nop
 800d2c6:	e7fe      	b.n	800d2c6 <prvDeleteTCB+0x62>
	}
 800d2c8:	bf00      	nop
 800d2ca:	3710      	adds	r7, #16
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}

0800d2d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	b083      	sub	sp, #12
 800d2d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d2d6:	4b0c      	ldr	r3, [pc, #48]	; (800d308 <prvResetNextTaskUnblockTime+0x38>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d104      	bne.n	800d2ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d2e0:	4b0a      	ldr	r3, [pc, #40]	; (800d30c <prvResetNextTaskUnblockTime+0x3c>)
 800d2e2:	f04f 32ff 	mov.w	r2, #4294967295
 800d2e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d2e8:	e008      	b.n	800d2fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2ea:	4b07      	ldr	r3, [pc, #28]	; (800d308 <prvResetNextTaskUnblockTime+0x38>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	68db      	ldr	r3, [r3, #12]
 800d2f0:	68db      	ldr	r3, [r3, #12]
 800d2f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	685b      	ldr	r3, [r3, #4]
 800d2f8:	4a04      	ldr	r2, [pc, #16]	; (800d30c <prvResetNextTaskUnblockTime+0x3c>)
 800d2fa:	6013      	str	r3, [r2, #0]
}
 800d2fc:	bf00      	nop
 800d2fe:	370c      	adds	r7, #12
 800d300:	46bd      	mov	sp, r7
 800d302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d306:	4770      	bx	lr
 800d308:	200018b8 	.word	0x200018b8
 800d30c:	20001920 	.word	0x20001920

0800d310 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d310:	b480      	push	{r7}
 800d312:	b083      	sub	sp, #12
 800d314:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d316:	4b0b      	ldr	r3, [pc, #44]	; (800d344 <xTaskGetSchedulerState+0x34>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d102      	bne.n	800d324 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d31e:	2301      	movs	r3, #1
 800d320:	607b      	str	r3, [r7, #4]
 800d322:	e008      	b.n	800d336 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d324:	4b08      	ldr	r3, [pc, #32]	; (800d348 <xTaskGetSchedulerState+0x38>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d102      	bne.n	800d332 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d32c:	2302      	movs	r3, #2
 800d32e:	607b      	str	r3, [r7, #4]
 800d330:	e001      	b.n	800d336 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d332:	2300      	movs	r3, #0
 800d334:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d336:	687b      	ldr	r3, [r7, #4]
	}
 800d338:	4618      	mov	r0, r3
 800d33a:	370c      	adds	r7, #12
 800d33c:	46bd      	mov	sp, r7
 800d33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d342:	4770      	bx	lr
 800d344:	2000190c 	.word	0x2000190c
 800d348:	20001928 	.word	0x20001928

0800d34c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b086      	sub	sp, #24
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d358:	2300      	movs	r3, #0
 800d35a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d05a      	beq.n	800d418 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d362:	4b30      	ldr	r3, [pc, #192]	; (800d424 <xTaskPriorityDisinherit+0xd8>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	693a      	ldr	r2, [r7, #16]
 800d368:	429a      	cmp	r2, r3
 800d36a:	d00c      	beq.n	800d386 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800d36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d370:	b672      	cpsid	i
 800d372:	f383 8811 	msr	BASEPRI, r3
 800d376:	f3bf 8f6f 	isb	sy
 800d37a:	f3bf 8f4f 	dsb	sy
 800d37e:	b662      	cpsie	i
 800d380:	60fb      	str	r3, [r7, #12]
}
 800d382:	bf00      	nop
 800d384:	e7fe      	b.n	800d384 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d10c      	bne.n	800d3a8 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800d38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d392:	b672      	cpsid	i
 800d394:	f383 8811 	msr	BASEPRI, r3
 800d398:	f3bf 8f6f 	isb	sy
 800d39c:	f3bf 8f4f 	dsb	sy
 800d3a0:	b662      	cpsie	i
 800d3a2:	60bb      	str	r3, [r7, #8]
}
 800d3a4:	bf00      	nop
 800d3a6:	e7fe      	b.n	800d3a6 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3ac:	1e5a      	subs	r2, r3, #1
 800d3ae:	693b      	ldr	r3, [r7, #16]
 800d3b0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3b6:	693b      	ldr	r3, [r7, #16]
 800d3b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d02c      	beq.n	800d418 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d128      	bne.n	800d418 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	3304      	adds	r3, #4
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f7fe fb3c 	bl	800ba48 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d3d4:	693b      	ldr	r3, [r7, #16]
 800d3d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3e8:	4b0f      	ldr	r3, [pc, #60]	; (800d428 <xTaskPriorityDisinherit+0xdc>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d903      	bls.n	800d3f8 <xTaskPriorityDisinherit+0xac>
 800d3f0:	693b      	ldr	r3, [r7, #16]
 800d3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f4:	4a0c      	ldr	r2, [pc, #48]	; (800d428 <xTaskPriorityDisinherit+0xdc>)
 800d3f6:	6013      	str	r3, [r2, #0]
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3fc:	4613      	mov	r3, r2
 800d3fe:	009b      	lsls	r3, r3, #2
 800d400:	4413      	add	r3, r2
 800d402:	009b      	lsls	r3, r3, #2
 800d404:	4a09      	ldr	r2, [pc, #36]	; (800d42c <xTaskPriorityDisinherit+0xe0>)
 800d406:	441a      	add	r2, r3
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	3304      	adds	r3, #4
 800d40c:	4619      	mov	r1, r3
 800d40e:	4610      	mov	r0, r2
 800d410:	f7fe fabd 	bl	800b98e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d414:	2301      	movs	r3, #1
 800d416:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d418:	697b      	ldr	r3, [r7, #20]
	}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3718      	adds	r7, #24
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}
 800d422:	bf00      	nop
 800d424:	2000142c 	.word	0x2000142c
 800d428:	20001908 	.word	0x20001908
 800d42c:	20001430 	.word	0x20001430

0800d430 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d43a:	4b21      	ldr	r3, [pc, #132]	; (800d4c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d440:	4b20      	ldr	r3, [pc, #128]	; (800d4c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	3304      	adds	r3, #4
 800d446:	4618      	mov	r0, r3
 800d448:	f7fe fafe 	bl	800ba48 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d452:	d10a      	bne.n	800d46a <prvAddCurrentTaskToDelayedList+0x3a>
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d007      	beq.n	800d46a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d45a:	4b1a      	ldr	r3, [pc, #104]	; (800d4c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	3304      	adds	r3, #4
 800d460:	4619      	mov	r1, r3
 800d462:	4819      	ldr	r0, [pc, #100]	; (800d4c8 <prvAddCurrentTaskToDelayedList+0x98>)
 800d464:	f7fe fa93 	bl	800b98e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d468:	e026      	b.n	800d4b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d46a:	68fa      	ldr	r2, [r7, #12]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	4413      	add	r3, r2
 800d470:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d472:	4b14      	ldr	r3, [pc, #80]	; (800d4c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	68ba      	ldr	r2, [r7, #8]
 800d478:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d47a:	68ba      	ldr	r2, [r7, #8]
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	429a      	cmp	r2, r3
 800d480:	d209      	bcs.n	800d496 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d482:	4b12      	ldr	r3, [pc, #72]	; (800d4cc <prvAddCurrentTaskToDelayedList+0x9c>)
 800d484:	681a      	ldr	r2, [r3, #0]
 800d486:	4b0f      	ldr	r3, [pc, #60]	; (800d4c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	3304      	adds	r3, #4
 800d48c:	4619      	mov	r1, r3
 800d48e:	4610      	mov	r0, r2
 800d490:	f7fe faa1 	bl	800b9d6 <vListInsert>
}
 800d494:	e010      	b.n	800d4b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d496:	4b0e      	ldr	r3, [pc, #56]	; (800d4d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d498:	681a      	ldr	r2, [r3, #0]
 800d49a:	4b0a      	ldr	r3, [pc, #40]	; (800d4c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	3304      	adds	r3, #4
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	4610      	mov	r0, r2
 800d4a4:	f7fe fa97 	bl	800b9d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d4a8:	4b0a      	ldr	r3, [pc, #40]	; (800d4d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	68ba      	ldr	r2, [r7, #8]
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	d202      	bcs.n	800d4b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d4b2:	4a08      	ldr	r2, [pc, #32]	; (800d4d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	6013      	str	r3, [r2, #0]
}
 800d4b8:	bf00      	nop
 800d4ba:	3710      	adds	r7, #16
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}
 800d4c0:	20001904 	.word	0x20001904
 800d4c4:	2000142c 	.word	0x2000142c
 800d4c8:	200018ec 	.word	0x200018ec
 800d4cc:	200018bc 	.word	0x200018bc
 800d4d0:	200018b8 	.word	0x200018b8
 800d4d4:	20001920 	.word	0x20001920

0800d4d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b08a      	sub	sp, #40	; 0x28
 800d4dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d4e2:	f000 fb15 	bl	800db10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d4e6:	4b1d      	ldr	r3, [pc, #116]	; (800d55c <xTimerCreateTimerTask+0x84>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d021      	beq.n	800d532 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d4f6:	1d3a      	adds	r2, r7, #4
 800d4f8:	f107 0108 	add.w	r1, r7, #8
 800d4fc:	f107 030c 	add.w	r3, r7, #12
 800d500:	4618      	mov	r0, r3
 800d502:	f7fe f9fd 	bl	800b900 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d506:	6879      	ldr	r1, [r7, #4]
 800d508:	68bb      	ldr	r3, [r7, #8]
 800d50a:	68fa      	ldr	r2, [r7, #12]
 800d50c:	9202      	str	r2, [sp, #8]
 800d50e:	9301      	str	r3, [sp, #4]
 800d510:	2302      	movs	r3, #2
 800d512:	9300      	str	r3, [sp, #0]
 800d514:	2300      	movs	r3, #0
 800d516:	460a      	mov	r2, r1
 800d518:	4911      	ldr	r1, [pc, #68]	; (800d560 <xTimerCreateTimerTask+0x88>)
 800d51a:	4812      	ldr	r0, [pc, #72]	; (800d564 <xTimerCreateTimerTask+0x8c>)
 800d51c:	f7ff f890 	bl	800c640 <xTaskCreateStatic>
 800d520:	4603      	mov	r3, r0
 800d522:	4a11      	ldr	r2, [pc, #68]	; (800d568 <xTimerCreateTimerTask+0x90>)
 800d524:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d526:	4b10      	ldr	r3, [pc, #64]	; (800d568 <xTimerCreateTimerTask+0x90>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d001      	beq.n	800d532 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d52e:	2301      	movs	r3, #1
 800d530:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d10c      	bne.n	800d552 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800d538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d53c:	b672      	cpsid	i
 800d53e:	f383 8811 	msr	BASEPRI, r3
 800d542:	f3bf 8f6f 	isb	sy
 800d546:	f3bf 8f4f 	dsb	sy
 800d54a:	b662      	cpsie	i
 800d54c:	613b      	str	r3, [r7, #16]
}
 800d54e:	bf00      	nop
 800d550:	e7fe      	b.n	800d550 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800d552:	697b      	ldr	r3, [r7, #20]
}
 800d554:	4618      	mov	r0, r3
 800d556:	3718      	adds	r7, #24
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}
 800d55c:	2000195c 	.word	0x2000195c
 800d560:	0800f2f8 	.word	0x0800f2f8
 800d564:	0800d6a9 	.word	0x0800d6a9
 800d568:	20001960 	.word	0x20001960

0800d56c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b08a      	sub	sp, #40	; 0x28
 800d570:	af00      	add	r7, sp, #0
 800d572:	60f8      	str	r0, [r7, #12]
 800d574:	60b9      	str	r1, [r7, #8]
 800d576:	607a      	str	r2, [r7, #4]
 800d578:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d57a:	2300      	movs	r3, #0
 800d57c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d10c      	bne.n	800d59e <xTimerGenericCommand+0x32>
	__asm volatile
 800d584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d588:	b672      	cpsid	i
 800d58a:	f383 8811 	msr	BASEPRI, r3
 800d58e:	f3bf 8f6f 	isb	sy
 800d592:	f3bf 8f4f 	dsb	sy
 800d596:	b662      	cpsie	i
 800d598:	623b      	str	r3, [r7, #32]
}
 800d59a:	bf00      	nop
 800d59c:	e7fe      	b.n	800d59c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d59e:	4b1a      	ldr	r3, [pc, #104]	; (800d608 <xTimerGenericCommand+0x9c>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d02a      	beq.n	800d5fc <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	2b05      	cmp	r3, #5
 800d5b6:	dc18      	bgt.n	800d5ea <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d5b8:	f7ff feaa 	bl	800d310 <xTaskGetSchedulerState>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	2b02      	cmp	r3, #2
 800d5c0:	d109      	bne.n	800d5d6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d5c2:	4b11      	ldr	r3, [pc, #68]	; (800d608 <xTimerGenericCommand+0x9c>)
 800d5c4:	6818      	ldr	r0, [r3, #0]
 800d5c6:	f107 0110 	add.w	r1, r7, #16
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5ce:	f7fe fbb7 	bl	800bd40 <xQueueGenericSend>
 800d5d2:	6278      	str	r0, [r7, #36]	; 0x24
 800d5d4:	e012      	b.n	800d5fc <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d5d6:	4b0c      	ldr	r3, [pc, #48]	; (800d608 <xTimerGenericCommand+0x9c>)
 800d5d8:	6818      	ldr	r0, [r3, #0]
 800d5da:	f107 0110 	add.w	r1, r7, #16
 800d5de:	2300      	movs	r3, #0
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	f7fe fbad 	bl	800bd40 <xQueueGenericSend>
 800d5e6:	6278      	str	r0, [r7, #36]	; 0x24
 800d5e8:	e008      	b.n	800d5fc <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d5ea:	4b07      	ldr	r3, [pc, #28]	; (800d608 <xTimerGenericCommand+0x9c>)
 800d5ec:	6818      	ldr	r0, [r3, #0]
 800d5ee:	f107 0110 	add.w	r1, r7, #16
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	683a      	ldr	r2, [r7, #0]
 800d5f6:	f7fe fca9 	bl	800bf4c <xQueueGenericSendFromISR>
 800d5fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3728      	adds	r7, #40	; 0x28
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}
 800d606:	bf00      	nop
 800d608:	2000195c 	.word	0x2000195c

0800d60c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b088      	sub	sp, #32
 800d610:	af02      	add	r7, sp, #8
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d616:	4b23      	ldr	r3, [pc, #140]	; (800d6a4 <prvProcessExpiredTimer+0x98>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	68db      	ldr	r3, [r3, #12]
 800d61c:	68db      	ldr	r3, [r3, #12]
 800d61e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	3304      	adds	r3, #4
 800d624:	4618      	mov	r0, r3
 800d626:	f7fe fa0f 	bl	800ba48 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d630:	f003 0304 	and.w	r3, r3, #4
 800d634:	2b00      	cmp	r3, #0
 800d636:	d024      	beq.n	800d682 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d638:	697b      	ldr	r3, [r7, #20]
 800d63a:	699a      	ldr	r2, [r3, #24]
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	18d1      	adds	r1, r2, r3
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	683a      	ldr	r2, [r7, #0]
 800d644:	6978      	ldr	r0, [r7, #20]
 800d646:	f000 f8d3 	bl	800d7f0 <prvInsertTimerInActiveList>
 800d64a:	4603      	mov	r3, r0
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d021      	beq.n	800d694 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d650:	2300      	movs	r3, #0
 800d652:	9300      	str	r3, [sp, #0]
 800d654:	2300      	movs	r3, #0
 800d656:	687a      	ldr	r2, [r7, #4]
 800d658:	2100      	movs	r1, #0
 800d65a:	6978      	ldr	r0, [r7, #20]
 800d65c:	f7ff ff86 	bl	800d56c <xTimerGenericCommand>
 800d660:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d662:	693b      	ldr	r3, [r7, #16]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d115      	bne.n	800d694 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800d668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d66c:	b672      	cpsid	i
 800d66e:	f383 8811 	msr	BASEPRI, r3
 800d672:	f3bf 8f6f 	isb	sy
 800d676:	f3bf 8f4f 	dsb	sy
 800d67a:	b662      	cpsie	i
 800d67c:	60fb      	str	r3, [r7, #12]
}
 800d67e:	bf00      	nop
 800d680:	e7fe      	b.n	800d680 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d688:	f023 0301 	bic.w	r3, r3, #1
 800d68c:	b2da      	uxtb	r2, r3
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	6a1b      	ldr	r3, [r3, #32]
 800d698:	6978      	ldr	r0, [r7, #20]
 800d69a:	4798      	blx	r3
}
 800d69c:	bf00      	nop
 800d69e:	3718      	adds	r7, #24
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}
 800d6a4:	20001954 	.word	0x20001954

0800d6a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b084      	sub	sp, #16
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d6b0:	f107 0308 	add.w	r3, r7, #8
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f000 f857 	bl	800d768 <prvGetNextExpireTime>
 800d6ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	4619      	mov	r1, r3
 800d6c0:	68f8      	ldr	r0, [r7, #12]
 800d6c2:	f000 f803 	bl	800d6cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d6c6:	f000 f8d5 	bl	800d874 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d6ca:	e7f1      	b.n	800d6b0 <prvTimerTask+0x8>

0800d6cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b084      	sub	sp, #16
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d6d6:	f7ff fa1d 	bl	800cb14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d6da:	f107 0308 	add.w	r3, r7, #8
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f000 f866 	bl	800d7b0 <prvSampleTimeNow>
 800d6e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d130      	bne.n	800d74e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d10a      	bne.n	800d708 <prvProcessTimerOrBlockTask+0x3c>
 800d6f2:	687a      	ldr	r2, [r7, #4]
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d806      	bhi.n	800d708 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d6fa:	f7ff fa19 	bl	800cb30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d6fe:	68f9      	ldr	r1, [r7, #12]
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f7ff ff83 	bl	800d60c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d706:	e024      	b.n	800d752 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d008      	beq.n	800d720 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d70e:	4b13      	ldr	r3, [pc, #76]	; (800d75c <prvProcessTimerOrBlockTask+0x90>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d101      	bne.n	800d71c <prvProcessTimerOrBlockTask+0x50>
 800d718:	2301      	movs	r3, #1
 800d71a:	e000      	b.n	800d71e <prvProcessTimerOrBlockTask+0x52>
 800d71c:	2300      	movs	r3, #0
 800d71e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d720:	4b0f      	ldr	r3, [pc, #60]	; (800d760 <prvProcessTimerOrBlockTask+0x94>)
 800d722:	6818      	ldr	r0, [r3, #0]
 800d724:	687a      	ldr	r2, [r7, #4]
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	1ad3      	subs	r3, r2, r3
 800d72a:	683a      	ldr	r2, [r7, #0]
 800d72c:	4619      	mov	r1, r3
 800d72e:	f7fe ff53 	bl	800c5d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d732:	f7ff f9fd 	bl	800cb30 <xTaskResumeAll>
 800d736:	4603      	mov	r3, r0
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d10a      	bne.n	800d752 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d73c:	4b09      	ldr	r3, [pc, #36]	; (800d764 <prvProcessTimerOrBlockTask+0x98>)
 800d73e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d742:	601a      	str	r2, [r3, #0]
 800d744:	f3bf 8f4f 	dsb	sy
 800d748:	f3bf 8f6f 	isb	sy
}
 800d74c:	e001      	b.n	800d752 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d74e:	f7ff f9ef 	bl	800cb30 <xTaskResumeAll>
}
 800d752:	bf00      	nop
 800d754:	3710      	adds	r7, #16
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}
 800d75a:	bf00      	nop
 800d75c:	20001958 	.word	0x20001958
 800d760:	2000195c 	.word	0x2000195c
 800d764:	e000ed04 	.word	0xe000ed04

0800d768 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d768:	b480      	push	{r7}
 800d76a:	b085      	sub	sp, #20
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d770:	4b0e      	ldr	r3, [pc, #56]	; (800d7ac <prvGetNextExpireTime+0x44>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d101      	bne.n	800d77e <prvGetNextExpireTime+0x16>
 800d77a:	2201      	movs	r2, #1
 800d77c:	e000      	b.n	800d780 <prvGetNextExpireTime+0x18>
 800d77e:	2200      	movs	r2, #0
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d105      	bne.n	800d798 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d78c:	4b07      	ldr	r3, [pc, #28]	; (800d7ac <prvGetNextExpireTime+0x44>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	68db      	ldr	r3, [r3, #12]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	60fb      	str	r3, [r7, #12]
 800d796:	e001      	b.n	800d79c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d798:	2300      	movs	r3, #0
 800d79a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d79c:	68fb      	ldr	r3, [r7, #12]
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3714      	adds	r7, #20
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a8:	4770      	bx	lr
 800d7aa:	bf00      	nop
 800d7ac:	20001954 	.word	0x20001954

0800d7b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b084      	sub	sp, #16
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d7b8:	f7ff fa5a 	bl	800cc70 <xTaskGetTickCount>
 800d7bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d7be:	4b0b      	ldr	r3, [pc, #44]	; (800d7ec <prvSampleTimeNow+0x3c>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	68fa      	ldr	r2, [r7, #12]
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d205      	bcs.n	800d7d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d7c8:	f000 f93c 	bl	800da44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	601a      	str	r2, [r3, #0]
 800d7d2:	e002      	b.n	800d7da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d7da:	4a04      	ldr	r2, [pc, #16]	; (800d7ec <prvSampleTimeNow+0x3c>)
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3710      	adds	r7, #16
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}
 800d7ea:	bf00      	nop
 800d7ec:	20001964 	.word	0x20001964

0800d7f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b086      	sub	sp, #24
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	60f8      	str	r0, [r7, #12]
 800d7f8:	60b9      	str	r1, [r7, #8]
 800d7fa:	607a      	str	r2, [r7, #4]
 800d7fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d7fe:	2300      	movs	r3, #0
 800d800:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	68ba      	ldr	r2, [r7, #8]
 800d806:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	68fa      	ldr	r2, [r7, #12]
 800d80c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d80e:	68ba      	ldr	r2, [r7, #8]
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	429a      	cmp	r2, r3
 800d814:	d812      	bhi.n	800d83c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d816:	687a      	ldr	r2, [r7, #4]
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	1ad2      	subs	r2, r2, r3
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	699b      	ldr	r3, [r3, #24]
 800d820:	429a      	cmp	r2, r3
 800d822:	d302      	bcc.n	800d82a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d824:	2301      	movs	r3, #1
 800d826:	617b      	str	r3, [r7, #20]
 800d828:	e01b      	b.n	800d862 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d82a:	4b10      	ldr	r3, [pc, #64]	; (800d86c <prvInsertTimerInActiveList+0x7c>)
 800d82c:	681a      	ldr	r2, [r3, #0]
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	3304      	adds	r3, #4
 800d832:	4619      	mov	r1, r3
 800d834:	4610      	mov	r0, r2
 800d836:	f7fe f8ce 	bl	800b9d6 <vListInsert>
 800d83a:	e012      	b.n	800d862 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d83c:	687a      	ldr	r2, [r7, #4]
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	429a      	cmp	r2, r3
 800d842:	d206      	bcs.n	800d852 <prvInsertTimerInActiveList+0x62>
 800d844:	68ba      	ldr	r2, [r7, #8]
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	429a      	cmp	r2, r3
 800d84a:	d302      	bcc.n	800d852 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d84c:	2301      	movs	r3, #1
 800d84e:	617b      	str	r3, [r7, #20]
 800d850:	e007      	b.n	800d862 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d852:	4b07      	ldr	r3, [pc, #28]	; (800d870 <prvInsertTimerInActiveList+0x80>)
 800d854:	681a      	ldr	r2, [r3, #0]
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	3304      	adds	r3, #4
 800d85a:	4619      	mov	r1, r3
 800d85c:	4610      	mov	r0, r2
 800d85e:	f7fe f8ba 	bl	800b9d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d862:	697b      	ldr	r3, [r7, #20]
}
 800d864:	4618      	mov	r0, r3
 800d866:	3718      	adds	r7, #24
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}
 800d86c:	20001958 	.word	0x20001958
 800d870:	20001954 	.word	0x20001954

0800d874 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b08e      	sub	sp, #56	; 0x38
 800d878:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d87a:	e0d0      	b.n	800da1e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	da1a      	bge.n	800d8b8 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d882:	1d3b      	adds	r3, r7, #4
 800d884:	3304      	adds	r3, #4
 800d886:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d10c      	bne.n	800d8a8 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800d88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d892:	b672      	cpsid	i
 800d894:	f383 8811 	msr	BASEPRI, r3
 800d898:	f3bf 8f6f 	isb	sy
 800d89c:	f3bf 8f4f 	dsb	sy
 800d8a0:	b662      	cpsie	i
 800d8a2:	61fb      	str	r3, [r7, #28]
}
 800d8a4:	bf00      	nop
 800d8a6:	e7fe      	b.n	800d8a6 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8ae:	6850      	ldr	r0, [r2, #4]
 800d8b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8b2:	6892      	ldr	r2, [r2, #8]
 800d8b4:	4611      	mov	r1, r2
 800d8b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	f2c0 80ae 	blt.w	800da1c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c6:	695b      	ldr	r3, [r3, #20]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d004      	beq.n	800d8d6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ce:	3304      	adds	r3, #4
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7fe f8b9 	bl	800ba48 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d8d6:	463b      	mov	r3, r7
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f7ff ff69 	bl	800d7b0 <prvSampleTimeNow>
 800d8de:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2b09      	cmp	r3, #9
 800d8e4:	f200 809b 	bhi.w	800da1e <prvProcessReceivedCommands+0x1aa>
 800d8e8:	a201      	add	r2, pc, #4	; (adr r2, 800d8f0 <prvProcessReceivedCommands+0x7c>)
 800d8ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8ee:	bf00      	nop
 800d8f0:	0800d919 	.word	0x0800d919
 800d8f4:	0800d919 	.word	0x0800d919
 800d8f8:	0800d919 	.word	0x0800d919
 800d8fc:	0800d991 	.word	0x0800d991
 800d900:	0800d9a5 	.word	0x0800d9a5
 800d904:	0800d9f3 	.word	0x0800d9f3
 800d908:	0800d919 	.word	0x0800d919
 800d90c:	0800d919 	.word	0x0800d919
 800d910:	0800d991 	.word	0x0800d991
 800d914:	0800d9a5 	.word	0x0800d9a5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d91a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d91e:	f043 0301 	orr.w	r3, r3, #1
 800d922:	b2da      	uxtb	r2, r3
 800d924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d926:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d92a:	68ba      	ldr	r2, [r7, #8]
 800d92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d92e:	699b      	ldr	r3, [r3, #24]
 800d930:	18d1      	adds	r1, r2, r3
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d936:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d938:	f7ff ff5a 	bl	800d7f0 <prvInsertTimerInActiveList>
 800d93c:	4603      	mov	r3, r0
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d06d      	beq.n	800da1e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d944:	6a1b      	ldr	r3, [r3, #32]
 800d946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d948:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d94c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d950:	f003 0304 	and.w	r3, r3, #4
 800d954:	2b00      	cmp	r3, #0
 800d956:	d062      	beq.n	800da1e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d958:	68ba      	ldr	r2, [r7, #8]
 800d95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d95c:	699b      	ldr	r3, [r3, #24]
 800d95e:	441a      	add	r2, r3
 800d960:	2300      	movs	r3, #0
 800d962:	9300      	str	r3, [sp, #0]
 800d964:	2300      	movs	r3, #0
 800d966:	2100      	movs	r1, #0
 800d968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d96a:	f7ff fdff 	bl	800d56c <xTimerGenericCommand>
 800d96e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d970:	6a3b      	ldr	r3, [r7, #32]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d153      	bne.n	800da1e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800d976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d97a:	b672      	cpsid	i
 800d97c:	f383 8811 	msr	BASEPRI, r3
 800d980:	f3bf 8f6f 	isb	sy
 800d984:	f3bf 8f4f 	dsb	sy
 800d988:	b662      	cpsie	i
 800d98a:	61bb      	str	r3, [r7, #24]
}
 800d98c:	bf00      	nop
 800d98e:	e7fe      	b.n	800d98e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d992:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d996:	f023 0301 	bic.w	r3, r3, #1
 800d99a:	b2da      	uxtb	r2, r3
 800d99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d99e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d9a2:	e03c      	b.n	800da1e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9aa:	f043 0301 	orr.w	r3, r3, #1
 800d9ae:	b2da      	uxtb	r2, r3
 800d9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d9b6:	68ba      	ldr	r2, [r7, #8]
 800d9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9be:	699b      	ldr	r3, [r3, #24]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d10c      	bne.n	800d9de <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800d9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9c8:	b672      	cpsid	i
 800d9ca:	f383 8811 	msr	BASEPRI, r3
 800d9ce:	f3bf 8f6f 	isb	sy
 800d9d2:	f3bf 8f4f 	dsb	sy
 800d9d6:	b662      	cpsie	i
 800d9d8:	617b      	str	r3, [r7, #20]
}
 800d9da:	bf00      	nop
 800d9dc:	e7fe      	b.n	800d9dc <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e0:	699a      	ldr	r2, [r3, #24]
 800d9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e4:	18d1      	adds	r1, r2, r3
 800d9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9ec:	f7ff ff00 	bl	800d7f0 <prvInsertTimerInActiveList>
					break;
 800d9f0:	e015      	b.n	800da1e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9f8:	f003 0302 	and.w	r3, r3, #2
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d103      	bne.n	800da08 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800da00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da02:	f000 fbc9 	bl	800e198 <vPortFree>
 800da06:	e00a      	b.n	800da1e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800da08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da0e:	f023 0301 	bic.w	r3, r3, #1
 800da12:	b2da      	uxtb	r2, r3
 800da14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800da1a:	e000      	b.n	800da1e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800da1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800da1e:	4b08      	ldr	r3, [pc, #32]	; (800da40 <prvProcessReceivedCommands+0x1cc>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	1d39      	adds	r1, r7, #4
 800da24:	2200      	movs	r2, #0
 800da26:	4618      	mov	r0, r3
 800da28:	f7fe fb30 	bl	800c08c <xQueueReceive>
 800da2c:	4603      	mov	r3, r0
 800da2e:	2b00      	cmp	r3, #0
 800da30:	f47f af24 	bne.w	800d87c <prvProcessReceivedCommands+0x8>
	}
}
 800da34:	bf00      	nop
 800da36:	bf00      	nop
 800da38:	3730      	adds	r7, #48	; 0x30
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}
 800da3e:	bf00      	nop
 800da40:	2000195c 	.word	0x2000195c

0800da44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b088      	sub	sp, #32
 800da48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800da4a:	e04a      	b.n	800dae2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800da4c:	4b2e      	ldr	r3, [pc, #184]	; (800db08 <prvSwitchTimerLists+0xc4>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	68db      	ldr	r3, [r3, #12]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da56:	4b2c      	ldr	r3, [pc, #176]	; (800db08 <prvSwitchTimerLists+0xc4>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	68db      	ldr	r3, [r3, #12]
 800da5c:	68db      	ldr	r3, [r3, #12]
 800da5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	3304      	adds	r3, #4
 800da64:	4618      	mov	r0, r3
 800da66:	f7fd ffef 	bl	800ba48 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	6a1b      	ldr	r3, [r3, #32]
 800da6e:	68f8      	ldr	r0, [r7, #12]
 800da70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da78:	f003 0304 	and.w	r3, r3, #4
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d030      	beq.n	800dae2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	699b      	ldr	r3, [r3, #24]
 800da84:	693a      	ldr	r2, [r7, #16]
 800da86:	4413      	add	r3, r2
 800da88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800da8a:	68ba      	ldr	r2, [r7, #8]
 800da8c:	693b      	ldr	r3, [r7, #16]
 800da8e:	429a      	cmp	r2, r3
 800da90:	d90e      	bls.n	800dab0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	68ba      	ldr	r2, [r7, #8]
 800da96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	68fa      	ldr	r2, [r7, #12]
 800da9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800da9e:	4b1a      	ldr	r3, [pc, #104]	; (800db08 <prvSwitchTimerLists+0xc4>)
 800daa0:	681a      	ldr	r2, [r3, #0]
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	3304      	adds	r3, #4
 800daa6:	4619      	mov	r1, r3
 800daa8:	4610      	mov	r0, r2
 800daaa:	f7fd ff94 	bl	800b9d6 <vListInsert>
 800daae:	e018      	b.n	800dae2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dab0:	2300      	movs	r3, #0
 800dab2:	9300      	str	r3, [sp, #0]
 800dab4:	2300      	movs	r3, #0
 800dab6:	693a      	ldr	r2, [r7, #16]
 800dab8:	2100      	movs	r1, #0
 800daba:	68f8      	ldr	r0, [r7, #12]
 800dabc:	f7ff fd56 	bl	800d56c <xTimerGenericCommand>
 800dac0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d10c      	bne.n	800dae2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800dac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dacc:	b672      	cpsid	i
 800dace:	f383 8811 	msr	BASEPRI, r3
 800dad2:	f3bf 8f6f 	isb	sy
 800dad6:	f3bf 8f4f 	dsb	sy
 800dada:	b662      	cpsie	i
 800dadc:	603b      	str	r3, [r7, #0]
}
 800dade:	bf00      	nop
 800dae0:	e7fe      	b.n	800dae0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dae2:	4b09      	ldr	r3, [pc, #36]	; (800db08 <prvSwitchTimerLists+0xc4>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d1af      	bne.n	800da4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800daec:	4b06      	ldr	r3, [pc, #24]	; (800db08 <prvSwitchTimerLists+0xc4>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800daf2:	4b06      	ldr	r3, [pc, #24]	; (800db0c <prvSwitchTimerLists+0xc8>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	4a04      	ldr	r2, [pc, #16]	; (800db08 <prvSwitchTimerLists+0xc4>)
 800daf8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dafa:	4a04      	ldr	r2, [pc, #16]	; (800db0c <prvSwitchTimerLists+0xc8>)
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	6013      	str	r3, [r2, #0]
}
 800db00:	bf00      	nop
 800db02:	3718      	adds	r7, #24
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}
 800db08:	20001954 	.word	0x20001954
 800db0c:	20001958 	.word	0x20001958

0800db10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b082      	sub	sp, #8
 800db14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800db16:	f000 f949 	bl	800ddac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800db1a:	4b15      	ldr	r3, [pc, #84]	; (800db70 <prvCheckForValidListAndQueue+0x60>)
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d120      	bne.n	800db64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800db22:	4814      	ldr	r0, [pc, #80]	; (800db74 <prvCheckForValidListAndQueue+0x64>)
 800db24:	f7fd ff06 	bl	800b934 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800db28:	4813      	ldr	r0, [pc, #76]	; (800db78 <prvCheckForValidListAndQueue+0x68>)
 800db2a:	f7fd ff03 	bl	800b934 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800db2e:	4b13      	ldr	r3, [pc, #76]	; (800db7c <prvCheckForValidListAndQueue+0x6c>)
 800db30:	4a10      	ldr	r2, [pc, #64]	; (800db74 <prvCheckForValidListAndQueue+0x64>)
 800db32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800db34:	4b12      	ldr	r3, [pc, #72]	; (800db80 <prvCheckForValidListAndQueue+0x70>)
 800db36:	4a10      	ldr	r2, [pc, #64]	; (800db78 <prvCheckForValidListAndQueue+0x68>)
 800db38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800db3a:	2300      	movs	r3, #0
 800db3c:	9300      	str	r3, [sp, #0]
 800db3e:	4b11      	ldr	r3, [pc, #68]	; (800db84 <prvCheckForValidListAndQueue+0x74>)
 800db40:	4a11      	ldr	r2, [pc, #68]	; (800db88 <prvCheckForValidListAndQueue+0x78>)
 800db42:	2110      	movs	r1, #16
 800db44:	200a      	movs	r0, #10
 800db46:	f7fe f813 	bl	800bb70 <xQueueGenericCreateStatic>
 800db4a:	4603      	mov	r3, r0
 800db4c:	4a08      	ldr	r2, [pc, #32]	; (800db70 <prvCheckForValidListAndQueue+0x60>)
 800db4e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800db50:	4b07      	ldr	r3, [pc, #28]	; (800db70 <prvCheckForValidListAndQueue+0x60>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d005      	beq.n	800db64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800db58:	4b05      	ldr	r3, [pc, #20]	; (800db70 <prvCheckForValidListAndQueue+0x60>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	490b      	ldr	r1, [pc, #44]	; (800db8c <prvCheckForValidListAndQueue+0x7c>)
 800db5e:	4618      	mov	r0, r3
 800db60:	f7fe fd10 	bl	800c584 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800db64:	f000 f956 	bl	800de14 <vPortExitCritical>
}
 800db68:	bf00      	nop
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}
 800db6e:	bf00      	nop
 800db70:	2000195c 	.word	0x2000195c
 800db74:	2000192c 	.word	0x2000192c
 800db78:	20001940 	.word	0x20001940
 800db7c:	20001954 	.word	0x20001954
 800db80:	20001958 	.word	0x20001958
 800db84:	20001a08 	.word	0x20001a08
 800db88:	20001968 	.word	0x20001968
 800db8c:	0800f300 	.word	0x0800f300

0800db90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800db90:	b480      	push	{r7}
 800db92:	b085      	sub	sp, #20
 800db94:	af00      	add	r7, sp, #0
 800db96:	60f8      	str	r0, [r7, #12]
 800db98:	60b9      	str	r1, [r7, #8]
 800db9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	3b04      	subs	r3, #4
 800dba0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dba8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	3b04      	subs	r3, #4
 800dbae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	f023 0201 	bic.w	r2, r3, #1
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	3b04      	subs	r3, #4
 800dbbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dbc0:	4a0c      	ldr	r2, [pc, #48]	; (800dbf4 <pxPortInitialiseStack+0x64>)
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	3b14      	subs	r3, #20
 800dbca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dbcc:	687a      	ldr	r2, [r7, #4]
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	3b04      	subs	r3, #4
 800dbd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	f06f 0202 	mvn.w	r2, #2
 800dbde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	3b20      	subs	r3, #32
 800dbe4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	3714      	adds	r7, #20
 800dbec:	46bd      	mov	sp, r7
 800dbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf2:	4770      	bx	lr
 800dbf4:	0800dbf9 	.word	0x0800dbf9

0800dbf8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dbf8:	b480      	push	{r7}
 800dbfa:	b085      	sub	sp, #20
 800dbfc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dc02:	4b14      	ldr	r3, [pc, #80]	; (800dc54 <prvTaskExitError+0x5c>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc0a:	d00c      	beq.n	800dc26 <prvTaskExitError+0x2e>
	__asm volatile
 800dc0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc10:	b672      	cpsid	i
 800dc12:	f383 8811 	msr	BASEPRI, r3
 800dc16:	f3bf 8f6f 	isb	sy
 800dc1a:	f3bf 8f4f 	dsb	sy
 800dc1e:	b662      	cpsie	i
 800dc20:	60fb      	str	r3, [r7, #12]
}
 800dc22:	bf00      	nop
 800dc24:	e7fe      	b.n	800dc24 <prvTaskExitError+0x2c>
	__asm volatile
 800dc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc2a:	b672      	cpsid	i
 800dc2c:	f383 8811 	msr	BASEPRI, r3
 800dc30:	f3bf 8f6f 	isb	sy
 800dc34:	f3bf 8f4f 	dsb	sy
 800dc38:	b662      	cpsie	i
 800dc3a:	60bb      	str	r3, [r7, #8]
}
 800dc3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dc3e:	bf00      	nop
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d0fc      	beq.n	800dc40 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dc46:	bf00      	nop
 800dc48:	bf00      	nop
 800dc4a:	3714      	adds	r7, #20
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc52:	4770      	bx	lr
 800dc54:	20000098 	.word	0x20000098
	...

0800dc60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dc60:	4b07      	ldr	r3, [pc, #28]	; (800dc80 <pxCurrentTCBConst2>)
 800dc62:	6819      	ldr	r1, [r3, #0]
 800dc64:	6808      	ldr	r0, [r1, #0]
 800dc66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc6a:	f380 8809 	msr	PSP, r0
 800dc6e:	f3bf 8f6f 	isb	sy
 800dc72:	f04f 0000 	mov.w	r0, #0
 800dc76:	f380 8811 	msr	BASEPRI, r0
 800dc7a:	4770      	bx	lr
 800dc7c:	f3af 8000 	nop.w

0800dc80 <pxCurrentTCBConst2>:
 800dc80:	2000142c 	.word	0x2000142c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dc84:	bf00      	nop
 800dc86:	bf00      	nop

0800dc88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dc88:	4808      	ldr	r0, [pc, #32]	; (800dcac <prvPortStartFirstTask+0x24>)
 800dc8a:	6800      	ldr	r0, [r0, #0]
 800dc8c:	6800      	ldr	r0, [r0, #0]
 800dc8e:	f380 8808 	msr	MSP, r0
 800dc92:	f04f 0000 	mov.w	r0, #0
 800dc96:	f380 8814 	msr	CONTROL, r0
 800dc9a:	b662      	cpsie	i
 800dc9c:	b661      	cpsie	f
 800dc9e:	f3bf 8f4f 	dsb	sy
 800dca2:	f3bf 8f6f 	isb	sy
 800dca6:	df00      	svc	0
 800dca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dcaa:	bf00      	nop
 800dcac:	e000ed08 	.word	0xe000ed08

0800dcb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b084      	sub	sp, #16
 800dcb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dcb6:	4b37      	ldr	r3, [pc, #220]	; (800dd94 <xPortStartScheduler+0xe4>)
 800dcb8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	781b      	ldrb	r3, [r3, #0]
 800dcbe:	b2db      	uxtb	r3, r3
 800dcc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	22ff      	movs	r2, #255	; 0xff
 800dcc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	781b      	ldrb	r3, [r3, #0]
 800dccc:	b2db      	uxtb	r3, r3
 800dcce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dcd0:	78fb      	ldrb	r3, [r7, #3]
 800dcd2:	b2db      	uxtb	r3, r3
 800dcd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dcd8:	b2da      	uxtb	r2, r3
 800dcda:	4b2f      	ldr	r3, [pc, #188]	; (800dd98 <xPortStartScheduler+0xe8>)
 800dcdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dcde:	4b2f      	ldr	r3, [pc, #188]	; (800dd9c <xPortStartScheduler+0xec>)
 800dce0:	2207      	movs	r2, #7
 800dce2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dce4:	e009      	b.n	800dcfa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800dce6:	4b2d      	ldr	r3, [pc, #180]	; (800dd9c <xPortStartScheduler+0xec>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	3b01      	subs	r3, #1
 800dcec:	4a2b      	ldr	r2, [pc, #172]	; (800dd9c <xPortStartScheduler+0xec>)
 800dcee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dcf0:	78fb      	ldrb	r3, [r7, #3]
 800dcf2:	b2db      	uxtb	r3, r3
 800dcf4:	005b      	lsls	r3, r3, #1
 800dcf6:	b2db      	uxtb	r3, r3
 800dcf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dcfa:	78fb      	ldrb	r3, [r7, #3]
 800dcfc:	b2db      	uxtb	r3, r3
 800dcfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd02:	2b80      	cmp	r3, #128	; 0x80
 800dd04:	d0ef      	beq.n	800dce6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dd06:	4b25      	ldr	r3, [pc, #148]	; (800dd9c <xPortStartScheduler+0xec>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	f1c3 0307 	rsb	r3, r3, #7
 800dd0e:	2b04      	cmp	r3, #4
 800dd10:	d00c      	beq.n	800dd2c <xPortStartScheduler+0x7c>
	__asm volatile
 800dd12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd16:	b672      	cpsid	i
 800dd18:	f383 8811 	msr	BASEPRI, r3
 800dd1c:	f3bf 8f6f 	isb	sy
 800dd20:	f3bf 8f4f 	dsb	sy
 800dd24:	b662      	cpsie	i
 800dd26:	60bb      	str	r3, [r7, #8]
}
 800dd28:	bf00      	nop
 800dd2a:	e7fe      	b.n	800dd2a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dd2c:	4b1b      	ldr	r3, [pc, #108]	; (800dd9c <xPortStartScheduler+0xec>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	021b      	lsls	r3, r3, #8
 800dd32:	4a1a      	ldr	r2, [pc, #104]	; (800dd9c <xPortStartScheduler+0xec>)
 800dd34:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dd36:	4b19      	ldr	r3, [pc, #100]	; (800dd9c <xPortStartScheduler+0xec>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dd3e:	4a17      	ldr	r2, [pc, #92]	; (800dd9c <xPortStartScheduler+0xec>)
 800dd40:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	b2da      	uxtb	r2, r3
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dd4a:	4b15      	ldr	r3, [pc, #84]	; (800dda0 <xPortStartScheduler+0xf0>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	4a14      	ldr	r2, [pc, #80]	; (800dda0 <xPortStartScheduler+0xf0>)
 800dd50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dd54:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dd56:	4b12      	ldr	r3, [pc, #72]	; (800dda0 <xPortStartScheduler+0xf0>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	4a11      	ldr	r2, [pc, #68]	; (800dda0 <xPortStartScheduler+0xf0>)
 800dd5c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dd60:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dd62:	f000 f8dd 	bl	800df20 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dd66:	4b0f      	ldr	r3, [pc, #60]	; (800dda4 <xPortStartScheduler+0xf4>)
 800dd68:	2200      	movs	r2, #0
 800dd6a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dd6c:	f000 f8fc 	bl	800df68 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dd70:	4b0d      	ldr	r3, [pc, #52]	; (800dda8 <xPortStartScheduler+0xf8>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	4a0c      	ldr	r2, [pc, #48]	; (800dda8 <xPortStartScheduler+0xf8>)
 800dd76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dd7a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dd7c:	f7ff ff84 	bl	800dc88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dd80:	f7ff f842 	bl	800ce08 <vTaskSwitchContext>
	prvTaskExitError();
 800dd84:	f7ff ff38 	bl	800dbf8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dd88:	2300      	movs	r3, #0
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	3710      	adds	r7, #16
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}
 800dd92:	bf00      	nop
 800dd94:	e000e400 	.word	0xe000e400
 800dd98:	20001a58 	.word	0x20001a58
 800dd9c:	20001a5c 	.word	0x20001a5c
 800dda0:	e000ed20 	.word	0xe000ed20
 800dda4:	20000098 	.word	0x20000098
 800dda8:	e000ef34 	.word	0xe000ef34

0800ddac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ddac:	b480      	push	{r7}
 800ddae:	b083      	sub	sp, #12
 800ddb0:	af00      	add	r7, sp, #0
	__asm volatile
 800ddb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb6:	b672      	cpsid	i
 800ddb8:	f383 8811 	msr	BASEPRI, r3
 800ddbc:	f3bf 8f6f 	isb	sy
 800ddc0:	f3bf 8f4f 	dsb	sy
 800ddc4:	b662      	cpsie	i
 800ddc6:	607b      	str	r3, [r7, #4]
}
 800ddc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ddca:	4b10      	ldr	r3, [pc, #64]	; (800de0c <vPortEnterCritical+0x60>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	3301      	adds	r3, #1
 800ddd0:	4a0e      	ldr	r2, [pc, #56]	; (800de0c <vPortEnterCritical+0x60>)
 800ddd2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ddd4:	4b0d      	ldr	r3, [pc, #52]	; (800de0c <vPortEnterCritical+0x60>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	2b01      	cmp	r3, #1
 800ddda:	d111      	bne.n	800de00 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dddc:	4b0c      	ldr	r3, [pc, #48]	; (800de10 <vPortEnterCritical+0x64>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	b2db      	uxtb	r3, r3
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d00c      	beq.n	800de00 <vPortEnterCritical+0x54>
	__asm volatile
 800dde6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddea:	b672      	cpsid	i
 800ddec:	f383 8811 	msr	BASEPRI, r3
 800ddf0:	f3bf 8f6f 	isb	sy
 800ddf4:	f3bf 8f4f 	dsb	sy
 800ddf8:	b662      	cpsie	i
 800ddfa:	603b      	str	r3, [r7, #0]
}
 800ddfc:	bf00      	nop
 800ddfe:	e7fe      	b.n	800ddfe <vPortEnterCritical+0x52>
	}
}
 800de00:	bf00      	nop
 800de02:	370c      	adds	r7, #12
 800de04:	46bd      	mov	sp, r7
 800de06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0a:	4770      	bx	lr
 800de0c:	20000098 	.word	0x20000098
 800de10:	e000ed04 	.word	0xe000ed04

0800de14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800de14:	b480      	push	{r7}
 800de16:	b083      	sub	sp, #12
 800de18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800de1a:	4b13      	ldr	r3, [pc, #76]	; (800de68 <vPortExitCritical+0x54>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d10c      	bne.n	800de3c <vPortExitCritical+0x28>
	__asm volatile
 800de22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de26:	b672      	cpsid	i
 800de28:	f383 8811 	msr	BASEPRI, r3
 800de2c:	f3bf 8f6f 	isb	sy
 800de30:	f3bf 8f4f 	dsb	sy
 800de34:	b662      	cpsie	i
 800de36:	607b      	str	r3, [r7, #4]
}
 800de38:	bf00      	nop
 800de3a:	e7fe      	b.n	800de3a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800de3c:	4b0a      	ldr	r3, [pc, #40]	; (800de68 <vPortExitCritical+0x54>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	3b01      	subs	r3, #1
 800de42:	4a09      	ldr	r2, [pc, #36]	; (800de68 <vPortExitCritical+0x54>)
 800de44:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800de46:	4b08      	ldr	r3, [pc, #32]	; (800de68 <vPortExitCritical+0x54>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d105      	bne.n	800de5a <vPortExitCritical+0x46>
 800de4e:	2300      	movs	r3, #0
 800de50:	603b      	str	r3, [r7, #0]
	__asm volatile
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	f383 8811 	msr	BASEPRI, r3
}
 800de58:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800de5a:	bf00      	nop
 800de5c:	370c      	adds	r7, #12
 800de5e:	46bd      	mov	sp, r7
 800de60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de64:	4770      	bx	lr
 800de66:	bf00      	nop
 800de68:	20000098 	.word	0x20000098
 800de6c:	00000000 	.word	0x00000000

0800de70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800de70:	f3ef 8009 	mrs	r0, PSP
 800de74:	f3bf 8f6f 	isb	sy
 800de78:	4b15      	ldr	r3, [pc, #84]	; (800ded0 <pxCurrentTCBConst>)
 800de7a:	681a      	ldr	r2, [r3, #0]
 800de7c:	f01e 0f10 	tst.w	lr, #16
 800de80:	bf08      	it	eq
 800de82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800de86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de8a:	6010      	str	r0, [r2, #0]
 800de8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800de90:	f04f 0050 	mov.w	r0, #80	; 0x50
 800de94:	b672      	cpsid	i
 800de96:	f380 8811 	msr	BASEPRI, r0
 800de9a:	f3bf 8f4f 	dsb	sy
 800de9e:	f3bf 8f6f 	isb	sy
 800dea2:	b662      	cpsie	i
 800dea4:	f7fe ffb0 	bl	800ce08 <vTaskSwitchContext>
 800dea8:	f04f 0000 	mov.w	r0, #0
 800deac:	f380 8811 	msr	BASEPRI, r0
 800deb0:	bc09      	pop	{r0, r3}
 800deb2:	6819      	ldr	r1, [r3, #0]
 800deb4:	6808      	ldr	r0, [r1, #0]
 800deb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deba:	f01e 0f10 	tst.w	lr, #16
 800debe:	bf08      	it	eq
 800dec0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dec4:	f380 8809 	msr	PSP, r0
 800dec8:	f3bf 8f6f 	isb	sy
 800decc:	4770      	bx	lr
 800dece:	bf00      	nop

0800ded0 <pxCurrentTCBConst>:
 800ded0:	2000142c 	.word	0x2000142c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ded4:	bf00      	nop
 800ded6:	bf00      	nop

0800ded8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b082      	sub	sp, #8
 800dedc:	af00      	add	r7, sp, #0
	__asm volatile
 800dede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee2:	b672      	cpsid	i
 800dee4:	f383 8811 	msr	BASEPRI, r3
 800dee8:	f3bf 8f6f 	isb	sy
 800deec:	f3bf 8f4f 	dsb	sy
 800def0:	b662      	cpsie	i
 800def2:	607b      	str	r3, [r7, #4]
}
 800def4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800def6:	f7fe fecb 	bl	800cc90 <xTaskIncrementTick>
 800defa:	4603      	mov	r3, r0
 800defc:	2b00      	cmp	r3, #0
 800defe:	d003      	beq.n	800df08 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800df00:	4b06      	ldr	r3, [pc, #24]	; (800df1c <SysTick_Handler+0x44>)
 800df02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df06:	601a      	str	r2, [r3, #0]
 800df08:	2300      	movs	r3, #0
 800df0a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	f383 8811 	msr	BASEPRI, r3
}
 800df12:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800df14:	bf00      	nop
 800df16:	3708      	adds	r7, #8
 800df18:	46bd      	mov	sp, r7
 800df1a:	bd80      	pop	{r7, pc}
 800df1c:	e000ed04 	.word	0xe000ed04

0800df20 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800df20:	b480      	push	{r7}
 800df22:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800df24:	4b0b      	ldr	r3, [pc, #44]	; (800df54 <vPortSetupTimerInterrupt+0x34>)
 800df26:	2200      	movs	r2, #0
 800df28:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800df2a:	4b0b      	ldr	r3, [pc, #44]	; (800df58 <vPortSetupTimerInterrupt+0x38>)
 800df2c:	2200      	movs	r2, #0
 800df2e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800df30:	4b0a      	ldr	r3, [pc, #40]	; (800df5c <vPortSetupTimerInterrupt+0x3c>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	4a0a      	ldr	r2, [pc, #40]	; (800df60 <vPortSetupTimerInterrupt+0x40>)
 800df36:	fba2 2303 	umull	r2, r3, r2, r3
 800df3a:	099b      	lsrs	r3, r3, #6
 800df3c:	4a09      	ldr	r2, [pc, #36]	; (800df64 <vPortSetupTimerInterrupt+0x44>)
 800df3e:	3b01      	subs	r3, #1
 800df40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800df42:	4b04      	ldr	r3, [pc, #16]	; (800df54 <vPortSetupTimerInterrupt+0x34>)
 800df44:	2207      	movs	r2, #7
 800df46:	601a      	str	r2, [r3, #0]
}
 800df48:	bf00      	nop
 800df4a:	46bd      	mov	sp, r7
 800df4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df50:	4770      	bx	lr
 800df52:	bf00      	nop
 800df54:	e000e010 	.word	0xe000e010
 800df58:	e000e018 	.word	0xe000e018
 800df5c:	20000000 	.word	0x20000000
 800df60:	10624dd3 	.word	0x10624dd3
 800df64:	e000e014 	.word	0xe000e014

0800df68 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800df68:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800df78 <vPortEnableVFP+0x10>
 800df6c:	6801      	ldr	r1, [r0, #0]
 800df6e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800df72:	6001      	str	r1, [r0, #0]
 800df74:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800df76:	bf00      	nop
 800df78:	e000ed88 	.word	0xe000ed88

0800df7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800df7c:	b480      	push	{r7}
 800df7e:	b085      	sub	sp, #20
 800df80:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800df82:	f3ef 8305 	mrs	r3, IPSR
 800df86:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	2b0f      	cmp	r3, #15
 800df8c:	d916      	bls.n	800dfbc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800df8e:	4a19      	ldr	r2, [pc, #100]	; (800dff4 <vPortValidateInterruptPriority+0x78>)
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	4413      	add	r3, r2
 800df94:	781b      	ldrb	r3, [r3, #0]
 800df96:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800df98:	4b17      	ldr	r3, [pc, #92]	; (800dff8 <vPortValidateInterruptPriority+0x7c>)
 800df9a:	781b      	ldrb	r3, [r3, #0]
 800df9c:	7afa      	ldrb	r2, [r7, #11]
 800df9e:	429a      	cmp	r2, r3
 800dfa0:	d20c      	bcs.n	800dfbc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800dfa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfa6:	b672      	cpsid	i
 800dfa8:	f383 8811 	msr	BASEPRI, r3
 800dfac:	f3bf 8f6f 	isb	sy
 800dfb0:	f3bf 8f4f 	dsb	sy
 800dfb4:	b662      	cpsie	i
 800dfb6:	607b      	str	r3, [r7, #4]
}
 800dfb8:	bf00      	nop
 800dfba:	e7fe      	b.n	800dfba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dfbc:	4b0f      	ldr	r3, [pc, #60]	; (800dffc <vPortValidateInterruptPriority+0x80>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dfc4:	4b0e      	ldr	r3, [pc, #56]	; (800e000 <vPortValidateInterruptPriority+0x84>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	d90c      	bls.n	800dfe6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800dfcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd0:	b672      	cpsid	i
 800dfd2:	f383 8811 	msr	BASEPRI, r3
 800dfd6:	f3bf 8f6f 	isb	sy
 800dfda:	f3bf 8f4f 	dsb	sy
 800dfde:	b662      	cpsie	i
 800dfe0:	603b      	str	r3, [r7, #0]
}
 800dfe2:	bf00      	nop
 800dfe4:	e7fe      	b.n	800dfe4 <vPortValidateInterruptPriority+0x68>
	}
 800dfe6:	bf00      	nop
 800dfe8:	3714      	adds	r7, #20
 800dfea:	46bd      	mov	sp, r7
 800dfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff0:	4770      	bx	lr
 800dff2:	bf00      	nop
 800dff4:	e000e3f0 	.word	0xe000e3f0
 800dff8:	20001a58 	.word	0x20001a58
 800dffc:	e000ed0c 	.word	0xe000ed0c
 800e000:	20001a5c 	.word	0x20001a5c

0800e004 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b08a      	sub	sp, #40	; 0x28
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e00c:	2300      	movs	r3, #0
 800e00e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e010:	f7fe fd80 	bl	800cb14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e014:	4b5b      	ldr	r3, [pc, #364]	; (800e184 <pvPortMalloc+0x180>)
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d101      	bne.n	800e020 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e01c:	f000 f91a 	bl	800e254 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e020:	4b59      	ldr	r3, [pc, #356]	; (800e188 <pvPortMalloc+0x184>)
 800e022:	681a      	ldr	r2, [r3, #0]
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	4013      	ands	r3, r2
 800e028:	2b00      	cmp	r3, #0
 800e02a:	f040 8092 	bne.w	800e152 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d01f      	beq.n	800e074 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800e034:	2208      	movs	r2, #8
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	4413      	add	r3, r2
 800e03a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f003 0307 	and.w	r3, r3, #7
 800e042:	2b00      	cmp	r3, #0
 800e044:	d016      	beq.n	800e074 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	f023 0307 	bic.w	r3, r3, #7
 800e04c:	3308      	adds	r3, #8
 800e04e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f003 0307 	and.w	r3, r3, #7
 800e056:	2b00      	cmp	r3, #0
 800e058:	d00c      	beq.n	800e074 <pvPortMalloc+0x70>
	__asm volatile
 800e05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e05e:	b672      	cpsid	i
 800e060:	f383 8811 	msr	BASEPRI, r3
 800e064:	f3bf 8f6f 	isb	sy
 800e068:	f3bf 8f4f 	dsb	sy
 800e06c:	b662      	cpsie	i
 800e06e:	617b      	str	r3, [r7, #20]
}
 800e070:	bf00      	nop
 800e072:	e7fe      	b.n	800e072 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d06b      	beq.n	800e152 <pvPortMalloc+0x14e>
 800e07a:	4b44      	ldr	r3, [pc, #272]	; (800e18c <pvPortMalloc+0x188>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	687a      	ldr	r2, [r7, #4]
 800e080:	429a      	cmp	r2, r3
 800e082:	d866      	bhi.n	800e152 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e084:	4b42      	ldr	r3, [pc, #264]	; (800e190 <pvPortMalloc+0x18c>)
 800e086:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e088:	4b41      	ldr	r3, [pc, #260]	; (800e190 <pvPortMalloc+0x18c>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e08e:	e004      	b.n	800e09a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800e090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e092:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e09c:	685b      	ldr	r3, [r3, #4]
 800e09e:	687a      	ldr	r2, [r7, #4]
 800e0a0:	429a      	cmp	r2, r3
 800e0a2:	d903      	bls.n	800e0ac <pvPortMalloc+0xa8>
 800e0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d1f1      	bne.n	800e090 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e0ac:	4b35      	ldr	r3, [pc, #212]	; (800e184 <pvPortMalloc+0x180>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	d04d      	beq.n	800e152 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e0b6:	6a3b      	ldr	r3, [r7, #32]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	2208      	movs	r2, #8
 800e0bc:	4413      	add	r3, r2
 800e0be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c2:	681a      	ldr	r2, [r3, #0]
 800e0c4:	6a3b      	ldr	r3, [r7, #32]
 800e0c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ca:	685a      	ldr	r2, [r3, #4]
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	1ad2      	subs	r2, r2, r3
 800e0d0:	2308      	movs	r3, #8
 800e0d2:	005b      	lsls	r3, r3, #1
 800e0d4:	429a      	cmp	r2, r3
 800e0d6:	d921      	bls.n	800e11c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e0d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	4413      	add	r3, r2
 800e0de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e0e0:	69bb      	ldr	r3, [r7, #24]
 800e0e2:	f003 0307 	and.w	r3, r3, #7
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d00c      	beq.n	800e104 <pvPortMalloc+0x100>
	__asm volatile
 800e0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ee:	b672      	cpsid	i
 800e0f0:	f383 8811 	msr	BASEPRI, r3
 800e0f4:	f3bf 8f6f 	isb	sy
 800e0f8:	f3bf 8f4f 	dsb	sy
 800e0fc:	b662      	cpsie	i
 800e0fe:	613b      	str	r3, [r7, #16]
}
 800e100:	bf00      	nop
 800e102:	e7fe      	b.n	800e102 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e106:	685a      	ldr	r2, [r3, #4]
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	1ad2      	subs	r2, r2, r3
 800e10c:	69bb      	ldr	r3, [r7, #24]
 800e10e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e112:	687a      	ldr	r2, [r7, #4]
 800e114:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e116:	69b8      	ldr	r0, [r7, #24]
 800e118:	f000 f8fe 	bl	800e318 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e11c:	4b1b      	ldr	r3, [pc, #108]	; (800e18c <pvPortMalloc+0x188>)
 800e11e:	681a      	ldr	r2, [r3, #0]
 800e120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e122:	685b      	ldr	r3, [r3, #4]
 800e124:	1ad3      	subs	r3, r2, r3
 800e126:	4a19      	ldr	r2, [pc, #100]	; (800e18c <pvPortMalloc+0x188>)
 800e128:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e12a:	4b18      	ldr	r3, [pc, #96]	; (800e18c <pvPortMalloc+0x188>)
 800e12c:	681a      	ldr	r2, [r3, #0]
 800e12e:	4b19      	ldr	r3, [pc, #100]	; (800e194 <pvPortMalloc+0x190>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	429a      	cmp	r2, r3
 800e134:	d203      	bcs.n	800e13e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e136:	4b15      	ldr	r3, [pc, #84]	; (800e18c <pvPortMalloc+0x188>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	4a16      	ldr	r2, [pc, #88]	; (800e194 <pvPortMalloc+0x190>)
 800e13c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e140:	685a      	ldr	r2, [r3, #4]
 800e142:	4b11      	ldr	r3, [pc, #68]	; (800e188 <pvPortMalloc+0x184>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	431a      	orrs	r2, r3
 800e148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e14a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e14e:	2200      	movs	r2, #0
 800e150:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e152:	f7fe fced 	bl	800cb30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e156:	69fb      	ldr	r3, [r7, #28]
 800e158:	f003 0307 	and.w	r3, r3, #7
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d00c      	beq.n	800e17a <pvPortMalloc+0x176>
	__asm volatile
 800e160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e164:	b672      	cpsid	i
 800e166:	f383 8811 	msr	BASEPRI, r3
 800e16a:	f3bf 8f6f 	isb	sy
 800e16e:	f3bf 8f4f 	dsb	sy
 800e172:	b662      	cpsie	i
 800e174:	60fb      	str	r3, [r7, #12]
}
 800e176:	bf00      	nop
 800e178:	e7fe      	b.n	800e178 <pvPortMalloc+0x174>
	return pvReturn;
 800e17a:	69fb      	ldr	r3, [r7, #28]
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	3728      	adds	r7, #40	; 0x28
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}
 800e184:	20005668 	.word	0x20005668
 800e188:	20005674 	.word	0x20005674
 800e18c:	2000566c 	.word	0x2000566c
 800e190:	20005660 	.word	0x20005660
 800e194:	20005670 	.word	0x20005670

0800e198 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b086      	sub	sp, #24
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d04c      	beq.n	800e244 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e1aa:	2308      	movs	r3, #8
 800e1ac:	425b      	negs	r3, r3
 800e1ae:	697a      	ldr	r2, [r7, #20]
 800e1b0:	4413      	add	r3, r2
 800e1b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e1b4:	697b      	ldr	r3, [r7, #20]
 800e1b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	685a      	ldr	r2, [r3, #4]
 800e1bc:	4b23      	ldr	r3, [pc, #140]	; (800e24c <vPortFree+0xb4>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	4013      	ands	r3, r2
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d10c      	bne.n	800e1e0 <vPortFree+0x48>
	__asm volatile
 800e1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ca:	b672      	cpsid	i
 800e1cc:	f383 8811 	msr	BASEPRI, r3
 800e1d0:	f3bf 8f6f 	isb	sy
 800e1d4:	f3bf 8f4f 	dsb	sy
 800e1d8:	b662      	cpsie	i
 800e1da:	60fb      	str	r3, [r7, #12]
}
 800e1dc:	bf00      	nop
 800e1de:	e7fe      	b.n	800e1de <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e1e0:	693b      	ldr	r3, [r7, #16]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d00c      	beq.n	800e202 <vPortFree+0x6a>
	__asm volatile
 800e1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ec:	b672      	cpsid	i
 800e1ee:	f383 8811 	msr	BASEPRI, r3
 800e1f2:	f3bf 8f6f 	isb	sy
 800e1f6:	f3bf 8f4f 	dsb	sy
 800e1fa:	b662      	cpsie	i
 800e1fc:	60bb      	str	r3, [r7, #8]
}
 800e1fe:	bf00      	nop
 800e200:	e7fe      	b.n	800e200 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e202:	693b      	ldr	r3, [r7, #16]
 800e204:	685a      	ldr	r2, [r3, #4]
 800e206:	4b11      	ldr	r3, [pc, #68]	; (800e24c <vPortFree+0xb4>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	4013      	ands	r3, r2
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d019      	beq.n	800e244 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d115      	bne.n	800e244 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	685a      	ldr	r2, [r3, #4]
 800e21c:	4b0b      	ldr	r3, [pc, #44]	; (800e24c <vPortFree+0xb4>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	43db      	mvns	r3, r3
 800e222:	401a      	ands	r2, r3
 800e224:	693b      	ldr	r3, [r7, #16]
 800e226:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e228:	f7fe fc74 	bl	800cb14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	685a      	ldr	r2, [r3, #4]
 800e230:	4b07      	ldr	r3, [pc, #28]	; (800e250 <vPortFree+0xb8>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	4413      	add	r3, r2
 800e236:	4a06      	ldr	r2, [pc, #24]	; (800e250 <vPortFree+0xb8>)
 800e238:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e23a:	6938      	ldr	r0, [r7, #16]
 800e23c:	f000 f86c 	bl	800e318 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e240:	f7fe fc76 	bl	800cb30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e244:	bf00      	nop
 800e246:	3718      	adds	r7, #24
 800e248:	46bd      	mov	sp, r7
 800e24a:	bd80      	pop	{r7, pc}
 800e24c:	20005674 	.word	0x20005674
 800e250:	2000566c 	.word	0x2000566c

0800e254 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e254:	b480      	push	{r7}
 800e256:	b085      	sub	sp, #20
 800e258:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e25a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e25e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e260:	4b27      	ldr	r3, [pc, #156]	; (800e300 <prvHeapInit+0xac>)
 800e262:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	f003 0307 	and.w	r3, r3, #7
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d00c      	beq.n	800e288 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	3307      	adds	r3, #7
 800e272:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	f023 0307 	bic.w	r3, r3, #7
 800e27a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e27c:	68ba      	ldr	r2, [r7, #8]
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	1ad3      	subs	r3, r2, r3
 800e282:	4a1f      	ldr	r2, [pc, #124]	; (800e300 <prvHeapInit+0xac>)
 800e284:	4413      	add	r3, r2
 800e286:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e28c:	4a1d      	ldr	r2, [pc, #116]	; (800e304 <prvHeapInit+0xb0>)
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e292:	4b1c      	ldr	r3, [pc, #112]	; (800e304 <prvHeapInit+0xb0>)
 800e294:	2200      	movs	r2, #0
 800e296:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	68ba      	ldr	r2, [r7, #8]
 800e29c:	4413      	add	r3, r2
 800e29e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e2a0:	2208      	movs	r2, #8
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	1a9b      	subs	r3, r3, r2
 800e2a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	f023 0307 	bic.w	r3, r3, #7
 800e2ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	4a15      	ldr	r2, [pc, #84]	; (800e308 <prvHeapInit+0xb4>)
 800e2b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e2b6:	4b14      	ldr	r3, [pc, #80]	; (800e308 <prvHeapInit+0xb4>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e2be:	4b12      	ldr	r3, [pc, #72]	; (800e308 <prvHeapInit+0xb4>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	68fa      	ldr	r2, [r7, #12]
 800e2ce:	1ad2      	subs	r2, r2, r3
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e2d4:	4b0c      	ldr	r3, [pc, #48]	; (800e308 <prvHeapInit+0xb4>)
 800e2d6:	681a      	ldr	r2, [r3, #0]
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	685b      	ldr	r3, [r3, #4]
 800e2e0:	4a0a      	ldr	r2, [pc, #40]	; (800e30c <prvHeapInit+0xb8>)
 800e2e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	685b      	ldr	r3, [r3, #4]
 800e2e8:	4a09      	ldr	r2, [pc, #36]	; (800e310 <prvHeapInit+0xbc>)
 800e2ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e2ec:	4b09      	ldr	r3, [pc, #36]	; (800e314 <prvHeapInit+0xc0>)
 800e2ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e2f2:	601a      	str	r2, [r3, #0]
}
 800e2f4:	bf00      	nop
 800e2f6:	3714      	adds	r7, #20
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fe:	4770      	bx	lr
 800e300:	20001a60 	.word	0x20001a60
 800e304:	20005660 	.word	0x20005660
 800e308:	20005668 	.word	0x20005668
 800e30c:	20005670 	.word	0x20005670
 800e310:	2000566c 	.word	0x2000566c
 800e314:	20005674 	.word	0x20005674

0800e318 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e318:	b480      	push	{r7}
 800e31a:	b085      	sub	sp, #20
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e320:	4b28      	ldr	r3, [pc, #160]	; (800e3c4 <prvInsertBlockIntoFreeList+0xac>)
 800e322:	60fb      	str	r3, [r7, #12]
 800e324:	e002      	b.n	800e32c <prvInsertBlockIntoFreeList+0x14>
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	60fb      	str	r3, [r7, #12]
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	687a      	ldr	r2, [r7, #4]
 800e332:	429a      	cmp	r2, r3
 800e334:	d8f7      	bhi.n	800e326 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	685b      	ldr	r3, [r3, #4]
 800e33e:	68ba      	ldr	r2, [r7, #8]
 800e340:	4413      	add	r3, r2
 800e342:	687a      	ldr	r2, [r7, #4]
 800e344:	429a      	cmp	r2, r3
 800e346:	d108      	bne.n	800e35a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	685a      	ldr	r2, [r3, #4]
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	685b      	ldr	r3, [r3, #4]
 800e350:	441a      	add	r2, r3
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	685b      	ldr	r3, [r3, #4]
 800e362:	68ba      	ldr	r2, [r7, #8]
 800e364:	441a      	add	r2, r3
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d118      	bne.n	800e3a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	681a      	ldr	r2, [r3, #0]
 800e372:	4b15      	ldr	r3, [pc, #84]	; (800e3c8 <prvInsertBlockIntoFreeList+0xb0>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	429a      	cmp	r2, r3
 800e378:	d00d      	beq.n	800e396 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	685a      	ldr	r2, [r3, #4]
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	685b      	ldr	r3, [r3, #4]
 800e384:	441a      	add	r2, r3
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	681a      	ldr	r2, [r3, #0]
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	601a      	str	r2, [r3, #0]
 800e394:	e008      	b.n	800e3a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e396:	4b0c      	ldr	r3, [pc, #48]	; (800e3c8 <prvInsertBlockIntoFreeList+0xb0>)
 800e398:	681a      	ldr	r2, [r3, #0]
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	601a      	str	r2, [r3, #0]
 800e39e:	e003      	b.n	800e3a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	681a      	ldr	r2, [r3, #0]
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e3a8:	68fa      	ldr	r2, [r7, #12]
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d002      	beq.n	800e3b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	687a      	ldr	r2, [r7, #4]
 800e3b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e3b6:	bf00      	nop
 800e3b8:	3714      	adds	r7, #20
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c0:	4770      	bx	lr
 800e3c2:	bf00      	nop
 800e3c4:	20005660 	.word	0x20005660
 800e3c8:	20005668 	.word	0x20005668

0800e3cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	4912      	ldr	r1, [pc, #72]	; (800e41c <MX_USB_DEVICE_Init+0x50>)
 800e3d4:	4812      	ldr	r0, [pc, #72]	; (800e420 <MX_USB_DEVICE_Init+0x54>)
 800e3d6:	f7fb fcab 	bl	8009d30 <USBD_Init>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d001      	beq.n	800e3e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e3e0:	f7f2 fdf2 	bl	8000fc8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e3e4:	490f      	ldr	r1, [pc, #60]	; (800e424 <MX_USB_DEVICE_Init+0x58>)
 800e3e6:	480e      	ldr	r0, [pc, #56]	; (800e420 <MX_USB_DEVICE_Init+0x54>)
 800e3e8:	f7fb fcd2 	bl	8009d90 <USBD_RegisterClass>
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d001      	beq.n	800e3f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e3f2:	f7f2 fde9 	bl	8000fc8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e3f6:	490c      	ldr	r1, [pc, #48]	; (800e428 <MX_USB_DEVICE_Init+0x5c>)
 800e3f8:	4809      	ldr	r0, [pc, #36]	; (800e420 <MX_USB_DEVICE_Init+0x54>)
 800e3fa:	f7fb fbc9 	bl	8009b90 <USBD_CDC_RegisterInterface>
 800e3fe:	4603      	mov	r3, r0
 800e400:	2b00      	cmp	r3, #0
 800e402:	d001      	beq.n	800e408 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e404:	f7f2 fde0 	bl	8000fc8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e408:	4805      	ldr	r0, [pc, #20]	; (800e420 <MX_USB_DEVICE_Init+0x54>)
 800e40a:	f7fb fcf7 	bl	8009dfc <USBD_Start>
 800e40e:	4603      	mov	r3, r0
 800e410:	2b00      	cmp	r3, #0
 800e412:	d001      	beq.n	800e418 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e414:	f7f2 fdd8 	bl	8000fc8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e418:	bf00      	nop
 800e41a:	bd80      	pop	{r7, pc}
 800e41c:	200000b0 	.word	0x200000b0
 800e420:	20005678 	.word	0x20005678
 800e424:	20000018 	.word	0x20000018
 800e428:	2000009c 	.word	0x2000009c

0800e42c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e430:	2200      	movs	r2, #0
 800e432:	4905      	ldr	r1, [pc, #20]	; (800e448 <CDC_Init_FS+0x1c>)
 800e434:	4805      	ldr	r0, [pc, #20]	; (800e44c <CDC_Init_FS+0x20>)
 800e436:	f7fb fbc5 	bl	8009bc4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e43a:	4905      	ldr	r1, [pc, #20]	; (800e450 <CDC_Init_FS+0x24>)
 800e43c:	4803      	ldr	r0, [pc, #12]	; (800e44c <CDC_Init_FS+0x20>)
 800e43e:	f7fb fbe3 	bl	8009c08 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e442:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e444:	4618      	mov	r0, r3
 800e446:	bd80      	pop	{r7, pc}
 800e448:	20006154 	.word	0x20006154
 800e44c:	20005678 	.word	0x20005678
 800e450:	20005954 	.word	0x20005954

0800e454 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e454:	b480      	push	{r7}
 800e456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e458:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e45a:	4618      	mov	r0, r3
 800e45c:	46bd      	mov	sp, r7
 800e45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e462:	4770      	bx	lr

0800e464 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e464:	b480      	push	{r7}
 800e466:	b083      	sub	sp, #12
 800e468:	af00      	add	r7, sp, #0
 800e46a:	4603      	mov	r3, r0
 800e46c:	6039      	str	r1, [r7, #0]
 800e46e:	71fb      	strb	r3, [r7, #7]
 800e470:	4613      	mov	r3, r2
 800e472:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e474:	79fb      	ldrb	r3, [r7, #7]
 800e476:	2b23      	cmp	r3, #35	; 0x23
 800e478:	d84a      	bhi.n	800e510 <CDC_Control_FS+0xac>
 800e47a:	a201      	add	r2, pc, #4	; (adr r2, 800e480 <CDC_Control_FS+0x1c>)
 800e47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e480:	0800e511 	.word	0x0800e511
 800e484:	0800e511 	.word	0x0800e511
 800e488:	0800e511 	.word	0x0800e511
 800e48c:	0800e511 	.word	0x0800e511
 800e490:	0800e511 	.word	0x0800e511
 800e494:	0800e511 	.word	0x0800e511
 800e498:	0800e511 	.word	0x0800e511
 800e49c:	0800e511 	.word	0x0800e511
 800e4a0:	0800e511 	.word	0x0800e511
 800e4a4:	0800e511 	.word	0x0800e511
 800e4a8:	0800e511 	.word	0x0800e511
 800e4ac:	0800e511 	.word	0x0800e511
 800e4b0:	0800e511 	.word	0x0800e511
 800e4b4:	0800e511 	.word	0x0800e511
 800e4b8:	0800e511 	.word	0x0800e511
 800e4bc:	0800e511 	.word	0x0800e511
 800e4c0:	0800e511 	.word	0x0800e511
 800e4c4:	0800e511 	.word	0x0800e511
 800e4c8:	0800e511 	.word	0x0800e511
 800e4cc:	0800e511 	.word	0x0800e511
 800e4d0:	0800e511 	.word	0x0800e511
 800e4d4:	0800e511 	.word	0x0800e511
 800e4d8:	0800e511 	.word	0x0800e511
 800e4dc:	0800e511 	.word	0x0800e511
 800e4e0:	0800e511 	.word	0x0800e511
 800e4e4:	0800e511 	.word	0x0800e511
 800e4e8:	0800e511 	.word	0x0800e511
 800e4ec:	0800e511 	.word	0x0800e511
 800e4f0:	0800e511 	.word	0x0800e511
 800e4f4:	0800e511 	.word	0x0800e511
 800e4f8:	0800e511 	.word	0x0800e511
 800e4fc:	0800e511 	.word	0x0800e511
 800e500:	0800e511 	.word	0x0800e511
 800e504:	0800e511 	.word	0x0800e511
 800e508:	0800e511 	.word	0x0800e511
 800e50c:	0800e511 	.word	0x0800e511
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e510:	bf00      	nop
  }

  return (USBD_OK);
 800e512:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e514:	4618      	mov	r0, r3
 800e516:	370c      	adds	r7, #12
 800e518:	46bd      	mov	sp, r7
 800e51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51e:	4770      	bx	lr

0800e520 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b084      	sub	sp, #16
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
 800e528:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	MSGQ_obj msg;										//Local message object

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);			//Default two lines of receive code.
 800e52a:	6879      	ldr	r1, [r7, #4]
 800e52c:	4813      	ldr	r0, [pc, #76]	; (800e57c <CDC_Receive_FS+0x5c>)
 800e52e:	f7fb fb6b 	bl	8009c08 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e532:	4812      	ldr	r0, [pc, #72]	; (800e57c <CDC_Receive_FS+0x5c>)
 800e534:	f7fb fbc6 	bl	8009cc4 <USBD_CDC_ReceivePacket>

  uint8_t len = (uint8_t) *Len;
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	73fb      	strb	r3, [r7, #15]

  if( USB_MSGQ_Rx != NULL )
 800e53e:	4b10      	ldr	r3, [pc, #64]	; (800e580 <CDC_Receive_FS+0x60>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d015      	beq.n	800e572 <CDC_Receive_FS+0x52>
  	{
	  	memset (msg.Buf, '\0', HiL_MSGQ_Buf_arr_len);	//Clear msg-obj
 800e546:	f107 0308 	add.w	r3, r7, #8
 800e54a:	2204      	movs	r2, #4
 800e54c:	2100      	movs	r1, #0
 800e54e:	4618      	mov	r0, r3
 800e550:	f000 fd2a 	bl	800efa8 <memset>
  		memcpy (msg.Buf, Buf, len);						//Copy usb buffer to msg-obj
 800e554:	7bfa      	ldrb	r2, [r7, #15]
 800e556:	f107 0308 	add.w	r3, r7, #8
 800e55a:	6879      	ldr	r1, [r7, #4]
 800e55c:	4618      	mov	r0, r3
 800e55e:	f000 fd15 	bl	800ef8c <memcpy>
  		osMessageQueuePut(USB_MSGQ_Rx, &msg, 0U, 0U);	//Put object in queue, no timeout.
 800e562:	4b07      	ldr	r3, [pc, #28]	; (800e580 <CDC_Receive_FS+0x60>)
 800e564:	6818      	ldr	r0, [r3, #0]
 800e566:	f107 0108 	add.w	r1, r7, #8
 800e56a:	2300      	movs	r3, #0
 800e56c:	2200      	movs	r2, #0
 800e56e:	f7fd f8c7 	bl	800b700 <osMessageQueuePut>
  	}

  return (USBD_OK);
 800e572:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e574:	4618      	mov	r0, r3
 800e576:	3710      	adds	r7, #16
 800e578:	46bd      	mov	sp, r7
 800e57a:	bd80      	pop	{r7, pc}
 800e57c:	20005678 	.word	0x20005678
 800e580:	200005fc 	.word	0x200005fc

0800e584 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b084      	sub	sp, #16
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
 800e58c:	460b      	mov	r3, r1
 800e58e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e590:	2300      	movs	r3, #0
 800e592:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e594:	4b0d      	ldr	r3, [pc, #52]	; (800e5cc <CDC_Transmit_FS+0x48>)
 800e596:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e59a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d001      	beq.n	800e5aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	e00b      	b.n	800e5c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e5aa:	887b      	ldrh	r3, [r7, #2]
 800e5ac:	461a      	mov	r2, r3
 800e5ae:	6879      	ldr	r1, [r7, #4]
 800e5b0:	4806      	ldr	r0, [pc, #24]	; (800e5cc <CDC_Transmit_FS+0x48>)
 800e5b2:	f7fb fb07 	bl	8009bc4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e5b6:	4805      	ldr	r0, [pc, #20]	; (800e5cc <CDC_Transmit_FS+0x48>)
 800e5b8:	f7fb fb44 	bl	8009c44 <USBD_CDC_TransmitPacket>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e5c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	3710      	adds	r7, #16
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}
 800e5ca:	bf00      	nop
 800e5cc:	20005678 	.word	0x20005678

0800e5d0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e5d0:	b480      	push	{r7}
 800e5d2:	b087      	sub	sp, #28
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	60f8      	str	r0, [r7, #12]
 800e5d8:	60b9      	str	r1, [r7, #8]
 800e5da:	4613      	mov	r3, r2
 800e5dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e5de:	2300      	movs	r3, #0
 800e5e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e5e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	371c      	adds	r7, #28
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f0:	4770      	bx	lr
	...

0800e5f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b083      	sub	sp, #12
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	6039      	str	r1, [r7, #0]
 800e5fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	2212      	movs	r2, #18
 800e604:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e606:	4b03      	ldr	r3, [pc, #12]	; (800e614 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e608:	4618      	mov	r0, r3
 800e60a:	370c      	adds	r7, #12
 800e60c:	46bd      	mov	sp, r7
 800e60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e612:	4770      	bx	lr
 800e614:	200000d0 	.word	0x200000d0

0800e618 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e618:	b480      	push	{r7}
 800e61a:	b083      	sub	sp, #12
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	4603      	mov	r3, r0
 800e620:	6039      	str	r1, [r7, #0]
 800e622:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	2204      	movs	r2, #4
 800e628:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e62a:	4b03      	ldr	r3, [pc, #12]	; (800e638 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e62c:	4618      	mov	r0, r3
 800e62e:	370c      	adds	r7, #12
 800e630:	46bd      	mov	sp, r7
 800e632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e636:	4770      	bx	lr
 800e638:	200000f0 	.word	0x200000f0

0800e63c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b082      	sub	sp, #8
 800e640:	af00      	add	r7, sp, #0
 800e642:	4603      	mov	r3, r0
 800e644:	6039      	str	r1, [r7, #0]
 800e646:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e648:	79fb      	ldrb	r3, [r7, #7]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d105      	bne.n	800e65a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e64e:	683a      	ldr	r2, [r7, #0]
 800e650:	4907      	ldr	r1, [pc, #28]	; (800e670 <USBD_FS_ProductStrDescriptor+0x34>)
 800e652:	4808      	ldr	r0, [pc, #32]	; (800e674 <USBD_FS_ProductStrDescriptor+0x38>)
 800e654:	f7fc fda8 	bl	800b1a8 <USBD_GetString>
 800e658:	e004      	b.n	800e664 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e65a:	683a      	ldr	r2, [r7, #0]
 800e65c:	4904      	ldr	r1, [pc, #16]	; (800e670 <USBD_FS_ProductStrDescriptor+0x34>)
 800e65e:	4805      	ldr	r0, [pc, #20]	; (800e674 <USBD_FS_ProductStrDescriptor+0x38>)
 800e660:	f7fc fda2 	bl	800b1a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e664:	4b02      	ldr	r3, [pc, #8]	; (800e670 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e666:	4618      	mov	r0, r3
 800e668:	3708      	adds	r7, #8
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}
 800e66e:	bf00      	nop
 800e670:	20006954 	.word	0x20006954
 800e674:	0800f308 	.word	0x0800f308

0800e678 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b082      	sub	sp, #8
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	4603      	mov	r3, r0
 800e680:	6039      	str	r1, [r7, #0]
 800e682:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e684:	683a      	ldr	r2, [r7, #0]
 800e686:	4904      	ldr	r1, [pc, #16]	; (800e698 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e688:	4804      	ldr	r0, [pc, #16]	; (800e69c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e68a:	f7fc fd8d 	bl	800b1a8 <USBD_GetString>
  return USBD_StrDesc;
 800e68e:	4b02      	ldr	r3, [pc, #8]	; (800e698 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e690:	4618      	mov	r0, r3
 800e692:	3708      	adds	r7, #8
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}
 800e698:	20006954 	.word	0x20006954
 800e69c:	0800f31c 	.word	0x0800f31c

0800e6a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b082      	sub	sp, #8
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	6039      	str	r1, [r7, #0]
 800e6aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	221a      	movs	r2, #26
 800e6b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e6b2:	f000 f855 	bl	800e760 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e6b6:	4b02      	ldr	r3, [pc, #8]	; (800e6c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	3708      	adds	r7, #8
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}
 800e6c0:	200000f4 	.word	0x200000f4

0800e6c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b082      	sub	sp, #8
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	6039      	str	r1, [r7, #0]
 800e6ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e6d0:	79fb      	ldrb	r3, [r7, #7]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d105      	bne.n	800e6e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e6d6:	683a      	ldr	r2, [r7, #0]
 800e6d8:	4907      	ldr	r1, [pc, #28]	; (800e6f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e6da:	4808      	ldr	r0, [pc, #32]	; (800e6fc <USBD_FS_ConfigStrDescriptor+0x38>)
 800e6dc:	f7fc fd64 	bl	800b1a8 <USBD_GetString>
 800e6e0:	e004      	b.n	800e6ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e6e2:	683a      	ldr	r2, [r7, #0]
 800e6e4:	4904      	ldr	r1, [pc, #16]	; (800e6f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e6e6:	4805      	ldr	r0, [pc, #20]	; (800e6fc <USBD_FS_ConfigStrDescriptor+0x38>)
 800e6e8:	f7fc fd5e 	bl	800b1a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e6ec:	4b02      	ldr	r3, [pc, #8]	; (800e6f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	3708      	adds	r7, #8
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}
 800e6f6:	bf00      	nop
 800e6f8:	20006954 	.word	0x20006954
 800e6fc:	0800f330 	.word	0x0800f330

0800e700 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b082      	sub	sp, #8
 800e704:	af00      	add	r7, sp, #0
 800e706:	4603      	mov	r3, r0
 800e708:	6039      	str	r1, [r7, #0]
 800e70a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e70c:	79fb      	ldrb	r3, [r7, #7]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d105      	bne.n	800e71e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e712:	683a      	ldr	r2, [r7, #0]
 800e714:	4907      	ldr	r1, [pc, #28]	; (800e734 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e716:	4808      	ldr	r0, [pc, #32]	; (800e738 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e718:	f7fc fd46 	bl	800b1a8 <USBD_GetString>
 800e71c:	e004      	b.n	800e728 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e71e:	683a      	ldr	r2, [r7, #0]
 800e720:	4904      	ldr	r1, [pc, #16]	; (800e734 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e722:	4805      	ldr	r0, [pc, #20]	; (800e738 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e724:	f7fc fd40 	bl	800b1a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e728:	4b02      	ldr	r3, [pc, #8]	; (800e734 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e72a:	4618      	mov	r0, r3
 800e72c:	3708      	adds	r7, #8
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}
 800e732:	bf00      	nop
 800e734:	20006954 	.word	0x20006954
 800e738:	0800f33c 	.word	0x0800f33c

0800e73c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e73c:	b480      	push	{r7}
 800e73e:	b083      	sub	sp, #12
 800e740:	af00      	add	r7, sp, #0
 800e742:	4603      	mov	r3, r0
 800e744:	6039      	str	r1, [r7, #0]
 800e746:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	220c      	movs	r2, #12
 800e74c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800e74e:	4b03      	ldr	r3, [pc, #12]	; (800e75c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800e750:	4618      	mov	r0, r3
 800e752:	370c      	adds	r7, #12
 800e754:	46bd      	mov	sp, r7
 800e756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75a:	4770      	bx	lr
 800e75c:	200000e4 	.word	0x200000e4

0800e760 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b084      	sub	sp, #16
 800e764:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e766:	4b0f      	ldr	r3, [pc, #60]	; (800e7a4 <Get_SerialNum+0x44>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e76c:	4b0e      	ldr	r3, [pc, #56]	; (800e7a8 <Get_SerialNum+0x48>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e772:	4b0e      	ldr	r3, [pc, #56]	; (800e7ac <Get_SerialNum+0x4c>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e778:	68fa      	ldr	r2, [r7, #12]
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	4413      	add	r3, r2
 800e77e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d009      	beq.n	800e79a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e786:	2208      	movs	r2, #8
 800e788:	4909      	ldr	r1, [pc, #36]	; (800e7b0 <Get_SerialNum+0x50>)
 800e78a:	68f8      	ldr	r0, [r7, #12]
 800e78c:	f000 f814 	bl	800e7b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e790:	2204      	movs	r2, #4
 800e792:	4908      	ldr	r1, [pc, #32]	; (800e7b4 <Get_SerialNum+0x54>)
 800e794:	68b8      	ldr	r0, [r7, #8]
 800e796:	f000 f80f 	bl	800e7b8 <IntToUnicode>
  }
}
 800e79a:	bf00      	nop
 800e79c:	3710      	adds	r7, #16
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}
 800e7a2:	bf00      	nop
 800e7a4:	1ff0f420 	.word	0x1ff0f420
 800e7a8:	1ff0f424 	.word	0x1ff0f424
 800e7ac:	1ff0f428 	.word	0x1ff0f428
 800e7b0:	200000f6 	.word	0x200000f6
 800e7b4:	20000106 	.word	0x20000106

0800e7b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	b087      	sub	sp, #28
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	60f8      	str	r0, [r7, #12]
 800e7c0:	60b9      	str	r1, [r7, #8]
 800e7c2:	4613      	mov	r3, r2
 800e7c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	75fb      	strb	r3, [r7, #23]
 800e7ce:	e027      	b.n	800e820 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	0f1b      	lsrs	r3, r3, #28
 800e7d4:	2b09      	cmp	r3, #9
 800e7d6:	d80b      	bhi.n	800e7f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	0f1b      	lsrs	r3, r3, #28
 800e7dc:	b2da      	uxtb	r2, r3
 800e7de:	7dfb      	ldrb	r3, [r7, #23]
 800e7e0:	005b      	lsls	r3, r3, #1
 800e7e2:	4619      	mov	r1, r3
 800e7e4:	68bb      	ldr	r3, [r7, #8]
 800e7e6:	440b      	add	r3, r1
 800e7e8:	3230      	adds	r2, #48	; 0x30
 800e7ea:	b2d2      	uxtb	r2, r2
 800e7ec:	701a      	strb	r2, [r3, #0]
 800e7ee:	e00a      	b.n	800e806 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	0f1b      	lsrs	r3, r3, #28
 800e7f4:	b2da      	uxtb	r2, r3
 800e7f6:	7dfb      	ldrb	r3, [r7, #23]
 800e7f8:	005b      	lsls	r3, r3, #1
 800e7fa:	4619      	mov	r1, r3
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	440b      	add	r3, r1
 800e800:	3237      	adds	r2, #55	; 0x37
 800e802:	b2d2      	uxtb	r2, r2
 800e804:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	011b      	lsls	r3, r3, #4
 800e80a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e80c:	7dfb      	ldrb	r3, [r7, #23]
 800e80e:	005b      	lsls	r3, r3, #1
 800e810:	3301      	adds	r3, #1
 800e812:	68ba      	ldr	r2, [r7, #8]
 800e814:	4413      	add	r3, r2
 800e816:	2200      	movs	r2, #0
 800e818:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e81a:	7dfb      	ldrb	r3, [r7, #23]
 800e81c:	3301      	adds	r3, #1
 800e81e:	75fb      	strb	r3, [r7, #23]
 800e820:	7dfa      	ldrb	r2, [r7, #23]
 800e822:	79fb      	ldrb	r3, [r7, #7]
 800e824:	429a      	cmp	r2, r3
 800e826:	d3d3      	bcc.n	800e7d0 <IntToUnicode+0x18>
  }
}
 800e828:	bf00      	nop
 800e82a:	bf00      	nop
 800e82c:	371c      	adds	r7, #28
 800e82e:	46bd      	mov	sp, r7
 800e830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e834:	4770      	bx	lr
	...

0800e838 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b0ae      	sub	sp, #184	; 0xb8
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e840:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e844:	2200      	movs	r2, #0
 800e846:	601a      	str	r2, [r3, #0]
 800e848:	605a      	str	r2, [r3, #4]
 800e84a:	609a      	str	r2, [r3, #8]
 800e84c:	60da      	str	r2, [r3, #12]
 800e84e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e850:	f107 0314 	add.w	r3, r7, #20
 800e854:	2290      	movs	r2, #144	; 0x90
 800e856:	2100      	movs	r1, #0
 800e858:	4618      	mov	r0, r3
 800e85a:	f000 fba5 	bl	800efa8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e866:	d151      	bne.n	800e90c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800e868:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e86c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800e86e:	2300      	movs	r3, #0
 800e870:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e874:	f107 0314 	add.w	r3, r7, #20
 800e878:	4618      	mov	r0, r3
 800e87a:	f7f6 f9c5 	bl	8004c08 <HAL_RCCEx_PeriphCLKConfig>
 800e87e:	4603      	mov	r3, r0
 800e880:	2b00      	cmp	r3, #0
 800e882:	d001      	beq.n	800e888 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800e884:	f7f2 fba0 	bl	8000fc8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e888:	4b22      	ldr	r3, [pc, #136]	; (800e914 <HAL_PCD_MspInit+0xdc>)
 800e88a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e88c:	4a21      	ldr	r2, [pc, #132]	; (800e914 <HAL_PCD_MspInit+0xdc>)
 800e88e:	f043 0301 	orr.w	r3, r3, #1
 800e892:	6313      	str	r3, [r2, #48]	; 0x30
 800e894:	4b1f      	ldr	r3, [pc, #124]	; (800e914 <HAL_PCD_MspInit+0xdc>)
 800e896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e898:	f003 0301 	and.w	r3, r3, #1
 800e89c:	613b      	str	r3, [r7, #16]
 800e89e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e8a0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e8a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e8a8:	2302      	movs	r3, #2
 800e8aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e8b4:	2303      	movs	r3, #3
 800e8b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e8ba:	230a      	movs	r3, #10
 800e8bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e8c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e8c4:	4619      	mov	r1, r3
 800e8c6:	4814      	ldr	r0, [pc, #80]	; (800e918 <HAL_PCD_MspInit+0xe0>)
 800e8c8:	f7f3 fe8a 	bl	80025e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e8cc:	4b11      	ldr	r3, [pc, #68]	; (800e914 <HAL_PCD_MspInit+0xdc>)
 800e8ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8d0:	4a10      	ldr	r2, [pc, #64]	; (800e914 <HAL_PCD_MspInit+0xdc>)
 800e8d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8d6:	6353      	str	r3, [r2, #52]	; 0x34
 800e8d8:	4b0e      	ldr	r3, [pc, #56]	; (800e914 <HAL_PCD_MspInit+0xdc>)
 800e8da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8e0:	60fb      	str	r3, [r7, #12]
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	4b0b      	ldr	r3, [pc, #44]	; (800e914 <HAL_PCD_MspInit+0xdc>)
 800e8e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8e8:	4a0a      	ldr	r2, [pc, #40]	; (800e914 <HAL_PCD_MspInit+0xdc>)
 800e8ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e8ee:	6453      	str	r3, [r2, #68]	; 0x44
 800e8f0:	4b08      	ldr	r3, [pc, #32]	; (800e914 <HAL_PCD_MspInit+0xdc>)
 800e8f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e8f8:	60bb      	str	r3, [r7, #8]
 800e8fa:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	2105      	movs	r1, #5
 800e900:	2043      	movs	r0, #67	; 0x43
 800e902:	f7f3 f9c7 	bl	8001c94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e906:	2043      	movs	r0, #67	; 0x43
 800e908:	f7f3 f9e0 	bl	8001ccc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e90c:	bf00      	nop
 800e90e:	37b8      	adds	r7, #184	; 0xb8
 800e910:	46bd      	mov	sp, r7
 800e912:	bd80      	pop	{r7, pc}
 800e914:	40023800 	.word	0x40023800
 800e918:	40020000 	.word	0x40020000

0800e91c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b082      	sub	sp, #8
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e930:	4619      	mov	r1, r3
 800e932:	4610      	mov	r0, r2
 800e934:	f7fb faaf 	bl	8009e96 <USBD_LL_SetupStage>
}
 800e938:	bf00      	nop
 800e93a:	3708      	adds	r7, #8
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}

0800e940 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b082      	sub	sp, #8
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
 800e948:	460b      	mov	r3, r1
 800e94a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800e952:	78fa      	ldrb	r2, [r7, #3]
 800e954:	6879      	ldr	r1, [r7, #4]
 800e956:	4613      	mov	r3, r2
 800e958:	00db      	lsls	r3, r3, #3
 800e95a:	4413      	add	r3, r2
 800e95c:	009b      	lsls	r3, r3, #2
 800e95e:	440b      	add	r3, r1
 800e960:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e964:	681a      	ldr	r2, [r3, #0]
 800e966:	78fb      	ldrb	r3, [r7, #3]
 800e968:	4619      	mov	r1, r3
 800e96a:	f7fb fae9 	bl	8009f40 <USBD_LL_DataOutStage>
}
 800e96e:	bf00      	nop
 800e970:	3708      	adds	r7, #8
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}

0800e976 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e976:	b580      	push	{r7, lr}
 800e978:	b082      	sub	sp, #8
 800e97a:	af00      	add	r7, sp, #0
 800e97c:	6078      	str	r0, [r7, #4]
 800e97e:	460b      	mov	r3, r1
 800e980:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800e988:	78fa      	ldrb	r2, [r7, #3]
 800e98a:	6879      	ldr	r1, [r7, #4]
 800e98c:	4613      	mov	r3, r2
 800e98e:	00db      	lsls	r3, r3, #3
 800e990:	4413      	add	r3, r2
 800e992:	009b      	lsls	r3, r3, #2
 800e994:	440b      	add	r3, r1
 800e996:	334c      	adds	r3, #76	; 0x4c
 800e998:	681a      	ldr	r2, [r3, #0]
 800e99a:	78fb      	ldrb	r3, [r7, #3]
 800e99c:	4619      	mov	r1, r3
 800e99e:	f7fb fb82 	bl	800a0a6 <USBD_LL_DataInStage>
}
 800e9a2:	bf00      	nop
 800e9a4:	3708      	adds	r7, #8
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}

0800e9aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9aa:	b580      	push	{r7, lr}
 800e9ac:	b082      	sub	sp, #8
 800e9ae:	af00      	add	r7, sp, #0
 800e9b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	f7fb fcb6 	bl	800a32a <USBD_LL_SOF>
}
 800e9be:	bf00      	nop
 800e9c0:	3708      	adds	r7, #8
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}

0800e9c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9c6:	b580      	push	{r7, lr}
 800e9c8:	b084      	sub	sp, #16
 800e9ca:	af00      	add	r7, sp, #0
 800e9cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	68db      	ldr	r3, [r3, #12]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d102      	bne.n	800e9e0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e9da:	2300      	movs	r3, #0
 800e9dc:	73fb      	strb	r3, [r7, #15]
 800e9de:	e008      	b.n	800e9f2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	68db      	ldr	r3, [r3, #12]
 800e9e4:	2b02      	cmp	r3, #2
 800e9e6:	d102      	bne.n	800e9ee <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e9e8:	2301      	movs	r3, #1
 800e9ea:	73fb      	strb	r3, [r7, #15]
 800e9ec:	e001      	b.n	800e9f2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e9ee:	f7f2 faeb 	bl	8000fc8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e9f8:	7bfa      	ldrb	r2, [r7, #15]
 800e9fa:	4611      	mov	r1, r2
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f7fb fc56 	bl	800a2ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f7fb fbfe 	bl	800a20a <USBD_LL_Reset>
}
 800ea0e:	bf00      	nop
 800ea10:	3710      	adds	r7, #16
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bd80      	pop	{r7, pc}
	...

0800ea18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b082      	sub	sp, #8
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ea26:	4618      	mov	r0, r3
 800ea28:	f7fb fc51 	bl	800a2ce <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	687a      	ldr	r2, [r7, #4]
 800ea38:	6812      	ldr	r2, [r2, #0]
 800ea3a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ea3e:	f043 0301 	orr.w	r3, r3, #1
 800ea42:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	6a1b      	ldr	r3, [r3, #32]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d005      	beq.n	800ea58 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ea4c:	4b04      	ldr	r3, [pc, #16]	; (800ea60 <HAL_PCD_SuspendCallback+0x48>)
 800ea4e:	691b      	ldr	r3, [r3, #16]
 800ea50:	4a03      	ldr	r2, [pc, #12]	; (800ea60 <HAL_PCD_SuspendCallback+0x48>)
 800ea52:	f043 0306 	orr.w	r3, r3, #6
 800ea56:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ea58:	bf00      	nop
 800ea5a:	3708      	adds	r7, #8
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}
 800ea60:	e000ed00 	.word	0xe000ed00

0800ea64 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b082      	sub	sp, #8
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ea72:	4618      	mov	r0, r3
 800ea74:	f7fb fc41 	bl	800a2fa <USBD_LL_Resume>
}
 800ea78:	bf00      	nop
 800ea7a:	3708      	adds	r7, #8
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}

0800ea80 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b082      	sub	sp, #8
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
 800ea88:	460b      	mov	r3, r1
 800ea8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ea92:	78fa      	ldrb	r2, [r7, #3]
 800ea94:	4611      	mov	r1, r2
 800ea96:	4618      	mov	r0, r3
 800ea98:	f7fb fc99 	bl	800a3ce <USBD_LL_IsoOUTIncomplete>
}
 800ea9c:	bf00      	nop
 800ea9e:	3708      	adds	r7, #8
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}

0800eaa4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b082      	sub	sp, #8
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	460b      	mov	r3, r1
 800eaae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800eab6:	78fa      	ldrb	r2, [r7, #3]
 800eab8:	4611      	mov	r1, r2
 800eaba:	4618      	mov	r0, r3
 800eabc:	f7fb fc55 	bl	800a36a <USBD_LL_IsoINIncomplete>
}
 800eac0:	bf00      	nop
 800eac2:	3708      	adds	r7, #8
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}

0800eac8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b082      	sub	sp, #8
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ead6:	4618      	mov	r0, r3
 800ead8:	f7fb fcab 	bl	800a432 <USBD_LL_DevConnected>
}
 800eadc:	bf00      	nop
 800eade:	3708      	adds	r7, #8
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd80      	pop	{r7, pc}

0800eae4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b082      	sub	sp, #8
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f7fb fca8 	bl	800a448 <USBD_LL_DevDisconnected>
}
 800eaf8:	bf00      	nop
 800eafa:	3708      	adds	r7, #8
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}

0800eb00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b082      	sub	sp, #8
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	781b      	ldrb	r3, [r3, #0]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d13c      	bne.n	800eb8a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800eb10:	4a20      	ldr	r2, [pc, #128]	; (800eb94 <USBD_LL_Init+0x94>)
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	4a1e      	ldr	r2, [pc, #120]	; (800eb94 <USBD_LL_Init+0x94>)
 800eb1c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800eb20:	4b1c      	ldr	r3, [pc, #112]	; (800eb94 <USBD_LL_Init+0x94>)
 800eb22:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800eb26:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800eb28:	4b1a      	ldr	r3, [pc, #104]	; (800eb94 <USBD_LL_Init+0x94>)
 800eb2a:	2206      	movs	r2, #6
 800eb2c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800eb2e:	4b19      	ldr	r3, [pc, #100]	; (800eb94 <USBD_LL_Init+0x94>)
 800eb30:	2202      	movs	r2, #2
 800eb32:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800eb34:	4b17      	ldr	r3, [pc, #92]	; (800eb94 <USBD_LL_Init+0x94>)
 800eb36:	2200      	movs	r2, #0
 800eb38:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800eb3a:	4b16      	ldr	r3, [pc, #88]	; (800eb94 <USBD_LL_Init+0x94>)
 800eb3c:	2202      	movs	r2, #2
 800eb3e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800eb40:	4b14      	ldr	r3, [pc, #80]	; (800eb94 <USBD_LL_Init+0x94>)
 800eb42:	2200      	movs	r2, #0
 800eb44:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800eb46:	4b13      	ldr	r3, [pc, #76]	; (800eb94 <USBD_LL_Init+0x94>)
 800eb48:	2200      	movs	r2, #0
 800eb4a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800eb4c:	4b11      	ldr	r3, [pc, #68]	; (800eb94 <USBD_LL_Init+0x94>)
 800eb4e:	2200      	movs	r2, #0
 800eb50:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800eb52:	4b10      	ldr	r3, [pc, #64]	; (800eb94 <USBD_LL_Init+0x94>)
 800eb54:	2200      	movs	r2, #0
 800eb56:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800eb58:	4b0e      	ldr	r3, [pc, #56]	; (800eb94 <USBD_LL_Init+0x94>)
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800eb5e:	480d      	ldr	r0, [pc, #52]	; (800eb94 <USBD_LL_Init+0x94>)
 800eb60:	f7f4 f843 	bl	8002bea <HAL_PCD_Init>
 800eb64:	4603      	mov	r3, r0
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d001      	beq.n	800eb6e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800eb6a:	f7f2 fa2d 	bl	8000fc8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800eb6e:	2180      	movs	r1, #128	; 0x80
 800eb70:	4808      	ldr	r0, [pc, #32]	; (800eb94 <USBD_LL_Init+0x94>)
 800eb72:	f7f5 fabe 	bl	80040f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800eb76:	2240      	movs	r2, #64	; 0x40
 800eb78:	2100      	movs	r1, #0
 800eb7a:	4806      	ldr	r0, [pc, #24]	; (800eb94 <USBD_LL_Init+0x94>)
 800eb7c:	f7f5 fa72 	bl	8004064 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800eb80:	2280      	movs	r2, #128	; 0x80
 800eb82:	2101      	movs	r1, #1
 800eb84:	4803      	ldr	r0, [pc, #12]	; (800eb94 <USBD_LL_Init+0x94>)
 800eb86:	f7f5 fa6d 	bl	8004064 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800eb8a:	2300      	movs	r3, #0
}
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	3708      	adds	r7, #8
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}
 800eb94:	20006b54 	.word	0x20006b54

0800eb98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b084      	sub	sp, #16
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eba0:	2300      	movs	r3, #0
 800eba2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eba4:	2300      	movs	r3, #0
 800eba6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f7f4 f93f 	bl	8002e32 <HAL_PCD_Start>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ebb8:	7bfb      	ldrb	r3, [r7, #15]
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f000 f97e 	bl	800eebc <USBD_Get_USB_Status>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ebc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	3710      	adds	r7, #16
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}

0800ebce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ebce:	b580      	push	{r7, lr}
 800ebd0:	b084      	sub	sp, #16
 800ebd2:	af00      	add	r7, sp, #0
 800ebd4:	6078      	str	r0, [r7, #4]
 800ebd6:	4608      	mov	r0, r1
 800ebd8:	4611      	mov	r1, r2
 800ebda:	461a      	mov	r2, r3
 800ebdc:	4603      	mov	r3, r0
 800ebde:	70fb      	strb	r3, [r7, #3]
 800ebe0:	460b      	mov	r3, r1
 800ebe2:	70bb      	strb	r3, [r7, #2]
 800ebe4:	4613      	mov	r3, r2
 800ebe6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebe8:	2300      	movs	r3, #0
 800ebea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebec:	2300      	movs	r3, #0
 800ebee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ebf6:	78bb      	ldrb	r3, [r7, #2]
 800ebf8:	883a      	ldrh	r2, [r7, #0]
 800ebfa:	78f9      	ldrb	r1, [r7, #3]
 800ebfc:	f7f4 fe2c 	bl	8003858 <HAL_PCD_EP_Open>
 800ec00:	4603      	mov	r3, r0
 800ec02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec04:	7bfb      	ldrb	r3, [r7, #15]
 800ec06:	4618      	mov	r0, r3
 800ec08:	f000 f958 	bl	800eebc <USBD_Get_USB_Status>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec10:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec12:	4618      	mov	r0, r3
 800ec14:	3710      	adds	r7, #16
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}

0800ec1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec1a:	b580      	push	{r7, lr}
 800ec1c:	b084      	sub	sp, #16
 800ec1e:	af00      	add	r7, sp, #0
 800ec20:	6078      	str	r0, [r7, #4]
 800ec22:	460b      	mov	r3, r1
 800ec24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec26:	2300      	movs	r3, #0
 800ec28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ec34:	78fa      	ldrb	r2, [r7, #3]
 800ec36:	4611      	mov	r1, r2
 800ec38:	4618      	mov	r0, r3
 800ec3a:	f7f4 fe75 	bl	8003928 <HAL_PCD_EP_Close>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec42:	7bfb      	ldrb	r3, [r7, #15]
 800ec44:	4618      	mov	r0, r3
 800ec46:	f000 f939 	bl	800eebc <USBD_Get_USB_Status>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec50:	4618      	mov	r0, r3
 800ec52:	3710      	adds	r7, #16
 800ec54:	46bd      	mov	sp, r7
 800ec56:	bd80      	pop	{r7, pc}

0800ec58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b084      	sub	sp, #16
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
 800ec60:	460b      	mov	r3, r1
 800ec62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec64:	2300      	movs	r3, #0
 800ec66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec68:	2300      	movs	r3, #0
 800ec6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ec72:	78fa      	ldrb	r2, [r7, #3]
 800ec74:	4611      	mov	r1, r2
 800ec76:	4618      	mov	r0, r3
 800ec78:	f7f4 ff4d 	bl	8003b16 <HAL_PCD_EP_SetStall>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec80:	7bfb      	ldrb	r3, [r7, #15]
 800ec82:	4618      	mov	r0, r3
 800ec84:	f000 f91a 	bl	800eebc <USBD_Get_USB_Status>
 800ec88:	4603      	mov	r3, r0
 800ec8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3710      	adds	r7, #16
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}

0800ec96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec96:	b580      	push	{r7, lr}
 800ec98:	b084      	sub	sp, #16
 800ec9a:	af00      	add	r7, sp, #0
 800ec9c:	6078      	str	r0, [r7, #4]
 800ec9e:	460b      	mov	r3, r1
 800eca0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eca2:	2300      	movs	r3, #0
 800eca4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eca6:	2300      	movs	r3, #0
 800eca8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ecb0:	78fa      	ldrb	r2, [r7, #3]
 800ecb2:	4611      	mov	r1, r2
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f7f4 ff92 	bl	8003bde <HAL_PCD_EP_ClrStall>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ecbe:	7bfb      	ldrb	r3, [r7, #15]
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f000 f8fb 	bl	800eebc <USBD_Get_USB_Status>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecca:	7bbb      	ldrb	r3, [r7, #14]
}
 800eccc:	4618      	mov	r0, r3
 800ecce:	3710      	adds	r7, #16
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bd80      	pop	{r7, pc}

0800ecd4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ecd4:	b480      	push	{r7}
 800ecd6:	b085      	sub	sp, #20
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
 800ecdc:	460b      	mov	r3, r1
 800ecde:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ece6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ece8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	da0b      	bge.n	800ed08 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ecf0:	78fb      	ldrb	r3, [r7, #3]
 800ecf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ecf6:	68f9      	ldr	r1, [r7, #12]
 800ecf8:	4613      	mov	r3, r2
 800ecfa:	00db      	lsls	r3, r3, #3
 800ecfc:	4413      	add	r3, r2
 800ecfe:	009b      	lsls	r3, r3, #2
 800ed00:	440b      	add	r3, r1
 800ed02:	333e      	adds	r3, #62	; 0x3e
 800ed04:	781b      	ldrb	r3, [r3, #0]
 800ed06:	e00b      	b.n	800ed20 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ed08:	78fb      	ldrb	r3, [r7, #3]
 800ed0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ed0e:	68f9      	ldr	r1, [r7, #12]
 800ed10:	4613      	mov	r3, r2
 800ed12:	00db      	lsls	r3, r3, #3
 800ed14:	4413      	add	r3, r2
 800ed16:	009b      	lsls	r3, r3, #2
 800ed18:	440b      	add	r3, r1
 800ed1a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ed1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ed20:	4618      	mov	r0, r3
 800ed22:	3714      	adds	r7, #20
 800ed24:	46bd      	mov	sp, r7
 800ed26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2a:	4770      	bx	lr

0800ed2c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b084      	sub	sp, #16
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
 800ed34:	460b      	mov	r3, r1
 800ed36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ed46:	78fa      	ldrb	r2, [r7, #3]
 800ed48:	4611      	mov	r1, r2
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f7f4 fd5f 	bl	800380e <HAL_PCD_SetAddress>
 800ed50:	4603      	mov	r3, r0
 800ed52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed54:	7bfb      	ldrb	r3, [r7, #15]
 800ed56:	4618      	mov	r0, r3
 800ed58:	f000 f8b0 	bl	800eebc <USBD_Get_USB_Status>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed60:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed62:	4618      	mov	r0, r3
 800ed64:	3710      	adds	r7, #16
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bd80      	pop	{r7, pc}

0800ed6a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ed6a:	b580      	push	{r7, lr}
 800ed6c:	b086      	sub	sp, #24
 800ed6e:	af00      	add	r7, sp, #0
 800ed70:	60f8      	str	r0, [r7, #12]
 800ed72:	607a      	str	r2, [r7, #4]
 800ed74:	603b      	str	r3, [r7, #0]
 800ed76:	460b      	mov	r3, r1
 800ed78:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ed88:	7af9      	ldrb	r1, [r7, #11]
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	687a      	ldr	r2, [r7, #4]
 800ed8e:	f7f4 fe78 	bl	8003a82 <HAL_PCD_EP_Transmit>
 800ed92:	4603      	mov	r3, r0
 800ed94:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed96:	7dfb      	ldrb	r3, [r7, #23]
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f000 f88f 	bl	800eebc <USBD_Get_USB_Status>
 800ed9e:	4603      	mov	r3, r0
 800eda0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800eda2:	7dbb      	ldrb	r3, [r7, #22]
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	3718      	adds	r7, #24
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}

0800edac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b086      	sub	sp, #24
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	60f8      	str	r0, [r7, #12]
 800edb4:	607a      	str	r2, [r7, #4]
 800edb6:	603b      	str	r3, [r7, #0]
 800edb8:	460b      	mov	r3, r1
 800edba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edbc:	2300      	movs	r3, #0
 800edbe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edc0:	2300      	movs	r3, #0
 800edc2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800edca:	7af9      	ldrb	r1, [r7, #11]
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	687a      	ldr	r2, [r7, #4]
 800edd0:	f7f4 fdf4 	bl	80039bc <HAL_PCD_EP_Receive>
 800edd4:	4603      	mov	r3, r0
 800edd6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800edd8:	7dfb      	ldrb	r3, [r7, #23]
 800edda:	4618      	mov	r0, r3
 800eddc:	f000 f86e 	bl	800eebc <USBD_Get_USB_Status>
 800ede0:	4603      	mov	r3, r0
 800ede2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ede4:	7dbb      	ldrb	r3, [r7, #22]
}
 800ede6:	4618      	mov	r0, r3
 800ede8:	3718      	adds	r7, #24
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}

0800edee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800edee:	b580      	push	{r7, lr}
 800edf0:	b082      	sub	sp, #8
 800edf2:	af00      	add	r7, sp, #0
 800edf4:	6078      	str	r0, [r7, #4]
 800edf6:	460b      	mov	r3, r1
 800edf8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ee00:	78fa      	ldrb	r2, [r7, #3]
 800ee02:	4611      	mov	r1, r2
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7f4 fe24 	bl	8003a52 <HAL_PCD_EP_GetRxCount>
 800ee0a:	4603      	mov	r3, r0
}
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	3708      	adds	r7, #8
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}

0800ee14 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b082      	sub	sp, #8
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
 800ee1c:	460b      	mov	r3, r1
 800ee1e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800ee20:	78fb      	ldrb	r3, [r7, #3]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d002      	beq.n	800ee2c <HAL_PCDEx_LPM_Callback+0x18>
 800ee26:	2b01      	cmp	r3, #1
 800ee28:	d01f      	beq.n	800ee6a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800ee2a:	e03b      	b.n	800eea4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6a1b      	ldr	r3, [r3, #32]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d007      	beq.n	800ee44 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ee34:	f000 f83c 	bl	800eeb0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ee38:	4b1c      	ldr	r3, [pc, #112]	; (800eeac <HAL_PCDEx_LPM_Callback+0x98>)
 800ee3a:	691b      	ldr	r3, [r3, #16]
 800ee3c:	4a1b      	ldr	r2, [pc, #108]	; (800eeac <HAL_PCDEx_LPM_Callback+0x98>)
 800ee3e:	f023 0306 	bic.w	r3, r3, #6
 800ee42:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	687a      	ldr	r2, [r7, #4]
 800ee50:	6812      	ldr	r2, [r2, #0]
 800ee52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ee56:	f023 0301 	bic.w	r3, r3, #1
 800ee5a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ee62:	4618      	mov	r0, r3
 800ee64:	f7fb fa49 	bl	800a2fa <USBD_LL_Resume>
    break;
 800ee68:	e01c      	b.n	800eea4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	687a      	ldr	r2, [r7, #4]
 800ee76:	6812      	ldr	r2, [r2, #0]
 800ee78:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ee7c:	f043 0301 	orr.w	r3, r3, #1
 800ee80:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ee88:	4618      	mov	r0, r3
 800ee8a:	f7fb fa20 	bl	800a2ce <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	6a1b      	ldr	r3, [r3, #32]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d005      	beq.n	800eea2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ee96:	4b05      	ldr	r3, [pc, #20]	; (800eeac <HAL_PCDEx_LPM_Callback+0x98>)
 800ee98:	691b      	ldr	r3, [r3, #16]
 800ee9a:	4a04      	ldr	r2, [pc, #16]	; (800eeac <HAL_PCDEx_LPM_Callback+0x98>)
 800ee9c:	f043 0306 	orr.w	r3, r3, #6
 800eea0:	6113      	str	r3, [r2, #16]
    break;
 800eea2:	bf00      	nop
}
 800eea4:	bf00      	nop
 800eea6:	3708      	adds	r7, #8
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}
 800eeac:	e000ed00 	.word	0xe000ed00

0800eeb0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800eeb4:	f7f1 fc2e 	bl	8000714 <SystemClock_Config>
}
 800eeb8:	bf00      	nop
 800eeba:	bd80      	pop	{r7, pc}

0800eebc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800eebc:	b480      	push	{r7}
 800eebe:	b085      	sub	sp, #20
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	4603      	mov	r3, r0
 800eec4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eec6:	2300      	movs	r3, #0
 800eec8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800eeca:	79fb      	ldrb	r3, [r7, #7]
 800eecc:	2b03      	cmp	r3, #3
 800eece:	d817      	bhi.n	800ef00 <USBD_Get_USB_Status+0x44>
 800eed0:	a201      	add	r2, pc, #4	; (adr r2, 800eed8 <USBD_Get_USB_Status+0x1c>)
 800eed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eed6:	bf00      	nop
 800eed8:	0800eee9 	.word	0x0800eee9
 800eedc:	0800eeef 	.word	0x0800eeef
 800eee0:	0800eef5 	.word	0x0800eef5
 800eee4:	0800eefb 	.word	0x0800eefb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800eee8:	2300      	movs	r3, #0
 800eeea:	73fb      	strb	r3, [r7, #15]
    break;
 800eeec:	e00b      	b.n	800ef06 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eeee:	2303      	movs	r3, #3
 800eef0:	73fb      	strb	r3, [r7, #15]
    break;
 800eef2:	e008      	b.n	800ef06 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eef4:	2301      	movs	r3, #1
 800eef6:	73fb      	strb	r3, [r7, #15]
    break;
 800eef8:	e005      	b.n	800ef06 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eefa:	2303      	movs	r3, #3
 800eefc:	73fb      	strb	r3, [r7, #15]
    break;
 800eefe:	e002      	b.n	800ef06 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ef00:	2303      	movs	r3, #3
 800ef02:	73fb      	strb	r3, [r7, #15]
    break;
 800ef04:	bf00      	nop
  }
  return usb_status;
 800ef06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef08:	4618      	mov	r0, r3
 800ef0a:	3714      	adds	r7, #20
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef12:	4770      	bx	lr

0800ef14 <__errno>:
 800ef14:	4b01      	ldr	r3, [pc, #4]	; (800ef1c <__errno+0x8>)
 800ef16:	6818      	ldr	r0, [r3, #0]
 800ef18:	4770      	bx	lr
 800ef1a:	bf00      	nop
 800ef1c:	20000110 	.word	0x20000110

0800ef20 <__libc_init_array>:
 800ef20:	b570      	push	{r4, r5, r6, lr}
 800ef22:	4d0d      	ldr	r5, [pc, #52]	; (800ef58 <__libc_init_array+0x38>)
 800ef24:	4c0d      	ldr	r4, [pc, #52]	; (800ef5c <__libc_init_array+0x3c>)
 800ef26:	1b64      	subs	r4, r4, r5
 800ef28:	10a4      	asrs	r4, r4, #2
 800ef2a:	2600      	movs	r6, #0
 800ef2c:	42a6      	cmp	r6, r4
 800ef2e:	d109      	bne.n	800ef44 <__libc_init_array+0x24>
 800ef30:	4d0b      	ldr	r5, [pc, #44]	; (800ef60 <__libc_init_array+0x40>)
 800ef32:	4c0c      	ldr	r4, [pc, #48]	; (800ef64 <__libc_init_array+0x44>)
 800ef34:	f000 f9a6 	bl	800f284 <_init>
 800ef38:	1b64      	subs	r4, r4, r5
 800ef3a:	10a4      	asrs	r4, r4, #2
 800ef3c:	2600      	movs	r6, #0
 800ef3e:	42a6      	cmp	r6, r4
 800ef40:	d105      	bne.n	800ef4e <__libc_init_array+0x2e>
 800ef42:	bd70      	pop	{r4, r5, r6, pc}
 800ef44:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef48:	4798      	blx	r3
 800ef4a:	3601      	adds	r6, #1
 800ef4c:	e7ee      	b.n	800ef2c <__libc_init_array+0xc>
 800ef4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef52:	4798      	blx	r3
 800ef54:	3601      	adds	r6, #1
 800ef56:	e7f2      	b.n	800ef3e <__libc_init_array+0x1e>
 800ef58:	0800f4a4 	.word	0x0800f4a4
 800ef5c:	0800f4a4 	.word	0x0800f4a4
 800ef60:	0800f4a4 	.word	0x0800f4a4
 800ef64:	0800f4a8 	.word	0x0800f4a8

0800ef68 <__retarget_lock_acquire_recursive>:
 800ef68:	4770      	bx	lr

0800ef6a <__retarget_lock_release_recursive>:
 800ef6a:	4770      	bx	lr

0800ef6c <malloc>:
 800ef6c:	4b02      	ldr	r3, [pc, #8]	; (800ef78 <malloc+0xc>)
 800ef6e:	4601      	mov	r1, r0
 800ef70:	6818      	ldr	r0, [r3, #0]
 800ef72:	f000 b88d 	b.w	800f090 <_malloc_r>
 800ef76:	bf00      	nop
 800ef78:	20000110 	.word	0x20000110

0800ef7c <free>:
 800ef7c:	4b02      	ldr	r3, [pc, #8]	; (800ef88 <free+0xc>)
 800ef7e:	4601      	mov	r1, r0
 800ef80:	6818      	ldr	r0, [r3, #0]
 800ef82:	f000 b819 	b.w	800efb8 <_free_r>
 800ef86:	bf00      	nop
 800ef88:	20000110 	.word	0x20000110

0800ef8c <memcpy>:
 800ef8c:	440a      	add	r2, r1
 800ef8e:	4291      	cmp	r1, r2
 800ef90:	f100 33ff 	add.w	r3, r0, #4294967295
 800ef94:	d100      	bne.n	800ef98 <memcpy+0xc>
 800ef96:	4770      	bx	lr
 800ef98:	b510      	push	{r4, lr}
 800ef9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800efa2:	4291      	cmp	r1, r2
 800efa4:	d1f9      	bne.n	800ef9a <memcpy+0xe>
 800efa6:	bd10      	pop	{r4, pc}

0800efa8 <memset>:
 800efa8:	4402      	add	r2, r0
 800efaa:	4603      	mov	r3, r0
 800efac:	4293      	cmp	r3, r2
 800efae:	d100      	bne.n	800efb2 <memset+0xa>
 800efb0:	4770      	bx	lr
 800efb2:	f803 1b01 	strb.w	r1, [r3], #1
 800efb6:	e7f9      	b.n	800efac <memset+0x4>

0800efb8 <_free_r>:
 800efb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800efba:	2900      	cmp	r1, #0
 800efbc:	d044      	beq.n	800f048 <_free_r+0x90>
 800efbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800efc2:	9001      	str	r0, [sp, #4]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	f1a1 0404 	sub.w	r4, r1, #4
 800efca:	bfb8      	it	lt
 800efcc:	18e4      	addlt	r4, r4, r3
 800efce:	f000 f94d 	bl	800f26c <__malloc_lock>
 800efd2:	4a1e      	ldr	r2, [pc, #120]	; (800f04c <_free_r+0x94>)
 800efd4:	9801      	ldr	r0, [sp, #4]
 800efd6:	6813      	ldr	r3, [r2, #0]
 800efd8:	b933      	cbnz	r3, 800efe8 <_free_r+0x30>
 800efda:	6063      	str	r3, [r4, #4]
 800efdc:	6014      	str	r4, [r2, #0]
 800efde:	b003      	add	sp, #12
 800efe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800efe4:	f000 b948 	b.w	800f278 <__malloc_unlock>
 800efe8:	42a3      	cmp	r3, r4
 800efea:	d908      	bls.n	800effe <_free_r+0x46>
 800efec:	6825      	ldr	r5, [r4, #0]
 800efee:	1961      	adds	r1, r4, r5
 800eff0:	428b      	cmp	r3, r1
 800eff2:	bf01      	itttt	eq
 800eff4:	6819      	ldreq	r1, [r3, #0]
 800eff6:	685b      	ldreq	r3, [r3, #4]
 800eff8:	1949      	addeq	r1, r1, r5
 800effa:	6021      	streq	r1, [r4, #0]
 800effc:	e7ed      	b.n	800efda <_free_r+0x22>
 800effe:	461a      	mov	r2, r3
 800f000:	685b      	ldr	r3, [r3, #4]
 800f002:	b10b      	cbz	r3, 800f008 <_free_r+0x50>
 800f004:	42a3      	cmp	r3, r4
 800f006:	d9fa      	bls.n	800effe <_free_r+0x46>
 800f008:	6811      	ldr	r1, [r2, #0]
 800f00a:	1855      	adds	r5, r2, r1
 800f00c:	42a5      	cmp	r5, r4
 800f00e:	d10b      	bne.n	800f028 <_free_r+0x70>
 800f010:	6824      	ldr	r4, [r4, #0]
 800f012:	4421      	add	r1, r4
 800f014:	1854      	adds	r4, r2, r1
 800f016:	42a3      	cmp	r3, r4
 800f018:	6011      	str	r1, [r2, #0]
 800f01a:	d1e0      	bne.n	800efde <_free_r+0x26>
 800f01c:	681c      	ldr	r4, [r3, #0]
 800f01e:	685b      	ldr	r3, [r3, #4]
 800f020:	6053      	str	r3, [r2, #4]
 800f022:	4421      	add	r1, r4
 800f024:	6011      	str	r1, [r2, #0]
 800f026:	e7da      	b.n	800efde <_free_r+0x26>
 800f028:	d902      	bls.n	800f030 <_free_r+0x78>
 800f02a:	230c      	movs	r3, #12
 800f02c:	6003      	str	r3, [r0, #0]
 800f02e:	e7d6      	b.n	800efde <_free_r+0x26>
 800f030:	6825      	ldr	r5, [r4, #0]
 800f032:	1961      	adds	r1, r4, r5
 800f034:	428b      	cmp	r3, r1
 800f036:	bf04      	itt	eq
 800f038:	6819      	ldreq	r1, [r3, #0]
 800f03a:	685b      	ldreq	r3, [r3, #4]
 800f03c:	6063      	str	r3, [r4, #4]
 800f03e:	bf04      	itt	eq
 800f040:	1949      	addeq	r1, r1, r5
 800f042:	6021      	streq	r1, [r4, #0]
 800f044:	6054      	str	r4, [r2, #4]
 800f046:	e7ca      	b.n	800efde <_free_r+0x26>
 800f048:	b003      	add	sp, #12
 800f04a:	bd30      	pop	{r4, r5, pc}
 800f04c:	20007060 	.word	0x20007060

0800f050 <sbrk_aligned>:
 800f050:	b570      	push	{r4, r5, r6, lr}
 800f052:	4e0e      	ldr	r6, [pc, #56]	; (800f08c <sbrk_aligned+0x3c>)
 800f054:	460c      	mov	r4, r1
 800f056:	6831      	ldr	r1, [r6, #0]
 800f058:	4605      	mov	r5, r0
 800f05a:	b911      	cbnz	r1, 800f062 <sbrk_aligned+0x12>
 800f05c:	f000 f8f6 	bl	800f24c <_sbrk_r>
 800f060:	6030      	str	r0, [r6, #0]
 800f062:	4621      	mov	r1, r4
 800f064:	4628      	mov	r0, r5
 800f066:	f000 f8f1 	bl	800f24c <_sbrk_r>
 800f06a:	1c43      	adds	r3, r0, #1
 800f06c:	d00a      	beq.n	800f084 <sbrk_aligned+0x34>
 800f06e:	1cc4      	adds	r4, r0, #3
 800f070:	f024 0403 	bic.w	r4, r4, #3
 800f074:	42a0      	cmp	r0, r4
 800f076:	d007      	beq.n	800f088 <sbrk_aligned+0x38>
 800f078:	1a21      	subs	r1, r4, r0
 800f07a:	4628      	mov	r0, r5
 800f07c:	f000 f8e6 	bl	800f24c <_sbrk_r>
 800f080:	3001      	adds	r0, #1
 800f082:	d101      	bne.n	800f088 <sbrk_aligned+0x38>
 800f084:	f04f 34ff 	mov.w	r4, #4294967295
 800f088:	4620      	mov	r0, r4
 800f08a:	bd70      	pop	{r4, r5, r6, pc}
 800f08c:	20007064 	.word	0x20007064

0800f090 <_malloc_r>:
 800f090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f094:	1ccd      	adds	r5, r1, #3
 800f096:	f025 0503 	bic.w	r5, r5, #3
 800f09a:	3508      	adds	r5, #8
 800f09c:	2d0c      	cmp	r5, #12
 800f09e:	bf38      	it	cc
 800f0a0:	250c      	movcc	r5, #12
 800f0a2:	2d00      	cmp	r5, #0
 800f0a4:	4607      	mov	r7, r0
 800f0a6:	db01      	blt.n	800f0ac <_malloc_r+0x1c>
 800f0a8:	42a9      	cmp	r1, r5
 800f0aa:	d905      	bls.n	800f0b8 <_malloc_r+0x28>
 800f0ac:	230c      	movs	r3, #12
 800f0ae:	603b      	str	r3, [r7, #0]
 800f0b0:	2600      	movs	r6, #0
 800f0b2:	4630      	mov	r0, r6
 800f0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0b8:	4e2e      	ldr	r6, [pc, #184]	; (800f174 <_malloc_r+0xe4>)
 800f0ba:	f000 f8d7 	bl	800f26c <__malloc_lock>
 800f0be:	6833      	ldr	r3, [r6, #0]
 800f0c0:	461c      	mov	r4, r3
 800f0c2:	bb34      	cbnz	r4, 800f112 <_malloc_r+0x82>
 800f0c4:	4629      	mov	r1, r5
 800f0c6:	4638      	mov	r0, r7
 800f0c8:	f7ff ffc2 	bl	800f050 <sbrk_aligned>
 800f0cc:	1c43      	adds	r3, r0, #1
 800f0ce:	4604      	mov	r4, r0
 800f0d0:	d14d      	bne.n	800f16e <_malloc_r+0xde>
 800f0d2:	6834      	ldr	r4, [r6, #0]
 800f0d4:	4626      	mov	r6, r4
 800f0d6:	2e00      	cmp	r6, #0
 800f0d8:	d140      	bne.n	800f15c <_malloc_r+0xcc>
 800f0da:	6823      	ldr	r3, [r4, #0]
 800f0dc:	4631      	mov	r1, r6
 800f0de:	4638      	mov	r0, r7
 800f0e0:	eb04 0803 	add.w	r8, r4, r3
 800f0e4:	f000 f8b2 	bl	800f24c <_sbrk_r>
 800f0e8:	4580      	cmp	r8, r0
 800f0ea:	d13a      	bne.n	800f162 <_malloc_r+0xd2>
 800f0ec:	6821      	ldr	r1, [r4, #0]
 800f0ee:	3503      	adds	r5, #3
 800f0f0:	1a6d      	subs	r5, r5, r1
 800f0f2:	f025 0503 	bic.w	r5, r5, #3
 800f0f6:	3508      	adds	r5, #8
 800f0f8:	2d0c      	cmp	r5, #12
 800f0fa:	bf38      	it	cc
 800f0fc:	250c      	movcc	r5, #12
 800f0fe:	4629      	mov	r1, r5
 800f100:	4638      	mov	r0, r7
 800f102:	f7ff ffa5 	bl	800f050 <sbrk_aligned>
 800f106:	3001      	adds	r0, #1
 800f108:	d02b      	beq.n	800f162 <_malloc_r+0xd2>
 800f10a:	6823      	ldr	r3, [r4, #0]
 800f10c:	442b      	add	r3, r5
 800f10e:	6023      	str	r3, [r4, #0]
 800f110:	e00e      	b.n	800f130 <_malloc_r+0xa0>
 800f112:	6822      	ldr	r2, [r4, #0]
 800f114:	1b52      	subs	r2, r2, r5
 800f116:	d41e      	bmi.n	800f156 <_malloc_r+0xc6>
 800f118:	2a0b      	cmp	r2, #11
 800f11a:	d916      	bls.n	800f14a <_malloc_r+0xba>
 800f11c:	1961      	adds	r1, r4, r5
 800f11e:	42a3      	cmp	r3, r4
 800f120:	6025      	str	r5, [r4, #0]
 800f122:	bf18      	it	ne
 800f124:	6059      	strne	r1, [r3, #4]
 800f126:	6863      	ldr	r3, [r4, #4]
 800f128:	bf08      	it	eq
 800f12a:	6031      	streq	r1, [r6, #0]
 800f12c:	5162      	str	r2, [r4, r5]
 800f12e:	604b      	str	r3, [r1, #4]
 800f130:	4638      	mov	r0, r7
 800f132:	f104 060b 	add.w	r6, r4, #11
 800f136:	f000 f89f 	bl	800f278 <__malloc_unlock>
 800f13a:	f026 0607 	bic.w	r6, r6, #7
 800f13e:	1d23      	adds	r3, r4, #4
 800f140:	1af2      	subs	r2, r6, r3
 800f142:	d0b6      	beq.n	800f0b2 <_malloc_r+0x22>
 800f144:	1b9b      	subs	r3, r3, r6
 800f146:	50a3      	str	r3, [r4, r2]
 800f148:	e7b3      	b.n	800f0b2 <_malloc_r+0x22>
 800f14a:	6862      	ldr	r2, [r4, #4]
 800f14c:	42a3      	cmp	r3, r4
 800f14e:	bf0c      	ite	eq
 800f150:	6032      	streq	r2, [r6, #0]
 800f152:	605a      	strne	r2, [r3, #4]
 800f154:	e7ec      	b.n	800f130 <_malloc_r+0xa0>
 800f156:	4623      	mov	r3, r4
 800f158:	6864      	ldr	r4, [r4, #4]
 800f15a:	e7b2      	b.n	800f0c2 <_malloc_r+0x32>
 800f15c:	4634      	mov	r4, r6
 800f15e:	6876      	ldr	r6, [r6, #4]
 800f160:	e7b9      	b.n	800f0d6 <_malloc_r+0x46>
 800f162:	230c      	movs	r3, #12
 800f164:	603b      	str	r3, [r7, #0]
 800f166:	4638      	mov	r0, r7
 800f168:	f000 f886 	bl	800f278 <__malloc_unlock>
 800f16c:	e7a1      	b.n	800f0b2 <_malloc_r+0x22>
 800f16e:	6025      	str	r5, [r4, #0]
 800f170:	e7de      	b.n	800f130 <_malloc_r+0xa0>
 800f172:	bf00      	nop
 800f174:	20007060 	.word	0x20007060

0800f178 <cleanup_glue>:
 800f178:	b538      	push	{r3, r4, r5, lr}
 800f17a:	460c      	mov	r4, r1
 800f17c:	6809      	ldr	r1, [r1, #0]
 800f17e:	4605      	mov	r5, r0
 800f180:	b109      	cbz	r1, 800f186 <cleanup_glue+0xe>
 800f182:	f7ff fff9 	bl	800f178 <cleanup_glue>
 800f186:	4621      	mov	r1, r4
 800f188:	4628      	mov	r0, r5
 800f18a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f18e:	f7ff bf13 	b.w	800efb8 <_free_r>
	...

0800f194 <_reclaim_reent>:
 800f194:	4b2c      	ldr	r3, [pc, #176]	; (800f248 <_reclaim_reent+0xb4>)
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	4283      	cmp	r3, r0
 800f19a:	b570      	push	{r4, r5, r6, lr}
 800f19c:	4604      	mov	r4, r0
 800f19e:	d051      	beq.n	800f244 <_reclaim_reent+0xb0>
 800f1a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f1a2:	b143      	cbz	r3, 800f1b6 <_reclaim_reent+0x22>
 800f1a4:	68db      	ldr	r3, [r3, #12]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d14a      	bne.n	800f240 <_reclaim_reent+0xac>
 800f1aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1ac:	6819      	ldr	r1, [r3, #0]
 800f1ae:	b111      	cbz	r1, 800f1b6 <_reclaim_reent+0x22>
 800f1b0:	4620      	mov	r0, r4
 800f1b2:	f7ff ff01 	bl	800efb8 <_free_r>
 800f1b6:	6961      	ldr	r1, [r4, #20]
 800f1b8:	b111      	cbz	r1, 800f1c0 <_reclaim_reent+0x2c>
 800f1ba:	4620      	mov	r0, r4
 800f1bc:	f7ff fefc 	bl	800efb8 <_free_r>
 800f1c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f1c2:	b111      	cbz	r1, 800f1ca <_reclaim_reent+0x36>
 800f1c4:	4620      	mov	r0, r4
 800f1c6:	f7ff fef7 	bl	800efb8 <_free_r>
 800f1ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f1cc:	b111      	cbz	r1, 800f1d4 <_reclaim_reent+0x40>
 800f1ce:	4620      	mov	r0, r4
 800f1d0:	f7ff fef2 	bl	800efb8 <_free_r>
 800f1d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f1d6:	b111      	cbz	r1, 800f1de <_reclaim_reent+0x4a>
 800f1d8:	4620      	mov	r0, r4
 800f1da:	f7ff feed 	bl	800efb8 <_free_r>
 800f1de:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f1e0:	b111      	cbz	r1, 800f1e8 <_reclaim_reent+0x54>
 800f1e2:	4620      	mov	r0, r4
 800f1e4:	f7ff fee8 	bl	800efb8 <_free_r>
 800f1e8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f1ea:	b111      	cbz	r1, 800f1f2 <_reclaim_reent+0x5e>
 800f1ec:	4620      	mov	r0, r4
 800f1ee:	f7ff fee3 	bl	800efb8 <_free_r>
 800f1f2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f1f4:	b111      	cbz	r1, 800f1fc <_reclaim_reent+0x68>
 800f1f6:	4620      	mov	r0, r4
 800f1f8:	f7ff fede 	bl	800efb8 <_free_r>
 800f1fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f1fe:	b111      	cbz	r1, 800f206 <_reclaim_reent+0x72>
 800f200:	4620      	mov	r0, r4
 800f202:	f7ff fed9 	bl	800efb8 <_free_r>
 800f206:	69a3      	ldr	r3, [r4, #24]
 800f208:	b1e3      	cbz	r3, 800f244 <_reclaim_reent+0xb0>
 800f20a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f20c:	4620      	mov	r0, r4
 800f20e:	4798      	blx	r3
 800f210:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f212:	b1b9      	cbz	r1, 800f244 <_reclaim_reent+0xb0>
 800f214:	4620      	mov	r0, r4
 800f216:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f21a:	f7ff bfad 	b.w	800f178 <cleanup_glue>
 800f21e:	5949      	ldr	r1, [r1, r5]
 800f220:	b941      	cbnz	r1, 800f234 <_reclaim_reent+0xa0>
 800f222:	3504      	adds	r5, #4
 800f224:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f226:	2d80      	cmp	r5, #128	; 0x80
 800f228:	68d9      	ldr	r1, [r3, #12]
 800f22a:	d1f8      	bne.n	800f21e <_reclaim_reent+0x8a>
 800f22c:	4620      	mov	r0, r4
 800f22e:	f7ff fec3 	bl	800efb8 <_free_r>
 800f232:	e7ba      	b.n	800f1aa <_reclaim_reent+0x16>
 800f234:	680e      	ldr	r6, [r1, #0]
 800f236:	4620      	mov	r0, r4
 800f238:	f7ff febe 	bl	800efb8 <_free_r>
 800f23c:	4631      	mov	r1, r6
 800f23e:	e7ef      	b.n	800f220 <_reclaim_reent+0x8c>
 800f240:	2500      	movs	r5, #0
 800f242:	e7ef      	b.n	800f224 <_reclaim_reent+0x90>
 800f244:	bd70      	pop	{r4, r5, r6, pc}
 800f246:	bf00      	nop
 800f248:	20000110 	.word	0x20000110

0800f24c <_sbrk_r>:
 800f24c:	b538      	push	{r3, r4, r5, lr}
 800f24e:	4d06      	ldr	r5, [pc, #24]	; (800f268 <_sbrk_r+0x1c>)
 800f250:	2300      	movs	r3, #0
 800f252:	4604      	mov	r4, r0
 800f254:	4608      	mov	r0, r1
 800f256:	602b      	str	r3, [r5, #0]
 800f258:	f7f2 fa9c 	bl	8001794 <_sbrk>
 800f25c:	1c43      	adds	r3, r0, #1
 800f25e:	d102      	bne.n	800f266 <_sbrk_r+0x1a>
 800f260:	682b      	ldr	r3, [r5, #0]
 800f262:	b103      	cbz	r3, 800f266 <_sbrk_r+0x1a>
 800f264:	6023      	str	r3, [r4, #0]
 800f266:	bd38      	pop	{r3, r4, r5, pc}
 800f268:	20007068 	.word	0x20007068

0800f26c <__malloc_lock>:
 800f26c:	4801      	ldr	r0, [pc, #4]	; (800f274 <__malloc_lock+0x8>)
 800f26e:	f7ff be7b 	b.w	800ef68 <__retarget_lock_acquire_recursive>
 800f272:	bf00      	nop
 800f274:	2000705c 	.word	0x2000705c

0800f278 <__malloc_unlock>:
 800f278:	4801      	ldr	r0, [pc, #4]	; (800f280 <__malloc_unlock+0x8>)
 800f27a:	f7ff be76 	b.w	800ef6a <__retarget_lock_release_recursive>
 800f27e:	bf00      	nop
 800f280:	2000705c 	.word	0x2000705c

0800f284 <_init>:
 800f284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f286:	bf00      	nop
 800f288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f28a:	bc08      	pop	{r3}
 800f28c:	469e      	mov	lr, r3
 800f28e:	4770      	bx	lr

0800f290 <_fini>:
 800f290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f292:	bf00      	nop
 800f294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f296:	bc08      	pop	{r3}
 800f298:	469e      	mov	lr, r3
 800f29a:	4770      	bx	lr


MCU_HiL_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c6c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08011e6c  08011e6c  00021e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012060  08012060  00030334  2**0
                  CONTENTS
  4 .ARM          00000008  08012060  08012060  00022060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012068  08012068  00030334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012068  08012068  00022068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801206c  0801206c  0002206c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08012070  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001f4  08012264  000301f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000294  08012304  00030294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00006f50  20000334  080123a4  00030334  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20007284  080123a4  00037284  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003729c  00000000  00000000  00030362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006bb5  00000000  00000000  000675fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002848  00000000  00000000  0006e1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002570  00000000  00000000  00070a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000abff  00000000  00000000  00072f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00033d2a  00000000  00000000  0007db6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011a35f  00000000  00000000  000b1899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001cbbf8  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000ad4c  00000000  00000000  001cbc48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000334 	.word	0x20000334
 800021c:	00000000 	.word	0x00000000
 8000220:	08011e54 	.word	0x08011e54

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000338 	.word	0x20000338
 800023c:	08011e54 	.word	0x08011e54

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000548:	f3bf 8f4f 	dsb	sy
}
 800054c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800054e:	f3bf 8f6f 	isb	sy
}
 8000552:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000554:	4b0d      	ldr	r3, [pc, #52]	; (800058c <SCB_EnableICache+0x48>)
 8000556:	2200      	movs	r2, #0
 8000558:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800055c:	f3bf 8f4f 	dsb	sy
}
 8000560:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000562:	f3bf 8f6f 	isb	sy
}
 8000566:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <SCB_EnableICache+0x48>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	4a07      	ldr	r2, [pc, #28]	; (800058c <SCB_EnableICache+0x48>)
 800056e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000572:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000574:	f3bf 8f4f 	dsb	sy
}
 8000578:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800057a:	f3bf 8f6f 	isb	sy
}
 800057e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	e000ed00 	.word	0xe000ed00

08000590 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000596:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <SCB_EnableDCache+0x84>)
 8000598:	2200      	movs	r2, #0
 800059a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800059e:	f3bf 8f4f 	dsb	sy
}
 80005a2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005a4:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <SCB_EnableDCache+0x84>)
 80005a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005aa:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	0b5b      	lsrs	r3, r3, #13
 80005b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005b4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	08db      	lsrs	r3, r3, #3
 80005ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005be:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	015a      	lsls	r2, r3, #5
 80005c4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005c8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005ca:	68ba      	ldr	r2, [r7, #8]
 80005cc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005ce:	4911      	ldr	r1, [pc, #68]	; (8000614 <SCB_EnableDCache+0x84>)
 80005d0:	4313      	orrs	r3, r2
 80005d2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	1e5a      	subs	r2, r3, #1
 80005da:	60ba      	str	r2, [r7, #8]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d1ef      	bne.n	80005c0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	1e5a      	subs	r2, r3, #1
 80005e4:	60fa      	str	r2, [r7, #12]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d1e5      	bne.n	80005b6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005ea:	f3bf 8f4f 	dsb	sy
}
 80005ee:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <SCB_EnableDCache+0x84>)
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	4a07      	ldr	r2, [pc, #28]	; (8000614 <SCB_EnableDCache+0x84>)
 80005f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005fa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005fc:	f3bf 8f4f 	dsb	sy
}
 8000600:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000602:	f3bf 8f6f 	isb	sy
}
 8000606:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <HAL_SPI_RxCpltCallback>:
void StartTask_SHT20(void *argument);
void StartTask_74HC595D(void *argument);

/* USER CODE BEGIN PFP */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	//printf("hello from spi complete\n\r");
	//printf("error %ld\n\r", hspi->ErrorCode);
	osSemaphoreRelease(LightOnSemHandle);
 8000620:	4b04      	ldr	r3, [pc, #16]	; (8000634 <HAL_SPI_RxCpltCallback+0x1c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4618      	mov	r0, r3
 8000626:	f00d f9ef 	bl	800da08 <osSemaphoreRelease>

}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000738 	.word	0x20000738

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800063c:	f7ff ff82 	bl	8000544 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000640:	f7ff ffa6 	bl	8000590 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f001 fa1e 	bl	8001a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f886 	bl	8000758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 fb5a 	bl	8000d04 <MX_GPIO_Init>

  MX_DMA_Init();
 8000650:	f000 fb26 	bl	8000ca0 <MX_DMA_Init>

  MX_CAN1_Init();
 8000654:	f000 f8f0 	bl	8000838 <MX_CAN1_Init>
  MX_DAC_Init();
 8000658:	f000 f922 	bl	80008a0 <MX_DAC_Init>
  MX_ETH_Init();
 800065c:	f000 f94a 	bl	80008f4 <MX_ETH_Init>
  MX_I2C1_Init();
 8000660:	f000 f996 	bl	8000990 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000664:	f000 f9d4 	bl	8000a10 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000668:	f000 fa0c 	bl	8000a84 <MX_SPI3_Init>
  MX_TIM1_Init();
 800066c:	f000 fa44 	bl	8000af8 <MX_TIM1_Init>
  MX_UART7_Init();
 8000670:	f000 fae6 	bl	8000c40 <MX_UART7_Init>
  //	MX_DMA_Init(); needs to be before the Init of all other peripherals except GPIO.
  //	However, MxCube auto generates it to be after the peripherals.
  //	So whenever a change has been done the .ioc-file and code has been generated, the MX_DMA_Init(); needs to be moved.

  // ************************************************
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000674:	2100      	movs	r1, #0
 8000676:	4823      	ldr	r0, [pc, #140]	; (8000704 <main+0xcc>)
 8000678:	f001 fc5e 	bl	8001f38 <HAL_DAC_Start>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart7, uart_rx_buffer, HIL_UART_BUFFER_SIZE);
 800067c:	2280      	movs	r2, #128	; 0x80
 800067e:	4922      	ldr	r1, [pc, #136]	; (8000708 <main+0xd0>)
 8000680:	4822      	ldr	r0, [pc, #136]	; (800070c <main+0xd4>)
 8000682:	f008 ffe3 	bl	800964c <HAL_UARTEx_ReceiveToIdle_DMA>

  initialise_monitor_handles();		// For use with shift register emulation
 8000686:	f001 f983 	bl	8001990 <initialise_monitor_handles>
  memset(temp_light_state, 0, sizeof(temp_light_state));
 800068a:	2203      	movs	r2, #3
 800068c:	2100      	movs	r1, #0
 800068e:	4820      	ldr	r0, [pc, #128]	; (8000710 <main+0xd8>)
 8000690:	f011 fa72 	bl	8011b78 <memset>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000694:	f00c ff78 	bl	800d588 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of LightOnSem */
  LightOnSemHandle = osSemaphoreNew(1, 1, &LightOnSem_attributes);
 8000698:	4a1e      	ldr	r2, [pc, #120]	; (8000714 <main+0xdc>)
 800069a:	2101      	movs	r1, #1
 800069c:	2001      	movs	r0, #1
 800069e:	f00d f8b1 	bl	800d804 <osSemaphoreNew>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a1c      	ldr	r2, [pc, #112]	; (8000718 <main+0xe0>)
 80006a6:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  HiL_Init_MSGQ();
 80006a8:	f00a fc70 	bl	800af8c <HiL_Init_MSGQ>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006ac:	4a1b      	ldr	r2, [pc, #108]	; (800071c <main+0xe4>)
 80006ae:	2100      	movs	r1, #0
 80006b0:	481b      	ldr	r0, [pc, #108]	; (8000720 <main+0xe8>)
 80006b2:	f00c ffd3 	bl	800d65c <osThreadNew>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4a1a      	ldr	r2, [pc, #104]	; (8000724 <main+0xec>)
 80006ba:	6013      	str	r3, [r2, #0]

  /* creation of Task_gateway */
  Task_gatewayHandle = osThreadNew(StartTask_gateway, NULL, &Task_gateway_attributes);
 80006bc:	4a1a      	ldr	r2, [pc, #104]	; (8000728 <main+0xf0>)
 80006be:	2100      	movs	r1, #0
 80006c0:	481a      	ldr	r0, [pc, #104]	; (800072c <main+0xf4>)
 80006c2:	f00c ffcb 	bl	800d65c <osThreadNew>
 80006c6:	4603      	mov	r3, r0
 80006c8:	4a19      	ldr	r2, [pc, #100]	; (8000730 <main+0xf8>)
 80006ca:	6013      	str	r3, [r2, #0]

  /* creation of Task_controller */
  Task_controllerHandle = osThreadNew(StartTask_controller, NULL, &Task_controller_attributes);
 80006cc:	4a19      	ldr	r2, [pc, #100]	; (8000734 <main+0xfc>)
 80006ce:	2100      	movs	r1, #0
 80006d0:	4819      	ldr	r0, [pc, #100]	; (8000738 <main+0x100>)
 80006d2:	f00c ffc3 	bl	800d65c <osThreadNew>
 80006d6:	4603      	mov	r3, r0
 80006d8:	4a18      	ldr	r2, [pc, #96]	; (800073c <main+0x104>)
 80006da:	6013      	str	r3, [r2, #0]

  /* creation of Task_SHT20 */
  Task_SHT20Handle = osThreadNew(StartTask_SHT20, NULL, &Task_SHT20_attributes);
 80006dc:	4a18      	ldr	r2, [pc, #96]	; (8000740 <main+0x108>)
 80006de:	2100      	movs	r1, #0
 80006e0:	4818      	ldr	r0, [pc, #96]	; (8000744 <main+0x10c>)
 80006e2:	f00c ffbb 	bl	800d65c <osThreadNew>
 80006e6:	4603      	mov	r3, r0
 80006e8:	4a17      	ldr	r2, [pc, #92]	; (8000748 <main+0x110>)
 80006ea:	6013      	str	r3, [r2, #0]

  /* creation of Task_74HC595D */
  Task_74HC595DHandle = osThreadNew(StartTask_74HC595D, NULL, &Task_74HC595D_attributes);
 80006ec:	4a17      	ldr	r2, [pc, #92]	; (800074c <main+0x114>)
 80006ee:	2100      	movs	r1, #0
 80006f0:	4817      	ldr	r0, [pc, #92]	; (8000750 <main+0x118>)
 80006f2:	f00c ffb3 	bl	800d65c <osThreadNew>
 80006f6:	4603      	mov	r3, r0
 80006f8:	4a16      	ldr	r2, [pc, #88]	; (8000754 <main+0x11c>)
 80006fa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006fc:	f00c ff78 	bl	800d5f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000700:	e7fe      	b.n	8000700 <main+0xc8>
 8000702:	bf00      	nop
 8000704:	200003b0 	.word	0x200003b0
 8000708:	20000798 	.word	0x20000798
 800070c:	2000063c 	.word	0x2000063c
 8000710:	20000794 	.word	0x20000794
 8000714:	08011fd0 	.word	0x08011fd0
 8000718:	20000738 	.word	0x20000738
 800071c:	08011f1c 	.word	0x08011f1c
 8000720:	08000f91 	.word	0x08000f91
 8000724:	20000724 	.word	0x20000724
 8000728:	08011f40 	.word	0x08011f40
 800072c:	08000fa5 	.word	0x08000fa5
 8000730:	20000728 	.word	0x20000728
 8000734:	08011f64 	.word	0x08011f64
 8000738:	08000fb5 	.word	0x08000fb5
 800073c:	2000072c 	.word	0x2000072c
 8000740:	08011f88 	.word	0x08011f88
 8000744:	0800101d 	.word	0x0800101d
 8000748:	20000730 	.word	0x20000730
 800074c:	08011fac 	.word	0x08011fac
 8000750:	0800102d 	.word	0x0800102d
 8000754:	20000734 	.word	0x20000734

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b094      	sub	sp, #80	; 0x50
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	2234      	movs	r2, #52	; 0x34
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f011 fa06 	bl	8011b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076c:	f107 0308 	add.w	r3, r7, #8
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800077c:	4b2c      	ldr	r3, [pc, #176]	; (8000830 <SystemClock_Config+0xd8>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000780:	4a2b      	ldr	r2, [pc, #172]	; (8000830 <SystemClock_Config+0xd8>)
 8000782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000786:	6413      	str	r3, [r2, #64]	; 0x40
 8000788:	4b29      	ldr	r3, [pc, #164]	; (8000830 <SystemClock_Config+0xd8>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000794:	4b27      	ldr	r3, [pc, #156]	; (8000834 <SystemClock_Config+0xdc>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800079c:	4a25      	ldr	r2, [pc, #148]	; (8000834 <SystemClock_Config+0xdc>)
 800079e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	4b23      	ldr	r3, [pc, #140]	; (8000834 <SystemClock_Config+0xdc>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b0:	2301      	movs	r3, #1
 80007b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ba:	2302      	movs	r3, #2
 80007bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007c4:	2304      	movs	r3, #4
 80007c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007c8:	2360      	movs	r3, #96	; 0x60
 80007ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007cc:	2302      	movs	r3, #2
 80007ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007d0:	2304      	movs	r3, #4
 80007d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4618      	mov	r0, r3
 80007de:	f004 fa1d 	bl	8004c1c <HAL_RCC_OscConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007e8:	f000 fc62 	bl	80010b0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007ec:	f004 f9c6 	bl	8004b7c <HAL_PWREx_EnableOverDrive>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80007f6:	f000 fc5b 	bl	80010b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fa:	230f      	movs	r3, #15
 80007fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fe:	2302      	movs	r3, #2
 8000800:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000810:	f107 0308 	add.w	r3, r7, #8
 8000814:	2103      	movs	r1, #3
 8000816:	4618      	mov	r0, r3
 8000818:	f004 fcae 	bl	8005178 <HAL_RCC_ClockConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000822:	f000 fc45 	bl	80010b0 <Error_Handler>
  }
}
 8000826:	bf00      	nop
 8000828:	3750      	adds	r7, #80	; 0x50
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800
 8000834:	40007000 	.word	0x40007000

08000838 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800083c:	4b16      	ldr	r3, [pc, #88]	; (8000898 <MX_CAN1_Init+0x60>)
 800083e:	4a17      	ldr	r2, [pc, #92]	; (800089c <MX_CAN1_Init+0x64>)
 8000840:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <MX_CAN1_Init+0x60>)
 8000844:	2210      	movs	r2, #16
 8000846:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000848:	4b13      	ldr	r3, [pc, #76]	; (8000898 <MX_CAN1_Init+0x60>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <MX_CAN1_Init+0x60>)
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000854:	4b10      	ldr	r3, [pc, #64]	; (8000898 <MX_CAN1_Init+0x60>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_CAN1_Init+0x60>)
 800085c:	2200      	movs	r2, #0
 800085e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000860:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <MX_CAN1_Init+0x60>)
 8000862:	2200      	movs	r2, #0
 8000864:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_CAN1_Init+0x60>)
 8000868:	2200      	movs	r2, #0
 800086a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800086c:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <MX_CAN1_Init+0x60>)
 800086e:	2200      	movs	r2, #0
 8000870:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_CAN1_Init+0x60>)
 8000874:	2200      	movs	r2, #0
 8000876:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <MX_CAN1_Init+0x60>)
 800087a:	2200      	movs	r2, #0
 800087c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_CAN1_Init+0x60>)
 8000880:	2200      	movs	r2, #0
 8000882:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <MX_CAN1_Init+0x60>)
 8000886:	f001 f957 	bl	8001b38 <HAL_CAN_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000890:	f000 fc0e 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000388 	.word	0x20000388
 800089c:	40006400 	.word	0x40006400

080008a0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008a6:	463b      	mov	r3, r7
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_DAC_Init+0x4c>)
 80008b0:	4a0f      	ldr	r2, [pc, #60]	; (80008f0 <MX_DAC_Init+0x50>)
 80008b2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80008b4:	480d      	ldr	r0, [pc, #52]	; (80008ec <MX_DAC_Init+0x4c>)
 80008b6:	f001 fb1d 	bl	8001ef4 <HAL_DAC_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80008c0:	f000 fbf6 	bl	80010b0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008cc:	463b      	mov	r3, r7
 80008ce:	2200      	movs	r2, #0
 80008d0:	4619      	mov	r1, r3
 80008d2:	4806      	ldr	r0, [pc, #24]	; (80008ec <MX_DAC_Init+0x4c>)
 80008d4:	f001 fc0b 	bl	80020ee <HAL_DAC_ConfigChannel>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80008de:	f000 fbe7 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200003b0 	.word	0x200003b0
 80008f0:	40007400 	.word	0x40007400

080008f4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008f8:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <MX_ETH_Init+0x84>)
 80008fa:	4a20      	ldr	r2, [pc, #128]	; (800097c <MX_ETH_Init+0x88>)
 80008fc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008fe:	4b20      	ldr	r3, [pc, #128]	; (8000980 <MX_ETH_Init+0x8c>)
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000904:	4b1e      	ldr	r3, [pc, #120]	; (8000980 <MX_ETH_Init+0x8c>)
 8000906:	2280      	movs	r2, #128	; 0x80
 8000908:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800090a:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <MX_ETH_Init+0x8c>)
 800090c:	22e1      	movs	r2, #225	; 0xe1
 800090e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000910:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <MX_ETH_Init+0x8c>)
 8000912:	2200      	movs	r2, #0
 8000914:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000916:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <MX_ETH_Init+0x8c>)
 8000918:	2200      	movs	r2, #0
 800091a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800091c:	4b18      	ldr	r3, [pc, #96]	; (8000980 <MX_ETH_Init+0x8c>)
 800091e:	2200      	movs	r2, #0
 8000920:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <MX_ETH_Init+0x84>)
 8000924:	4a16      	ldr	r2, [pc, #88]	; (8000980 <MX_ETH_Init+0x8c>)
 8000926:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <MX_ETH_Init+0x84>)
 800092a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800092e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_ETH_Init+0x84>)
 8000932:	4a14      	ldr	r2, [pc, #80]	; (8000984 <MX_ETH_Init+0x90>)
 8000934:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <MX_ETH_Init+0x84>)
 8000938:	4a13      	ldr	r2, [pc, #76]	; (8000988 <MX_ETH_Init+0x94>)
 800093a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800093c:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_ETH_Init+0x84>)
 800093e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000942:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000944:	480c      	ldr	r0, [pc, #48]	; (8000978 <MX_ETH_Init+0x84>)
 8000946:	f002 f835 	bl	80029b4 <HAL_ETH_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000950:	f000 fbae 	bl	80010b0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000954:	2238      	movs	r2, #56	; 0x38
 8000956:	2100      	movs	r1, #0
 8000958:	480c      	ldr	r0, [pc, #48]	; (800098c <MX_ETH_Init+0x98>)
 800095a:	f011 f90d 	bl	8011b78 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_ETH_Init+0x98>)
 8000960:	2221      	movs	r2, #33	; 0x21
 8000962:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_ETH_Init+0x98>)
 8000966:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800096a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800096c:	4b07      	ldr	r3, [pc, #28]	; (800098c <MX_ETH_Init+0x98>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200003c4 	.word	0x200003c4
 800097c:	40028000 	.word	0x40028000
 8000980:	20000818 	.word	0x20000818
 8000984:	20000294 	.word	0x20000294
 8000988:	200001f4 	.word	0x200001f4
 800098c:	20000350 	.word	0x20000350

08000990 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000994:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <MX_I2C1_Init+0x74>)
 8000996:	4a1c      	ldr	r2, [pc, #112]	; (8000a08 <MX_I2C1_Init+0x78>)
 8000998:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800099a:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <MX_I2C1_Init+0x74>)
 800099c:	4a1b      	ldr	r2, [pc, #108]	; (8000a0c <MX_I2C1_Init+0x7c>)
 800099e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009a0:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <MX_I2C1_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009a6:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <MX_I2C1_Init+0x74>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009ac:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <MX_I2C1_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009b2:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <MX_I2C1_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <MX_I2C1_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <MX_I2C1_Init+0x74>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <MX_I2C1_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009ca:	480e      	ldr	r0, [pc, #56]	; (8000a04 <MX_I2C1_Init+0x74>)
 80009cc:	f002 fcf6 	bl	80033bc <HAL_I2C_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009d6:	f000 fb6b 	bl	80010b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009da:	2100      	movs	r1, #0
 80009dc:	4809      	ldr	r0, [pc, #36]	; (8000a04 <MX_I2C1_Init+0x74>)
 80009de:	f002 fd7d 	bl	80034dc <HAL_I2CEx_ConfigAnalogFilter>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009e8:	f000 fb62 	bl	80010b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009ec:	2100      	movs	r1, #0
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_I2C1_Init+0x74>)
 80009f0:	f002 fdbf 	bl	8003572 <HAL_I2CEx_ConfigDigitalFilter>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009fa:	f000 fb59 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000474 	.word	0x20000474
 8000a08:	40005400 	.word	0x40005400
 8000a0c:	20303e5d 	.word	0x20303e5d

08000a10 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a14:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <MX_SPI1_Init+0x6c>)
 8000a16:	4a1a      	ldr	r2, [pc, #104]	; (8000a80 <MX_SPI1_Init+0x70>)
 8000a18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000a1a:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <MX_SPI1_Init+0x6c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000a20:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <MX_SPI1_Init+0x6c>)
 8000a22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_SPI1_Init+0x6c>)
 8000a2a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a2e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <MX_SPI1_Init+0x6c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_SPI1_Init+0x6c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <MX_SPI1_Init+0x6c>)
 8000a3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a42:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a44:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <MX_SPI1_Init+0x6c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <MX_SPI1_Init+0x6c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a50:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <MX_SPI1_Init+0x6c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <MX_SPI1_Init+0x6c>)
 8000a58:	2207      	movs	r2, #7
 8000a5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a5c:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <MX_SPI1_Init+0x6c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <MX_SPI1_Init+0x6c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a68:	4804      	ldr	r0, [pc, #16]	; (8000a7c <MX_SPI1_Init+0x6c>)
 8000a6a:	f005 fa05 	bl	8005e78 <HAL_SPI_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_SPI1_Init+0x68>
  {
    Error_Handler();
 8000a74:	f000 fb1c 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	200004c8 	.word	0x200004c8
 8000a80:	40013000 	.word	0x40013000

08000a84 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a88:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <MX_SPI3_Init+0x6c>)
 8000a8a:	4a1a      	ldr	r2, [pc, #104]	; (8000af4 <MX_SPI3_Init+0x70>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000a8e:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <MX_SPI3_Init+0x6c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000a94:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <MX_SPI3_Init+0x6c>)
 8000a96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a9a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <MX_SPI3_Init+0x6c>)
 8000a9e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000aa2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <MX_SPI3_Init+0x6c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MX_SPI3_Init+0x6c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <MX_SPI3_Init+0x6c>)
 8000ab2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ab6:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ab8:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <MX_SPI3_Init+0x6c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <MX_SPI3_Init+0x6c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <MX_SPI3_Init+0x6c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <MX_SPI3_Init+0x6c>)
 8000acc:	2207      	movs	r2, #7
 8000ace:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ad0:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <MX_SPI3_Init+0x6c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <MX_SPI3_Init+0x6c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000adc:	4804      	ldr	r0, [pc, #16]	; (8000af0 <MX_SPI3_Init+0x6c>)
 8000ade:	f005 f9cb 	bl	8005e78 <HAL_SPI_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_SPI3_Init+0x68>
  {
    Error_Handler();
 8000ae8:	f000 fae2 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	2000052c 	.word	0x2000052c
 8000af4:	40003c00 	.word	0x40003c00

08000af8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b090      	sub	sp, #64	; 0x40
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000afe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b34:	4b40      	ldr	r3, [pc, #256]	; (8000c38 <MX_TIM1_Init+0x140>)
 8000b36:	4a41      	ldr	r2, [pc, #260]	; (8000c3c <MX_TIM1_Init+0x144>)
 8000b38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b3a:	4b3f      	ldr	r3, [pc, #252]	; (8000c38 <MX_TIM1_Init+0x140>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b40:	4b3d      	ldr	r3, [pc, #244]	; (8000c38 <MX_TIM1_Init+0x140>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b46:	4b3c      	ldr	r3, [pc, #240]	; (8000c38 <MX_TIM1_Init+0x140>)
 8000b48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b4e:	4b3a      	ldr	r3, [pc, #232]	; (8000c38 <MX_TIM1_Init+0x140>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b54:	4b38      	ldr	r3, [pc, #224]	; (8000c38 <MX_TIM1_Init+0x140>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5a:	4b37      	ldr	r3, [pc, #220]	; (8000c38 <MX_TIM1_Init+0x140>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b60:	4835      	ldr	r0, [pc, #212]	; (8000c38 <MX_TIM1_Init+0x140>)
 8000b62:	f005 ffeb 	bl	8006b3c <HAL_TIM_Base_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000b6c:	f000 faa0 	bl	80010b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b74:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	482e      	ldr	r0, [pc, #184]	; (8000c38 <MX_TIM1_Init+0x140>)
 8000b7e:	f006 fe4f 	bl	8007820 <HAL_TIM_ConfigClockSource>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000b88:	f000 fa92 	bl	80010b0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000b8c:	482a      	ldr	r0, [pc, #168]	; (8000c38 <MX_TIM1_Init+0x140>)
 8000b8e:	f006 f8a5 	bl	8006cdc <HAL_TIM_IC_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000b98:	f000 fa8a 	bl	80010b0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000ba0:	2350      	movs	r3, #80	; 0x50
 8000ba2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000bb0:	f107 031c 	add.w	r3, r7, #28
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4820      	ldr	r0, [pc, #128]	; (8000c38 <MX_TIM1_Init+0x140>)
 8000bb8:	f006 fefc 	bl	80079b4 <HAL_TIM_SlaveConfigSynchro>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000bc2:	f000 fa75 	bl	80010b0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000bd6:	f107 030c 	add.w	r3, r7, #12
 8000bda:	2200      	movs	r2, #0
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4816      	ldr	r0, [pc, #88]	; (8000c38 <MX_TIM1_Init+0x140>)
 8000be0:	f006 fd81 	bl	80076e6 <HAL_TIM_IC_ConfigChannel>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000bea:	f000 fa61 	bl	80010b0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000bf6:	f107 030c 	add.w	r3, r7, #12
 8000bfa:	2204      	movs	r2, #4
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	480e      	ldr	r0, [pc, #56]	; (8000c38 <MX_TIM1_Init+0x140>)
 8000c00:	f006 fd71 	bl	80076e6 <HAL_TIM_IC_ConfigChannel>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000c0a:	f000 fa51 	bl	80010b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4806      	ldr	r0, [pc, #24]	; (8000c38 <MX_TIM1_Init+0x140>)
 8000c20:	f007 fa8a 	bl	8008138 <HAL_TIMEx_MasterConfigSynchronization>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8000c2a:	f000 fa41 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	3740      	adds	r7, #64	; 0x40
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200005f0 	.word	0x200005f0
 8000c3c:	40010000 	.word	0x40010000

08000c40 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000c44:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <MX_UART7_Init+0x58>)
 8000c46:	4a15      	ldr	r2, [pc, #84]	; (8000c9c <MX_UART7_Init+0x5c>)
 8000c48:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000c4a:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <MX_UART7_Init+0x58>)
 8000c4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c50:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <MX_UART7_Init+0x58>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <MX_UART7_Init+0x58>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <MX_UART7_Init+0x58>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <MX_UART7_Init+0x58>)
 8000c66:	220c      	movs	r2, #12
 8000c68:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <MX_UART7_Init+0x58>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c70:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <MX_UART7_Init+0x58>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <MX_UART7_Init+0x58>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <MX_UART7_Init+0x58>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000c82:	4805      	ldr	r0, [pc, #20]	; (8000c98 <MX_UART7_Init+0x58>)
 8000c84:	f007 fb04 	bl	8008290 <HAL_UART_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000c8e:	f000 fa0f 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	2000063c 	.word	0x2000063c
 8000c9c:	40007800 	.word	0x40007800

08000ca0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <MX_DMA_Init+0x60>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a15      	ldr	r2, [pc, #84]	; (8000d00 <MX_DMA_Init+0x60>)
 8000cac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <MX_DMA_Init+0x60>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <MX_DMA_Init+0x60>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a0f      	ldr	r2, [pc, #60]	; (8000d00 <MX_DMA_Init+0x60>)
 8000cc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <MX_DMA_Init+0x60>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2105      	movs	r1, #5
 8000cda:	200e      	movs	r0, #14
 8000cdc:	f001 f8e0 	bl	8001ea0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ce0:	200e      	movs	r0, #14
 8000ce2:	f001 f8f9 	bl	8001ed8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2105      	movs	r1, #5
 8000cea:	2038      	movs	r0, #56	; 0x38
 8000cec:	f001 f8d8 	bl	8001ea0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000cf0:	2038      	movs	r0, #56	; 0x38
 8000cf2:	f001 f8f1 	bl	8001ed8 <HAL_NVIC_EnableIRQ>

}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40023800 	.word	0x40023800

08000d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08e      	sub	sp, #56	; 0x38
 8000d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d1a:	4b95      	ldr	r3, [pc, #596]	; (8000f70 <MX_GPIO_Init+0x26c>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a94      	ldr	r2, [pc, #592]	; (8000f70 <MX_GPIO_Init+0x26c>)
 8000d20:	f043 0310 	orr.w	r3, r3, #16
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b92      	ldr	r3, [pc, #584]	; (8000f70 <MX_GPIO_Init+0x26c>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0310 	and.w	r3, r3, #16
 8000d2e:	623b      	str	r3, [r7, #32]
 8000d30:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d32:	4b8f      	ldr	r3, [pc, #572]	; (8000f70 <MX_GPIO_Init+0x26c>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a8e      	ldr	r2, [pc, #568]	; (8000f70 <MX_GPIO_Init+0x26c>)
 8000d38:	f043 0304 	orr.w	r3, r3, #4
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b8c      	ldr	r3, [pc, #560]	; (8000f70 <MX_GPIO_Init+0x26c>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	61fb      	str	r3, [r7, #28]
 8000d48:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d4a:	4b89      	ldr	r3, [pc, #548]	; (8000f70 <MX_GPIO_Init+0x26c>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a88      	ldr	r2, [pc, #544]	; (8000f70 <MX_GPIO_Init+0x26c>)
 8000d50:	f043 0320 	orr.w	r3, r3, #32
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b86      	ldr	r3, [pc, #536]	; (8000f70 <MX_GPIO_Init+0x26c>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0320 	and.w	r3, r3, #32
 8000d5e:	61bb      	str	r3, [r7, #24]
 8000d60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d62:	4b83      	ldr	r3, [pc, #524]	; (8000f70 <MX_GPIO_Init+0x26c>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a82      	ldr	r2, [pc, #520]	; (8000f70 <MX_GPIO_Init+0x26c>)
 8000d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b80      	ldr	r3, [pc, #512]	; (8000f70 <MX_GPIO_Init+0x26c>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b7d      	ldr	r3, [pc, #500]	; (8000f70 <MX_GPIO_Init+0x26c>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a7c      	ldr	r2, [pc, #496]	; (8000f70 <MX_GPIO_Init+0x26c>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b7a      	ldr	r3, [pc, #488]	; (8000f70 <MX_GPIO_Init+0x26c>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d92:	4b77      	ldr	r3, [pc, #476]	; (8000f70 <MX_GPIO_Init+0x26c>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a76      	ldr	r2, [pc, #472]	; (8000f70 <MX_GPIO_Init+0x26c>)
 8000d98:	f043 0302 	orr.w	r3, r3, #2
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b74      	ldr	r3, [pc, #464]	; (8000f70 <MX_GPIO_Init+0x26c>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000daa:	4b71      	ldr	r3, [pc, #452]	; (8000f70 <MX_GPIO_Init+0x26c>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a70      	ldr	r2, [pc, #448]	; (8000f70 <MX_GPIO_Init+0x26c>)
 8000db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b6e      	ldr	r3, [pc, #440]	; (8000f70 <MX_GPIO_Init+0x26c>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc2:	4b6b      	ldr	r3, [pc, #428]	; (8000f70 <MX_GPIO_Init+0x26c>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a6a      	ldr	r2, [pc, #424]	; (8000f70 <MX_GPIO_Init+0x26c>)
 8000dc8:	f043 0308 	orr.w	r3, r3, #8
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b68      	ldr	r3, [pc, #416]	; (8000f70 <MX_GPIO_Init+0x26c>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0308 	and.w	r3, r3, #8
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HiL_TL2_Car_GPIO_Port, HiL_TL2_Car_Pin, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2180      	movs	r1, #128	; 0x80
 8000dde:	4865      	ldr	r0, [pc, #404]	; (8000f74 <MX_GPIO_Init+0x270>)
 8000de0:	f002 fad2 	bl	8003388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|HiL_LIS2DW12TR_Int1_Pin|HiL_TL3_Car_Pin, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	f248 4120 	movw	r1, #33824	; 0x8420
 8000dea:	4863      	ldr	r0, [pc, #396]	; (8000f78 <MX_GPIO_Init+0x274>)
 8000dec:	f002 facc 	bl	8003388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HiL_SW5_Pin|HiL_SW8_Pin|HiL_SW6_Pin|HiL_SW7_Pin
 8000df0:	2200      	movs	r2, #0
 8000df2:	f24c 41b0 	movw	r1, #50352	; 0xc4b0
 8000df6:	4861      	ldr	r0, [pc, #388]	; (8000f7c <MX_GPIO_Init+0x278>)
 8000df8:	f002 fac6 	bl	8003388 <HAL_GPIO_WritePin>
                          |HiL_LIS2DW12TR_Int2_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HiL_button3_B_Pin|HiL_button3_A_Pin, GPIO_PIN_RESET);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	210c      	movs	r1, #12
 8000e00:	485f      	ldr	r0, [pc, #380]	; (8000f80 <MX_GPIO_Init+0x27c>)
 8000e02:	f002 fac1 	bl	8003388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HiL_TL1_Car_GPIO_Port, HiL_TL1_Car_Pin, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e0c:	485d      	ldr	r0, [pc, #372]	; (8000f84 <MX_GPIO_Init+0x280>)
 8000e0e:	f002 fabb 	bl	8003388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, HiL_TL4_Car_Pin|HiL_button3_C_Pin|HiL_button3_D_Pin|HiL_button3_center_Pin, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2174      	movs	r1, #116	; 0x74
 8000e16:	485c      	ldr	r0, [pc, #368]	; (8000f88 <MX_GPIO_Init+0x284>)
 8000e18:	f002 fab6 	bl	8003388 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HiL_Disp_Data_Instr_Pin HiL_Disp_CS_Pin */
  GPIO_InitStruct.Pin = HiL_Disp_Data_Instr_Pin|HiL_Disp_CS_Pin;
 8000e1c:	f241 0308 	movw	r3, #4104	; 0x1008
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e22:	2300      	movs	r3, #0
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4856      	ldr	r0, [pc, #344]	; (8000f8c <MX_GPIO_Init+0x288>)
 8000e32:	f002 f8e5 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_595_Reset_Pin HiL_Disp_Reset_Pin HiL_595_STCP_Pin */
  GPIO_InitStruct.Pin = HiL_595_Reset_Pin|HiL_Disp_Reset_Pin|HiL_595_STCP_Pin;
 8000e36:	f248 0305 	movw	r3, #32773	; 0x8005
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e48:	4619      	mov	r1, r3
 8000e4a:	484e      	ldr	r0, [pc, #312]	; (8000f84 <MX_GPIO_Init+0x280>)
 8000e4c:	f002 f8d8 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL2_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL2_Car_Pin;
 8000e50:	2380      	movs	r3, #128	; 0x80
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e54:	2301      	movs	r3, #1
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HiL_TL2_Car_GPIO_Port, &GPIO_InitStruct);
 8000e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e64:	4619      	mov	r1, r3
 8000e66:	4843      	ldr	r0, [pc, #268]	; (8000f74 <MX_GPIO_Init+0x270>)
 8000e68:	f002 f8ca 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_USR_LED1_Pin */
  GPIO_InitStruct.Pin = HiL_USR_LED1_Pin;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HiL_USR_LED1_GPIO_Port, &GPIO_InitStruct);
 8000e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	483e      	ldr	r0, [pc, #248]	; (8000f78 <MX_GPIO_Init+0x274>)
 8000e80:	f002 f8be 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 HiL_LIS2DW12TR_Int1_Pin HiL_TL3_Car_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|HiL_LIS2DW12TR_Int1_Pin|HiL_TL3_Car_Pin;
 8000e84:	f248 4320 	movw	r3, #33824	; 0x8420
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4836      	ldr	r0, [pc, #216]	; (8000f78 <MX_GPIO_Init+0x274>)
 8000e9e:	f002 f8af 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_USR_LED2_Pin */
  GPIO_InitStruct.Pin = HiL_USR_LED2_Pin;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HiL_USR_LED2_GPIO_Port, &GPIO_InitStruct);
 8000eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4831      	ldr	r0, [pc, #196]	; (8000f7c <MX_GPIO_Init+0x278>)
 8000eb6:	f002 f8a3 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_SW5_Pin HiL_SW8_Pin HiL_SW6_Pin HiL_SW7_Pin */
  GPIO_InitStruct.Pin = HiL_SW5_Pin|HiL_SW8_Pin|HiL_SW6_Pin|HiL_SW7_Pin;
 8000eba:	f24c 4310 	movw	r3, #50192	; 0xc410
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ec0:	2311      	movs	r3, #17
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	482a      	ldr	r0, [pc, #168]	; (8000f7c <MX_GPIO_Init+0x278>)
 8000ed4:	f002 f894 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_button3_B_Pin HiL_button3_A_Pin */
  GPIO_InitStruct.Pin = HiL_button3_B_Pin|HiL_button3_A_Pin;
 8000ed8:	230c      	movs	r3, #12
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000edc:	2311      	movs	r3, #17
 8000ede:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eec:	4619      	mov	r1, r3
 8000eee:	4824      	ldr	r0, [pc, #144]	; (8000f80 <MX_GPIO_Init+0x27c>)
 8000ef0:	f002 f886 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL1_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL1_Car_Pin;
 8000ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efa:	2301      	movs	r3, #1
 8000efc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HiL_TL1_Car_GPIO_Port, &GPIO_InitStruct);
 8000f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	481d      	ldr	r0, [pc, #116]	; (8000f84 <MX_GPIO_Init+0x280>)
 8000f0e:	f002 f877 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL4_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL4_Car_Pin;
 8000f12:	2304      	movs	r3, #4
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HiL_TL4_Car_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f26:	4619      	mov	r1, r3
 8000f28:	4817      	ldr	r0, [pc, #92]	; (8000f88 <MX_GPIO_Init+0x284>)
 8000f2a:	f002 f869 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_button3_C_Pin HiL_button3_D_Pin HiL_button3_center_Pin */
  GPIO_InitStruct.Pin = HiL_button3_C_Pin|HiL_button3_D_Pin|HiL_button3_center_Pin;
 8000f2e:	2370      	movs	r3, #112	; 0x70
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000f32:	2311      	movs	r3, #17
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f42:	4619      	mov	r1, r3
 8000f44:	4810      	ldr	r0, [pc, #64]	; (8000f88 <MX_GPIO_Init+0x284>)
 8000f46:	f002 f85b 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_LIS2DW12TR_Int2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = HiL_LIS2DW12TR_Int2_Pin|LD2_Pin;
 8000f4a:	23a0      	movs	r3, #160	; 0xa0
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4806      	ldr	r0, [pc, #24]	; (8000f7c <MX_GPIO_Init+0x278>)
 8000f62:	f002 f84d 	bl	8003000 <HAL_GPIO_Init>

}
 8000f66:	bf00      	nop
 8000f68:	3738      	adds	r7, #56	; 0x38
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40021400 	.word	0x40021400
 8000f78:	40020000 	.word	0x40020000
 8000f7c:	40020400 	.word	0x40020400
 8000f80:	40021800 	.word	0x40021800
 8000f84:	40020800 	.word	0x40020800
 8000f88:	40020c00 	.word	0x40020c00
 8000f8c:	40021000 	.word	0x40021000

08000f90 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000f98:	f010 f800 	bl	8010f9c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f00c fc03 	bl	800d7a8 <osDelay>
 8000fa2:	e7fb      	b.n	8000f9c <StartDefaultTask+0xc>

08000fa4 <StartTask_gateway>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_gateway */
void StartTask_gateway(void *argument)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_gateway */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000fac:	2001      	movs	r0, #1
 8000fae:	f00c fbfb 	bl	800d7a8 <osDelay>
 8000fb2:	e7fb      	b.n	8000fac <StartTask_gateway+0x8>

08000fb4 <StartTask_controller>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_controller */
void StartTask_controller(void *argument)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	  if( USB_MSGQ_Rx != NULL )
 8000fbc:	4b16      	ldr	r3, [pc, #88]	; (8001018 <StartTask_controller+0x64>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d024      	beq.n	800100e <StartTask_controller+0x5a>
	  {

			status = osMessageQueueGet(USB_MSGQ_Rx, &msg, NULL, 0U);		// Try to get message with instructions from USB message queue
 8000fc4:	4b14      	ldr	r3, [pc, #80]	; (8001018 <StartTask_controller+0x64>)
 8000fc6:	6818      	ldr	r0, [r3, #0]
 8000fc8:	f107 010c 	add.w	r1, r7, #12
 8000fcc:	2300      	movs	r3, #0
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f00c fe6c 	bl	800dcac <osMessageQueueGet>
 8000fd4:	6138      	str	r0, [r7, #16]

			if (status == osOK)
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d118      	bne.n	800100e <StartTask_controller+0x5a>
			{
				for (int i = 0; i < sizeof(msg.Buf); i++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	e00d      	b.n	8000ffe <StartTask_controller+0x4a>
				{
					recieve_message[i] = msg.Buf[i];
 8000fe2:	f107 020c 	add.w	r2, r7, #12
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	4413      	add	r3, r2
 8000fea:	7819      	ldrb	r1, [r3, #0]
 8000fec:	f107 0208 	add.w	r2, r7, #8
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	460a      	mov	r2, r1
 8000ff6:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < sizeof(msg.Buf); i++)
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	2b03      	cmp	r3, #3
 8001002:	d9ee      	bls.n	8000fe2 <StartTask_controller+0x2e>
				}

				HiL_controller_read_message(recieve_message);
 8001004:	f107 0308 	add.w	r3, r7, #8
 8001008:	4618      	mov	r0, r3
 800100a:	f00a f845 	bl	800b098 <HiL_controller_read_message>
			}
	  }

	  osDelay(10);
 800100e:	200a      	movs	r0, #10
 8001010:	f00c fbca 	bl	800d7a8 <osDelay>
	  if( USB_MSGQ_Rx != NULL )
 8001014:	e7d2      	b.n	8000fbc <StartTask_controller+0x8>
 8001016:	bf00      	nop
 8001018:	2000078c 	.word	0x2000078c

0800101c <StartTask_SHT20>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_SHT20 */
void StartTask_SHT20(void *argument)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_SHT20 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001024:	2001      	movs	r0, #1
 8001026:	f00c fbbf 	bl	800d7a8 <osDelay>
 800102a:	e7fb      	b.n	8001024 <StartTask_SHT20+0x8>

0800102c <StartTask_74HC595D>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_74HC595D */
void StartTask_74HC595D(void *argument)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_74HC595D */

	osStatus status;
	osSemaphoreAcquire(LightOnSemHandle, 1000);
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <StartTask_74HC595D+0x50>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800103c:	4618      	mov	r0, r3
 800103e:	f00c fc7d 	bl	800d93c <osSemaphoreAcquire>
  /* Infinite loop */
  for(;;)
  {

	  	  HAL_SPI_Receive_DMA(&hspi1, temp_light_state, sizeof(temp_light_state));
 8001042:	2203      	movs	r2, #3
 8001044:	490e      	ldr	r1, [pc, #56]	; (8001080 <StartTask_74HC595D+0x54>)
 8001046:	480f      	ldr	r0, [pc, #60]	; (8001084 <StartTask_74HC595D+0x58>)
 8001048:	f004 ffc2 	bl	8005fd0 <HAL_SPI_Receive_DMA>

	  again:
	  	  status = osSemaphoreAcquire(LightOnSemHandle, 2000);
 800104c:	4b0b      	ldr	r3, [pc, #44]	; (800107c <StartTask_74HC595D+0x50>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001054:	4618      	mov	r0, r3
 8001056:	f00c fc71 	bl	800d93c <osSemaphoreAcquire>
 800105a:	60f8      	str	r0, [r7, #12]
	  	  if(status != osOK){
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d000      	beq.n	8001064 <StartTask_74HC595D+0x38>
	  		  //printf("acquire failed.\n\r");

	  		  goto again;
 8001062:	e7f3      	b.n	800104c <StartTask_74HC595D+0x20>
	  	  }
	  	  memcpy(light_state, temp_light_state, sizeof(light_state));
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <StartTask_74HC595D+0x5c>)
 8001066:	4a06      	ldr	r2, [pc, #24]	; (8001080 <StartTask_74HC595D+0x54>)
 8001068:	6812      	ldr	r2, [r2, #0]
 800106a:	4611      	mov	r1, r2
 800106c:	8019      	strh	r1, [r3, #0]
 800106e:	3302      	adds	r3, #2
 8001070:	0c12      	lsrs	r2, r2, #16
 8001072:	701a      	strb	r2, [r3, #0]
//	  	  CDC_Transmit_FS( (uint8_t *) light_state, sizeof(light_state));		// DEBUG ONLY: Transmit over USB what's been recieved to SPI
	  	 //CDC_Transmit_FS( /*(uint8_t *)*/ light_state[1], sizeof(light_state)[1]);		// DEBUG ONLY: Transmit over USB what's been recieved to SPI
	  	 //CDC_Transmit_FS( /*(uint8_t *)*/ light_state[2], sizeof(light_state)[2]);		// DEBUG ONLY: Transmit over USB what's been recieved to SPI
	  	  //printf("Direkt efter semaforen med DMA receive är temp lightstate %02x:%02x:%02x\n\r", temp_light_state[0], temp_light_state[1], temp_light_state[2]);

	  osDelay(1);
 8001074:	2001      	movs	r0, #1
 8001076:	f00c fb97 	bl	800d7a8 <osDelay>
	  	  HAL_SPI_Receive_DMA(&hspi1, temp_light_state, sizeof(temp_light_state));
 800107a:	e7e2      	b.n	8001042 <StartTask_74HC595D+0x16>
 800107c:	20000738 	.word	0x20000738
 8001080:	20000794 	.word	0x20000794
 8001084:	200004c8 	.word	0x200004c8
 8001088:	20000790 	.word	0x20000790

0800108c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a04      	ldr	r2, [pc, #16]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d101      	bne.n	80010a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800109e:	f000 fd07 	bl	8001ab0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40001000 	.word	0x40001000

080010b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010b4:	b672      	cpsid	i
}
 80010b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <Error_Handler+0x8>
	...

080010bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <HAL_MspInit+0x4c>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	4a10      	ldr	r2, [pc, #64]	; (8001108 <HAL_MspInit+0x4c>)
 80010c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010cc:	6413      	str	r3, [r2, #64]	; 0x40
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <HAL_MspInit+0x4c>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <HAL_MspInit+0x4c>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <HAL_MspInit+0x4c>)
 80010e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e4:	6453      	str	r3, [r2, #68]	; 0x44
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <HAL_MspInit+0x4c>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	210f      	movs	r1, #15
 80010f6:	f06f 0001 	mvn.w	r0, #1
 80010fa:	f000 fed1 	bl	8001ea0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800

0800110c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08a      	sub	sp, #40	; 0x28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a17      	ldr	r2, [pc, #92]	; (8001188 <HAL_CAN_MspInit+0x7c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d127      	bne.n	800117e <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800112e:	4b17      	ldr	r3, [pc, #92]	; (800118c <HAL_CAN_MspInit+0x80>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	4a16      	ldr	r2, [pc, #88]	; (800118c <HAL_CAN_MspInit+0x80>)
 8001134:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001138:	6413      	str	r3, [r2, #64]	; 0x40
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <HAL_CAN_MspInit+0x80>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <HAL_CAN_MspInit+0x80>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a10      	ldr	r2, [pc, #64]	; (800118c <HAL_CAN_MspInit+0x80>)
 800114c:	f043 0308 	orr.w	r3, r3, #8
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <HAL_CAN_MspInit+0x80>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0308 	and.w	r3, r3, #8
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = HiL_CAN1_RX_Pin|HiL_CAN1_TX_Pin;
 800115e:	2303      	movs	r3, #3
 8001160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	2302      	movs	r3, #2
 8001164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116a:	2303      	movs	r3, #3
 800116c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800116e:	2309      	movs	r3, #9
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	; (8001190 <HAL_CAN_MspInit+0x84>)
 800117a:	f001 ff41 	bl	8003000 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800117e:	bf00      	nop
 8001180:	3728      	adds	r7, #40	; 0x28
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40006400 	.word	0x40006400
 800118c:	40023800 	.word	0x40023800
 8001190:	40020c00 	.word	0x40020c00

08001194 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a19      	ldr	r2, [pc, #100]	; (8001218 <HAL_DAC_MspInit+0x84>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d12b      	bne.n	800120e <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80011b6:	4b19      	ldr	r3, [pc, #100]	; (800121c <HAL_DAC_MspInit+0x88>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	4a18      	ldr	r2, [pc, #96]	; (800121c <HAL_DAC_MspInit+0x88>)
 80011bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80011c0:	6413      	str	r3, [r2, #64]	; 0x40
 80011c2:	4b16      	ldr	r3, [pc, #88]	; (800121c <HAL_DAC_MspInit+0x88>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	4b13      	ldr	r3, [pc, #76]	; (800121c <HAL_DAC_MspInit+0x88>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a12      	ldr	r2, [pc, #72]	; (800121c <HAL_DAC_MspInit+0x88>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <HAL_DAC_MspInit+0x88>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = HiL_Poti_Pin;
 80011e6:	2310      	movs	r3, #16
 80011e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ea:	2303      	movs	r3, #3
 80011ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(HiL_Poti_GPIO_Port, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	4809      	ldr	r0, [pc, #36]	; (8001220 <HAL_DAC_MspInit+0x8c>)
 80011fa:	f001 ff01 	bl	8003000 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	210f      	movs	r1, #15
 8001202:	2036      	movs	r0, #54	; 0x36
 8001204:	f000 fe4c 	bl	8001ea0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001208:	2036      	movs	r0, #54	; 0x36
 800120a:	f000 fe65 	bl	8001ed8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800120e:	bf00      	nop
 8001210:	3728      	adds	r7, #40	; 0x28
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40007400 	.word	0x40007400
 800121c:	40023800 	.word	0x40023800
 8001220:	40020000 	.word	0x40020000

08001224 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08e      	sub	sp, #56	; 0x38
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a4e      	ldr	r2, [pc, #312]	; (800137c <HAL_ETH_MspInit+0x158>)
 8001242:	4293      	cmp	r3, r2
 8001244:	f040 8096 	bne.w	8001374 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001248:	4b4d      	ldr	r3, [pc, #308]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	4a4c      	ldr	r2, [pc, #304]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 800124e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001252:	6313      	str	r3, [r2, #48]	; 0x30
 8001254:	4b4a      	ldr	r3, [pc, #296]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800125c:	623b      	str	r3, [r7, #32]
 800125e:	6a3b      	ldr	r3, [r7, #32]
 8001260:	4b47      	ldr	r3, [pc, #284]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001264:	4a46      	ldr	r2, [pc, #280]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 8001266:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800126a:	6313      	str	r3, [r2, #48]	; 0x30
 800126c:	4b44      	ldr	r3, [pc, #272]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 800126e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001270:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	4b41      	ldr	r3, [pc, #260]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 800127a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127c:	4a40      	ldr	r2, [pc, #256]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 800127e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001282:	6313      	str	r3, [r2, #48]	; 0x30
 8001284:	4b3e      	ldr	r3, [pc, #248]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 8001286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800128c:	61bb      	str	r3, [r7, #24]
 800128e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001290:	4b3b      	ldr	r3, [pc, #236]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 8001292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001294:	4a3a      	ldr	r2, [pc, #232]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	6313      	str	r3, [r2, #48]	; 0x30
 800129c:	4b38      	ldr	r3, [pc, #224]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 800129e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	4b35      	ldr	r3, [pc, #212]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 80012aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ac:	4a34      	ldr	r2, [pc, #208]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	6313      	str	r3, [r2, #48]	; 0x30
 80012b4:	4b32      	ldr	r3, [pc, #200]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 80012b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	4b2f      	ldr	r3, [pc, #188]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 80012c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c4:	4a2e      	ldr	r2, [pc, #184]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 80012c6:	f043 0302 	orr.w	r3, r3, #2
 80012ca:	6313      	str	r3, [r2, #48]	; 0x30
 80012cc:	4b2c      	ldr	r3, [pc, #176]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 80012ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012d8:	4b29      	ldr	r3, [pc, #164]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012dc:	4a28      	ldr	r2, [pc, #160]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 80012de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012e2:	6313      	str	r3, [r2, #48]	; 0x30
 80012e4:	4b26      	ldr	r3, [pc, #152]	; (8001380 <HAL_ETH_MspInit+0x15c>)
 80012e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80012f0:	2332      	movs	r3, #50	; 0x32
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001300:	230b      	movs	r3, #11
 8001302:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001308:	4619      	mov	r1, r3
 800130a:	481e      	ldr	r0, [pc, #120]	; (8001384 <HAL_ETH_MspInit+0x160>)
 800130c:	f001 fe78 	bl	8003000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001310:	2386      	movs	r3, #134	; 0x86
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131c:	2303      	movs	r3, #3
 800131e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001320:	230b      	movs	r3, #11
 8001322:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001328:	4619      	mov	r1, r3
 800132a:	4817      	ldr	r0, [pc, #92]	; (8001388 <HAL_ETH_MspInit+0x164>)
 800132c:	f001 fe68 	bl	8003000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001330:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133e:	2303      	movs	r3, #3
 8001340:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001342:	230b      	movs	r3, #11
 8001344:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134a:	4619      	mov	r1, r3
 800134c:	480f      	ldr	r0, [pc, #60]	; (800138c <HAL_ETH_MspInit+0x168>)
 800134e:	f001 fe57 	bl	8003000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001352:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001360:	2303      	movs	r3, #3
 8001362:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001364:	230b      	movs	r3, #11
 8001366:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136c:	4619      	mov	r1, r3
 800136e:	4808      	ldr	r0, [pc, #32]	; (8001390 <HAL_ETH_MspInit+0x16c>)
 8001370:	f001 fe46 	bl	8003000 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001374:	bf00      	nop
 8001376:	3738      	adds	r7, #56	; 0x38
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40028000 	.word	0x40028000
 8001380:	40023800 	.word	0x40023800
 8001384:	40020800 	.word	0x40020800
 8001388:	40020000 	.word	0x40020000
 800138c:	40020400 	.word	0x40020400
 8001390:	40021800 	.word	0x40021800

08001394 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b0ae      	sub	sp, #184	; 0xb8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	2290      	movs	r2, #144	; 0x90
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f010 fbdf 	bl	8011b78 <memset>
  if(hi2c->Instance==I2C1)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a22      	ldr	r2, [pc, #136]	; (8001448 <HAL_I2C_MspInit+0xb4>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d13c      	bne.n	800143e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013c8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013ca:	2300      	movs	r3, #0
 80013cc:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4618      	mov	r0, r3
 80013d4:	f004 f928 	bl	8005628 <HAL_RCCEx_PeriphCLKConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80013de:	f7ff fe67 	bl	80010b0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e2:	4b1a      	ldr	r3, [pc, #104]	; (800144c <HAL_I2C_MspInit+0xb8>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a19      	ldr	r2, [pc, #100]	; (800144c <HAL_I2C_MspInit+0xb8>)
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b17      	ldr	r3, [pc, #92]	; (800144c <HAL_I2C_MspInit+0xb8>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = HiL_I2C1_SCL_Pin|HiL_I2C1_SDA_Pin;
 80013fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001402:	2312      	movs	r3, #18
 8001404:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140e:	2303      	movs	r3, #3
 8001410:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001414:	2304      	movs	r3, #4
 8001416:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800141e:	4619      	mov	r1, r3
 8001420:	480b      	ldr	r0, [pc, #44]	; (8001450 <HAL_I2C_MspInit+0xbc>)
 8001422:	f001 fded 	bl	8003000 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <HAL_I2C_MspInit+0xb8>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	4a08      	ldr	r2, [pc, #32]	; (800144c <HAL_I2C_MspInit+0xb8>)
 800142c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001430:	6413      	str	r3, [r2, #64]	; 0x40
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_I2C_MspInit+0xb8>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800143e:	bf00      	nop
 8001440:	37b8      	adds	r7, #184	; 0xb8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40005400 	.word	0x40005400
 800144c:	40023800 	.word	0x40023800
 8001450:	40020400 	.word	0x40020400

08001454 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08e      	sub	sp, #56	; 0x38
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a61      	ldr	r2, [pc, #388]	; (80015f8 <HAL_SPI_MspInit+0x1a4>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d172      	bne.n	800155c <HAL_SPI_MspInit+0x108>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001476:	4b61      	ldr	r3, [pc, #388]	; (80015fc <HAL_SPI_MspInit+0x1a8>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	4a60      	ldr	r2, [pc, #384]	; (80015fc <HAL_SPI_MspInit+0x1a8>)
 800147c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001480:	6453      	str	r3, [r2, #68]	; 0x44
 8001482:	4b5e      	ldr	r3, [pc, #376]	; (80015fc <HAL_SPI_MspInit+0x1a8>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800148a:	623b      	str	r3, [r7, #32]
 800148c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800148e:	4b5b      	ldr	r3, [pc, #364]	; (80015fc <HAL_SPI_MspInit+0x1a8>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a5a      	ldr	r2, [pc, #360]	; (80015fc <HAL_SPI_MspInit+0x1a8>)
 8001494:	f043 0308 	orr.w	r3, r3, #8
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b58      	ldr	r3, [pc, #352]	; (80015fc <HAL_SPI_MspInit+0x1a8>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	61fb      	str	r3, [r7, #28]
 80014a4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	4b55      	ldr	r3, [pc, #340]	; (80015fc <HAL_SPI_MspInit+0x1a8>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a54      	ldr	r2, [pc, #336]	; (80015fc <HAL_SPI_MspInit+0x1a8>)
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b52      	ldr	r3, [pc, #328]	; (80015fc <HAL_SPI_MspInit+0x1a8>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	61bb      	str	r3, [r7, #24]
 80014bc:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = HiL_595_DS_Pin;
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014ce:	2305      	movs	r3, #5
 80014d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_595_DS_GPIO_Port, &GPIO_InitStruct);
 80014d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d6:	4619      	mov	r1, r3
 80014d8:	4849      	ldr	r0, [pc, #292]	; (8001600 <HAL_SPI_MspInit+0x1ac>)
 80014da:	f001 fd91 	bl	8003000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014de:	2308      	movs	r3, #8
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ea:	2303      	movs	r3, #3
 80014ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014ee:	2305      	movs	r3, #5
 80014f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f6:	4619      	mov	r1, r3
 80014f8:	4842      	ldr	r0, [pc, #264]	; (8001604 <HAL_SPI_MspInit+0x1b0>)
 80014fa:	f001 fd81 	bl	8003000 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80014fe:	4b42      	ldr	r3, [pc, #264]	; (8001608 <HAL_SPI_MspInit+0x1b4>)
 8001500:	4a42      	ldr	r2, [pc, #264]	; (800160c <HAL_SPI_MspInit+0x1b8>)
 8001502:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001504:	4b40      	ldr	r3, [pc, #256]	; (8001608 <HAL_SPI_MspInit+0x1b4>)
 8001506:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800150a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800150c:	4b3e      	ldr	r3, [pc, #248]	; (8001608 <HAL_SPI_MspInit+0x1b4>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001512:	4b3d      	ldr	r3, [pc, #244]	; (8001608 <HAL_SPI_MspInit+0x1b4>)
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001518:	4b3b      	ldr	r3, [pc, #236]	; (8001608 <HAL_SPI_MspInit+0x1b4>)
 800151a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800151e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001520:	4b39      	ldr	r3, [pc, #228]	; (8001608 <HAL_SPI_MspInit+0x1b4>)
 8001522:	2200      	movs	r2, #0
 8001524:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001526:	4b38      	ldr	r3, [pc, #224]	; (8001608 <HAL_SPI_MspInit+0x1b4>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800152c:	4b36      	ldr	r3, [pc, #216]	; (8001608 <HAL_SPI_MspInit+0x1b4>)
 800152e:	2200      	movs	r2, #0
 8001530:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001532:	4b35      	ldr	r3, [pc, #212]	; (8001608 <HAL_SPI_MspInit+0x1b4>)
 8001534:	2200      	movs	r2, #0
 8001536:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001538:	4b33      	ldr	r3, [pc, #204]	; (8001608 <HAL_SPI_MspInit+0x1b4>)
 800153a:	2200      	movs	r2, #0
 800153c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800153e:	4832      	ldr	r0, [pc, #200]	; (8001608 <HAL_SPI_MspInit+0x1b4>)
 8001540:	f000 fe2e 	bl	80021a0 <HAL_DMA_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_SPI_MspInit+0xfa>
    {
      Error_Handler();
 800154a:	f7ff fdb1 	bl	80010b0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a2d      	ldr	r2, [pc, #180]	; (8001608 <HAL_SPI_MspInit+0x1b4>)
 8001552:	659a      	str	r2, [r3, #88]	; 0x58
 8001554:	4a2c      	ldr	r2, [pc, #176]	; (8001608 <HAL_SPI_MspInit+0x1b4>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800155a:	e049      	b.n	80015f0 <HAL_SPI_MspInit+0x19c>
  else if(hspi->Instance==SPI3)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a2b      	ldr	r2, [pc, #172]	; (8001610 <HAL_SPI_MspInit+0x1bc>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d144      	bne.n	80015f0 <HAL_SPI_MspInit+0x19c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001566:	4b25      	ldr	r3, [pc, #148]	; (80015fc <HAL_SPI_MspInit+0x1a8>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	4a24      	ldr	r2, [pc, #144]	; (80015fc <HAL_SPI_MspInit+0x1a8>)
 800156c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001570:	6413      	str	r3, [r2, #64]	; 0x40
 8001572:	4b22      	ldr	r3, [pc, #136]	; (80015fc <HAL_SPI_MspInit+0x1a8>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157e:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <HAL_SPI_MspInit+0x1a8>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a1e      	ldr	r2, [pc, #120]	; (80015fc <HAL_SPI_MspInit+0x1a8>)
 8001584:	f043 0302 	orr.w	r3, r3, #2
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <HAL_SPI_MspInit+0x1a8>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001596:	4b19      	ldr	r3, [pc, #100]	; (80015fc <HAL_SPI_MspInit+0x1a8>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a18      	ldr	r2, [pc, #96]	; (80015fc <HAL_SPI_MspInit+0x1a8>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b16      	ldr	r3, [pc, #88]	; (80015fc <HAL_SPI_MspInit+0x1a8>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HiL_SPI3_MOSI_Pin;
 80015ae:	2304      	movs	r3, #4
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80015be:	2307      	movs	r3, #7
 80015c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_SPI3_MOSI_GPIO_Port, &GPIO_InitStruct);
 80015c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c6:	4619      	mov	r1, r3
 80015c8:	480e      	ldr	r0, [pc, #56]	; (8001604 <HAL_SPI_MspInit+0x1b0>)
 80015ca:	f001 fd19 	bl	8003000 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HiL_SPI3_SCK_Pin;
 80015ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015dc:	2303      	movs	r3, #3
 80015de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015e0:	2306      	movs	r3, #6
 80015e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_SPI3_SCK_GPIO_Port, &GPIO_InitStruct);
 80015e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e8:	4619      	mov	r1, r3
 80015ea:	480a      	ldr	r0, [pc, #40]	; (8001614 <HAL_SPI_MspInit+0x1c0>)
 80015ec:	f001 fd08 	bl	8003000 <HAL_GPIO_Init>
}
 80015f0:	bf00      	nop
 80015f2:	3738      	adds	r7, #56	; 0x38
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40013000 	.word	0x40013000
 80015fc:	40023800 	.word	0x40023800
 8001600:	40020c00 	.word	0x40020c00
 8001604:	40020400 	.word	0x40020400
 8001608:	20000590 	.word	0x20000590
 800160c:	40026410 	.word	0x40026410
 8001610:	40003c00 	.word	0x40003c00
 8001614:	40020800 	.word	0x40020800

08001618 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	; 0x28
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a1b      	ldr	r2, [pc, #108]	; (80016a4 <HAL_TIM_Base_MspInit+0x8c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d130      	bne.n	800169c <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800163a:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <HAL_TIM_Base_MspInit+0x90>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	4a1a      	ldr	r2, [pc, #104]	; (80016a8 <HAL_TIM_Base_MspInit+0x90>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6453      	str	r3, [r2, #68]	; 0x44
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <HAL_TIM_Base_MspInit+0x90>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <HAL_TIM_Base_MspInit+0x90>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a14      	ldr	r2, [pc, #80]	; (80016a8 <HAL_TIM_Base_MspInit+0x90>)
 8001658:	f043 0310 	orr.w	r3, r3, #16
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_TIM_Base_MspInit+0x90>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0310 	and.w	r3, r3, #16
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = HiL_595_Enable_Pin;
 800166a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800166e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	2300      	movs	r3, #0
 800167a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800167c:	2301      	movs	r3, #1
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HiL_595_Enable_GPIO_Port, &GPIO_InitStruct);
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	4619      	mov	r1, r3
 8001686:	4809      	ldr	r0, [pc, #36]	; (80016ac <HAL_TIM_Base_MspInit+0x94>)
 8001688:	f001 fcba 	bl	8003000 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800168c:	2200      	movs	r2, #0
 800168e:	2105      	movs	r1, #5
 8001690:	201b      	movs	r0, #27
 8001692:	f000 fc05 	bl	8001ea0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001696:	201b      	movs	r0, #27
 8001698:	f000 fc1e 	bl	8001ed8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800169c:	bf00      	nop
 800169e:	3728      	adds	r7, #40	; 0x28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40010000 	.word	0x40010000
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40021000 	.word	0x40021000

080016b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b0ae      	sub	sp, #184	; 0xb8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	2290      	movs	r2, #144	; 0x90
 80016ce:	2100      	movs	r1, #0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f010 fa51 	bl	8011b78 <memset>
  if(huart->Instance==UART7)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a3d      	ldr	r2, [pc, #244]	; (80017d0 <HAL_UART_MspInit+0x120>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d172      	bne.n	80017c6 <HAL_UART_MspInit+0x116>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80016e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80016e6:	2300      	movs	r3, #0
 80016e8:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4618      	mov	r0, r3
 80016f0:	f003 ff9a 	bl	8005628 <HAL_RCCEx_PeriphCLKConfig>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80016fa:	f7ff fcd9 	bl	80010b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80016fe:	4b35      	ldr	r3, [pc, #212]	; (80017d4 <HAL_UART_MspInit+0x124>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	4a34      	ldr	r2, [pc, #208]	; (80017d4 <HAL_UART_MspInit+0x124>)
 8001704:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001708:	6413      	str	r3, [r2, #64]	; 0x40
 800170a:	4b32      	ldr	r3, [pc, #200]	; (80017d4 <HAL_UART_MspInit+0x124>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001716:	4b2f      	ldr	r3, [pc, #188]	; (80017d4 <HAL_UART_MspInit+0x124>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a2e      	ldr	r2, [pc, #184]	; (80017d4 <HAL_UART_MspInit+0x124>)
 800171c:	f043 0310 	orr.w	r3, r3, #16
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b2c      	ldr	r3, [pc, #176]	; (80017d4 <HAL_UART_MspInit+0x124>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0310 	and.w	r3, r3, #16
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = HiL_UART7_RX_Pin|HiL_UART7_TX_Pin;
 800172e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001732:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001736:	2302      	movs	r3, #2
 8001738:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001742:	2303      	movs	r3, #3
 8001744:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001748:	2308      	movs	r3, #8
 800174a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800174e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001752:	4619      	mov	r1, r3
 8001754:	4820      	ldr	r0, [pc, #128]	; (80017d8 <HAL_UART_MspInit+0x128>)
 8001756:	f001 fc53 	bl	8003000 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 800175a:	4b20      	ldr	r3, [pc, #128]	; (80017dc <HAL_UART_MspInit+0x12c>)
 800175c:	4a20      	ldr	r2, [pc, #128]	; (80017e0 <HAL_UART_MspInit+0x130>)
 800175e:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 8001760:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <HAL_UART_MspInit+0x12c>)
 8001762:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001766:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001768:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <HAL_UART_MspInit+0x12c>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800176e:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <HAL_UART_MspInit+0x12c>)
 8001770:	2200      	movs	r2, #0
 8001772:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001774:	4b19      	ldr	r3, [pc, #100]	; (80017dc <HAL_UART_MspInit+0x12c>)
 8001776:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800177a:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800177c:	4b17      	ldr	r3, [pc, #92]	; (80017dc <HAL_UART_MspInit+0x12c>)
 800177e:	2200      	movs	r2, #0
 8001780:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001782:	4b16      	ldr	r3, [pc, #88]	; (80017dc <HAL_UART_MspInit+0x12c>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8001788:	4b14      	ldr	r3, [pc, #80]	; (80017dc <HAL_UART_MspInit+0x12c>)
 800178a:	2200      	movs	r2, #0
 800178c:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 800178e:	4b13      	ldr	r3, [pc, #76]	; (80017dc <HAL_UART_MspInit+0x12c>)
 8001790:	2200      	movs	r2, #0
 8001792:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <HAL_UART_MspInit+0x12c>)
 8001796:	2200      	movs	r2, #0
 8001798:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 800179a:	4810      	ldr	r0, [pc, #64]	; (80017dc <HAL_UART_MspInit+0x12c>)
 800179c:	f000 fd00 	bl	80021a0 <HAL_DMA_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 80017a6:	f7ff fc83 	bl	80010b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a0b      	ldr	r2, [pc, #44]	; (80017dc <HAL_UART_MspInit+0x12c>)
 80017ae:	675a      	str	r2, [r3, #116]	; 0x74
 80017b0:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <HAL_UART_MspInit+0x12c>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2105      	movs	r1, #5
 80017ba:	2052      	movs	r0, #82	; 0x52
 80017bc:	f000 fb70 	bl	8001ea0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80017c0:	2052      	movs	r0, #82	; 0x52
 80017c2:	f000 fb89 	bl	8001ed8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 80017c6:	bf00      	nop
 80017c8:	37b8      	adds	r7, #184	; 0xb8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40007800 	.word	0x40007800
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40021000 	.word	0x40021000
 80017dc:	200006c4 	.word	0x200006c4
 80017e0:	40026058 	.word	0x40026058

080017e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08e      	sub	sp, #56	; 0x38
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017f4:	4b33      	ldr	r3, [pc, #204]	; (80018c4 <HAL_InitTick+0xe0>)
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	4a32      	ldr	r2, [pc, #200]	; (80018c4 <HAL_InitTick+0xe0>)
 80017fa:	f043 0310 	orr.w	r3, r3, #16
 80017fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001800:	4b30      	ldr	r3, [pc, #192]	; (80018c4 <HAL_InitTick+0xe0>)
 8001802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001804:	f003 0310 	and.w	r3, r3, #16
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800180c:	f107 0210 	add.w	r2, r7, #16
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	4611      	mov	r1, r2
 8001816:	4618      	mov	r0, r3
 8001818:	f003 fed4 	bl	80055c4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800181c:	6a3b      	ldr	r3, [r7, #32]
 800181e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001822:	2b00      	cmp	r3, #0
 8001824:	d103      	bne.n	800182e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001826:	f003 fea5 	bl	8005574 <HAL_RCC_GetPCLK1Freq>
 800182a:	6378      	str	r0, [r7, #52]	; 0x34
 800182c:	e004      	b.n	8001838 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800182e:	f003 fea1 	bl	8005574 <HAL_RCC_GetPCLK1Freq>
 8001832:	4603      	mov	r3, r0
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800183a:	4a23      	ldr	r2, [pc, #140]	; (80018c8 <HAL_InitTick+0xe4>)
 800183c:	fba2 2303 	umull	r2, r3, r2, r3
 8001840:	0c9b      	lsrs	r3, r3, #18
 8001842:	3b01      	subs	r3, #1
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001846:	4b21      	ldr	r3, [pc, #132]	; (80018cc <HAL_InitTick+0xe8>)
 8001848:	4a21      	ldr	r2, [pc, #132]	; (80018d0 <HAL_InitTick+0xec>)
 800184a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800184c:	4b1f      	ldr	r3, [pc, #124]	; (80018cc <HAL_InitTick+0xe8>)
 800184e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001852:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001854:	4a1d      	ldr	r2, [pc, #116]	; (80018cc <HAL_InitTick+0xe8>)
 8001856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001858:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800185a:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <HAL_InitTick+0xe8>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001860:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <HAL_InitTick+0xe8>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001866:	4b19      	ldr	r3, [pc, #100]	; (80018cc <HAL_InitTick+0xe8>)
 8001868:	2200      	movs	r2, #0
 800186a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800186c:	4817      	ldr	r0, [pc, #92]	; (80018cc <HAL_InitTick+0xe8>)
 800186e:	f005 f965 	bl	8006b3c <HAL_TIM_Base_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001878:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800187c:	2b00      	cmp	r3, #0
 800187e:	d11b      	bne.n	80018b8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001880:	4812      	ldr	r0, [pc, #72]	; (80018cc <HAL_InitTick+0xe8>)
 8001882:	f005 f9b3 	bl	8006bec <HAL_TIM_Base_Start_IT>
 8001886:	4603      	mov	r3, r0
 8001888:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800188c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001890:	2b00      	cmp	r3, #0
 8001892:	d111      	bne.n	80018b8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001894:	2036      	movs	r0, #54	; 0x36
 8001896:	f000 fb1f 	bl	8001ed8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b0f      	cmp	r3, #15
 800189e:	d808      	bhi.n	80018b2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80018a0:	2200      	movs	r2, #0
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	2036      	movs	r0, #54	; 0x36
 80018a6:	f000 fafb 	bl	8001ea0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018aa:	4a0a      	ldr	r2, [pc, #40]	; (80018d4 <HAL_InitTick+0xf0>)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6013      	str	r3, [r2, #0]
 80018b0:	e002      	b.n	80018b8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80018b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3738      	adds	r7, #56	; 0x38
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40023800 	.word	0x40023800
 80018c8:	431bde83 	.word	0x431bde83
 80018cc:	20000820 	.word	0x20000820
 80018d0:	40001000 	.word	0x40001000
 80018d4:	20000004 	.word	0x20000004

080018d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018dc:	e7fe      	b.n	80018dc <NMI_Handler+0x4>

080018de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e2:	e7fe      	b.n	80018e2 <HardFault_Handler+0x4>

080018e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <MemManage_Handler+0x4>

080018ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ee:	e7fe      	b.n	80018ee <BusFault_Handler+0x4>

080018f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f4:	e7fe      	b.n	80018f4 <UsageFault_Handler+0x4>

080018f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <DMA1_Stream3_IRQHandler+0x10>)
 800190a:	f000 fde9 	bl	80024e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200006c4 	.word	0x200006c4

08001918 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800191c:	4802      	ldr	r0, [pc, #8]	; (8001928 <TIM1_CC_IRQHandler+0x10>)
 800191e:	f005 fdc3 	bl	80074a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	200005f0 	.word	0x200005f0

0800192c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <TIM6_DAC_IRQHandler+0x20>)
 8001932:	791b      	ldrb	r3, [r3, #4]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d002      	beq.n	8001940 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 800193a:	4804      	ldr	r0, [pc, #16]	; (800194c <TIM6_DAC_IRQHandler+0x20>)
 800193c:	f000 fb4e 	bl	8001fdc <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001940:	4803      	ldr	r0, [pc, #12]	; (8001950 <TIM6_DAC_IRQHandler+0x24>)
 8001942:	f005 fdb1 	bl	80074a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200003b0 	.word	0x200003b0
 8001950:	20000820 	.word	0x20000820

08001954 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001958:	4802      	ldr	r0, [pc, #8]	; (8001964 <DMA2_Stream0_IRQHandler+0x10>)
 800195a:	f000 fdc1 	bl	80024e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000590 	.word	0x20000590

08001968 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800196c:	4802      	ldr	r0, [pc, #8]	; (8001978 <OTG_FS_IRQHandler+0x10>)
 800196e:	f001 ff92 	bl	8003896 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20006d6c 	.word	0x20006d6c

0800197c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001980:	4802      	ldr	r0, [pc, #8]	; (800198c <UART7_IRQHandler+0x10>)
 8001982:	f006 fcd3 	bl	800832c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	2000063c 	.word	0x2000063c

08001990 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
	...

080019a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a8:	4a14      	ldr	r2, [pc, #80]	; (80019fc <_sbrk+0x5c>)
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <_sbrk+0x60>)
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b4:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <_sbrk+0x64>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d102      	bne.n	80019c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019bc:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <_sbrk+0x64>)
 80019be:	4a12      	ldr	r2, [pc, #72]	; (8001a08 <_sbrk+0x68>)
 80019c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019c2:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <_sbrk+0x64>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d207      	bcs.n	80019e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d0:	f010 f888 	bl	8011ae4 <__errno>
 80019d4:	4603      	mov	r3, r0
 80019d6:	220c      	movs	r2, #12
 80019d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019da:	f04f 33ff 	mov.w	r3, #4294967295
 80019de:	e009      	b.n	80019f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <_sbrk+0x64>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019e6:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <_sbrk+0x64>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	4a05      	ldr	r2, [pc, #20]	; (8001a04 <_sbrk+0x64>)
 80019f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019f2:	68fb      	ldr	r3, [r7, #12]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20080000 	.word	0x20080000
 8001a00:	00000400 	.word	0x00000400
 8001a04:	2000086c 	.word	0x2000086c
 8001a08:	20007288 	.word	0x20007288

08001a0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <SystemInit+0x20>)
 8001a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a16:	4a05      	ldr	r2, [pc, #20]	; (8001a2c <SystemInit+0x20>)
 8001a18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a34:	480d      	ldr	r0, [pc, #52]	; (8001a6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a36:	490e      	ldr	r1, [pc, #56]	; (8001a70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a38:	4a0e      	ldr	r2, [pc, #56]	; (8001a74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a3c:	e002      	b.n	8001a44 <LoopCopyDataInit>

08001a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a42:	3304      	adds	r3, #4

08001a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a48:	d3f9      	bcc.n	8001a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a4a:	4a0b      	ldr	r2, [pc, #44]	; (8001a78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a4c:	4c0b      	ldr	r4, [pc, #44]	; (8001a7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a50:	e001      	b.n	8001a56 <LoopFillZerobss>

08001a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a54:	3204      	adds	r2, #4

08001a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a58:	d3fb      	bcc.n	8001a52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a5a:	f7ff ffd7 	bl	8001a0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a5e:	f010 f847 	bl	8011af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a62:	f7fe fde9 	bl	8000638 <main>
  bx  lr    
 8001a66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a68:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a70:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001a74:	08012070 	.word	0x08012070
  ldr r2, =_sbss
 8001a78:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 8001a7c:	20007284 	.word	0x20007284

08001a80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a80:	e7fe      	b.n	8001a80 <ADC_IRQHandler>
	...

08001a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <HAL_Init+0x28>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a07      	ldr	r2, [pc, #28]	; (8001aac <HAL_Init+0x28>)
 8001a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a94:	2003      	movs	r0, #3
 8001a96:	f000 f9f8 	bl	8001e8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a9a:	200f      	movs	r0, #15
 8001a9c:	f7ff fea2 	bl	80017e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa0:	f7ff fb0c 	bl	80010bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023c00 	.word	0x40023c00

08001ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_IncTick+0x20>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_IncTick+0x24>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <HAL_IncTick+0x24>)
 8001ac2:	6013      	str	r3, [r2, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	20000008 	.word	0x20000008
 8001ad4:	20000870 	.word	0x20000870

08001ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return uwTick;
 8001adc:	4b03      	ldr	r3, [pc, #12]	; (8001aec <HAL_GetTick+0x14>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	20000870 	.word	0x20000870

08001af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af8:	f7ff ffee 	bl	8001ad8 <HAL_GetTick>
 8001afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b08:	d005      	beq.n	8001b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <HAL_Delay+0x44>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4413      	add	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b16:	bf00      	nop
 8001b18:	f7ff ffde 	bl	8001ad8 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d8f7      	bhi.n	8001b18 <HAL_Delay+0x28>
  {
  }
}
 8001b28:	bf00      	nop
 8001b2a:	bf00      	nop
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000008 	.word	0x20000008

08001b38 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e0ed      	b.n	8001d26 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d102      	bne.n	8001b5c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff fad8 	bl	800110c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f042 0201 	orr.w	r2, r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b6c:	f7ff ffb4 	bl	8001ad8 <HAL_GetTick>
 8001b70:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b72:	e012      	b.n	8001b9a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b74:	f7ff ffb0 	bl	8001ad8 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b0a      	cmp	r3, #10
 8001b80:	d90b      	bls.n	8001b9a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2205      	movs	r2, #5
 8001b92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e0c5      	b.n	8001d26 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0e5      	beq.n	8001b74 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 0202 	bic.w	r2, r2, #2
 8001bb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bb8:	f7ff ff8e 	bl	8001ad8 <HAL_GetTick>
 8001bbc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001bbe:	e012      	b.n	8001be6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bc0:	f7ff ff8a 	bl	8001ad8 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b0a      	cmp	r3, #10
 8001bcc:	d90b      	bls.n	8001be6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2205      	movs	r2, #5
 8001bde:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e09f      	b.n	8001d26 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1e5      	bne.n	8001bc0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	7e1b      	ldrb	r3, [r3, #24]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d108      	bne.n	8001c0e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	e007      	b.n	8001c1e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	7e5b      	ldrb	r3, [r3, #25]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d108      	bne.n	8001c38 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	e007      	b.n	8001c48 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c46:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	7e9b      	ldrb	r3, [r3, #26]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d108      	bne.n	8001c62 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0220 	orr.w	r2, r2, #32
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	e007      	b.n	8001c72 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 0220 	bic.w	r2, r2, #32
 8001c70:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	7edb      	ldrb	r3, [r3, #27]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d108      	bne.n	8001c8c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0210 	bic.w	r2, r2, #16
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	e007      	b.n	8001c9c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0210 	orr.w	r2, r2, #16
 8001c9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	7f1b      	ldrb	r3, [r3, #28]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d108      	bne.n	8001cb6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0208 	orr.w	r2, r2, #8
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	e007      	b.n	8001cc6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 0208 	bic.w	r2, r2, #8
 8001cc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	7f5b      	ldrb	r3, [r3, #29]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d108      	bne.n	8001ce0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f042 0204 	orr.w	r2, r2, #4
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	e007      	b.n	8001cf0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0204 	bic.w	r2, r2, #4
 8001cee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	ea42 0103 	orr.w	r1, r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	1e5a      	subs	r2, r3, #1
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <__NVIC_SetPriorityGrouping>:
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <__NVIC_SetPriorityGrouping+0x40>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d58:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <__NVIC_SetPriorityGrouping+0x44>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5e:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <__NVIC_SetPriorityGrouping+0x40>)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	60d3      	str	r3, [r2, #12]
}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000ed00 	.word	0xe000ed00
 8001d74:	05fa0000 	.word	0x05fa0000

08001d78 <__NVIC_GetPriorityGrouping>:
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <__NVIC_GetPriorityGrouping+0x18>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	0a1b      	lsrs	r3, r3, #8
 8001d82:	f003 0307 	and.w	r3, r3, #7
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <__NVIC_EnableIRQ>:
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	db0b      	blt.n	8001dbe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	f003 021f 	and.w	r2, r3, #31
 8001dac:	4907      	ldr	r1, [pc, #28]	; (8001dcc <__NVIC_EnableIRQ+0x38>)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	095b      	lsrs	r3, r3, #5
 8001db4:	2001      	movs	r0, #1
 8001db6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	e000e100 	.word	0xe000e100

08001dd0 <__NVIC_SetPriority>:
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	6039      	str	r1, [r7, #0]
 8001dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	db0a      	blt.n	8001dfa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	490c      	ldr	r1, [pc, #48]	; (8001e1c <__NVIC_SetPriority+0x4c>)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	0112      	lsls	r2, r2, #4
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	440b      	add	r3, r1
 8001df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001df8:	e00a      	b.n	8001e10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	4908      	ldr	r1, [pc, #32]	; (8001e20 <__NVIC_SetPriority+0x50>)
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	3b04      	subs	r3, #4
 8001e08:	0112      	lsls	r2, r2, #4
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	761a      	strb	r2, [r3, #24]
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	e000e100 	.word	0xe000e100
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <NVIC_EncodePriority>:
{
 8001e24:	b480      	push	{r7}
 8001e26:	b089      	sub	sp, #36	; 0x24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f1c3 0307 	rsb	r3, r3, #7
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	bf28      	it	cs
 8001e42:	2304      	movcs	r3, #4
 8001e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	2b06      	cmp	r3, #6
 8001e4c:	d902      	bls.n	8001e54 <NVIC_EncodePriority+0x30>
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3b03      	subs	r3, #3
 8001e52:	e000      	b.n	8001e56 <NVIC_EncodePriority+0x32>
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e58:	f04f 32ff 	mov.w	r2, #4294967295
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43da      	mvns	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	401a      	ands	r2, r3
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	fa01 f303 	lsl.w	r3, r1, r3
 8001e76:	43d9      	mvns	r1, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e7c:	4313      	orrs	r3, r2
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3724      	adds	r7, #36	; 0x24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff ff4c 	bl	8001d30 <__NVIC_SetPriorityGrouping>
}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
 8001eac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb2:	f7ff ff61 	bl	8001d78 <__NVIC_GetPriorityGrouping>
 8001eb6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	68b9      	ldr	r1, [r7, #8]
 8001ebc:	6978      	ldr	r0, [r7, #20]
 8001ebe:	f7ff ffb1 	bl	8001e24 <NVIC_EncodePriority>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec8:	4611      	mov	r1, r2
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff ff80 	bl	8001dd0 <__NVIC_SetPriority>
}
 8001ed0:	bf00      	nop
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff ff54 	bl	8001d94 <__NVIC_EnableIRQ>
}
 8001eec:	bf00      	nop
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e014      	b.n	8001f30 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	791b      	ldrb	r3, [r3, #4]
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d105      	bne.n	8001f1c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff f93c 	bl	8001194 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	795b      	ldrb	r3, [r3, #5]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d101      	bne.n	8001f4e <HAL_DAC_Start+0x16>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e040      	b.n	8001fd0 <HAL_DAC_Start+0x98>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2202      	movs	r2, #2
 8001f58:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6819      	ldr	r1, [r3, #0]
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	f003 0310 	and.w	r3, r3, #16
 8001f66:	2201      	movs	r2, #1
 8001f68:	409a      	lsls	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10f      	bne.n	8001f98 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001f82:	2b3c      	cmp	r3, #60	; 0x3c
 8001f84:	d11d      	bne.n	8001fc2 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f042 0201 	orr.w	r2, r2, #1
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	e014      	b.n	8001fc2 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	f003 0310 	and.w	r3, r3, #16
 8001fa8:	213c      	movs	r1, #60	; 0x3c
 8001faa:	fa01 f303 	lsl.w	r3, r1, r3
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d107      	bne.n	8001fc2 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f042 0202 	orr.w	r2, r2, #2
 8001fc0:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ff2:	d120      	bne.n	8002036 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ffa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002002:	d118      	bne.n	8002036 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2204      	movs	r2, #4
 8002008:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	f043 0201 	orr.w	r2, r3, #1
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800201e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800202e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f852 	bl	80020da <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002040:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002044:	d120      	bne.n	8002088 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800204c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002050:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002054:	d118      	bne.n	8002088 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2204      	movs	r2, #4
 800205a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	f043 0202 	orr.w	r2, r3, #2
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002070:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002080:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f882 	bl	800218c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002090:	b480      	push	{r7}
 8002092:	b087      	sub	sp, #28
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
 800209c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d105      	bne.n	80020ba <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4413      	add	r3, r2
 80020b4:	3308      	adds	r3, #8
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	e004      	b.n	80020c4 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4413      	add	r3, r2
 80020c0:	3314      	adds	r3, #20
 80020c2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	461a      	mov	r2, r3
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	371c      	adds	r7, #28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b087      	sub	sp, #28
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	795b      	ldrb	r3, [r3, #5]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d101      	bne.n	8002106 <HAL_DAC_ConfigChannel+0x18>
 8002102:	2302      	movs	r3, #2
 8002104:	e03c      	b.n	8002180 <HAL_DAC_ConfigChannel+0x92>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2201      	movs	r2, #1
 800210a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2202      	movs	r2, #2
 8002110:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f003 0310 	and.w	r3, r3, #16
 8002120:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	4013      	ands	r3, r2
 800212e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	4313      	orrs	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f003 0310 	and.w	r3, r3, #16
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	4313      	orrs	r3, r2
 800214c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6819      	ldr	r1, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f003 0310 	and.w	r3, r3, #16
 8002162:	22c0      	movs	r2, #192	; 0xc0
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	43da      	mvns	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	400a      	ands	r2, r1
 8002170:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2201      	movs	r2, #1
 8002176:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	371c      	adds	r7, #28
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021ac:	f7ff fc94 	bl	8001ad8 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e099      	b.n	80022f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2202      	movs	r2, #2
 80021c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0201 	bic.w	r2, r2, #1
 80021da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021dc:	e00f      	b.n	80021fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021de:	f7ff fc7b 	bl	8001ad8 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b05      	cmp	r3, #5
 80021ea:	d908      	bls.n	80021fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2220      	movs	r2, #32
 80021f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2203      	movs	r2, #3
 80021f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e078      	b.n	80022f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1e8      	bne.n	80021de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	4b38      	ldr	r3, [pc, #224]	; (80022f8 <HAL_DMA_Init+0x158>)
 8002218:	4013      	ands	r3, r2
 800221a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800222a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002236:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002242:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4313      	orrs	r3, r2
 800224e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	2b04      	cmp	r3, #4
 8002256:	d107      	bne.n	8002268 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	4313      	orrs	r3, r2
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	4313      	orrs	r3, r2
 8002266:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	f023 0307 	bic.w	r3, r3, #7
 800227e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	4313      	orrs	r3, r2
 8002288:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228e:	2b04      	cmp	r3, #4
 8002290:	d117      	bne.n	80022c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	4313      	orrs	r3, r2
 800229a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00e      	beq.n	80022c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 fb09 	bl	80028bc <DMA_CheckFifoParam>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d008      	beq.n	80022c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2240      	movs	r2, #64	; 0x40
 80022b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80022be:	2301      	movs	r3, #1
 80022c0:	e016      	b.n	80022f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 fac0 	bl	8002850 <DMA_CalcBaseAndBitshift>
 80022d0:	4603      	mov	r3, r0
 80022d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d8:	223f      	movs	r2, #63	; 0x3f
 80022da:	409a      	lsls	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	e010803f 	.word	0xe010803f

080022fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800230a:	2300      	movs	r3, #0
 800230c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002312:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800231a:	2b01      	cmp	r3, #1
 800231c:	d101      	bne.n	8002322 <HAL_DMA_Start_IT+0x26>
 800231e:	2302      	movs	r3, #2
 8002320:	e048      	b.n	80023b4 <HAL_DMA_Start_IT+0xb8>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b01      	cmp	r3, #1
 8002334:	d137      	bne.n	80023a6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2202      	movs	r2, #2
 800233a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	68b9      	ldr	r1, [r7, #8]
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 fa52 	bl	80027f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002354:	223f      	movs	r2, #63	; 0x3f
 8002356:	409a      	lsls	r2, r3
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0216 	orr.w	r2, r2, #22
 800236a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	695a      	ldr	r2, [r3, #20]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800237a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	2b00      	cmp	r3, #0
 8002382:	d007      	beq.n	8002394 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0208 	orr.w	r2, r2, #8
 8002392:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0201 	orr.w	r2, r2, #1
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	e005      	b.n	80023b2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80023ae:	2302      	movs	r3, #2
 80023b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80023b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023ca:	f7ff fb85 	bl	8001ad8 <HAL_GetTick>
 80023ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d008      	beq.n	80023ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2280      	movs	r2, #128	; 0x80
 80023e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e052      	b.n	8002494 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0216 	bic.w	r2, r2, #22
 80023fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	695a      	ldr	r2, [r3, #20]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800240c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	2b00      	cmp	r3, #0
 8002414:	d103      	bne.n	800241e <HAL_DMA_Abort+0x62>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800241a:	2b00      	cmp	r3, #0
 800241c:	d007      	beq.n	800242e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 0208 	bic.w	r2, r2, #8
 800242c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0201 	bic.w	r2, r2, #1
 800243c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800243e:	e013      	b.n	8002468 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002440:	f7ff fb4a 	bl	8001ad8 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b05      	cmp	r3, #5
 800244c:	d90c      	bls.n	8002468 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2220      	movs	r2, #32
 8002452:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2203      	movs	r2, #3
 8002458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e015      	b.n	8002494 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1e4      	bne.n	8002440 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247a:	223f      	movs	r2, #63	; 0x3f
 800247c:	409a      	lsls	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d004      	beq.n	80024ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2280      	movs	r2, #128	; 0x80
 80024b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e00c      	b.n	80024d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2205      	movs	r2, #5
 80024be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0201 	bic.w	r2, r2, #1
 80024d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80024ec:	4b8e      	ldr	r3, [pc, #568]	; (8002728 <HAL_DMA_IRQHandler+0x248>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a8e      	ldr	r2, [pc, #568]	; (800272c <HAL_DMA_IRQHandler+0x24c>)
 80024f2:	fba2 2303 	umull	r2, r3, r2, r3
 80024f6:	0a9b      	lsrs	r3, r3, #10
 80024f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250a:	2208      	movs	r2, #8
 800250c:	409a      	lsls	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4013      	ands	r3, r2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d01a      	beq.n	800254c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d013      	beq.n	800254c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0204 	bic.w	r2, r2, #4
 8002532:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002538:	2208      	movs	r2, #8
 800253a:	409a      	lsls	r2, r3
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002544:	f043 0201 	orr.w	r2, r3, #1
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002550:	2201      	movs	r2, #1
 8002552:	409a      	lsls	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4013      	ands	r3, r2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d012      	beq.n	8002582 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00b      	beq.n	8002582 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256e:	2201      	movs	r2, #1
 8002570:	409a      	lsls	r2, r3
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257a:	f043 0202 	orr.w	r2, r3, #2
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002586:	2204      	movs	r2, #4
 8002588:	409a      	lsls	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4013      	ands	r3, r2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d012      	beq.n	80025b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00b      	beq.n	80025b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a4:	2204      	movs	r2, #4
 80025a6:	409a      	lsls	r2, r3
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b0:	f043 0204 	orr.w	r2, r3, #4
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025bc:	2210      	movs	r2, #16
 80025be:	409a      	lsls	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4013      	ands	r3, r2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d043      	beq.n	8002650 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d03c      	beq.n	8002650 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025da:	2210      	movs	r2, #16
 80025dc:	409a      	lsls	r2, r3
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d018      	beq.n	8002622 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d108      	bne.n	8002610 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	2b00      	cmp	r3, #0
 8002604:	d024      	beq.n	8002650 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	4798      	blx	r3
 800260e:	e01f      	b.n	8002650 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002614:	2b00      	cmp	r3, #0
 8002616:	d01b      	beq.n	8002650 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	4798      	blx	r3
 8002620:	e016      	b.n	8002650 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262c:	2b00      	cmp	r3, #0
 800262e:	d107      	bne.n	8002640 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0208 	bic.w	r2, r2, #8
 800263e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002654:	2220      	movs	r2, #32
 8002656:	409a      	lsls	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4013      	ands	r3, r2
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 808f 	beq.w	8002780 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 8087 	beq.w	8002780 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002676:	2220      	movs	r2, #32
 8002678:	409a      	lsls	r2, r3
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b05      	cmp	r3, #5
 8002688:	d136      	bne.n	80026f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0216 	bic.w	r2, r2, #22
 8002698:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695a      	ldr	r2, [r3, #20]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d103      	bne.n	80026ba <HAL_DMA_IRQHandler+0x1da>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d007      	beq.n	80026ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0208 	bic.w	r2, r2, #8
 80026c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ce:	223f      	movs	r2, #63	; 0x3f
 80026d0:	409a      	lsls	r2, r3
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d07e      	beq.n	80027ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	4798      	blx	r3
        }
        return;
 80026f6:	e079      	b.n	80027ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d01d      	beq.n	8002742 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10d      	bne.n	8002730 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002718:	2b00      	cmp	r3, #0
 800271a:	d031      	beq.n	8002780 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	4798      	blx	r3
 8002724:	e02c      	b.n	8002780 <HAL_DMA_IRQHandler+0x2a0>
 8002726:	bf00      	nop
 8002728:	20000000 	.word	0x20000000
 800272c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002734:	2b00      	cmp	r3, #0
 8002736:	d023      	beq.n	8002780 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	4798      	blx	r3
 8002740:	e01e      	b.n	8002780 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10f      	bne.n	8002770 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0210 	bic.w	r2, r2, #16
 800275e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002784:	2b00      	cmp	r3, #0
 8002786:	d032      	beq.n	80027ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b00      	cmp	r3, #0
 8002792:	d022      	beq.n	80027da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2205      	movs	r2, #5
 8002798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0201 	bic.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	3301      	adds	r3, #1
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d307      	bcc.n	80027c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f2      	bne.n	80027ac <HAL_DMA_IRQHandler+0x2cc>
 80027c6:	e000      	b.n	80027ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80027c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d005      	beq.n	80027ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	4798      	blx	r3
 80027ea:	e000      	b.n	80027ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80027ec:	bf00      	nop
    }
  }
}
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
 8002800:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002810:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	2b40      	cmp	r3, #64	; 0x40
 8002820:	d108      	bne.n	8002834 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002832:	e007      	b.n	8002844 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	60da      	str	r2, [r3, #12]
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	b2db      	uxtb	r3, r3
 800285e:	3b10      	subs	r3, #16
 8002860:	4a13      	ldr	r2, [pc, #76]	; (80028b0 <DMA_CalcBaseAndBitshift+0x60>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	091b      	lsrs	r3, r3, #4
 8002868:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800286a:	4a12      	ldr	r2, [pc, #72]	; (80028b4 <DMA_CalcBaseAndBitshift+0x64>)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4413      	add	r3, r2
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2b03      	cmp	r3, #3
 800287c:	d908      	bls.n	8002890 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	461a      	mov	r2, r3
 8002884:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <DMA_CalcBaseAndBitshift+0x68>)
 8002886:	4013      	ands	r3, r2
 8002888:	1d1a      	adds	r2, r3, #4
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	659a      	str	r2, [r3, #88]	; 0x58
 800288e:	e006      	b.n	800289e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	461a      	mov	r2, r3
 8002896:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <DMA_CalcBaseAndBitshift+0x68>)
 8002898:	4013      	ands	r3, r2
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	aaaaaaab 	.word	0xaaaaaaab
 80028b4:	08011ff8 	.word	0x08011ff8
 80028b8:	fffffc00 	.word	0xfffffc00

080028bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d11f      	bne.n	8002916 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d856      	bhi.n	800298a <DMA_CheckFifoParam+0xce>
 80028dc:	a201      	add	r2, pc, #4	; (adr r2, 80028e4 <DMA_CheckFifoParam+0x28>)
 80028de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e2:	bf00      	nop
 80028e4:	080028f5 	.word	0x080028f5
 80028e8:	08002907 	.word	0x08002907
 80028ec:	080028f5 	.word	0x080028f5
 80028f0:	0800298b 	.word	0x0800298b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d046      	beq.n	800298e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002904:	e043      	b.n	800298e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800290e:	d140      	bne.n	8002992 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002914:	e03d      	b.n	8002992 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800291e:	d121      	bne.n	8002964 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2b03      	cmp	r3, #3
 8002924:	d837      	bhi.n	8002996 <DMA_CheckFifoParam+0xda>
 8002926:	a201      	add	r2, pc, #4	; (adr r2, 800292c <DMA_CheckFifoParam+0x70>)
 8002928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292c:	0800293d 	.word	0x0800293d
 8002930:	08002943 	.word	0x08002943
 8002934:	0800293d 	.word	0x0800293d
 8002938:	08002955 	.word	0x08002955
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	73fb      	strb	r3, [r7, #15]
      break;
 8002940:	e030      	b.n	80029a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002946:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d025      	beq.n	800299a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002952:	e022      	b.n	800299a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800295c:	d11f      	bne.n	800299e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002962:	e01c      	b.n	800299e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2b02      	cmp	r3, #2
 8002968:	d903      	bls.n	8002972 <DMA_CheckFifoParam+0xb6>
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	2b03      	cmp	r3, #3
 800296e:	d003      	beq.n	8002978 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002970:	e018      	b.n	80029a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	73fb      	strb	r3, [r7, #15]
      break;
 8002976:	e015      	b.n	80029a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00e      	beq.n	80029a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	73fb      	strb	r3, [r7, #15]
      break;
 8002988:	e00b      	b.n	80029a2 <DMA_CheckFifoParam+0xe6>
      break;
 800298a:	bf00      	nop
 800298c:	e00a      	b.n	80029a4 <DMA_CheckFifoParam+0xe8>
      break;
 800298e:	bf00      	nop
 8002990:	e008      	b.n	80029a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002992:	bf00      	nop
 8002994:	e006      	b.n	80029a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002996:	bf00      	nop
 8002998:	e004      	b.n	80029a4 <DMA_CheckFifoParam+0xe8>
      break;
 800299a:	bf00      	nop
 800299c:	e002      	b.n	80029a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800299e:	bf00      	nop
 80029a0:	e000      	b.n	80029a4 <DMA_CheckFifoParam+0xe8>
      break;
 80029a2:	bf00      	nop
    }
  } 
  
  return status; 
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop

080029b4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e06a      	b.n	8002a9c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d106      	bne.n	80029de <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2223      	movs	r2, #35	; 0x23
 80029d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7fe fc23 	bl	8001224 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029de:	4b31      	ldr	r3, [pc, #196]	; (8002aa4 <HAL_ETH_Init+0xf0>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	4a30      	ldr	r2, [pc, #192]	; (8002aa4 <HAL_ETH_Init+0xf0>)
 80029e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029e8:	6453      	str	r3, [r2, #68]	; 0x44
 80029ea:	4b2e      	ldr	r3, [pc, #184]	; (8002aa4 <HAL_ETH_Init+0xf0>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80029f6:	4b2c      	ldr	r3, [pc, #176]	; (8002aa8 <HAL_ETH_Init+0xf4>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	4a2b      	ldr	r2, [pc, #172]	; (8002aa8 <HAL_ETH_Init+0xf4>)
 80029fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a00:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002a02:	4b29      	ldr	r3, [pc, #164]	; (8002aa8 <HAL_ETH_Init+0xf4>)
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	4927      	ldr	r1, [pc, #156]	; (8002aa8 <HAL_ETH_Init+0xf4>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002a10:	4b25      	ldr	r3, [pc, #148]	; (8002aa8 <HAL_ETH_Init+0xf4>)
 8002a12:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6812      	ldr	r2, [r2, #0]
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a2a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a2c:	f7ff f854 	bl	8001ad8 <HAL_GetTick>
 8002a30:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002a32:	e011      	b.n	8002a58 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002a34:	f7ff f850 	bl	8001ad8 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a42:	d909      	bls.n	8002a58 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2204      	movs	r2, #4
 8002a48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	22e0      	movs	r2, #224	; 0xe0
 8002a50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e021      	b.n	8002a9c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1e4      	bne.n	8002a34 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f958 	bl	8002d20 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f9ff 	bl	8002e74 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 fa55 	bl	8002f26 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	461a      	mov	r2, r3
 8002a82:	2100      	movs	r1, #0
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f9bd 	bl	8002e04 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2210      	movs	r2, #16
 8002a96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	40013800 	.word	0x40013800

08002aac <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	4b51      	ldr	r3, [pc, #324]	; (8002c08 <ETH_SetMACConfig+0x15c>)
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	7c1b      	ldrb	r3, [r3, #16]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d102      	bne.n	8002ad4 <ETH_SetMACConfig+0x28>
 8002ace:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002ad2:	e000      	b.n	8002ad6 <ETH_SetMACConfig+0x2a>
 8002ad4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	7c5b      	ldrb	r3, [r3, #17]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d102      	bne.n	8002ae4 <ETH_SetMACConfig+0x38>
 8002ade:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ae2:	e000      	b.n	8002ae6 <ETH_SetMACConfig+0x3a>
 8002ae4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002ae6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002aec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	7fdb      	ldrb	r3, [r3, #31]
 8002af2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002af4:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002afa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	7f92      	ldrb	r2, [r2, #30]
 8002b00:	2a00      	cmp	r2, #0
 8002b02:	d102      	bne.n	8002b0a <ETH_SetMACConfig+0x5e>
 8002b04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b08:	e000      	b.n	8002b0c <ETH_SetMACConfig+0x60>
 8002b0a:	2200      	movs	r2, #0
                        macconf->Speed |
 8002b0c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	7f1b      	ldrb	r3, [r3, #28]
 8002b12:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002b14:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002b1a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	791b      	ldrb	r3, [r3, #4]
 8002b20:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002b22:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002b2a:	2a00      	cmp	r2, #0
 8002b2c:	d102      	bne.n	8002b34 <ETH_SetMACConfig+0x88>
 8002b2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b32:	e000      	b.n	8002b36 <ETH_SetMACConfig+0x8a>
 8002b34:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002b36:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	7bdb      	ldrb	r3, [r3, #15]
 8002b3c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002b3e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002b44:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b4c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b66:	2001      	movs	r0, #1
 8002b68:	f7fe ffc2 	bl	8001af0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002b82:	4013      	ands	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b8a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002b92:	2a00      	cmp	r2, #0
 8002b94:	d101      	bne.n	8002b9a <ETH_SetMACConfig+0xee>
 8002b96:	2280      	movs	r2, #128	; 0x80
 8002b98:	e000      	b.n	8002b9c <ETH_SetMACConfig+0xf0>
 8002b9a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b9c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002ba2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002baa:	2a01      	cmp	r2, #1
 8002bac:	d101      	bne.n	8002bb2 <ETH_SetMACConfig+0x106>
 8002bae:	2208      	movs	r2, #8
 8002bb0:	e000      	b.n	8002bb4 <ETH_SetMACConfig+0x108>
 8002bb2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002bb4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002bbc:	2a01      	cmp	r2, #1
 8002bbe:	d101      	bne.n	8002bc4 <ETH_SetMACConfig+0x118>
 8002bc0:	2204      	movs	r2, #4
 8002bc2:	e000      	b.n	8002bc6 <ETH_SetMACConfig+0x11a>
 8002bc4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002bc6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002bce:	2a01      	cmp	r2, #1
 8002bd0:	d101      	bne.n	8002bd6 <ETH_SetMACConfig+0x12a>
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	e000      	b.n	8002bd8 <ETH_SetMACConfig+0x12c>
 8002bd6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bf0:	2001      	movs	r0, #1
 8002bf2:	f7fe ff7d 	bl	8001af0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	619a      	str	r2, [r3, #24]
}
 8002bfe:	bf00      	nop
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	ff20810f 	.word	0xff20810f

08002c0c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	4b3d      	ldr	r3, [pc, #244]	; (8002d1c <ETH_SetDMAConfig+0x110>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	7b1b      	ldrb	r3, [r3, #12]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d102      	bne.n	8002c38 <ETH_SetDMAConfig+0x2c>
 8002c32:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002c36:	e000      	b.n	8002c3a <ETH_SetDMAConfig+0x2e>
 8002c38:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	7b5b      	ldrb	r3, [r3, #13]
 8002c3e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002c40:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	7f52      	ldrb	r2, [r2, #29]
 8002c46:	2a00      	cmp	r2, #0
 8002c48:	d102      	bne.n	8002c50 <ETH_SetDMAConfig+0x44>
 8002c4a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c4e:	e000      	b.n	8002c52 <ETH_SetDMAConfig+0x46>
 8002c50:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002c52:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	7b9b      	ldrb	r3, [r3, #14]
 8002c58:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002c5a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002c60:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	7f1b      	ldrb	r3, [r3, #28]
 8002c66:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002c68:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	7f9b      	ldrb	r3, [r3, #30]
 8002c6e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002c70:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002c76:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c7e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002c80:	4313      	orrs	r3, r2
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c90:	461a      	mov	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ca2:	2001      	movs	r0, #1
 8002ca4:	f7fe ff24 	bl	8001af0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	791b      	ldrb	r3, [r3, #4]
 8002cba:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002cc0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002cc6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002ccc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002cd4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002cd6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cdc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002cde:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002ce4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6812      	ldr	r2, [r2, #0]
 8002cea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002cf2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d00:	2001      	movs	r0, #1
 8002d02:	f7fe fef5 	bl	8001af0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d0e:	461a      	mov	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6013      	str	r3, [r2, #0]
}
 8002d14:	bf00      	nop
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	f8de3f23 	.word	0xf8de3f23

08002d20 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b0a6      	sub	sp, #152	; 0x98
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002d34:	2300      	movs	r3, #0
 8002d36:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002d44:	2300      	movs	r3, #0
 8002d46:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002d50:	2300      	movs	r3, #0
 8002d52:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002d56:	2300      	movs	r3, #0
 8002d58:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002d60:	2300      	movs	r3, #0
 8002d62:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002d70:	2300      	movs	r3, #0
 8002d72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002d76:	2300      	movs	r3, #0
 8002d78:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002d82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d86:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002d88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002d94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d98:	4619      	mov	r1, r3
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7ff fe86 	bl	8002aac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002da0:	2301      	movs	r3, #1
 8002da2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002da4:	2301      	movs	r3, #1
 8002da6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002da8:	2301      	movs	r3, #1
 8002daa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002dae:	2301      	movs	r3, #1
 8002db0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002db2:	2300      	movs	r3, #0
 8002db4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002db6:	2300      	movs	r3, #0
 8002db8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002dd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dd4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002dd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002dda:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002ddc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002de0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002de2:	2301      	movs	r3, #1
 8002de4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002dec:	2300      	movs	r3, #0
 8002dee:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002df0:	f107 0308 	add.w	r3, r7, #8
 8002df4:	4619      	mov	r1, r3
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7ff ff08 	bl	8002c0c <ETH_SetDMAConfig>
}
 8002dfc:	bf00      	nop
 8002dfe:	3798      	adds	r7, #152	; 0x98
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b087      	sub	sp, #28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3305      	adds	r3, #5
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	021b      	lsls	r3, r3, #8
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	3204      	adds	r2, #4
 8002e1c:	7812      	ldrb	r2, [r2, #0]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <ETH_MACAddressConfig+0x68>)
 8002e26:	4413      	add	r3, r2
 8002e28:	461a      	mov	r2, r3
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3303      	adds	r3, #3
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	061a      	lsls	r2, r3, #24
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	3302      	adds	r3, #2
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	041b      	lsls	r3, r3, #16
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3301      	adds	r3, #1
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	021b      	lsls	r3, r3, #8
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	7812      	ldrb	r2, [r2, #0]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <ETH_MACAddressConfig+0x6c>)
 8002e56:	4413      	add	r3, r2
 8002e58:	461a      	mov	r2, r3
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	6013      	str	r3, [r2, #0]
}
 8002e5e:	bf00      	nop
 8002e60:	371c      	adds	r7, #28
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	40028040 	.word	0x40028040
 8002e70:	40028044 	.word	0x40028044

08002e74 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	e03e      	b.n	8002f00 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68d9      	ldr	r1, [r3, #12]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	440b      	add	r3, r1
 8002e92:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002eac:	68b9      	ldr	r1, [r7, #8]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	3206      	adds	r2, #6
 8002eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d80c      	bhi.n	8002ee4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68d9      	ldr	r1, [r3, #12]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	440b      	add	r3, r1
 8002edc:	461a      	mov	r2, r3
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	e004      	b.n	8002eee <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	3301      	adds	r3, #1
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2b03      	cmp	r3, #3
 8002f04:	d9bd      	bls.n	8002e82 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f18:	611a      	str	r2, [r3, #16]
}
 8002f1a:	bf00      	nop
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b085      	sub	sp, #20
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	e046      	b.n	8002fc2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6919      	ldr	r1, [r3, #16]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	440b      	add	r3, r1
 8002f44:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	2200      	movs	r2, #0
 8002f56:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2200      	movs	r2, #0
 8002f62:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2200      	movs	r2, #0
 8002f68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002f70:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002f78:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002f86:	68b9      	ldr	r1, [r7, #8]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	3212      	adds	r2, #18
 8002f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d80c      	bhi.n	8002fb2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6919      	ldr	r1, [r3, #16]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	440b      	add	r3, r1
 8002faa:	461a      	mov	r2, r3
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	60da      	str	r2, [r3, #12]
 8002fb0:	e004      	b.n	8002fbc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2b03      	cmp	r3, #3
 8002fc6:	d9b5      	bls.n	8002f34 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691a      	ldr	r2, [r3, #16]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ff2:	60da      	str	r2, [r3, #12]
}
 8002ff4:	bf00      	nop
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003000:	b480      	push	{r7}
 8003002:	b089      	sub	sp, #36	; 0x24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800300a:	2300      	movs	r3, #0
 800300c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800300e:	2300      	movs	r3, #0
 8003010:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003012:	2300      	movs	r3, #0
 8003014:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003016:	2300      	movs	r3, #0
 8003018:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800301a:	2300      	movs	r3, #0
 800301c:	61fb      	str	r3, [r7, #28]
 800301e:	e175      	b.n	800330c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003020:	2201      	movs	r2, #1
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	4013      	ands	r3, r2
 8003032:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	429a      	cmp	r2, r3
 800303a:	f040 8164 	bne.w	8003306 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	2b01      	cmp	r3, #1
 8003048:	d005      	beq.n	8003056 <HAL_GPIO_Init+0x56>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d130      	bne.n	80030b8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	2203      	movs	r2, #3
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	43db      	mvns	r3, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4013      	ands	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4313      	orrs	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800308c:	2201      	movs	r2, #1
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4013      	ands	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	091b      	lsrs	r3, r3, #4
 80030a2:	f003 0201 	and.w	r2, r3, #1
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f003 0303 	and.w	r3, r3, #3
 80030c0:	2b03      	cmp	r3, #3
 80030c2:	d017      	beq.n	80030f4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	2203      	movs	r2, #3
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	43db      	mvns	r3, r3
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	4013      	ands	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f003 0303 	and.w	r3, r3, #3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d123      	bne.n	8003148 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	08da      	lsrs	r2, r3, #3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3208      	adds	r2, #8
 8003108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800310c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	220f      	movs	r2, #15
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4013      	ands	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4313      	orrs	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	08da      	lsrs	r2, r3, #3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	3208      	adds	r2, #8
 8003142:	69b9      	ldr	r1, [r7, #24]
 8003144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	2203      	movs	r2, #3
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	4013      	ands	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f003 0203 	and.w	r2, r3, #3
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4313      	orrs	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 80be 	beq.w	8003306 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800318a:	4b66      	ldr	r3, [pc, #408]	; (8003324 <HAL_GPIO_Init+0x324>)
 800318c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318e:	4a65      	ldr	r2, [pc, #404]	; (8003324 <HAL_GPIO_Init+0x324>)
 8003190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003194:	6453      	str	r3, [r2, #68]	; 0x44
 8003196:	4b63      	ldr	r3, [pc, #396]	; (8003324 <HAL_GPIO_Init+0x324>)
 8003198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80031a2:	4a61      	ldr	r2, [pc, #388]	; (8003328 <HAL_GPIO_Init+0x328>)
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	089b      	lsrs	r3, r3, #2
 80031a8:	3302      	adds	r3, #2
 80031aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	220f      	movs	r2, #15
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43db      	mvns	r3, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4013      	ands	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a58      	ldr	r2, [pc, #352]	; (800332c <HAL_GPIO_Init+0x32c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d037      	beq.n	800323e <HAL_GPIO_Init+0x23e>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a57      	ldr	r2, [pc, #348]	; (8003330 <HAL_GPIO_Init+0x330>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d031      	beq.n	800323a <HAL_GPIO_Init+0x23a>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a56      	ldr	r2, [pc, #344]	; (8003334 <HAL_GPIO_Init+0x334>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d02b      	beq.n	8003236 <HAL_GPIO_Init+0x236>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a55      	ldr	r2, [pc, #340]	; (8003338 <HAL_GPIO_Init+0x338>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d025      	beq.n	8003232 <HAL_GPIO_Init+0x232>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a54      	ldr	r2, [pc, #336]	; (800333c <HAL_GPIO_Init+0x33c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d01f      	beq.n	800322e <HAL_GPIO_Init+0x22e>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a53      	ldr	r2, [pc, #332]	; (8003340 <HAL_GPIO_Init+0x340>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d019      	beq.n	800322a <HAL_GPIO_Init+0x22a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a52      	ldr	r2, [pc, #328]	; (8003344 <HAL_GPIO_Init+0x344>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d013      	beq.n	8003226 <HAL_GPIO_Init+0x226>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a51      	ldr	r2, [pc, #324]	; (8003348 <HAL_GPIO_Init+0x348>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00d      	beq.n	8003222 <HAL_GPIO_Init+0x222>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a50      	ldr	r2, [pc, #320]	; (800334c <HAL_GPIO_Init+0x34c>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d007      	beq.n	800321e <HAL_GPIO_Init+0x21e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a4f      	ldr	r2, [pc, #316]	; (8003350 <HAL_GPIO_Init+0x350>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d101      	bne.n	800321a <HAL_GPIO_Init+0x21a>
 8003216:	2309      	movs	r3, #9
 8003218:	e012      	b.n	8003240 <HAL_GPIO_Init+0x240>
 800321a:	230a      	movs	r3, #10
 800321c:	e010      	b.n	8003240 <HAL_GPIO_Init+0x240>
 800321e:	2308      	movs	r3, #8
 8003220:	e00e      	b.n	8003240 <HAL_GPIO_Init+0x240>
 8003222:	2307      	movs	r3, #7
 8003224:	e00c      	b.n	8003240 <HAL_GPIO_Init+0x240>
 8003226:	2306      	movs	r3, #6
 8003228:	e00a      	b.n	8003240 <HAL_GPIO_Init+0x240>
 800322a:	2305      	movs	r3, #5
 800322c:	e008      	b.n	8003240 <HAL_GPIO_Init+0x240>
 800322e:	2304      	movs	r3, #4
 8003230:	e006      	b.n	8003240 <HAL_GPIO_Init+0x240>
 8003232:	2303      	movs	r3, #3
 8003234:	e004      	b.n	8003240 <HAL_GPIO_Init+0x240>
 8003236:	2302      	movs	r3, #2
 8003238:	e002      	b.n	8003240 <HAL_GPIO_Init+0x240>
 800323a:	2301      	movs	r3, #1
 800323c:	e000      	b.n	8003240 <HAL_GPIO_Init+0x240>
 800323e:	2300      	movs	r3, #0
 8003240:	69fa      	ldr	r2, [r7, #28]
 8003242:	f002 0203 	and.w	r2, r2, #3
 8003246:	0092      	lsls	r2, r2, #2
 8003248:	4093      	lsls	r3, r2
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4313      	orrs	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003250:	4935      	ldr	r1, [pc, #212]	; (8003328 <HAL_GPIO_Init+0x328>)
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	089b      	lsrs	r3, r3, #2
 8003256:	3302      	adds	r3, #2
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800325e:	4b3d      	ldr	r3, [pc, #244]	; (8003354 <HAL_GPIO_Init+0x354>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	43db      	mvns	r3, r3
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4013      	ands	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	4313      	orrs	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003282:	4a34      	ldr	r2, [pc, #208]	; (8003354 <HAL_GPIO_Init+0x354>)
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003288:	4b32      	ldr	r3, [pc, #200]	; (8003354 <HAL_GPIO_Init+0x354>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	43db      	mvns	r3, r3
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	4013      	ands	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032ac:	4a29      	ldr	r2, [pc, #164]	; (8003354 <HAL_GPIO_Init+0x354>)
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032b2:	4b28      	ldr	r3, [pc, #160]	; (8003354 <HAL_GPIO_Init+0x354>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	43db      	mvns	r3, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4013      	ands	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032d6:	4a1f      	ldr	r2, [pc, #124]	; (8003354 <HAL_GPIO_Init+0x354>)
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032dc:	4b1d      	ldr	r3, [pc, #116]	; (8003354 <HAL_GPIO_Init+0x354>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	43db      	mvns	r3, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4013      	ands	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003300:	4a14      	ldr	r2, [pc, #80]	; (8003354 <HAL_GPIO_Init+0x354>)
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	3301      	adds	r3, #1
 800330a:	61fb      	str	r3, [r7, #28]
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	2b0f      	cmp	r3, #15
 8003310:	f67f ae86 	bls.w	8003020 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003314:	bf00      	nop
 8003316:	bf00      	nop
 8003318:	3724      	adds	r7, #36	; 0x24
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40023800 	.word	0x40023800
 8003328:	40013800 	.word	0x40013800
 800332c:	40020000 	.word	0x40020000
 8003330:	40020400 	.word	0x40020400
 8003334:	40020800 	.word	0x40020800
 8003338:	40020c00 	.word	0x40020c00
 800333c:	40021000 	.word	0x40021000
 8003340:	40021400 	.word	0x40021400
 8003344:	40021800 	.word	0x40021800
 8003348:	40021c00 	.word	0x40021c00
 800334c:	40022000 	.word	0x40022000
 8003350:	40022400 	.word	0x40022400
 8003354:	40013c00 	.word	0x40013c00

08003358 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	887b      	ldrh	r3, [r7, #2]
 800336a:	4013      	ands	r3, r2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d002      	beq.n	8003376 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003370:	2301      	movs	r3, #1
 8003372:	73fb      	strb	r3, [r7, #15]
 8003374:	e001      	b.n	800337a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003376:	2300      	movs	r3, #0
 8003378:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800337a:	7bfb      	ldrb	r3, [r7, #15]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	460b      	mov	r3, r1
 8003392:	807b      	strh	r3, [r7, #2]
 8003394:	4613      	mov	r3, r2
 8003396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003398:	787b      	ldrb	r3, [r7, #1]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800339e:	887a      	ldrh	r2, [r7, #2]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80033a4:	e003      	b.n	80033ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80033a6:	887b      	ldrh	r3, [r7, #2]
 80033a8:	041a      	lsls	r2, r3, #16
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	619a      	str	r2, [r3, #24]
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
	...

080033bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e07f      	b.n	80034ce <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d106      	bne.n	80033e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7fd ffd6 	bl	8001394 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2224      	movs	r2, #36	; 0x24
 80033ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0201 	bic.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800340c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800341c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d107      	bne.n	8003436 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003432:	609a      	str	r2, [r3, #8]
 8003434:	e006      	b.n	8003444 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003442:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	2b02      	cmp	r3, #2
 800344a:	d104      	bne.n	8003456 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003454:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6859      	ldr	r1, [r3, #4]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	4b1d      	ldr	r3, [pc, #116]	; (80034d8 <HAL_I2C_Init+0x11c>)
 8003462:	430b      	orrs	r3, r1
 8003464:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003474:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691a      	ldr	r2, [r3, #16]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	69d9      	ldr	r1, [r3, #28]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a1a      	ldr	r2, [r3, #32]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0201 	orr.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2220      	movs	r2, #32
 80034ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	02008000 	.word	0x02008000

080034dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b20      	cmp	r3, #32
 80034f0:	d138      	bne.n	8003564 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d101      	bne.n	8003500 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034fc:	2302      	movs	r3, #2
 80034fe:	e032      	b.n	8003566 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2224      	movs	r2, #36	; 0x24
 800350c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0201 	bic.w	r2, r2, #1
 800351e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800352e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6819      	ldr	r1, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	e000      	b.n	8003566 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003564:	2302      	movs	r3, #2
  }
}
 8003566:	4618      	mov	r0, r3
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003572:	b480      	push	{r7}
 8003574:	b085      	sub	sp, #20
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
 800357a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b20      	cmp	r3, #32
 8003586:	d139      	bne.n	80035fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800358e:	2b01      	cmp	r3, #1
 8003590:	d101      	bne.n	8003596 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003592:	2302      	movs	r3, #2
 8003594:	e033      	b.n	80035fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2224      	movs	r2, #36	; 0x24
 80035a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	021b      	lsls	r3, r3, #8
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 0201 	orr.w	r2, r2, #1
 80035e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035f8:	2300      	movs	r3, #0
 80035fa:	e000      	b.n	80035fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035fc:	2302      	movs	r3, #2
  }
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800360a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800360c:	b08f      	sub	sp, #60	; 0x3c
 800360e:	af0a      	add	r7, sp, #40	; 0x28
 8003610:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e116      	b.n	800384a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d106      	bne.n	800363c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f00d fee6 	bl	8011408 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2203      	movs	r2, #3
 8003640:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364c:	2b00      	cmp	r3, #0
 800364e:	d102      	bne.n	8003656 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f006 f955 	bl	800990a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	603b      	str	r3, [r7, #0]
 8003666:	687e      	ldr	r6, [r7, #4]
 8003668:	466d      	mov	r5, sp
 800366a:	f106 0410 	add.w	r4, r6, #16
 800366e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003670:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003672:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003674:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003676:	e894 0003 	ldmia.w	r4, {r0, r1}
 800367a:	e885 0003 	stmia.w	r5, {r0, r1}
 800367e:	1d33      	adds	r3, r6, #4
 8003680:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003682:	6838      	ldr	r0, [r7, #0]
 8003684:	f006 f836 	bl	80096f4 <USB_CoreInit>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d005      	beq.n	800369a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2202      	movs	r2, #2
 8003692:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e0d7      	b.n	800384a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2100      	movs	r1, #0
 80036a0:	4618      	mov	r0, r3
 80036a2:	f006 f943 	bl	800992c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036a6:	2300      	movs	r3, #0
 80036a8:	73fb      	strb	r3, [r7, #15]
 80036aa:	e04a      	b.n	8003742 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80036ac:	7bfa      	ldrb	r2, [r7, #15]
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	4613      	mov	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	4413      	add	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	333d      	adds	r3, #61	; 0x3d
 80036bc:	2201      	movs	r2, #1
 80036be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036c0:	7bfa      	ldrb	r2, [r7, #15]
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	333c      	adds	r3, #60	; 0x3c
 80036d0:	7bfa      	ldrb	r2, [r7, #15]
 80036d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036d4:	7bfa      	ldrb	r2, [r7, #15]
 80036d6:	7bfb      	ldrb	r3, [r7, #15]
 80036d8:	b298      	uxth	r0, r3
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	4613      	mov	r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	4413      	add	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	3344      	adds	r3, #68	; 0x44
 80036e8:	4602      	mov	r2, r0
 80036ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036ec:	7bfa      	ldrb	r2, [r7, #15]
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	4613      	mov	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	4413      	add	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	3340      	adds	r3, #64	; 0x40
 80036fc:	2200      	movs	r2, #0
 80036fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003700:	7bfa      	ldrb	r2, [r7, #15]
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	4613      	mov	r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	4413      	add	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	3348      	adds	r3, #72	; 0x48
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003714:	7bfa      	ldrb	r2, [r7, #15]
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	4613      	mov	r3, r2
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	4413      	add	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	334c      	adds	r3, #76	; 0x4c
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003728:	7bfa      	ldrb	r2, [r7, #15]
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	4613      	mov	r3, r2
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	4413      	add	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	3354      	adds	r3, #84	; 0x54
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800373c:	7bfb      	ldrb	r3, [r7, #15]
 800373e:	3301      	adds	r3, #1
 8003740:	73fb      	strb	r3, [r7, #15]
 8003742:	7bfa      	ldrb	r2, [r7, #15]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	429a      	cmp	r2, r3
 800374a:	d3af      	bcc.n	80036ac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800374c:	2300      	movs	r3, #0
 800374e:	73fb      	strb	r3, [r7, #15]
 8003750:	e044      	b.n	80037dc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003752:	7bfa      	ldrb	r2, [r7, #15]
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	4613      	mov	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	440b      	add	r3, r1
 8003760:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003764:	2200      	movs	r2, #0
 8003766:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003768:	7bfa      	ldrb	r2, [r7, #15]
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800377a:	7bfa      	ldrb	r2, [r7, #15]
 800377c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800377e:	7bfa      	ldrb	r2, [r7, #15]
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	4613      	mov	r3, r2
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	4413      	add	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	440b      	add	r3, r1
 800378c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003790:	2200      	movs	r2, #0
 8003792:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003794:	7bfa      	ldrb	r2, [r7, #15]
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	4613      	mov	r3, r2
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	4413      	add	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037aa:	7bfa      	ldrb	r2, [r7, #15]
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	4613      	mov	r3, r2
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	4413      	add	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	440b      	add	r3, r1
 80037b8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037c0:	7bfa      	ldrb	r2, [r7, #15]
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	4613      	mov	r3, r2
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	4413      	add	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
 80037d8:	3301      	adds	r3, #1
 80037da:	73fb      	strb	r3, [r7, #15]
 80037dc:	7bfa      	ldrb	r2, [r7, #15]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d3b5      	bcc.n	8003752 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	603b      	str	r3, [r7, #0]
 80037ec:	687e      	ldr	r6, [r7, #4]
 80037ee:	466d      	mov	r5, sp
 80037f0:	f106 0410 	add.w	r4, r6, #16
 80037f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003800:	e885 0003 	stmia.w	r5, {r0, r1}
 8003804:	1d33      	adds	r3, r6, #4
 8003806:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003808:	6838      	ldr	r0, [r7, #0]
 800380a:	f006 f8db 	bl	80099c4 <USB_DevInit>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e014      	b.n	800384a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	2b01      	cmp	r3, #1
 8003836:	d102      	bne.n	800383e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f001 f97b 	bl	8004b34 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f007 fa29 	bl	800ac9a <USB_DevDisconnect>

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003852 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b082      	sub	sp, #8
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_PCD_Start+0x16>
 8003864:	2302      	movs	r3, #2
 8003866:	e012      	b.n	800388e <HAL_PCD_Start+0x3c>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f006 f837 	bl	80098e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f007 f9ea 	bl	800ac58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003896:	b590      	push	{r4, r7, lr}
 8003898:	b08d      	sub	sp, #52	; 0x34
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f007 faa8 	bl	800ae02 <USB_GetMode>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f040 84b7 	bne.w	8004228 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f007 fa0c 	bl	800acdc <USB_ReadInterrupts>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 84ad 	beq.w	8004226 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	0a1b      	lsrs	r3, r3, #8
 80038d6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f007 f9f9 	bl	800acdc <USB_ReadInterrupts>
 80038ea:	4603      	mov	r3, r0
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d107      	bne.n	8003904 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	695a      	ldr	r2, [r3, #20]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f002 0202 	and.w	r2, r2, #2
 8003902:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4618      	mov	r0, r3
 800390a:	f007 f9e7 	bl	800acdc <USB_ReadInterrupts>
 800390e:	4603      	mov	r3, r0
 8003910:	f003 0310 	and.w	r3, r3, #16
 8003914:	2b10      	cmp	r3, #16
 8003916:	d161      	bne.n	80039dc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699a      	ldr	r2, [r3, #24]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0210 	bic.w	r2, r2, #16
 8003926:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	f003 020f 	and.w	r2, r3, #15
 8003934:	4613      	mov	r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	4413      	add	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	4413      	add	r3, r2
 8003944:	3304      	adds	r3, #4
 8003946:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	0c5b      	lsrs	r3, r3, #17
 800394c:	f003 030f 	and.w	r3, r3, #15
 8003950:	2b02      	cmp	r3, #2
 8003952:	d124      	bne.n	800399e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800395a:	4013      	ands	r3, r2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d035      	beq.n	80039cc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	091b      	lsrs	r3, r3, #4
 8003968:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800396a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800396e:	b29b      	uxth	r3, r3
 8003970:	461a      	mov	r2, r3
 8003972:	6a38      	ldr	r0, [r7, #32]
 8003974:	f007 f81e 	bl	800a9b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	691a      	ldr	r2, [r3, #16]
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	091b      	lsrs	r3, r3, #4
 8003980:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003984:	441a      	add	r2, r3
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	6a1a      	ldr	r2, [r3, #32]
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	091b      	lsrs	r3, r3, #4
 8003992:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003996:	441a      	add	r2, r3
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	621a      	str	r2, [r3, #32]
 800399c:	e016      	b.n	80039cc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	0c5b      	lsrs	r3, r3, #17
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	2b06      	cmp	r3, #6
 80039a8:	d110      	bne.n	80039cc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039b0:	2208      	movs	r2, #8
 80039b2:	4619      	mov	r1, r3
 80039b4:	6a38      	ldr	r0, [r7, #32]
 80039b6:	f006 fffd 	bl	800a9b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	6a1a      	ldr	r2, [r3, #32]
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	091b      	lsrs	r3, r3, #4
 80039c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039c6:	441a      	add	r2, r3
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	699a      	ldr	r2, [r3, #24]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0210 	orr.w	r2, r2, #16
 80039da:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f007 f97b 	bl	800acdc <USB_ReadInterrupts>
 80039e6:	4603      	mov	r3, r0
 80039e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80039f0:	f040 80a7 	bne.w	8003b42 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f007 f980 	bl	800ad02 <USB_ReadDevAllOutEpInterrupt>
 8003a02:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003a04:	e099      	b.n	8003b3a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 808e 	beq.w	8003b2e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f007 f9a4 	bl	800ad6a <USB_ReadDevOutEPInterrupt>
 8003a22:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00c      	beq.n	8003a48 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	015a      	lsls	r2, r3, #5
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	4413      	add	r3, r2
 8003a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003a40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 fef0 	bl	8004828 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00c      	beq.n	8003a6c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a5e:	461a      	mov	r2, r3
 8003a60:	2308      	movs	r3, #8
 8003a62:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003a64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 ffc6 	bl	80049f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	f003 0310 	and.w	r3, r3, #16
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d008      	beq.n	8003a88 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a78:	015a      	lsls	r2, r3, #5
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a82:	461a      	mov	r2, r3
 8003a84:	2310      	movs	r3, #16
 8003a86:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d030      	beq.n	8003af4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9a:	2b80      	cmp	r3, #128	; 0x80
 8003a9c:	d109      	bne.n	8003ab2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	69fa      	ldr	r2, [r7, #28]
 8003aa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ab0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	4413      	add	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	78db      	ldrb	r3, [r3, #3]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d108      	bne.n	8003ae2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	4619      	mov	r1, r3
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f00d fdb7 	bl	8011650 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	015a      	lsls	r2, r3, #5
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	4413      	add	r3, r2
 8003aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aee:	461a      	mov	r2, r3
 8003af0:	2302      	movs	r3, #2
 8003af2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	f003 0320 	and.w	r3, r3, #32
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d008      	beq.n	8003b10 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	015a      	lsls	r2, r3, #5
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	2320      	movs	r3, #32
 8003b0e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d009      	beq.n	8003b2e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	015a      	lsls	r2, r3, #5
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b26:	461a      	mov	r2, r3
 8003b28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b2c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	3301      	adds	r3, #1
 8003b32:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b36:	085b      	lsrs	r3, r3, #1
 8003b38:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f47f af62 	bne.w	8003a06 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f007 f8c8 	bl	800acdc <USB_ReadInterrupts>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b56:	f040 80db 	bne.w	8003d10 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f007 f8e9 	bl	800ad36 <USB_ReadDevAllInEpInterrupt>
 8003b64:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003b66:	2300      	movs	r3, #0
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003b6a:	e0cd      	b.n	8003d08 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 80c2 	beq.w	8003cfc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	4611      	mov	r1, r2
 8003b82:	4618      	mov	r0, r3
 8003b84:	f007 f90f 	bl	800ada6 <USB_ReadDevInEPInterrupt>
 8003b88:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d057      	beq.n	8003c44 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	f003 030f 	and.w	r3, r3, #15
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	43db      	mvns	r3, r3
 8003bae:	69f9      	ldr	r1, [r7, #28]
 8003bb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d132      	bne.n	8003c38 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	4413      	add	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	440b      	add	r3, r1
 8003be0:	334c      	adds	r3, #76	; 0x4c
 8003be2:	6819      	ldr	r1, [r3, #0]
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be8:	4613      	mov	r3, r2
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	4413      	add	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4403      	add	r3, r0
 8003bf2:	3348      	adds	r3, #72	; 0x48
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4419      	add	r1, r3
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	4413      	add	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4403      	add	r3, r0
 8003c06:	334c      	adds	r3, #76	; 0x4c
 8003c08:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d113      	bne.n	8003c38 <HAL_PCD_IRQHandler+0x3a2>
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c14:	4613      	mov	r3, r2
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	4413      	add	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	3354      	adds	r3, #84	; 0x54
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d108      	bne.n	8003c38 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6818      	ldr	r0, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c30:	461a      	mov	r2, r3
 8003c32:	2101      	movs	r1, #1
 8003c34:	f007 f918 	bl	800ae68 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f00d fc81 	bl	8011546 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d008      	beq.n	8003c60 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	015a      	lsls	r2, r3, #5
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	4413      	add	r3, r2
 8003c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	2308      	movs	r3, #8
 8003c5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f003 0310 	and.w	r3, r3, #16
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d008      	beq.n	8003c7c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c76:	461a      	mov	r2, r3
 8003c78:	2310      	movs	r3, #16
 8003c7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d008      	beq.n	8003c98 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	015a      	lsls	r2, r3, #5
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c92:	461a      	mov	r2, r3
 8003c94:	2340      	movs	r3, #64	; 0x40
 8003c96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d023      	beq.n	8003cea <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003ca2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ca4:	6a38      	ldr	r0, [r7, #32]
 8003ca6:	f005 ffeb 	bl	8009c80 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cac:	4613      	mov	r3, r2
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	3338      	adds	r3, #56	; 0x38
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	4413      	add	r3, r2
 8003cba:	3304      	adds	r3, #4
 8003cbc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	78db      	ldrb	r3, [r3, #3]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d108      	bne.n	8003cd8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f00d fcce 	bl	8011674 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003cf4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 fd08 	bl	800470c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	3301      	adds	r3, #1
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d04:	085b      	lsrs	r3, r3, #1
 8003d06:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f47f af2e 	bne.w	8003b6c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f006 ffe1 	bl	800acdc <USB_ReadInterrupts>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d24:	d122      	bne.n	8003d6c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	69fa      	ldr	r2, [r7, #28]
 8003d30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d34:	f023 0301 	bic.w	r3, r3, #1
 8003d38:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d108      	bne.n	8003d56 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f00d fe48 	bl	80119e4 <HAL_PCDEx_LPM_Callback>
 8003d54:	e002      	b.n	8003d5c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f00d fc6c 	bl	8011634 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695a      	ldr	r2, [r3, #20]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003d6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f006 ffb3 	bl	800acdc <USB_ReadInterrupts>
 8003d76:	4603      	mov	r3, r0
 8003d78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d80:	d112      	bne.n	8003da8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d102      	bne.n	8003d98 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f00d fc28 	bl	80115e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695a      	ldr	r2, [r3, #20]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003da6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f006 ff95 	bl	800acdc <USB_ReadInterrupts>
 8003db2:	4603      	mov	r3, r0
 8003db4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003db8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dbc:	d121      	bne.n	8003e02 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	695a      	ldr	r2, [r3, #20]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003dcc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d111      	bne.n	8003dfc <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de6:	089b      	lsrs	r3, r3, #2
 8003de8:	f003 020f 	and.w	r2, r3, #15
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003df2:	2101      	movs	r1, #1
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f00d fdf5 	bl	80119e4 <HAL_PCDEx_LPM_Callback>
 8003dfa:	e002      	b.n	8003e02 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f00d fbf3 	bl	80115e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f006 ff68 	bl	800acdc <USB_ReadInterrupts>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e16:	f040 80b7 	bne.w	8003f88 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	69fa      	ldr	r2, [r7, #28]
 8003e24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e28:	f023 0301 	bic.w	r3, r3, #1
 8003e2c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2110      	movs	r1, #16
 8003e34:	4618      	mov	r0, r3
 8003e36:	f005 ff23 	bl	8009c80 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e3e:	e046      	b.n	8003ece <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e52:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e64:	0151      	lsls	r1, r2, #5
 8003e66:	69fa      	ldr	r2, [r7, #28]
 8003e68:	440a      	add	r2, r1
 8003e6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e72:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e76:	015a      	lsls	r2, r3, #5
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e80:	461a      	mov	r2, r3
 8003e82:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e86:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e98:	0151      	lsls	r1, r2, #5
 8003e9a:	69fa      	ldr	r2, [r7, #28]
 8003e9c:	440a      	add	r2, r1
 8003e9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ea2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ea6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eb8:	0151      	lsls	r1, r2, #5
 8003eba:	69fa      	ldr	r2, [r7, #28]
 8003ebc:	440a      	add	r2, r1
 8003ebe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ec2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ec6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eca:	3301      	adds	r3, #1
 8003ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d3b3      	bcc.n	8003e40 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	69fa      	ldr	r2, [r7, #28]
 8003ee2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ee6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003eea:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d016      	beq.n	8003f22 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003efe:	69fa      	ldr	r2, [r7, #28]
 8003f00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f04:	f043 030b 	orr.w	r3, r3, #11
 8003f08:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f14:	69fa      	ldr	r2, [r7, #28]
 8003f16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f1a:	f043 030b 	orr.w	r3, r3, #11
 8003f1e:	6453      	str	r3, [r2, #68]	; 0x44
 8003f20:	e015      	b.n	8003f4e <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f28:	695a      	ldr	r2, [r3, #20]
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f30:	4619      	mov	r1, r3
 8003f32:	f242 032b 	movw	r3, #8235	; 0x202b
 8003f36:	4313      	orrs	r3, r2
 8003f38:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	69fa      	ldr	r2, [r7, #28]
 8003f44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f48:	f043 030b 	orr.w	r3, r3, #11
 8003f4c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	69fa      	ldr	r2, [r7, #28]
 8003f58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f5c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003f60:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6818      	ldr	r0, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f72:	461a      	mov	r2, r3
 8003f74:	f006 ff78 	bl	800ae68 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695a      	ldr	r2, [r3, #20]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003f86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f006 fea5 	bl	800acdc <USB_ReadInterrupts>
 8003f92:	4603      	mov	r3, r0
 8003f94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f9c:	d124      	bne.n	8003fe8 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f006 ff3c 	bl	800ae20 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f005 fee4 	bl	8009d7a <USB_GetDevSpeed>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681c      	ldr	r4, [r3, #0]
 8003fbe:	f001 facd 	bl	800555c <HAL_RCC_GetHCLKFreq>
 8003fc2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	461a      	mov	r2, r3
 8003fcc:	4620      	mov	r0, r4
 8003fce:	f005 fbe9 	bl	80097a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f00d fadf 	bl	8011596 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695a      	ldr	r2, [r3, #20]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003fe6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f006 fe75 	bl	800acdc <USB_ReadInterrupts>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	f003 0308 	and.w	r3, r3, #8
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d10a      	bne.n	8004012 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f00d fabc 	bl	801157a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	695a      	ldr	r2, [r3, #20]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f002 0208 	and.w	r2, r2, #8
 8004010:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f006 fe60 	bl	800acdc <USB_ReadInterrupts>
 800401c:	4603      	mov	r3, r0
 800401e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004022:	2b80      	cmp	r3, #128	; 0x80
 8004024:	d122      	bne.n	800406c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004032:	2301      	movs	r3, #1
 8004034:	627b      	str	r3, [r7, #36]	; 0x24
 8004036:	e014      	b.n	8004062 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004038:	6879      	ldr	r1, [r7, #4]
 800403a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800403c:	4613      	mov	r3, r2
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	4413      	add	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	440b      	add	r3, r1
 8004046:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d105      	bne.n	800405c <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	b2db      	uxtb	r3, r3
 8004054:	4619      	mov	r1, r3
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 fb27 	bl	80046aa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	3301      	adds	r3, #1
 8004060:	627b      	str	r3, [r7, #36]	; 0x24
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004068:	429a      	cmp	r2, r3
 800406a:	d3e5      	bcc.n	8004038 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4618      	mov	r0, r3
 8004072:	f006 fe33 	bl	800acdc <USB_ReadInterrupts>
 8004076:	4603      	mov	r3, r0
 8004078:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800407c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004080:	d13b      	bne.n	80040fa <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004082:	2301      	movs	r3, #1
 8004084:	627b      	str	r3, [r7, #36]	; 0x24
 8004086:	e02b      	b.n	80040e0 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800409c:	4613      	mov	r3, r2
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	4413      	add	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	3340      	adds	r3, #64	; 0x40
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d115      	bne.n	80040da <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80040ae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	da12      	bge.n	80040da <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80040b4:	6879      	ldr	r1, [r7, #4]
 80040b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b8:	4613      	mov	r3, r2
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	4413      	add	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	440b      	add	r3, r1
 80040c2:	333f      	adds	r3, #63	; 0x3f
 80040c4:	2201      	movs	r2, #1
 80040c6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	4619      	mov	r1, r3
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 fae8 	bl	80046aa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	3301      	adds	r3, #1
 80040de:	627b      	str	r3, [r7, #36]	; 0x24
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d3ce      	bcc.n	8004088 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	695a      	ldr	r2, [r3, #20]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80040f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4618      	mov	r0, r3
 8004100:	f006 fdec 	bl	800acdc <USB_ReadInterrupts>
 8004104:	4603      	mov	r3, r0
 8004106:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800410a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800410e:	d155      	bne.n	80041bc <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004110:	2301      	movs	r3, #1
 8004112:	627b      	str	r3, [r7, #36]	; 0x24
 8004114:	e045      	b.n	80041a2 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	015a      	lsls	r2, r3, #5
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	4413      	add	r3, r2
 800411e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800412a:	4613      	mov	r3, r2
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	4413      	add	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	440b      	add	r3, r1
 8004134:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d12e      	bne.n	800419c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800413e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004140:	2b00      	cmp	r3, #0
 8004142:	da2b      	bge.n	800419c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004150:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004154:	429a      	cmp	r2, r3
 8004156:	d121      	bne.n	800419c <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800415c:	4613      	mov	r3, r2
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	4413      	add	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800416a:	2201      	movs	r2, #1
 800416c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10a      	bne.n	800419c <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	69fa      	ldr	r2, [r7, #28]
 8004190:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004194:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004198:	6053      	str	r3, [r2, #4]
            break;
 800419a:	e007      	b.n	80041ac <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	3301      	adds	r3, #1
 80041a0:	627b      	str	r3, [r7, #36]	; 0x24
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d3b4      	bcc.n	8004116 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695a      	ldr	r2, [r3, #20]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80041ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f006 fd8b 	bl	800acdc <USB_ReadInterrupts>
 80041c6:	4603      	mov	r3, r0
 80041c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80041cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d0:	d10a      	bne.n	80041e8 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f00d fa60 	bl	8011698 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695a      	ldr	r2, [r3, #20]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80041e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f006 fd75 	bl	800acdc <USB_ReadInterrupts>
 80041f2:	4603      	mov	r3, r0
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	d115      	bne.n	8004228 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	f003 0304 	and.w	r3, r3, #4
 800420a:	2b00      	cmp	r3, #0
 800420c:	d002      	beq.n	8004214 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f00d fa50 	bl	80116b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6859      	ldr	r1, [r3, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	430a      	orrs	r2, r1
 8004222:	605a      	str	r2, [r3, #4]
 8004224:	e000      	b.n	8004228 <HAL_PCD_IRQHandler+0x992>
      return;
 8004226:	bf00      	nop
    }
  }
}
 8004228:	3734      	adds	r7, #52	; 0x34
 800422a:	46bd      	mov	sp, r7
 800422c:	bd90      	pop	{r4, r7, pc}

0800422e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b082      	sub	sp, #8
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	460b      	mov	r3, r1
 8004238:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <HAL_PCD_SetAddress+0x1a>
 8004244:	2302      	movs	r3, #2
 8004246:	e013      	b.n	8004270 <HAL_PCD_SetAddress+0x42>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	78fa      	ldrb	r2, [r7, #3]
 8004254:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	78fa      	ldrb	r2, [r7, #3]
 800425e:	4611      	mov	r1, r2
 8004260:	4618      	mov	r0, r3
 8004262:	f006 fcd3 	bl	800ac0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	4608      	mov	r0, r1
 8004282:	4611      	mov	r1, r2
 8004284:	461a      	mov	r2, r3
 8004286:	4603      	mov	r3, r0
 8004288:	70fb      	strb	r3, [r7, #3]
 800428a:	460b      	mov	r3, r1
 800428c:	803b      	strh	r3, [r7, #0]
 800428e:	4613      	mov	r3, r2
 8004290:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004296:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800429a:	2b00      	cmp	r3, #0
 800429c:	da0f      	bge.n	80042be <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800429e:	78fb      	ldrb	r3, [r7, #3]
 80042a0:	f003 020f 	and.w	r2, r3, #15
 80042a4:	4613      	mov	r3, r2
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	4413      	add	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	3338      	adds	r3, #56	; 0x38
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	4413      	add	r3, r2
 80042b2:	3304      	adds	r3, #4
 80042b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2201      	movs	r2, #1
 80042ba:	705a      	strb	r2, [r3, #1]
 80042bc:	e00f      	b.n	80042de <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042be:	78fb      	ldrb	r3, [r7, #3]
 80042c0:	f003 020f 	and.w	r2, r3, #15
 80042c4:	4613      	mov	r3, r2
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	4413      	add	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	4413      	add	r3, r2
 80042d4:	3304      	adds	r3, #4
 80042d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80042de:	78fb      	ldrb	r3, [r7, #3]
 80042e0:	f003 030f 	and.w	r3, r3, #15
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80042ea:	883a      	ldrh	r2, [r7, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	78ba      	ldrb	r2, [r7, #2]
 80042f4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	785b      	ldrb	r3, [r3, #1]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d004      	beq.n	8004308 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	b29a      	uxth	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004308:	78bb      	ldrb	r3, [r7, #2]
 800430a:	2b02      	cmp	r3, #2
 800430c:	d102      	bne.n	8004314 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800431a:	2b01      	cmp	r3, #1
 800431c:	d101      	bne.n	8004322 <HAL_PCD_EP_Open+0xaa>
 800431e:	2302      	movs	r3, #2
 8004320:	e00e      	b.n	8004340 <HAL_PCD_EP_Open+0xc8>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68f9      	ldr	r1, [r7, #12]
 8004330:	4618      	mov	r0, r3
 8004332:	f005 fd47 	bl	8009dc4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800433e:	7afb      	ldrb	r3, [r7, #11]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	460b      	mov	r3, r1
 8004352:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004354:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004358:	2b00      	cmp	r3, #0
 800435a:	da0f      	bge.n	800437c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800435c:	78fb      	ldrb	r3, [r7, #3]
 800435e:	f003 020f 	and.w	r2, r3, #15
 8004362:	4613      	mov	r3, r2
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	4413      	add	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	3338      	adds	r3, #56	; 0x38
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	4413      	add	r3, r2
 8004370:	3304      	adds	r3, #4
 8004372:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2201      	movs	r2, #1
 8004378:	705a      	strb	r2, [r3, #1]
 800437a:	e00f      	b.n	800439c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800437c:	78fb      	ldrb	r3, [r7, #3]
 800437e:	f003 020f 	and.w	r2, r3, #15
 8004382:	4613      	mov	r3, r2
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	4413      	add	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	4413      	add	r3, r2
 8004392:	3304      	adds	r3, #4
 8004394:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800439c:	78fb      	ldrb	r3, [r7, #3]
 800439e:	f003 030f 	and.w	r3, r3, #15
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_PCD_EP_Close+0x6e>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e00e      	b.n	80043d4 <HAL_PCD_EP_Close+0x8c>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68f9      	ldr	r1, [r7, #12]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f005 fd85 	bl	8009ed4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	607a      	str	r2, [r7, #4]
 80043e6:	603b      	str	r3, [r7, #0]
 80043e8:	460b      	mov	r3, r1
 80043ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043ec:	7afb      	ldrb	r3, [r7, #11]
 80043ee:	f003 020f 	and.w	r2, r3, #15
 80043f2:	4613      	mov	r3, r2
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	4413      	add	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	4413      	add	r3, r2
 8004402:	3304      	adds	r3, #4
 8004404:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	2200      	movs	r2, #0
 8004416:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	2200      	movs	r2, #0
 800441c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800441e:	7afb      	ldrb	r3, [r7, #11]
 8004420:	f003 030f 	and.w	r3, r3, #15
 8004424:	b2da      	uxtb	r2, r3
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d102      	bne.n	8004438 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004438:	7afb      	ldrb	r3, [r7, #11]
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	2b00      	cmp	r3, #0
 8004440:	d109      	bne.n	8004456 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6818      	ldr	r0, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	b2db      	uxtb	r3, r3
 800444c:	461a      	mov	r2, r3
 800444e:	6979      	ldr	r1, [r7, #20]
 8004450:	f006 f86c 	bl	800a52c <USB_EP0StartXfer>
 8004454:	e008      	b.n	8004468 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6818      	ldr	r0, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	b2db      	uxtb	r3, r3
 8004460:	461a      	mov	r2, r3
 8004462:	6979      	ldr	r1, [r7, #20]
 8004464:	f005 fe12 	bl	800a08c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004472:	b480      	push	{r7}
 8004474:	b083      	sub	sp, #12
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
 800447a:	460b      	mov	r3, r1
 800447c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800447e:	78fb      	ldrb	r3, [r7, #3]
 8004480:	f003 020f 	and.w	r2, r3, #15
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	4613      	mov	r3, r2
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	4413      	add	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	440b      	add	r3, r1
 8004490:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004494:	681b      	ldr	r3, [r3, #0]
}
 8004496:	4618      	mov	r0, r3
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b086      	sub	sp, #24
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	60f8      	str	r0, [r7, #12]
 80044aa:	607a      	str	r2, [r7, #4]
 80044ac:	603b      	str	r3, [r7, #0]
 80044ae:	460b      	mov	r3, r1
 80044b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044b2:	7afb      	ldrb	r3, [r7, #11]
 80044b4:	f003 020f 	and.w	r2, r3, #15
 80044b8:	4613      	mov	r3, r2
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	4413      	add	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	3338      	adds	r3, #56	; 0x38
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	4413      	add	r3, r2
 80044c6:	3304      	adds	r3, #4
 80044c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2200      	movs	r2, #0
 80044da:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	2201      	movs	r2, #1
 80044e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044e2:	7afb      	ldrb	r3, [r7, #11]
 80044e4:	f003 030f 	and.w	r3, r3, #15
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d102      	bne.n	80044fc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044fc:	7afb      	ldrb	r3, [r7, #11]
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	2b00      	cmp	r3, #0
 8004504:	d109      	bne.n	800451a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6818      	ldr	r0, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	b2db      	uxtb	r3, r3
 8004510:	461a      	mov	r2, r3
 8004512:	6979      	ldr	r1, [r7, #20]
 8004514:	f006 f80a 	bl	800a52c <USB_EP0StartXfer>
 8004518:	e008      	b.n	800452c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6818      	ldr	r0, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	b2db      	uxtb	r3, r3
 8004524:	461a      	mov	r2, r3
 8004526:	6979      	ldr	r1, [r7, #20]
 8004528:	f005 fdb0 	bl	800a08c <USB_EPStartXfer>
  }

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3718      	adds	r7, #24
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b084      	sub	sp, #16
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	460b      	mov	r3, r1
 8004540:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004542:	78fb      	ldrb	r3, [r7, #3]
 8004544:	f003 020f 	and.w	r2, r3, #15
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	429a      	cmp	r2, r3
 800454e:	d901      	bls.n	8004554 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e050      	b.n	80045f6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004554:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004558:	2b00      	cmp	r3, #0
 800455a:	da0f      	bge.n	800457c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800455c:	78fb      	ldrb	r3, [r7, #3]
 800455e:	f003 020f 	and.w	r2, r3, #15
 8004562:	4613      	mov	r3, r2
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	4413      	add	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	3338      	adds	r3, #56	; 0x38
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	4413      	add	r3, r2
 8004570:	3304      	adds	r3, #4
 8004572:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2201      	movs	r2, #1
 8004578:	705a      	strb	r2, [r3, #1]
 800457a:	e00d      	b.n	8004598 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800457c:	78fa      	ldrb	r2, [r7, #3]
 800457e:	4613      	mov	r3, r2
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	4413      	add	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	4413      	add	r3, r2
 800458e:	3304      	adds	r3, #4
 8004590:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2201      	movs	r2, #1
 800459c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800459e:	78fb      	ldrb	r3, [r7, #3]
 80045a0:	f003 030f 	and.w	r3, r3, #15
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d101      	bne.n	80045b8 <HAL_PCD_EP_SetStall+0x82>
 80045b4:	2302      	movs	r3, #2
 80045b6:	e01e      	b.n	80045f6 <HAL_PCD_EP_SetStall+0xc0>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68f9      	ldr	r1, [r7, #12]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f006 fa4c 	bl	800aa64 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80045cc:	78fb      	ldrb	r3, [r7, #3]
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10a      	bne.n	80045ec <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6818      	ldr	r0, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	b2d9      	uxtb	r1, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80045e6:	461a      	mov	r2, r3
 80045e8:	f006 fc3e 	bl	800ae68 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b084      	sub	sp, #16
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
 8004606:	460b      	mov	r3, r1
 8004608:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800460a:	78fb      	ldrb	r3, [r7, #3]
 800460c:	f003 020f 	and.w	r2, r3, #15
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	429a      	cmp	r2, r3
 8004616:	d901      	bls.n	800461c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e042      	b.n	80046a2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800461c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004620:	2b00      	cmp	r3, #0
 8004622:	da0f      	bge.n	8004644 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004624:	78fb      	ldrb	r3, [r7, #3]
 8004626:	f003 020f 	and.w	r2, r3, #15
 800462a:	4613      	mov	r3, r2
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	4413      	add	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	3338      	adds	r3, #56	; 0x38
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	4413      	add	r3, r2
 8004638:	3304      	adds	r3, #4
 800463a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2201      	movs	r2, #1
 8004640:	705a      	strb	r2, [r3, #1]
 8004642:	e00f      	b.n	8004664 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004644:	78fb      	ldrb	r3, [r7, #3]
 8004646:	f003 020f 	and.w	r2, r3, #15
 800464a:	4613      	mov	r3, r2
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	4413      	add	r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	4413      	add	r3, r2
 800465a:	3304      	adds	r3, #4
 800465c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800466a:	78fb      	ldrb	r3, [r7, #3]
 800466c:	f003 030f 	and.w	r3, r3, #15
 8004670:	b2da      	uxtb	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800467c:	2b01      	cmp	r3, #1
 800467e:	d101      	bne.n	8004684 <HAL_PCD_EP_ClrStall+0x86>
 8004680:	2302      	movs	r3, #2
 8004682:	e00e      	b.n	80046a2 <HAL_PCD_EP_ClrStall+0xa4>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68f9      	ldr	r1, [r7, #12]
 8004692:	4618      	mov	r0, r3
 8004694:	f006 fa54 	bl	800ab40 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b084      	sub	sp, #16
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	460b      	mov	r3, r1
 80046b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80046b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	da0c      	bge.n	80046d8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046be:	78fb      	ldrb	r3, [r7, #3]
 80046c0:	f003 020f 	and.w	r2, r3, #15
 80046c4:	4613      	mov	r3, r2
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	4413      	add	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	3338      	adds	r3, #56	; 0x38
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	4413      	add	r3, r2
 80046d2:	3304      	adds	r3, #4
 80046d4:	60fb      	str	r3, [r7, #12]
 80046d6:	e00c      	b.n	80046f2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046d8:	78fb      	ldrb	r3, [r7, #3]
 80046da:	f003 020f 	and.w	r2, r3, #15
 80046de:	4613      	mov	r3, r2
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	4413      	add	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	4413      	add	r3, r2
 80046ee:	3304      	adds	r3, #4
 80046f0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68f9      	ldr	r1, [r7, #12]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f006 f873 	bl	800a7e4 <USB_EPStopXfer>
 80046fe:	4603      	mov	r3, r0
 8004700:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004702:	7afb      	ldrb	r3, [r7, #11]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b08a      	sub	sp, #40	; 0x28
 8004710:	af02      	add	r7, sp, #8
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	4613      	mov	r3, r2
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	4413      	add	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	3338      	adds	r3, #56	; 0x38
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	4413      	add	r3, r2
 8004730:	3304      	adds	r3, #4
 8004732:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6a1a      	ldr	r2, [r3, #32]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	429a      	cmp	r2, r3
 800473e:	d901      	bls.n	8004744 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e06c      	b.n	800481e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	699a      	ldr	r2, [r3, #24]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	69fa      	ldr	r2, [r7, #28]
 8004756:	429a      	cmp	r2, r3
 8004758:	d902      	bls.n	8004760 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	3303      	adds	r3, #3
 8004764:	089b      	lsrs	r3, r3, #2
 8004766:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004768:	e02b      	b.n	80047c2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	699a      	ldr	r2, [r3, #24]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	69fa      	ldr	r2, [r7, #28]
 800477c:	429a      	cmp	r2, r3
 800477e:	d902      	bls.n	8004786 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	3303      	adds	r3, #3
 800478a:	089b      	lsrs	r3, r3, #2
 800478c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6919      	ldr	r1, [r3, #16]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	b2da      	uxtb	r2, r3
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	4603      	mov	r3, r0
 80047a4:	6978      	ldr	r0, [r7, #20]
 80047a6:	f006 f8c7 	bl	800a938 <USB_WritePacket>

    ep->xfer_buff  += len;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	691a      	ldr	r2, [r3, #16]
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	441a      	add	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6a1a      	ldr	r2, [r3, #32]
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	441a      	add	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d809      	bhi.n	80047ec <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6a1a      	ldr	r2, [r3, #32]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d203      	bcs.n	80047ec <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1be      	bne.n	800476a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	699a      	ldr	r2, [r3, #24]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d811      	bhi.n	800481c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	f003 030f 	and.w	r3, r3, #15
 80047fe:	2201      	movs	r2, #1
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800480c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	43db      	mvns	r3, r3
 8004812:	6939      	ldr	r1, [r7, #16]
 8004814:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004818:	4013      	ands	r3, r2
 800481a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3720      	adds	r7, #32
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
	...

08004828 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b088      	sub	sp, #32
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	333c      	adds	r3, #60	; 0x3c
 8004840:	3304      	adds	r3, #4
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	015a      	lsls	r2, r3, #5
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	4413      	add	r3, r2
 800484e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d17b      	bne.n	8004956 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b00      	cmp	r3, #0
 8004866:	d015      	beq.n	8004894 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	4a61      	ldr	r2, [pc, #388]	; (80049f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800486c:	4293      	cmp	r3, r2
 800486e:	f240 80b9 	bls.w	80049e4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 80b3 	beq.w	80049e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	015a      	lsls	r2, r3, #5
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	4413      	add	r3, r2
 8004886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488a:	461a      	mov	r2, r3
 800488c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004890:	6093      	str	r3, [r2, #8]
 8004892:	e0a7      	b.n	80049e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	f003 0320 	and.w	r3, r3, #32
 800489a:	2b00      	cmp	r3, #0
 800489c:	d009      	beq.n	80048b2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048aa:	461a      	mov	r2, r3
 80048ac:	2320      	movs	r3, #32
 80048ae:	6093      	str	r3, [r2, #8]
 80048b0:	e098      	b.n	80049e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f040 8093 	bne.w	80049e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	4a4b      	ldr	r2, [pc, #300]	; (80049f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d90f      	bls.n	80048e6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00a      	beq.n	80048e6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048dc:	461a      	mov	r2, r3
 80048de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048e2:	6093      	str	r3, [r2, #8]
 80048e4:	e07e      	b.n	80049e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	4613      	mov	r3, r2
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	4413      	add	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	4413      	add	r3, r2
 80048f8:	3304      	adds	r3, #4
 80048fa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	69da      	ldr	r2, [r3, #28]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	0159      	lsls	r1, r3, #5
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	440b      	add	r3, r1
 8004908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004912:	1ad2      	subs	r2, r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d114      	bne.n	8004948 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d109      	bne.n	800493a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6818      	ldr	r0, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004930:	461a      	mov	r2, r3
 8004932:	2101      	movs	r1, #1
 8004934:	f006 fa98 	bl	800ae68 <USB_EP0_OutStart>
 8004938:	e006      	b.n	8004948 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	691a      	ldr	r2, [r3, #16]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	441a      	add	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	b2db      	uxtb	r3, r3
 800494c:	4619      	mov	r1, r3
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f00c fdde 	bl	8011510 <HAL_PCD_DataOutStageCallback>
 8004954:	e046      	b.n	80049e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	4a26      	ldr	r2, [pc, #152]	; (80049f4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d124      	bne.n	80049a8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00a      	beq.n	800497e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	4413      	add	r3, r2
 8004970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004974:	461a      	mov	r2, r3
 8004976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800497a:	6093      	str	r3, [r2, #8]
 800497c:	e032      	b.n	80049e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	f003 0320 	and.w	r3, r3, #32
 8004984:	2b00      	cmp	r3, #0
 8004986:	d008      	beq.n	800499a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004994:	461a      	mov	r2, r3
 8004996:	2320      	movs	r3, #32
 8004998:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	b2db      	uxtb	r3, r3
 800499e:	4619      	mov	r1, r3
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f00c fdb5 	bl	8011510 <HAL_PCD_DataOutStageCallback>
 80049a6:	e01d      	b.n	80049e4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d114      	bne.n	80049d8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80049ae:	6879      	ldr	r1, [r7, #4]
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	4613      	mov	r3, r2
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	4413      	add	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	440b      	add	r3, r1
 80049bc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d108      	bne.n	80049d8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6818      	ldr	r0, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80049d0:	461a      	mov	r2, r3
 80049d2:	2100      	movs	r1, #0
 80049d4:	f006 fa48 	bl	800ae68 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	4619      	mov	r1, r3
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f00c fd96 	bl	8011510 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3720      	adds	r7, #32
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	4f54300a 	.word	0x4f54300a
 80049f4:	4f54310a 	.word	0x4f54310a

080049f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	333c      	adds	r3, #60	; 0x3c
 8004a10:	3304      	adds	r3, #4
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	015a      	lsls	r2, r3, #5
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	4a15      	ldr	r2, [pc, #84]	; (8004a80 <PCD_EP_OutSetupPacket_int+0x88>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d90e      	bls.n	8004a4c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d009      	beq.n	8004a4c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a44:	461a      	mov	r2, r3
 8004a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a4a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f00c fd4d 	bl	80114ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	4a0a      	ldr	r2, [pc, #40]	; (8004a80 <PCD_EP_OutSetupPacket_int+0x88>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d90c      	bls.n	8004a74 <PCD_EP_OutSetupPacket_int+0x7c>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d108      	bne.n	8004a74 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6818      	ldr	r0, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	2101      	movs	r1, #1
 8004a70:	f006 f9fa 	bl	800ae68 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3718      	adds	r7, #24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	4f54300a 	.word	0x4f54300a

08004a84 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	70fb      	strb	r3, [r7, #3]
 8004a90:	4613      	mov	r3, r2
 8004a92:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004a9c:	78fb      	ldrb	r3, [r7, #3]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d107      	bne.n	8004ab2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004aa2:	883b      	ldrh	r3, [r7, #0]
 8004aa4:	0419      	lsls	r1, r3, #16
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	629a      	str	r2, [r3, #40]	; 0x28
 8004ab0:	e028      	b.n	8004b04 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab8:	0c1b      	lsrs	r3, r3, #16
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	4413      	add	r3, r2
 8004abe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	73fb      	strb	r3, [r7, #15]
 8004ac4:	e00d      	b.n	8004ae2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	7bfb      	ldrb	r3, [r7, #15]
 8004acc:	3340      	adds	r3, #64	; 0x40
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	0c1b      	lsrs	r3, r3, #16
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	4413      	add	r3, r2
 8004ada:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004adc:	7bfb      	ldrb	r3, [r7, #15]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	73fb      	strb	r3, [r7, #15]
 8004ae2:	7bfa      	ldrb	r2, [r7, #15]
 8004ae4:	78fb      	ldrb	r3, [r7, #3]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d3ec      	bcc.n	8004ac6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004aec:	883b      	ldrh	r3, [r7, #0]
 8004aee:	0418      	lsls	r0, r3, #16
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6819      	ldr	r1, [r3, #0]
 8004af4:	78fb      	ldrb	r3, [r7, #3]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	4302      	orrs	r2, r0
 8004afc:	3340      	adds	r3, #64	; 0x40
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	440b      	add	r3, r1
 8004b02:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	887a      	ldrh	r2, [r7, #2]
 8004b24:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b62:	4b05      	ldr	r3, [pc, #20]	; (8004b78 <HAL_PCDEx_ActivateLPM+0x44>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	10000003 	.word	0x10000003

08004b7c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004b82:	2300      	movs	r3, #0
 8004b84:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004b86:	4b23      	ldr	r3, [pc, #140]	; (8004c14 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	4a22      	ldr	r2, [pc, #136]	; (8004c14 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b90:	6413      	str	r3, [r2, #64]	; 0x40
 8004b92:	4b20      	ldr	r3, [pc, #128]	; (8004c14 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004b9e:	4b1e      	ldr	r3, [pc, #120]	; (8004c18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a1d      	ldr	r2, [pc, #116]	; (8004c18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004baa:	f7fc ff95 	bl	8001ad8 <HAL_GetTick>
 8004bae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004bb0:	e009      	b.n	8004bc6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004bb2:	f7fc ff91 	bl	8001ad8 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bc0:	d901      	bls.n	8004bc6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e022      	b.n	8004c0c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004bc6:	4b14      	ldr	r3, [pc, #80]	; (8004c18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bd2:	d1ee      	bne.n	8004bb2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004bd4:	4b10      	ldr	r3, [pc, #64]	; (8004c18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a0f      	ldr	r2, [pc, #60]	; (8004c18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bde:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004be0:	f7fc ff7a 	bl	8001ad8 <HAL_GetTick>
 8004be4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004be6:	e009      	b.n	8004bfc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004be8:	f7fc ff76 	bl	8001ad8 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bf6:	d901      	bls.n	8004bfc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e007      	b.n	8004c0c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004bfc:	4b06      	ldr	r3, [pc, #24]	; (8004c18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c08:	d1ee      	bne.n	8004be8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3708      	adds	r7, #8
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40023800 	.word	0x40023800
 8004c18:	40007000 	.word	0x40007000

08004c1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004c24:	2300      	movs	r3, #0
 8004c26:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e29b      	b.n	800516a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 8087 	beq.w	8004d4e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c40:	4b96      	ldr	r3, [pc, #600]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f003 030c 	and.w	r3, r3, #12
 8004c48:	2b04      	cmp	r3, #4
 8004c4a:	d00c      	beq.n	8004c66 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c4c:	4b93      	ldr	r3, [pc, #588]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f003 030c 	and.w	r3, r3, #12
 8004c54:	2b08      	cmp	r3, #8
 8004c56:	d112      	bne.n	8004c7e <HAL_RCC_OscConfig+0x62>
 8004c58:	4b90      	ldr	r3, [pc, #576]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c64:	d10b      	bne.n	8004c7e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c66:	4b8d      	ldr	r3, [pc, #564]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d06c      	beq.n	8004d4c <HAL_RCC_OscConfig+0x130>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d168      	bne.n	8004d4c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e275      	b.n	800516a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c86:	d106      	bne.n	8004c96 <HAL_RCC_OscConfig+0x7a>
 8004c88:	4b84      	ldr	r3, [pc, #528]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a83      	ldr	r2, [pc, #524]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c92:	6013      	str	r3, [r2, #0]
 8004c94:	e02e      	b.n	8004cf4 <HAL_RCC_OscConfig+0xd8>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10c      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x9c>
 8004c9e:	4b7f      	ldr	r3, [pc, #508]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a7e      	ldr	r2, [pc, #504]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	4b7c      	ldr	r3, [pc, #496]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a7b      	ldr	r2, [pc, #492]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004cb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	e01d      	b.n	8004cf4 <HAL_RCC_OscConfig+0xd8>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cc0:	d10c      	bne.n	8004cdc <HAL_RCC_OscConfig+0xc0>
 8004cc2:	4b76      	ldr	r3, [pc, #472]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a75      	ldr	r2, [pc, #468]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	4b73      	ldr	r3, [pc, #460]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a72      	ldr	r2, [pc, #456]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd8:	6013      	str	r3, [r2, #0]
 8004cda:	e00b      	b.n	8004cf4 <HAL_RCC_OscConfig+0xd8>
 8004cdc:	4b6f      	ldr	r3, [pc, #444]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a6e      	ldr	r2, [pc, #440]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ce6:	6013      	str	r3, [r2, #0]
 8004ce8:	4b6c      	ldr	r3, [pc, #432]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a6b      	ldr	r2, [pc, #428]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d013      	beq.n	8004d24 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfc:	f7fc feec 	bl	8001ad8 <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d04:	f7fc fee8 	bl	8001ad8 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b64      	cmp	r3, #100	; 0x64
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e229      	b.n	800516a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d16:	4b61      	ldr	r3, [pc, #388]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d0f0      	beq.n	8004d04 <HAL_RCC_OscConfig+0xe8>
 8004d22:	e014      	b.n	8004d4e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d24:	f7fc fed8 	bl	8001ad8 <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d2c:	f7fc fed4 	bl	8001ad8 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b64      	cmp	r3, #100	; 0x64
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e215      	b.n	800516a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d3e:	4b57      	ldr	r3, [pc, #348]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1f0      	bne.n	8004d2c <HAL_RCC_OscConfig+0x110>
 8004d4a:	e000      	b.n	8004d4e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d069      	beq.n	8004e2e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d5a:	4b50      	ldr	r3, [pc, #320]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 030c 	and.w	r3, r3, #12
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00b      	beq.n	8004d7e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d66:	4b4d      	ldr	r3, [pc, #308]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f003 030c 	and.w	r3, r3, #12
 8004d6e:	2b08      	cmp	r3, #8
 8004d70:	d11c      	bne.n	8004dac <HAL_RCC_OscConfig+0x190>
 8004d72:	4b4a      	ldr	r3, [pc, #296]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d116      	bne.n	8004dac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d7e:	4b47      	ldr	r3, [pc, #284]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d005      	beq.n	8004d96 <HAL_RCC_OscConfig+0x17a>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d001      	beq.n	8004d96 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e1e9      	b.n	800516a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d96:	4b41      	ldr	r3, [pc, #260]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	493d      	ldr	r1, [pc, #244]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004daa:	e040      	b.n	8004e2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d023      	beq.n	8004dfc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004db4:	4b39      	ldr	r3, [pc, #228]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a38      	ldr	r2, [pc, #224]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004dba:	f043 0301 	orr.w	r3, r3, #1
 8004dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc0:	f7fc fe8a 	bl	8001ad8 <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dc8:	f7fc fe86 	bl	8001ad8 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e1c7      	b.n	800516a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dda:	4b30      	ldr	r3, [pc, #192]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0f0      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004de6:	4b2d      	ldr	r3, [pc, #180]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	4929      	ldr	r1, [pc, #164]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	600b      	str	r3, [r1, #0]
 8004dfa:	e018      	b.n	8004e2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dfc:	4b27      	ldr	r3, [pc, #156]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a26      	ldr	r2, [pc, #152]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004e02:	f023 0301 	bic.w	r3, r3, #1
 8004e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e08:	f7fc fe66 	bl	8001ad8 <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e10:	f7fc fe62 	bl	8001ad8 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e1a3      	b.n	800516a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e22:	4b1e      	ldr	r3, [pc, #120]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1f0      	bne.n	8004e10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0308 	and.w	r3, r3, #8
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d038      	beq.n	8004eac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d019      	beq.n	8004e76 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e42:	4b16      	ldr	r3, [pc, #88]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e46:	4a15      	ldr	r2, [pc, #84]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004e48:	f043 0301 	orr.w	r3, r3, #1
 8004e4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e4e:	f7fc fe43 	bl	8001ad8 <HAL_GetTick>
 8004e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e54:	e008      	b.n	8004e68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e56:	f7fc fe3f 	bl	8001ad8 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e180      	b.n	800516a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e68:	4b0c      	ldr	r3, [pc, #48]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0f0      	beq.n	8004e56 <HAL_RCC_OscConfig+0x23a>
 8004e74:	e01a      	b.n	8004eac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e76:	4b09      	ldr	r3, [pc, #36]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e7a:	4a08      	ldr	r2, [pc, #32]	; (8004e9c <HAL_RCC_OscConfig+0x280>)
 8004e7c:	f023 0301 	bic.w	r3, r3, #1
 8004e80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e82:	f7fc fe29 	bl	8001ad8 <HAL_GetTick>
 8004e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e88:	e00a      	b.n	8004ea0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e8a:	f7fc fe25 	bl	8001ad8 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d903      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e166      	b.n	800516a <HAL_RCC_OscConfig+0x54e>
 8004e9c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ea0:	4b92      	ldr	r3, [pc, #584]	; (80050ec <HAL_RCC_OscConfig+0x4d0>)
 8004ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1ee      	bne.n	8004e8a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0304 	and.w	r3, r3, #4
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 80a4 	beq.w	8005002 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eba:	4b8c      	ldr	r3, [pc, #560]	; (80050ec <HAL_RCC_OscConfig+0x4d0>)
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10d      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ec6:	4b89      	ldr	r3, [pc, #548]	; (80050ec <HAL_RCC_OscConfig+0x4d0>)
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	4a88      	ldr	r2, [pc, #544]	; (80050ec <HAL_RCC_OscConfig+0x4d0>)
 8004ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ed2:	4b86      	ldr	r3, [pc, #536]	; (80050ec <HAL_RCC_OscConfig+0x4d0>)
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eda:	60bb      	str	r3, [r7, #8]
 8004edc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ee2:	4b83      	ldr	r3, [pc, #524]	; (80050f0 <HAL_RCC_OscConfig+0x4d4>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d118      	bne.n	8004f20 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004eee:	4b80      	ldr	r3, [pc, #512]	; (80050f0 <HAL_RCC_OscConfig+0x4d4>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a7f      	ldr	r2, [pc, #508]	; (80050f0 <HAL_RCC_OscConfig+0x4d4>)
 8004ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ef8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004efa:	f7fc fded 	bl	8001ad8 <HAL_GetTick>
 8004efe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f00:	e008      	b.n	8004f14 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f02:	f7fc fde9 	bl	8001ad8 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b64      	cmp	r3, #100	; 0x64
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e12a      	b.n	800516a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f14:	4b76      	ldr	r3, [pc, #472]	; (80050f0 <HAL_RCC_OscConfig+0x4d4>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d0f0      	beq.n	8004f02 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d106      	bne.n	8004f36 <HAL_RCC_OscConfig+0x31a>
 8004f28:	4b70      	ldr	r3, [pc, #448]	; (80050ec <HAL_RCC_OscConfig+0x4d0>)
 8004f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2c:	4a6f      	ldr	r2, [pc, #444]	; (80050ec <HAL_RCC_OscConfig+0x4d0>)
 8004f2e:	f043 0301 	orr.w	r3, r3, #1
 8004f32:	6713      	str	r3, [r2, #112]	; 0x70
 8004f34:	e02d      	b.n	8004f92 <HAL_RCC_OscConfig+0x376>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10c      	bne.n	8004f58 <HAL_RCC_OscConfig+0x33c>
 8004f3e:	4b6b      	ldr	r3, [pc, #428]	; (80050ec <HAL_RCC_OscConfig+0x4d0>)
 8004f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f42:	4a6a      	ldr	r2, [pc, #424]	; (80050ec <HAL_RCC_OscConfig+0x4d0>)
 8004f44:	f023 0301 	bic.w	r3, r3, #1
 8004f48:	6713      	str	r3, [r2, #112]	; 0x70
 8004f4a:	4b68      	ldr	r3, [pc, #416]	; (80050ec <HAL_RCC_OscConfig+0x4d0>)
 8004f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4e:	4a67      	ldr	r2, [pc, #412]	; (80050ec <HAL_RCC_OscConfig+0x4d0>)
 8004f50:	f023 0304 	bic.w	r3, r3, #4
 8004f54:	6713      	str	r3, [r2, #112]	; 0x70
 8004f56:	e01c      	b.n	8004f92 <HAL_RCC_OscConfig+0x376>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	2b05      	cmp	r3, #5
 8004f5e:	d10c      	bne.n	8004f7a <HAL_RCC_OscConfig+0x35e>
 8004f60:	4b62      	ldr	r3, [pc, #392]	; (80050ec <HAL_RCC_OscConfig+0x4d0>)
 8004f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f64:	4a61      	ldr	r2, [pc, #388]	; (80050ec <HAL_RCC_OscConfig+0x4d0>)
 8004f66:	f043 0304 	orr.w	r3, r3, #4
 8004f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f6c:	4b5f      	ldr	r3, [pc, #380]	; (80050ec <HAL_RCC_OscConfig+0x4d0>)
 8004f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f70:	4a5e      	ldr	r2, [pc, #376]	; (80050ec <HAL_RCC_OscConfig+0x4d0>)
 8004f72:	f043 0301 	orr.w	r3, r3, #1
 8004f76:	6713      	str	r3, [r2, #112]	; 0x70
 8004f78:	e00b      	b.n	8004f92 <HAL_RCC_OscConfig+0x376>
 8004f7a:	4b5c      	ldr	r3, [pc, #368]	; (80050ec <HAL_RCC_OscConfig+0x4d0>)
 8004f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7e:	4a5b      	ldr	r2, [pc, #364]	; (80050ec <HAL_RCC_OscConfig+0x4d0>)
 8004f80:	f023 0301 	bic.w	r3, r3, #1
 8004f84:	6713      	str	r3, [r2, #112]	; 0x70
 8004f86:	4b59      	ldr	r3, [pc, #356]	; (80050ec <HAL_RCC_OscConfig+0x4d0>)
 8004f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8a:	4a58      	ldr	r2, [pc, #352]	; (80050ec <HAL_RCC_OscConfig+0x4d0>)
 8004f8c:	f023 0304 	bic.w	r3, r3, #4
 8004f90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d015      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f9a:	f7fc fd9d 	bl	8001ad8 <HAL_GetTick>
 8004f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fa0:	e00a      	b.n	8004fb8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fa2:	f7fc fd99 	bl	8001ad8 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e0d8      	b.n	800516a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fb8:	4b4c      	ldr	r3, [pc, #304]	; (80050ec <HAL_RCC_OscConfig+0x4d0>)
 8004fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d0ee      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x386>
 8004fc4:	e014      	b.n	8004ff0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc6:	f7fc fd87 	bl	8001ad8 <HAL_GetTick>
 8004fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fcc:	e00a      	b.n	8004fe4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fce:	f7fc fd83 	bl	8001ad8 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e0c2      	b.n	800516a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fe4:	4b41      	ldr	r3, [pc, #260]	; (80050ec <HAL_RCC_OscConfig+0x4d0>)
 8004fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1ee      	bne.n	8004fce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ff0:	7dfb      	ldrb	r3, [r7, #23]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d105      	bne.n	8005002 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ff6:	4b3d      	ldr	r3, [pc, #244]	; (80050ec <HAL_RCC_OscConfig+0x4d0>)
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	4a3c      	ldr	r2, [pc, #240]	; (80050ec <HAL_RCC_OscConfig+0x4d0>)
 8004ffc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005000:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 80ae 	beq.w	8005168 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800500c:	4b37      	ldr	r3, [pc, #220]	; (80050ec <HAL_RCC_OscConfig+0x4d0>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f003 030c 	and.w	r3, r3, #12
 8005014:	2b08      	cmp	r3, #8
 8005016:	d06d      	beq.n	80050f4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	2b02      	cmp	r3, #2
 800501e:	d14b      	bne.n	80050b8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005020:	4b32      	ldr	r3, [pc, #200]	; (80050ec <HAL_RCC_OscConfig+0x4d0>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a31      	ldr	r2, [pc, #196]	; (80050ec <HAL_RCC_OscConfig+0x4d0>)
 8005026:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800502a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800502c:	f7fc fd54 	bl	8001ad8 <HAL_GetTick>
 8005030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005032:	e008      	b.n	8005046 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005034:	f7fc fd50 	bl	8001ad8 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b02      	cmp	r3, #2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e091      	b.n	800516a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005046:	4b29      	ldr	r3, [pc, #164]	; (80050ec <HAL_RCC_OscConfig+0x4d0>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1f0      	bne.n	8005034 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	69da      	ldr	r2, [r3, #28]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	431a      	orrs	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005060:	019b      	lsls	r3, r3, #6
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005068:	085b      	lsrs	r3, r3, #1
 800506a:	3b01      	subs	r3, #1
 800506c:	041b      	lsls	r3, r3, #16
 800506e:	431a      	orrs	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005074:	061b      	lsls	r3, r3, #24
 8005076:	431a      	orrs	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507c:	071b      	lsls	r3, r3, #28
 800507e:	491b      	ldr	r1, [pc, #108]	; (80050ec <HAL_RCC_OscConfig+0x4d0>)
 8005080:	4313      	orrs	r3, r2
 8005082:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005084:	4b19      	ldr	r3, [pc, #100]	; (80050ec <HAL_RCC_OscConfig+0x4d0>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a18      	ldr	r2, [pc, #96]	; (80050ec <HAL_RCC_OscConfig+0x4d0>)
 800508a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800508e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005090:	f7fc fd22 	bl	8001ad8 <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005098:	f7fc fd1e 	bl	8001ad8 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e05f      	b.n	800516a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050aa:	4b10      	ldr	r3, [pc, #64]	; (80050ec <HAL_RCC_OscConfig+0x4d0>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d0f0      	beq.n	8005098 <HAL_RCC_OscConfig+0x47c>
 80050b6:	e057      	b.n	8005168 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050b8:	4b0c      	ldr	r3, [pc, #48]	; (80050ec <HAL_RCC_OscConfig+0x4d0>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a0b      	ldr	r2, [pc, #44]	; (80050ec <HAL_RCC_OscConfig+0x4d0>)
 80050be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c4:	f7fc fd08 	bl	8001ad8 <HAL_GetTick>
 80050c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ca:	e008      	b.n	80050de <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050cc:	f7fc fd04 	bl	8001ad8 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e045      	b.n	800516a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050de:	4b03      	ldr	r3, [pc, #12]	; (80050ec <HAL_RCC_OscConfig+0x4d0>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1f0      	bne.n	80050cc <HAL_RCC_OscConfig+0x4b0>
 80050ea:	e03d      	b.n	8005168 <HAL_RCC_OscConfig+0x54c>
 80050ec:	40023800 	.word	0x40023800
 80050f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80050f4:	4b1f      	ldr	r3, [pc, #124]	; (8005174 <HAL_RCC_OscConfig+0x558>)
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d030      	beq.n	8005164 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800510c:	429a      	cmp	r2, r3
 800510e:	d129      	bne.n	8005164 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800511a:	429a      	cmp	r2, r3
 800511c:	d122      	bne.n	8005164 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005124:	4013      	ands	r3, r2
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800512a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800512c:	4293      	cmp	r3, r2
 800512e:	d119      	bne.n	8005164 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513a:	085b      	lsrs	r3, r3, #1
 800513c:	3b01      	subs	r3, #1
 800513e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005140:	429a      	cmp	r2, r3
 8005142:	d10f      	bne.n	8005164 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005150:	429a      	cmp	r2, r3
 8005152:	d107      	bne.n	8005164 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005160:	429a      	cmp	r2, r3
 8005162:	d001      	beq.n	8005168 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e000      	b.n	800516a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3718      	adds	r7, #24
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	40023800 	.word	0x40023800

08005178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005182:	2300      	movs	r3, #0
 8005184:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e0d0      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005190:	4b6a      	ldr	r3, [pc, #424]	; (800533c <HAL_RCC_ClockConfig+0x1c4>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 030f 	and.w	r3, r3, #15
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d910      	bls.n	80051c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800519e:	4b67      	ldr	r3, [pc, #412]	; (800533c <HAL_RCC_ClockConfig+0x1c4>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f023 020f 	bic.w	r2, r3, #15
 80051a6:	4965      	ldr	r1, [pc, #404]	; (800533c <HAL_RCC_ClockConfig+0x1c4>)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ae:	4b63      	ldr	r3, [pc, #396]	; (800533c <HAL_RCC_ClockConfig+0x1c4>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 030f 	and.w	r3, r3, #15
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d001      	beq.n	80051c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e0b8      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d020      	beq.n	800520e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d005      	beq.n	80051e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051d8:	4b59      	ldr	r3, [pc, #356]	; (8005340 <HAL_RCC_ClockConfig+0x1c8>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	4a58      	ldr	r2, [pc, #352]	; (8005340 <HAL_RCC_ClockConfig+0x1c8>)
 80051de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0308 	and.w	r3, r3, #8
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d005      	beq.n	80051fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051f0:	4b53      	ldr	r3, [pc, #332]	; (8005340 <HAL_RCC_ClockConfig+0x1c8>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	4a52      	ldr	r2, [pc, #328]	; (8005340 <HAL_RCC_ClockConfig+0x1c8>)
 80051f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051fc:	4b50      	ldr	r3, [pc, #320]	; (8005340 <HAL_RCC_ClockConfig+0x1c8>)
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	494d      	ldr	r1, [pc, #308]	; (8005340 <HAL_RCC_ClockConfig+0x1c8>)
 800520a:	4313      	orrs	r3, r2
 800520c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	d040      	beq.n	800529c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d107      	bne.n	8005232 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005222:	4b47      	ldr	r3, [pc, #284]	; (8005340 <HAL_RCC_ClockConfig+0x1c8>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d115      	bne.n	800525a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e07f      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2b02      	cmp	r3, #2
 8005238:	d107      	bne.n	800524a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800523a:	4b41      	ldr	r3, [pc, #260]	; (8005340 <HAL_RCC_ClockConfig+0x1c8>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d109      	bne.n	800525a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e073      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800524a:	4b3d      	ldr	r3, [pc, #244]	; (8005340 <HAL_RCC_ClockConfig+0x1c8>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e06b      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800525a:	4b39      	ldr	r3, [pc, #228]	; (8005340 <HAL_RCC_ClockConfig+0x1c8>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f023 0203 	bic.w	r2, r3, #3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	4936      	ldr	r1, [pc, #216]	; (8005340 <HAL_RCC_ClockConfig+0x1c8>)
 8005268:	4313      	orrs	r3, r2
 800526a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800526c:	f7fc fc34 	bl	8001ad8 <HAL_GetTick>
 8005270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005272:	e00a      	b.n	800528a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005274:	f7fc fc30 	bl	8001ad8 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005282:	4293      	cmp	r3, r2
 8005284:	d901      	bls.n	800528a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e053      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800528a:	4b2d      	ldr	r3, [pc, #180]	; (8005340 <HAL_RCC_ClockConfig+0x1c8>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 020c 	and.w	r2, r3, #12
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	429a      	cmp	r2, r3
 800529a:	d1eb      	bne.n	8005274 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800529c:	4b27      	ldr	r3, [pc, #156]	; (800533c <HAL_RCC_ClockConfig+0x1c4>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 030f 	and.w	r3, r3, #15
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d210      	bcs.n	80052cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052aa:	4b24      	ldr	r3, [pc, #144]	; (800533c <HAL_RCC_ClockConfig+0x1c4>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f023 020f 	bic.w	r2, r3, #15
 80052b2:	4922      	ldr	r1, [pc, #136]	; (800533c <HAL_RCC_ClockConfig+0x1c4>)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ba:	4b20      	ldr	r3, [pc, #128]	; (800533c <HAL_RCC_ClockConfig+0x1c4>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 030f 	and.w	r3, r3, #15
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d001      	beq.n	80052cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e032      	b.n	8005332 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0304 	and.w	r3, r3, #4
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d008      	beq.n	80052ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052d8:	4b19      	ldr	r3, [pc, #100]	; (8005340 <HAL_RCC_ClockConfig+0x1c8>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	4916      	ldr	r1, [pc, #88]	; (8005340 <HAL_RCC_ClockConfig+0x1c8>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0308 	and.w	r3, r3, #8
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d009      	beq.n	800530a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052f6:	4b12      	ldr	r3, [pc, #72]	; (8005340 <HAL_RCC_ClockConfig+0x1c8>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	490e      	ldr	r1, [pc, #56]	; (8005340 <HAL_RCC_ClockConfig+0x1c8>)
 8005306:	4313      	orrs	r3, r2
 8005308:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800530a:	f000 f821 	bl	8005350 <HAL_RCC_GetSysClockFreq>
 800530e:	4602      	mov	r2, r0
 8005310:	4b0b      	ldr	r3, [pc, #44]	; (8005340 <HAL_RCC_ClockConfig+0x1c8>)
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	091b      	lsrs	r3, r3, #4
 8005316:	f003 030f 	and.w	r3, r3, #15
 800531a:	490a      	ldr	r1, [pc, #40]	; (8005344 <HAL_RCC_ClockConfig+0x1cc>)
 800531c:	5ccb      	ldrb	r3, [r1, r3]
 800531e:	fa22 f303 	lsr.w	r3, r2, r3
 8005322:	4a09      	ldr	r2, [pc, #36]	; (8005348 <HAL_RCC_ClockConfig+0x1d0>)
 8005324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005326:	4b09      	ldr	r3, [pc, #36]	; (800534c <HAL_RCC_ClockConfig+0x1d4>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4618      	mov	r0, r3
 800532c:	f7fc fa5a 	bl	80017e4 <HAL_InitTick>

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	40023c00 	.word	0x40023c00
 8005340:	40023800 	.word	0x40023800
 8005344:	08011fe0 	.word	0x08011fe0
 8005348:	20000000 	.word	0x20000000
 800534c:	20000004 	.word	0x20000004

08005350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005354:	b094      	sub	sp, #80	; 0x50
 8005356:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005358:	2300      	movs	r3, #0
 800535a:	647b      	str	r3, [r7, #68]	; 0x44
 800535c:	2300      	movs	r3, #0
 800535e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005360:	2300      	movs	r3, #0
 8005362:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005364:	2300      	movs	r3, #0
 8005366:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005368:	4b79      	ldr	r3, [pc, #484]	; (8005550 <HAL_RCC_GetSysClockFreq+0x200>)
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f003 030c 	and.w	r3, r3, #12
 8005370:	2b08      	cmp	r3, #8
 8005372:	d00d      	beq.n	8005390 <HAL_RCC_GetSysClockFreq+0x40>
 8005374:	2b08      	cmp	r3, #8
 8005376:	f200 80e1 	bhi.w	800553c <HAL_RCC_GetSysClockFreq+0x1ec>
 800537a:	2b00      	cmp	r3, #0
 800537c:	d002      	beq.n	8005384 <HAL_RCC_GetSysClockFreq+0x34>
 800537e:	2b04      	cmp	r3, #4
 8005380:	d003      	beq.n	800538a <HAL_RCC_GetSysClockFreq+0x3a>
 8005382:	e0db      	b.n	800553c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005384:	4b73      	ldr	r3, [pc, #460]	; (8005554 <HAL_RCC_GetSysClockFreq+0x204>)
 8005386:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005388:	e0db      	b.n	8005542 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800538a:	4b73      	ldr	r3, [pc, #460]	; (8005558 <HAL_RCC_GetSysClockFreq+0x208>)
 800538c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800538e:	e0d8      	b.n	8005542 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005390:	4b6f      	ldr	r3, [pc, #444]	; (8005550 <HAL_RCC_GetSysClockFreq+0x200>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005398:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800539a:	4b6d      	ldr	r3, [pc, #436]	; (8005550 <HAL_RCC_GetSysClockFreq+0x200>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d063      	beq.n	800546e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053a6:	4b6a      	ldr	r3, [pc, #424]	; (8005550 <HAL_RCC_GetSysClockFreq+0x200>)
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	099b      	lsrs	r3, r3, #6
 80053ac:	2200      	movs	r2, #0
 80053ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80053b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80053b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053b8:	633b      	str	r3, [r7, #48]	; 0x30
 80053ba:	2300      	movs	r3, #0
 80053bc:	637b      	str	r3, [r7, #52]	; 0x34
 80053be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80053c2:	4622      	mov	r2, r4
 80053c4:	462b      	mov	r3, r5
 80053c6:	f04f 0000 	mov.w	r0, #0
 80053ca:	f04f 0100 	mov.w	r1, #0
 80053ce:	0159      	lsls	r1, r3, #5
 80053d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053d4:	0150      	lsls	r0, r2, #5
 80053d6:	4602      	mov	r2, r0
 80053d8:	460b      	mov	r3, r1
 80053da:	4621      	mov	r1, r4
 80053dc:	1a51      	subs	r1, r2, r1
 80053de:	6139      	str	r1, [r7, #16]
 80053e0:	4629      	mov	r1, r5
 80053e2:	eb63 0301 	sbc.w	r3, r3, r1
 80053e6:	617b      	str	r3, [r7, #20]
 80053e8:	f04f 0200 	mov.w	r2, #0
 80053ec:	f04f 0300 	mov.w	r3, #0
 80053f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053f4:	4659      	mov	r1, fp
 80053f6:	018b      	lsls	r3, r1, #6
 80053f8:	4651      	mov	r1, sl
 80053fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053fe:	4651      	mov	r1, sl
 8005400:	018a      	lsls	r2, r1, #6
 8005402:	4651      	mov	r1, sl
 8005404:	ebb2 0801 	subs.w	r8, r2, r1
 8005408:	4659      	mov	r1, fp
 800540a:	eb63 0901 	sbc.w	r9, r3, r1
 800540e:	f04f 0200 	mov.w	r2, #0
 8005412:	f04f 0300 	mov.w	r3, #0
 8005416:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800541a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800541e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005422:	4690      	mov	r8, r2
 8005424:	4699      	mov	r9, r3
 8005426:	4623      	mov	r3, r4
 8005428:	eb18 0303 	adds.w	r3, r8, r3
 800542c:	60bb      	str	r3, [r7, #8]
 800542e:	462b      	mov	r3, r5
 8005430:	eb49 0303 	adc.w	r3, r9, r3
 8005434:	60fb      	str	r3, [r7, #12]
 8005436:	f04f 0200 	mov.w	r2, #0
 800543a:	f04f 0300 	mov.w	r3, #0
 800543e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005442:	4629      	mov	r1, r5
 8005444:	024b      	lsls	r3, r1, #9
 8005446:	4621      	mov	r1, r4
 8005448:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800544c:	4621      	mov	r1, r4
 800544e:	024a      	lsls	r2, r1, #9
 8005450:	4610      	mov	r0, r2
 8005452:	4619      	mov	r1, r3
 8005454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005456:	2200      	movs	r2, #0
 8005458:	62bb      	str	r3, [r7, #40]	; 0x28
 800545a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800545c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005460:	f7fa feee 	bl	8000240 <__aeabi_uldivmod>
 8005464:	4602      	mov	r2, r0
 8005466:	460b      	mov	r3, r1
 8005468:	4613      	mov	r3, r2
 800546a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800546c:	e058      	b.n	8005520 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800546e:	4b38      	ldr	r3, [pc, #224]	; (8005550 <HAL_RCC_GetSysClockFreq+0x200>)
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	099b      	lsrs	r3, r3, #6
 8005474:	2200      	movs	r2, #0
 8005476:	4618      	mov	r0, r3
 8005478:	4611      	mov	r1, r2
 800547a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800547e:	623b      	str	r3, [r7, #32]
 8005480:	2300      	movs	r3, #0
 8005482:	627b      	str	r3, [r7, #36]	; 0x24
 8005484:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005488:	4642      	mov	r2, r8
 800548a:	464b      	mov	r3, r9
 800548c:	f04f 0000 	mov.w	r0, #0
 8005490:	f04f 0100 	mov.w	r1, #0
 8005494:	0159      	lsls	r1, r3, #5
 8005496:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800549a:	0150      	lsls	r0, r2, #5
 800549c:	4602      	mov	r2, r0
 800549e:	460b      	mov	r3, r1
 80054a0:	4641      	mov	r1, r8
 80054a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80054a6:	4649      	mov	r1, r9
 80054a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80054ac:	f04f 0200 	mov.w	r2, #0
 80054b0:	f04f 0300 	mov.w	r3, #0
 80054b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80054b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80054bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80054c0:	ebb2 040a 	subs.w	r4, r2, sl
 80054c4:	eb63 050b 	sbc.w	r5, r3, fp
 80054c8:	f04f 0200 	mov.w	r2, #0
 80054cc:	f04f 0300 	mov.w	r3, #0
 80054d0:	00eb      	lsls	r3, r5, #3
 80054d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054d6:	00e2      	lsls	r2, r4, #3
 80054d8:	4614      	mov	r4, r2
 80054da:	461d      	mov	r5, r3
 80054dc:	4643      	mov	r3, r8
 80054de:	18e3      	adds	r3, r4, r3
 80054e0:	603b      	str	r3, [r7, #0]
 80054e2:	464b      	mov	r3, r9
 80054e4:	eb45 0303 	adc.w	r3, r5, r3
 80054e8:	607b      	str	r3, [r7, #4]
 80054ea:	f04f 0200 	mov.w	r2, #0
 80054ee:	f04f 0300 	mov.w	r3, #0
 80054f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054f6:	4629      	mov	r1, r5
 80054f8:	028b      	lsls	r3, r1, #10
 80054fa:	4621      	mov	r1, r4
 80054fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005500:	4621      	mov	r1, r4
 8005502:	028a      	lsls	r2, r1, #10
 8005504:	4610      	mov	r0, r2
 8005506:	4619      	mov	r1, r3
 8005508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800550a:	2200      	movs	r2, #0
 800550c:	61bb      	str	r3, [r7, #24]
 800550e:	61fa      	str	r2, [r7, #28]
 8005510:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005514:	f7fa fe94 	bl	8000240 <__aeabi_uldivmod>
 8005518:	4602      	mov	r2, r0
 800551a:	460b      	mov	r3, r1
 800551c:	4613      	mov	r3, r2
 800551e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005520:	4b0b      	ldr	r3, [pc, #44]	; (8005550 <HAL_RCC_GetSysClockFreq+0x200>)
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	0c1b      	lsrs	r3, r3, #16
 8005526:	f003 0303 	and.w	r3, r3, #3
 800552a:	3301      	adds	r3, #1
 800552c:	005b      	lsls	r3, r3, #1
 800552e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005530:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005534:	fbb2 f3f3 	udiv	r3, r2, r3
 8005538:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800553a:	e002      	b.n	8005542 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800553c:	4b05      	ldr	r3, [pc, #20]	; (8005554 <HAL_RCC_GetSysClockFreq+0x204>)
 800553e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005540:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005544:	4618      	mov	r0, r3
 8005546:	3750      	adds	r7, #80	; 0x50
 8005548:	46bd      	mov	sp, r7
 800554a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800554e:	bf00      	nop
 8005550:	40023800 	.word	0x40023800
 8005554:	00f42400 	.word	0x00f42400
 8005558:	007a1200 	.word	0x007a1200

0800555c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800555c:	b480      	push	{r7}
 800555e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005560:	4b03      	ldr	r3, [pc, #12]	; (8005570 <HAL_RCC_GetHCLKFreq+0x14>)
 8005562:	681b      	ldr	r3, [r3, #0]
}
 8005564:	4618      	mov	r0, r3
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	20000000 	.word	0x20000000

08005574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005578:	f7ff fff0 	bl	800555c <HAL_RCC_GetHCLKFreq>
 800557c:	4602      	mov	r2, r0
 800557e:	4b05      	ldr	r3, [pc, #20]	; (8005594 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	0a9b      	lsrs	r3, r3, #10
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	4903      	ldr	r1, [pc, #12]	; (8005598 <HAL_RCC_GetPCLK1Freq+0x24>)
 800558a:	5ccb      	ldrb	r3, [r1, r3]
 800558c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005590:	4618      	mov	r0, r3
 8005592:	bd80      	pop	{r7, pc}
 8005594:	40023800 	.word	0x40023800
 8005598:	08011ff0 	.word	0x08011ff0

0800559c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055a0:	f7ff ffdc 	bl	800555c <HAL_RCC_GetHCLKFreq>
 80055a4:	4602      	mov	r2, r0
 80055a6:	4b05      	ldr	r3, [pc, #20]	; (80055bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	0b5b      	lsrs	r3, r3, #13
 80055ac:	f003 0307 	and.w	r3, r3, #7
 80055b0:	4903      	ldr	r1, [pc, #12]	; (80055c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055b2:	5ccb      	ldrb	r3, [r1, r3]
 80055b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	40023800 	.word	0x40023800
 80055c0:	08011ff0 	.word	0x08011ff0

080055c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	220f      	movs	r2, #15
 80055d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80055d4:	4b12      	ldr	r3, [pc, #72]	; (8005620 <HAL_RCC_GetClockConfig+0x5c>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f003 0203 	and.w	r2, r3, #3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80055e0:	4b0f      	ldr	r3, [pc, #60]	; (8005620 <HAL_RCC_GetClockConfig+0x5c>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80055ec:	4b0c      	ldr	r3, [pc, #48]	; (8005620 <HAL_RCC_GetClockConfig+0x5c>)
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80055f8:	4b09      	ldr	r3, [pc, #36]	; (8005620 <HAL_RCC_GetClockConfig+0x5c>)
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	08db      	lsrs	r3, r3, #3
 80055fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005606:	4b07      	ldr	r3, [pc, #28]	; (8005624 <HAL_RCC_GetClockConfig+0x60>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 020f 	and.w	r2, r3, #15
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	601a      	str	r2, [r3, #0]
}
 8005612:	bf00      	nop
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	40023800 	.word	0x40023800
 8005624:	40023c00 	.word	0x40023c00

08005628 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b088      	sub	sp, #32
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005630:	2300      	movs	r3, #0
 8005632:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005634:	2300      	movs	r3, #0
 8005636:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005638:	2300      	movs	r3, #0
 800563a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800563c:	2300      	movs	r3, #0
 800563e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005640:	2300      	movs	r3, #0
 8005642:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b00      	cmp	r3, #0
 800564e:	d012      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005650:	4b69      	ldr	r3, [pc, #420]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	4a68      	ldr	r2, [pc, #416]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005656:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800565a:	6093      	str	r3, [r2, #8]
 800565c:	4b66      	ldr	r3, [pc, #408]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800565e:	689a      	ldr	r2, [r3, #8]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005664:	4964      	ldr	r1, [pc, #400]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005666:	4313      	orrs	r3, r2
 8005668:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005672:	2301      	movs	r3, #1
 8005674:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d017      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005682:	4b5d      	ldr	r3, [pc, #372]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005688:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005690:	4959      	ldr	r1, [pc, #356]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005692:	4313      	orrs	r3, r2
 8005694:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056a0:	d101      	bne.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80056a2:	2301      	movs	r3, #1
 80056a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80056ae:	2301      	movs	r3, #1
 80056b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d017      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80056be:	4b4e      	ldr	r3, [pc, #312]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056cc:	494a      	ldr	r1, [pc, #296]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056dc:	d101      	bne.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80056de:	2301      	movs	r3, #1
 80056e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80056ea:	2301      	movs	r3, #1
 80056ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d001      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80056fa:	2301      	movs	r3, #1
 80056fc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0320 	and.w	r3, r3, #32
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 808b 	beq.w	8005822 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800570c:	4b3a      	ldr	r3, [pc, #232]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800570e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005710:	4a39      	ldr	r2, [pc, #228]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005716:	6413      	str	r3, [r2, #64]	; 0x40
 8005718:	4b37      	ldr	r3, [pc, #220]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800571a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005720:	60bb      	str	r3, [r7, #8]
 8005722:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005724:	4b35      	ldr	r3, [pc, #212]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a34      	ldr	r2, [pc, #208]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800572a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800572e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005730:	f7fc f9d2 	bl	8001ad8 <HAL_GetTick>
 8005734:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005736:	e008      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005738:	f7fc f9ce 	bl	8001ad8 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	2b64      	cmp	r3, #100	; 0x64
 8005744:	d901      	bls.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e38f      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800574a:	4b2c      	ldr	r3, [pc, #176]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005752:	2b00      	cmp	r3, #0
 8005754:	d0f0      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005756:	4b28      	ldr	r3, [pc, #160]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800575e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d035      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	429a      	cmp	r2, r3
 8005772:	d02e      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005774:	4b20      	ldr	r3, [pc, #128]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800577c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800577e:	4b1e      	ldr	r3, [pc, #120]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005782:	4a1d      	ldr	r2, [pc, #116]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005788:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800578a:	4b1b      	ldr	r3, [pc, #108]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800578c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578e:	4a1a      	ldr	r2, [pc, #104]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005790:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005794:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005796:	4a18      	ldr	r2, [pc, #96]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800579c:	4b16      	ldr	r3, [pc, #88]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800579e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d114      	bne.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a8:	f7fc f996 	bl	8001ad8 <HAL_GetTick>
 80057ac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057ae:	e00a      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057b0:	f7fc f992 	bl	8001ad8 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80057be:	4293      	cmp	r3, r2
 80057c0:	d901      	bls.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e351      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057c6:	4b0c      	ldr	r3, [pc, #48]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d0ee      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057de:	d111      	bne.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80057e0:	4b05      	ldr	r3, [pc, #20]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80057ec:	4b04      	ldr	r3, [pc, #16]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80057ee:	400b      	ands	r3, r1
 80057f0:	4901      	ldr	r1, [pc, #4]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	608b      	str	r3, [r1, #8]
 80057f6:	e00b      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80057f8:	40023800 	.word	0x40023800
 80057fc:	40007000 	.word	0x40007000
 8005800:	0ffffcff 	.word	0x0ffffcff
 8005804:	4bac      	ldr	r3, [pc, #688]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	4aab      	ldr	r2, [pc, #684]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800580a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800580e:	6093      	str	r3, [r2, #8]
 8005810:	4ba9      	ldr	r3, [pc, #676]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005812:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800581c:	49a6      	ldr	r1, [pc, #664]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800581e:	4313      	orrs	r3, r2
 8005820:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0310 	and.w	r3, r3, #16
 800582a:	2b00      	cmp	r3, #0
 800582c:	d010      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800582e:	4ba2      	ldr	r3, [pc, #648]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005834:	4aa0      	ldr	r2, [pc, #640]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005836:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800583a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800583e:	4b9e      	ldr	r3, [pc, #632]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005840:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005848:	499b      	ldr	r1, [pc, #620]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800584a:	4313      	orrs	r3, r2
 800584c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00a      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800585c:	4b96      	ldr	r3, [pc, #600]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800585e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005862:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800586a:	4993      	ldr	r1, [pc, #588]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800586c:	4313      	orrs	r3, r2
 800586e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00a      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800587e:	4b8e      	ldr	r3, [pc, #568]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005884:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800588c:	498a      	ldr	r1, [pc, #552]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800588e:	4313      	orrs	r3, r2
 8005890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00a      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058a0:	4b85      	ldr	r3, [pc, #532]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058ae:	4982      	ldr	r1, [pc, #520]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00a      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80058c2:	4b7d      	ldr	r3, [pc, #500]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d0:	4979      	ldr	r1, [pc, #484]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00a      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058e4:	4b74      	ldr	r3, [pc, #464]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ea:	f023 0203 	bic.w	r2, r3, #3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f2:	4971      	ldr	r1, [pc, #452]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058f4:	4313      	orrs	r3, r2
 80058f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00a      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005906:	4b6c      	ldr	r3, [pc, #432]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800590c:	f023 020c 	bic.w	r2, r3, #12
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005914:	4968      	ldr	r1, [pc, #416]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005916:	4313      	orrs	r3, r2
 8005918:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00a      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005928:	4b63      	ldr	r3, [pc, #396]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800592a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800592e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005936:	4960      	ldr	r1, [pc, #384]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005938:	4313      	orrs	r3, r2
 800593a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00a      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800594a:	4b5b      	ldr	r3, [pc, #364]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800594c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005950:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005958:	4957      	ldr	r1, [pc, #348]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800595a:	4313      	orrs	r3, r2
 800595c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00a      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800596c:	4b52      	ldr	r3, [pc, #328]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800596e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005972:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800597a:	494f      	ldr	r1, [pc, #316]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800597c:	4313      	orrs	r3, r2
 800597e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00a      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800598e:	4b4a      	ldr	r3, [pc, #296]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005994:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800599c:	4946      	ldr	r1, [pc, #280]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00a      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80059b0:	4b41      	ldr	r3, [pc, #260]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059be:	493e      	ldr	r1, [pc, #248]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80059d2:	4b39      	ldr	r3, [pc, #228]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059e0:	4935      	ldr	r1, [pc, #212]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00a      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80059f4:	4b30      	ldr	r3, [pc, #192]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059fa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a02:	492d      	ldr	r1, [pc, #180]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d011      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005a16:	4b28      	ldr	r3, [pc, #160]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a1c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a24:	4924      	ldr	r1, [pc, #144]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a34:	d101      	bne.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005a36:	2301      	movs	r3, #1
 8005a38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0308 	and.w	r3, r3, #8
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d001      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005a46:	2301      	movs	r3, #1
 8005a48:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00a      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a56:	4b18      	ldr	r3, [pc, #96]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a5c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a64:	4914      	ldr	r1, [pc, #80]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00b      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a78:	4b0f      	ldr	r3, [pc, #60]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a7e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a88:	490b      	ldr	r1, [pc, #44]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00f      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005a9c:	4b06      	ldr	r3, [pc, #24]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aac:	4902      	ldr	r1, [pc, #8]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005ab4:	e002      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005ab6:	bf00      	nop
 8005ab8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00b      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005ac8:	4b8a      	ldr	r3, [pc, #552]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005aca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ace:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad8:	4986      	ldr	r1, [pc, #536]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00b      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005aec:	4b81      	ldr	r3, [pc, #516]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005aee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005af2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005afc:	497d      	ldr	r1, [pc, #500]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d006      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 80d6 	beq.w	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b18:	4b76      	ldr	r3, [pc, #472]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a75      	ldr	r2, [pc, #468]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b24:	f7fb ffd8 	bl	8001ad8 <HAL_GetTick>
 8005b28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b2a:	e008      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b2c:	f7fb ffd4 	bl	8001ad8 <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	2b64      	cmp	r3, #100	; 0x64
 8005b38:	d901      	bls.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e195      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b3e:	4b6d      	ldr	r3, [pc, #436]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1f0      	bne.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d021      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d11d      	bne.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005b5e:	4b65      	ldr	r3, [pc, #404]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b64:	0c1b      	lsrs	r3, r3, #16
 8005b66:	f003 0303 	and.w	r3, r3, #3
 8005b6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b6c:	4b61      	ldr	r3, [pc, #388]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b72:	0e1b      	lsrs	r3, r3, #24
 8005b74:	f003 030f 	and.w	r3, r3, #15
 8005b78:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	019a      	lsls	r2, r3, #6
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	041b      	lsls	r3, r3, #16
 8005b84:	431a      	orrs	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	061b      	lsls	r3, r3, #24
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	071b      	lsls	r3, r3, #28
 8005b92:	4958      	ldr	r1, [pc, #352]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d004      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005baa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bae:	d00a      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d02e      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bc4:	d129      	bne.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005bc6:	4b4b      	ldr	r3, [pc, #300]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bcc:	0c1b      	lsrs	r3, r3, #16
 8005bce:	f003 0303 	and.w	r3, r3, #3
 8005bd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005bd4:	4b47      	ldr	r3, [pc, #284]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bda:	0f1b      	lsrs	r3, r3, #28
 8005bdc:	f003 0307 	and.w	r3, r3, #7
 8005be0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	019a      	lsls	r2, r3, #6
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	041b      	lsls	r3, r3, #16
 8005bec:	431a      	orrs	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	061b      	lsls	r3, r3, #24
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	071b      	lsls	r3, r3, #28
 8005bfa:	493e      	ldr	r1, [pc, #248]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005c02:	4b3c      	ldr	r3, [pc, #240]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c08:	f023 021f 	bic.w	r2, r3, #31
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	3b01      	subs	r3, #1
 8005c12:	4938      	ldr	r1, [pc, #224]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d01d      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005c26:	4b33      	ldr	r3, [pc, #204]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c2c:	0e1b      	lsrs	r3, r3, #24
 8005c2e:	f003 030f 	and.w	r3, r3, #15
 8005c32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005c34:	4b2f      	ldr	r3, [pc, #188]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c3a:	0f1b      	lsrs	r3, r3, #28
 8005c3c:	f003 0307 	and.w	r3, r3, #7
 8005c40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	019a      	lsls	r2, r3, #6
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	041b      	lsls	r3, r3, #16
 8005c4e:	431a      	orrs	r2, r3
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	061b      	lsls	r3, r3, #24
 8005c54:	431a      	orrs	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	071b      	lsls	r3, r3, #28
 8005c5a:	4926      	ldr	r1, [pc, #152]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d011      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	019a      	lsls	r2, r3, #6
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	041b      	lsls	r3, r3, #16
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	061b      	lsls	r3, r3, #24
 8005c82:	431a      	orrs	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	071b      	lsls	r3, r3, #28
 8005c8a:	491a      	ldr	r1, [pc, #104]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c92:	4b18      	ldr	r3, [pc, #96]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a17      	ldr	r2, [pc, #92]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c9e:	f7fb ff1b 	bl	8001ad8 <HAL_GetTick>
 8005ca2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ca4:	e008      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ca6:	f7fb ff17 	bl	8001ad8 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	2b64      	cmp	r3, #100	; 0x64
 8005cb2:	d901      	bls.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e0d8      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cb8:	4b0e      	ldr	r3, [pc, #56]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d0f0      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	f040 80ce 	bne.w	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005ccc:	4b09      	ldr	r3, [pc, #36]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a08      	ldr	r2, [pc, #32]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cd8:	f7fb fefe 	bl	8001ad8 <HAL_GetTick>
 8005cdc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005cde:	e00b      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ce0:	f7fb fefa 	bl	8001ad8 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b64      	cmp	r3, #100	; 0x64
 8005cec:	d904      	bls.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e0bb      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005cf2:	bf00      	nop
 8005cf4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005cf8:	4b5e      	ldr	r3, [pc, #376]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d04:	d0ec      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d009      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d02e      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d12a      	bne.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005d2e:	4b51      	ldr	r3, [pc, #324]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d34:	0c1b      	lsrs	r3, r3, #16
 8005d36:	f003 0303 	and.w	r3, r3, #3
 8005d3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d3c:	4b4d      	ldr	r3, [pc, #308]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d42:	0f1b      	lsrs	r3, r3, #28
 8005d44:	f003 0307 	and.w	r3, r3, #7
 8005d48:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	019a      	lsls	r2, r3, #6
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	041b      	lsls	r3, r3, #16
 8005d54:	431a      	orrs	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	061b      	lsls	r3, r3, #24
 8005d5c:	431a      	orrs	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	071b      	lsls	r3, r3, #28
 8005d62:	4944      	ldr	r1, [pc, #272]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005d6a:	4b42      	ldr	r3, [pc, #264]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d70:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	021b      	lsls	r3, r3, #8
 8005d7c:	493d      	ldr	r1, [pc, #244]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d022      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d98:	d11d      	bne.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d9a:	4b36      	ldr	r3, [pc, #216]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da0:	0e1b      	lsrs	r3, r3, #24
 8005da2:	f003 030f 	and.w	r3, r3, #15
 8005da6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005da8:	4b32      	ldr	r3, [pc, #200]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dae:	0f1b      	lsrs	r3, r3, #28
 8005db0:	f003 0307 	and.w	r3, r3, #7
 8005db4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	019a      	lsls	r2, r3, #6
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	041b      	lsls	r3, r3, #16
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	061b      	lsls	r3, r3, #24
 8005dc8:	431a      	orrs	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	071b      	lsls	r3, r3, #28
 8005dce:	4929      	ldr	r1, [pc, #164]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0308 	and.w	r3, r3, #8
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d028      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005de2:	4b24      	ldr	r3, [pc, #144]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de8:	0e1b      	lsrs	r3, r3, #24
 8005dea:	f003 030f 	and.w	r3, r3, #15
 8005dee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005df0:	4b20      	ldr	r3, [pc, #128]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df6:	0c1b      	lsrs	r3, r3, #16
 8005df8:	f003 0303 	and.w	r3, r3, #3
 8005dfc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	019a      	lsls	r2, r3, #6
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	041b      	lsls	r3, r3, #16
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	061b      	lsls	r3, r3, #24
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	69db      	ldr	r3, [r3, #28]
 8005e14:	071b      	lsls	r3, r3, #28
 8005e16:	4917      	ldr	r1, [pc, #92]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005e1e:	4b15      	ldr	r3, [pc, #84]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2c:	4911      	ldr	r1, [pc, #68]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005e34:	4b0f      	ldr	r3, [pc, #60]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a0e      	ldr	r2, [pc, #56]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e40:	f7fb fe4a 	bl	8001ad8 <HAL_GetTick>
 8005e44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e46:	e008      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e48:	f7fb fe46 	bl	8001ad8 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b64      	cmp	r3, #100	; 0x64
 8005e54:	d901      	bls.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e007      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e5a:	4b06      	ldr	r3, [pc, #24]	; (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e66:	d1ef      	bne.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3720      	adds	r7, #32
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	40023800 	.word	0x40023800

08005e78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e09d      	b.n	8005fc6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d108      	bne.n	8005ea4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e9a:	d009      	beq.n	8005eb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	61da      	str	r2, [r3, #28]
 8005ea2:	e005      	b.n	8005eb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d106      	bne.n	8005ed0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f7fb fac2 	bl	8001454 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ee6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ef0:	d902      	bls.n	8005ef8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	60fb      	str	r3, [r7, #12]
 8005ef6:	e002      	b.n	8005efe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005efc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005f06:	d007      	beq.n	8005f18 <HAL_SPI_Init+0xa0>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f10:	d002      	beq.n	8005f18 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f28:	431a      	orrs	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	431a      	orrs	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f46:	431a      	orrs	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	69db      	ldr	r3, [r3, #28]
 8005f4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f50:	431a      	orrs	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f5a:	ea42 0103 	orr.w	r1, r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f62:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	0c1b      	lsrs	r3, r3, #16
 8005f74:	f003 0204 	and.w	r2, r3, #4
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7c:	f003 0310 	and.w	r3, r3, #16
 8005f80:	431a      	orrs	r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f86:	f003 0308 	and.w	r3, r3, #8
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005f94:	ea42 0103 	orr.w	r1, r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	69da      	ldr	r2, [r3, #28]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
	...

08005fd0 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d110      	bne.n	800600c <HAL_SPI_Receive_DMA+0x3c>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ff2:	d10b      	bne.n	800600c <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2204      	movs	r2, #4
 8005ff8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8005ffc:	88fb      	ldrh	r3, [r7, #6]
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	68b9      	ldr	r1, [r7, #8]
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f000 f908 	bl	8006218 <HAL_SPI_TransmitReceive_DMA>
 8006008:	4603      	mov	r3, r0
 800600a:	e0fb      	b.n	8006204 <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006012:	2b01      	cmp	r3, #1
 8006014:	d101      	bne.n	800601a <HAL_SPI_Receive_DMA+0x4a>
 8006016:	2302      	movs	r3, #2
 8006018:	e0f4      	b.n	8006204 <HAL_SPI_Receive_DMA+0x234>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b01      	cmp	r3, #1
 800602c:	d002      	beq.n	8006034 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800602e:	2302      	movs	r3, #2
 8006030:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006032:	e0e2      	b.n	80061fa <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d002      	beq.n	8006040 <HAL_SPI_Receive_DMA+0x70>
 800603a:	88fb      	ldrh	r3, [r7, #6]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d102      	bne.n	8006046 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006044:	e0d9      	b.n	80061fa <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2204      	movs	r2, #4
 800604a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	88fa      	ldrh	r2, [r7, #6]
 800605e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	88fa      	ldrh	r2, [r7, #6]
 8006066:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800608a:	d10f      	bne.n	80060ac <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800609a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80060aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685a      	ldr	r2, [r3, #4]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060ba:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060c4:	d908      	bls.n	80060d8 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80060d4:	605a      	str	r2, [r3, #4]
 80060d6:	e042      	b.n	800615e <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060e6:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060f2:	d134      	bne.n	800615e <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006102:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800610a:	b29b      	uxth	r3, r3
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b00      	cmp	r3, #0
 8006112:	d111      	bne.n	8006138 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685a      	ldr	r2, [r3, #4]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006122:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800612a:	b29b      	uxth	r3, r3
 800612c:	085b      	lsrs	r3, r3, #1
 800612e:	b29a      	uxth	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006136:	e012      	b.n	800615e <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006146:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800614e:	b29b      	uxth	r3, r3
 8006150:	085b      	lsrs	r3, r3, #1
 8006152:	b29b      	uxth	r3, r3
 8006154:	3301      	adds	r3, #1
 8006156:	b29a      	uxth	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006162:	4a2a      	ldr	r2, [pc, #168]	; (800620c <HAL_SPI_Receive_DMA+0x23c>)
 8006164:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800616a:	4a29      	ldr	r2, [pc, #164]	; (8006210 <HAL_SPI_Receive_DMA+0x240>)
 800616c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006172:	4a28      	ldr	r2, [pc, #160]	; (8006214 <HAL_SPI_Receive_DMA+0x244>)
 8006174:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800617a:	2200      	movs	r2, #0
 800617c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	330c      	adds	r3, #12
 8006188:	4619      	mov	r1, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618e:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006196:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006198:	f7fc f8b0 	bl	80022fc <HAL_DMA_Start_IT>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00c      	beq.n	80061bc <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061a6:	f043 0210 	orr.w	r2, r3, #16
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80061ba:	e01e      	b.n	80061fa <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c6:	2b40      	cmp	r3, #64	; 0x40
 80061c8:	d007      	beq.n	80061da <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061d8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f042 0220 	orr.w	r2, r2, #32
 80061e8:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f042 0201 	orr.w	r2, r2, #1
 80061f8:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006202:	7dfb      	ldrb	r3, [r7, #23]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3718      	adds	r7, #24
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	080066bd 	.word	0x080066bd
 8006210:	08006581 	.word	0x08006581
 8006214:	080066f5 	.word	0x080066f5

08006218 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
 8006224:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006226:	2300      	movs	r3, #0
 8006228:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006230:	2b01      	cmp	r3, #1
 8006232:	d101      	bne.n	8006238 <HAL_SPI_TransmitReceive_DMA+0x20>
 8006234:	2302      	movs	r3, #2
 8006236:	e16c      	b.n	8006512 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006246:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800624e:	7dbb      	ldrb	r3, [r7, #22]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d00d      	beq.n	8006270 <HAL_SPI_TransmitReceive_DMA+0x58>
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800625a:	d106      	bne.n	800626a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d102      	bne.n	800626a <HAL_SPI_TransmitReceive_DMA+0x52>
 8006264:	7dbb      	ldrb	r3, [r7, #22]
 8006266:	2b04      	cmp	r3, #4
 8006268:	d002      	beq.n	8006270 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800626a:	2302      	movs	r3, #2
 800626c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800626e:	e14b      	b.n	8006508 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d005      	beq.n	8006282 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d002      	beq.n	8006282 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800627c:	887b      	ldrh	r3, [r7, #2]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d102      	bne.n	8006288 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006286:	e13f      	b.n	8006508 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b04      	cmp	r3, #4
 8006292:	d003      	beq.n	800629c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2205      	movs	r2, #5
 8006298:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	887a      	ldrh	r2, [r7, #2]
 80062ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	887a      	ldrh	r2, [r7, #2]
 80062b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	887a      	ldrh	r2, [r7, #2]
 80062be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	887a      	ldrh	r2, [r7, #2]
 80062c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	685a      	ldr	r2, [r3, #4]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80062e4:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062ee:	d908      	bls.n	8006302 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685a      	ldr	r2, [r3, #4]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80062fe:	605a      	str	r2, [r3, #4]
 8006300:	e06f      	b.n	80063e2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006310:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800631c:	d126      	bne.n	800636c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10f      	bne.n	800634a <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006338:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800633e:	b29b      	uxth	r3, r3
 8006340:	085b      	lsrs	r3, r3, #1
 8006342:	b29a      	uxth	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006348:	e010      	b.n	800636c <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006358:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800635e:	b29b      	uxth	r3, r3
 8006360:	085b      	lsrs	r3, r3, #1
 8006362:	b29b      	uxth	r3, r3
 8006364:	3301      	adds	r3, #1
 8006366:	b29a      	uxth	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006376:	d134      	bne.n	80063e2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006386:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800638e:	b29b      	uxth	r3, r3
 8006390:	f003 0301 	and.w	r3, r3, #1
 8006394:	2b00      	cmp	r3, #0
 8006396:	d111      	bne.n	80063bc <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063a6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	085b      	lsrs	r3, r3, #1
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80063ba:	e012      	b.n	80063e2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685a      	ldr	r2, [r3, #4]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063ca:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	085b      	lsrs	r3, r3, #1
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	3301      	adds	r3, #1
 80063da:	b29a      	uxth	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b04      	cmp	r3, #4
 80063ec:	d108      	bne.n	8006400 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f2:	4a4a      	ldr	r2, [pc, #296]	; (800651c <HAL_SPI_TransmitReceive_DMA+0x304>)
 80063f4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063fa:	4a49      	ldr	r2, [pc, #292]	; (8006520 <HAL_SPI_TransmitReceive_DMA+0x308>)
 80063fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80063fe:	e007      	b.n	8006410 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006404:	4a47      	ldr	r2, [pc, #284]	; (8006524 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8006406:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800640c:	4a46      	ldr	r2, [pc, #280]	; (8006528 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800640e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006414:	4a45      	ldr	r2, [pc, #276]	; (800652c <HAL_SPI_TransmitReceive_DMA+0x314>)
 8006416:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800641c:	2200      	movs	r2, #0
 800641e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	330c      	adds	r3, #12
 800642a:	4619      	mov	r1, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006430:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006438:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800643a:	f7fb ff5f 	bl	80022fc <HAL_DMA_Start_IT>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00c      	beq.n	800645e <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006448:	f043 0210 	orr.w	r2, r3, #16
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800645c:	e054      	b.n	8006508 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	685a      	ldr	r2, [r3, #4]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f042 0201 	orr.w	r2, r2, #1
 800646c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006472:	2200      	movs	r2, #0
 8006474:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800647a:	2200      	movs	r2, #0
 800647c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006482:	2200      	movs	r2, #0
 8006484:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800648a:	2200      	movs	r2, #0
 800648c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006496:	4619      	mov	r1, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	330c      	adds	r3, #12
 800649e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064a4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80064a6:	f7fb ff29 	bl	80022fc <HAL_DMA_Start_IT>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00c      	beq.n	80064ca <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064b4:	f043 0210 	orr.w	r2, r3, #16
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80064c8:	e01e      	b.n	8006508 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d4:	2b40      	cmp	r3, #64	; 0x40
 80064d6:	d007      	beq.n	80064e8 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064e6:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685a      	ldr	r2, [r3, #4]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f042 0220 	orr.w	r2, r2, #32
 80064f6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	685a      	ldr	r2, [r3, #4]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f042 0202 	orr.w	r2, r2, #2
 8006506:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006510:	7dfb      	ldrb	r3, [r7, #23]
}
 8006512:	4618      	mov	r0, r3
 8006514:	3718      	adds	r7, #24
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	080066bd 	.word	0x080066bd
 8006520:	08006581 	.word	0x08006581
 8006524:	080066d9 	.word	0x080066d9
 8006528:	0800662b 	.word	0x0800662b
 800652c:	080066f5 	.word	0x080066f5

08006530 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658c:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800658e:	f7fb faa3 	bl	8001ad8 <HAL_GetTick>
 8006592:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800659e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065a2:	d03c      	beq.n	800661e <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685a      	ldr	r2, [r3, #4]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f022 0220 	bic.w	r2, r2, #32
 80065b2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10d      	bne.n	80065d8 <SPI_DMAReceiveCplt+0x58>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065c4:	d108      	bne.n	80065d8 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f022 0203 	bic.w	r2, r2, #3
 80065d4:	605a      	str	r2, [r3, #4]
 80065d6:	e007      	b.n	80065e8 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f022 0201 	bic.w	r2, r2, #1
 80065e6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	2164      	movs	r1, #100	; 0x64
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f000 f9bf 	bl	8006970 <SPI_EndRxTransaction>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d002      	beq.n	80065fe <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2220      	movs	r2, #32
 80065fc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006612:	2b00      	cmp	r3, #0
 8006614:	d003      	beq.n	800661e <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f7ff ffa8 	bl	800656c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800661c:	e002      	b.n	8006624 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f7f9 fffa 	bl	8000618 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b084      	sub	sp, #16
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006636:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006638:	f7fb fa4e 	bl	8001ad8 <HAL_GetTick>
 800663c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800664c:	d030      	beq.n	80066b0 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	685a      	ldr	r2, [r3, #4]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f022 0220 	bic.w	r2, r2, #32
 800665c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	2164      	movs	r1, #100	; 0x64
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f000 fa00 	bl	8006a68 <SPI_EndRxTxTransaction>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d005      	beq.n	800667a <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006672:	f043 0220 	orr.w	r2, r3, #32
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 0203 	bic.w	r2, r2, #3
 8006688:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d003      	beq.n	80066b0 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f7ff ff5f 	bl	800656c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80066ae:	e002      	b.n	80066b6 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f7ff ff3d 	bl	8006530 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f7ff ff3a 	bl	8006544 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80066d0:	bf00      	nop
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f7ff ff36 	bl	8006558 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80066ec:	bf00      	nop
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006700:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	685a      	ldr	r2, [r3, #4]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f022 0203 	bic.w	r2, r2, #3
 8006710:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006716:	f043 0210 	orr.w	r2, r3, #16
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f7ff ff20 	bl	800656c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800672c:	bf00      	nop
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b088      	sub	sp, #32
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	603b      	str	r3, [r7, #0]
 8006740:	4613      	mov	r3, r2
 8006742:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006744:	f7fb f9c8 	bl	8001ad8 <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674c:	1a9b      	subs	r3, r3, r2
 800674e:	683a      	ldr	r2, [r7, #0]
 8006750:	4413      	add	r3, r2
 8006752:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006754:	f7fb f9c0 	bl	8001ad8 <HAL_GetTick>
 8006758:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800675a:	4b39      	ldr	r3, [pc, #228]	; (8006840 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	015b      	lsls	r3, r3, #5
 8006760:	0d1b      	lsrs	r3, r3, #20
 8006762:	69fa      	ldr	r2, [r7, #28]
 8006764:	fb02 f303 	mul.w	r3, r2, r3
 8006768:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800676a:	e054      	b.n	8006816 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006772:	d050      	beq.n	8006816 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006774:	f7fb f9b0 	bl	8001ad8 <HAL_GetTick>
 8006778:	4602      	mov	r2, r0
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	69fa      	ldr	r2, [r7, #28]
 8006780:	429a      	cmp	r2, r3
 8006782:	d902      	bls.n	800678a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d13d      	bne.n	8006806 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006798:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067a2:	d111      	bne.n	80067c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067ac:	d004      	beq.n	80067b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067b6:	d107      	bne.n	80067c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067d0:	d10f      	bne.n	80067f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067e0:	601a      	str	r2, [r3, #0]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e017      	b.n	8006836 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d101      	bne.n	8006810 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800680c:	2300      	movs	r3, #0
 800680e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	3b01      	subs	r3, #1
 8006814:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	689a      	ldr	r2, [r3, #8]
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	4013      	ands	r3, r2
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	429a      	cmp	r2, r3
 8006824:	bf0c      	ite	eq
 8006826:	2301      	moveq	r3, #1
 8006828:	2300      	movne	r3, #0
 800682a:	b2db      	uxtb	r3, r3
 800682c:	461a      	mov	r2, r3
 800682e:	79fb      	ldrb	r3, [r7, #7]
 8006830:	429a      	cmp	r2, r3
 8006832:	d19b      	bne.n	800676c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3720      	adds	r7, #32
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	20000000 	.word	0x20000000

08006844 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b08a      	sub	sp, #40	; 0x28
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
 8006850:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006852:	2300      	movs	r3, #0
 8006854:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006856:	f7fb f93f 	bl	8001ad8 <HAL_GetTick>
 800685a:	4602      	mov	r2, r0
 800685c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685e:	1a9b      	subs	r3, r3, r2
 8006860:	683a      	ldr	r2, [r7, #0]
 8006862:	4413      	add	r3, r2
 8006864:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006866:	f7fb f937 	bl	8001ad8 <HAL_GetTick>
 800686a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	330c      	adds	r3, #12
 8006872:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006874:	4b3d      	ldr	r3, [pc, #244]	; (800696c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	4613      	mov	r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	00da      	lsls	r2, r3, #3
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	0d1b      	lsrs	r3, r3, #20
 8006884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006886:	fb02 f303 	mul.w	r3, r2, r3
 800688a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800688c:	e060      	b.n	8006950 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006894:	d107      	bne.n	80068a6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d104      	bne.n	80068a6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80068a4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ac:	d050      	beq.n	8006950 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068ae:	f7fb f913 	bl	8001ad8 <HAL_GetTick>
 80068b2:	4602      	mov	r2, r0
 80068b4:	6a3b      	ldr	r3, [r7, #32]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d902      	bls.n	80068c4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80068be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d13d      	bne.n	8006940 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685a      	ldr	r2, [r3, #4]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80068d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068dc:	d111      	bne.n	8006902 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068e6:	d004      	beq.n	80068f2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068f0:	d107      	bne.n	8006902 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006900:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800690a:	d10f      	bne.n	800692c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800691a:	601a      	str	r2, [r3, #0]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800692a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e010      	b.n	8006962 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d101      	bne.n	800694a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006946:	2300      	movs	r3, #0
 8006948:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	3b01      	subs	r3, #1
 800694e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689a      	ldr	r2, [r3, #8]
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	4013      	ands	r3, r2
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	429a      	cmp	r2, r3
 800695e:	d196      	bne.n	800688e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3728      	adds	r7, #40	; 0x28
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	20000000 	.word	0x20000000

08006970 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b088      	sub	sp, #32
 8006974:	af02      	add	r7, sp, #8
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006984:	d111      	bne.n	80069aa <SPI_EndRxTransaction+0x3a>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800698e:	d004      	beq.n	800699a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006998:	d107      	bne.n	80069aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069a8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069b2:	d112      	bne.n	80069da <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	9300      	str	r3, [sp, #0]
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	2200      	movs	r2, #0
 80069bc:	2180      	movs	r1, #128	; 0x80
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f7ff feb8 	bl	8006734 <SPI_WaitFlagStateUntilTimeout>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d021      	beq.n	8006a0e <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069ce:	f043 0220 	orr.w	r2, r3, #32
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e03d      	b.n	8006a56 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80069da:	4b21      	ldr	r3, [pc, #132]	; (8006a60 <SPI_EndRxTransaction+0xf0>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a21      	ldr	r2, [pc, #132]	; (8006a64 <SPI_EndRxTransaction+0xf4>)
 80069e0:	fba2 2303 	umull	r2, r3, r2, r3
 80069e4:	0d5b      	lsrs	r3, r3, #21
 80069e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80069ea:	fb02 f303 	mul.w	r3, r2, r3
 80069ee:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00a      	beq.n	8006a0c <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	3b01      	subs	r3, #1
 80069fa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a06:	2b80      	cmp	r3, #128	; 0x80
 8006a08:	d0f2      	beq.n	80069f0 <SPI_EndRxTransaction+0x80>
 8006a0a:	e000      	b.n	8006a0e <SPI_EndRxTransaction+0x9e>
        break;
 8006a0c:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a16:	d11d      	bne.n	8006a54 <SPI_EndRxTransaction+0xe4>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a20:	d004      	beq.n	8006a2c <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a2a:	d113      	bne.n	8006a54 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	f7ff ff03 	bl	8006844 <SPI_WaitFifoStateUntilTimeout>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d007      	beq.n	8006a54 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a48:	f043 0220 	orr.w	r2, r3, #32
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e000      	b.n	8006a56 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3718      	adds	r7, #24
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	20000000 	.word	0x20000000
 8006a64:	165e9f81 	.word	0x165e9f81

08006a68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b088      	sub	sp, #32
 8006a6c:	af02      	add	r7, sp, #8
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f7ff fedf 	bl	8006844 <SPI_WaitFifoStateUntilTimeout>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d007      	beq.n	8006a9c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a90:	f043 0220 	orr.w	r2, r3, #32
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e046      	b.n	8006b2a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a9c:	4b25      	ldr	r3, [pc, #148]	; (8006b34 <SPI_EndRxTxTransaction+0xcc>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a25      	ldr	r2, [pc, #148]	; (8006b38 <SPI_EndRxTxTransaction+0xd0>)
 8006aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa6:	0d5b      	lsrs	r3, r3, #21
 8006aa8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006aac:	fb02 f303 	mul.w	r3, r2, r3
 8006ab0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006aba:	d112      	bne.n	8006ae2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	9300      	str	r3, [sp, #0]
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	2180      	movs	r1, #128	; 0x80
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f7ff fe34 	bl	8006734 <SPI_WaitFlagStateUntilTimeout>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d016      	beq.n	8006b00 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ad6:	f043 0220 	orr.w	r2, r3, #32
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e023      	b.n	8006b2a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00a      	beq.n	8006afe <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006af8:	2b80      	cmp	r3, #128	; 0x80
 8006afa:	d0f2      	beq.n	8006ae2 <SPI_EndRxTxTransaction+0x7a>
 8006afc:	e000      	b.n	8006b00 <SPI_EndRxTxTransaction+0x98>
        break;
 8006afe:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	9300      	str	r3, [sp, #0]
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f7ff fe99 	bl	8006844 <SPI_WaitFifoStateUntilTimeout>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d007      	beq.n	8006b28 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b1c:	f043 0220 	orr.w	r2, r3, #32
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e000      	b.n	8006b2a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3718      	adds	r7, #24
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	20000000 	.word	0x20000000
 8006b38:	165e9f81 	.word	0x165e9f81

08006b3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e049      	b.n	8006be2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d106      	bne.n	8006b68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7fa fd58 	bl	8001618 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	3304      	adds	r3, #4
 8006b78:	4619      	mov	r1, r3
 8006b7a:	4610      	mov	r0, r2
 8006b7c:	f000 ffbe 	bl	8007afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3708      	adds	r7, #8
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
	...

08006bec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d001      	beq.n	8006c04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e054      	b.n	8006cae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68da      	ldr	r2, [r3, #12]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f042 0201 	orr.w	r2, r2, #1
 8006c1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a26      	ldr	r2, [pc, #152]	; (8006cbc <HAL_TIM_Base_Start_IT+0xd0>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d022      	beq.n	8006c6c <HAL_TIM_Base_Start_IT+0x80>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c2e:	d01d      	beq.n	8006c6c <HAL_TIM_Base_Start_IT+0x80>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a22      	ldr	r2, [pc, #136]	; (8006cc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d018      	beq.n	8006c6c <HAL_TIM_Base_Start_IT+0x80>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a21      	ldr	r2, [pc, #132]	; (8006cc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d013      	beq.n	8006c6c <HAL_TIM_Base_Start_IT+0x80>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a1f      	ldr	r2, [pc, #124]	; (8006cc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d00e      	beq.n	8006c6c <HAL_TIM_Base_Start_IT+0x80>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a1e      	ldr	r2, [pc, #120]	; (8006ccc <HAL_TIM_Base_Start_IT+0xe0>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d009      	beq.n	8006c6c <HAL_TIM_Base_Start_IT+0x80>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a1c      	ldr	r2, [pc, #112]	; (8006cd0 <HAL_TIM_Base_Start_IT+0xe4>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d004      	beq.n	8006c6c <HAL_TIM_Base_Start_IT+0x80>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a1b      	ldr	r2, [pc, #108]	; (8006cd4 <HAL_TIM_Base_Start_IT+0xe8>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d115      	bne.n	8006c98 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	689a      	ldr	r2, [r3, #8]
 8006c72:	4b19      	ldr	r3, [pc, #100]	; (8006cd8 <HAL_TIM_Base_Start_IT+0xec>)
 8006c74:	4013      	ands	r3, r2
 8006c76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2b06      	cmp	r3, #6
 8006c7c:	d015      	beq.n	8006caa <HAL_TIM_Base_Start_IT+0xbe>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c84:	d011      	beq.n	8006caa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f042 0201 	orr.w	r2, r2, #1
 8006c94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c96:	e008      	b.n	8006caa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f042 0201 	orr.w	r2, r2, #1
 8006ca6:	601a      	str	r2, [r3, #0]
 8006ca8:	e000      	b.n	8006cac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006caa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3714      	adds	r7, #20
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	40010000 	.word	0x40010000
 8006cc0:	40000400 	.word	0x40000400
 8006cc4:	40000800 	.word	0x40000800
 8006cc8:	40000c00 	.word	0x40000c00
 8006ccc:	40010400 	.word	0x40010400
 8006cd0:	40014000 	.word	0x40014000
 8006cd4:	40001800 	.word	0x40001800
 8006cd8:	00010007 	.word	0x00010007

08006cdc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d101      	bne.n	8006cee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e049      	b.n	8006d82 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d106      	bne.n	8006d08 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f841 	bl	8006d8a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2202      	movs	r2, #2
 8006d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	3304      	adds	r3, #4
 8006d18:	4619      	mov	r1, r3
 8006d1a:	4610      	mov	r0, r2
 8006d1c:	f000 feee 	bl	8007afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3708      	adds	r7, #8
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b083      	sub	sp, #12
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006d92:	bf00      	nop
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
	...

08006da0 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d104      	bne.n	8006dba <HAL_TIM_IC_Start+0x1a>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	e023      	b.n	8006e02 <HAL_TIM_IC_Start+0x62>
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	2b04      	cmp	r3, #4
 8006dbe:	d104      	bne.n	8006dca <HAL_TIM_IC_Start+0x2a>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	e01b      	b.n	8006e02 <HAL_TIM_IC_Start+0x62>
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	2b08      	cmp	r3, #8
 8006dce:	d104      	bne.n	8006dda <HAL_TIM_IC_Start+0x3a>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	e013      	b.n	8006e02 <HAL_TIM_IC_Start+0x62>
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	2b0c      	cmp	r3, #12
 8006dde:	d104      	bne.n	8006dea <HAL_TIM_IC_Start+0x4a>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	e00b      	b.n	8006e02 <HAL_TIM_IC_Start+0x62>
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	2b10      	cmp	r3, #16
 8006dee:	d104      	bne.n	8006dfa <HAL_TIM_IC_Start+0x5a>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	e003      	b.n	8006e02 <HAL_TIM_IC_Start+0x62>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d104      	bne.n	8006e14 <HAL_TIM_IC_Start+0x74>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	e013      	b.n	8006e3c <HAL_TIM_IC_Start+0x9c>
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	2b04      	cmp	r3, #4
 8006e18:	d104      	bne.n	8006e24 <HAL_TIM_IC_Start+0x84>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	e00b      	b.n	8006e3c <HAL_TIM_IC_Start+0x9c>
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	2b08      	cmp	r3, #8
 8006e28:	d104      	bne.n	8006e34 <HAL_TIM_IC_Start+0x94>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	e003      	b.n	8006e3c <HAL_TIM_IC_Start+0x9c>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e3e:	7bfb      	ldrb	r3, [r7, #15]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d102      	bne.n	8006e4a <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e44:	7bbb      	ldrb	r3, [r7, #14]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d001      	beq.n	8006e4e <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e097      	b.n	8006f7e <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d104      	bne.n	8006e5e <HAL_TIM_IC_Start+0xbe>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2202      	movs	r2, #2
 8006e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e5c:	e023      	b.n	8006ea6 <HAL_TIM_IC_Start+0x106>
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	2b04      	cmp	r3, #4
 8006e62:	d104      	bne.n	8006e6e <HAL_TIM_IC_Start+0xce>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2202      	movs	r2, #2
 8006e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e6c:	e01b      	b.n	8006ea6 <HAL_TIM_IC_Start+0x106>
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	2b08      	cmp	r3, #8
 8006e72:	d104      	bne.n	8006e7e <HAL_TIM_IC_Start+0xde>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2202      	movs	r2, #2
 8006e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e7c:	e013      	b.n	8006ea6 <HAL_TIM_IC_Start+0x106>
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	2b0c      	cmp	r3, #12
 8006e82:	d104      	bne.n	8006e8e <HAL_TIM_IC_Start+0xee>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2202      	movs	r2, #2
 8006e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e8c:	e00b      	b.n	8006ea6 <HAL_TIM_IC_Start+0x106>
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	2b10      	cmp	r3, #16
 8006e92:	d104      	bne.n	8006e9e <HAL_TIM_IC_Start+0xfe>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2202      	movs	r2, #2
 8006e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e9c:	e003      	b.n	8006ea6 <HAL_TIM_IC_Start+0x106>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2202      	movs	r2, #2
 8006ea2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d104      	bne.n	8006eb6 <HAL_TIM_IC_Start+0x116>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2202      	movs	r2, #2
 8006eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006eb4:	e013      	b.n	8006ede <HAL_TIM_IC_Start+0x13e>
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	2b04      	cmp	r3, #4
 8006eba:	d104      	bne.n	8006ec6 <HAL_TIM_IC_Start+0x126>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ec4:	e00b      	b.n	8006ede <HAL_TIM_IC_Start+0x13e>
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	2b08      	cmp	r3, #8
 8006eca:	d104      	bne.n	8006ed6 <HAL_TIM_IC_Start+0x136>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2202      	movs	r2, #2
 8006ed0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ed4:	e003      	b.n	8006ede <HAL_TIM_IC_Start+0x13e>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2202      	movs	r2, #2
 8006eda:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	6839      	ldr	r1, [r7, #0]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f001 f900 	bl	80080ec <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a25      	ldr	r2, [pc, #148]	; (8006f88 <HAL_TIM_IC_Start+0x1e8>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d022      	beq.n	8006f3c <HAL_TIM_IC_Start+0x19c>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006efe:	d01d      	beq.n	8006f3c <HAL_TIM_IC_Start+0x19c>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a21      	ldr	r2, [pc, #132]	; (8006f8c <HAL_TIM_IC_Start+0x1ec>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d018      	beq.n	8006f3c <HAL_TIM_IC_Start+0x19c>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a20      	ldr	r2, [pc, #128]	; (8006f90 <HAL_TIM_IC_Start+0x1f0>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d013      	beq.n	8006f3c <HAL_TIM_IC_Start+0x19c>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a1e      	ldr	r2, [pc, #120]	; (8006f94 <HAL_TIM_IC_Start+0x1f4>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d00e      	beq.n	8006f3c <HAL_TIM_IC_Start+0x19c>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a1d      	ldr	r2, [pc, #116]	; (8006f98 <HAL_TIM_IC_Start+0x1f8>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d009      	beq.n	8006f3c <HAL_TIM_IC_Start+0x19c>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a1b      	ldr	r2, [pc, #108]	; (8006f9c <HAL_TIM_IC_Start+0x1fc>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d004      	beq.n	8006f3c <HAL_TIM_IC_Start+0x19c>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a1a      	ldr	r2, [pc, #104]	; (8006fa0 <HAL_TIM_IC_Start+0x200>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d115      	bne.n	8006f68 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	689a      	ldr	r2, [r3, #8]
 8006f42:	4b18      	ldr	r3, [pc, #96]	; (8006fa4 <HAL_TIM_IC_Start+0x204>)
 8006f44:	4013      	ands	r3, r2
 8006f46:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	2b06      	cmp	r3, #6
 8006f4c:	d015      	beq.n	8006f7a <HAL_TIM_IC_Start+0x1da>
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f54:	d011      	beq.n	8006f7a <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f042 0201 	orr.w	r2, r2, #1
 8006f64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f66:	e008      	b.n	8006f7a <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f042 0201 	orr.w	r2, r2, #1
 8006f76:	601a      	str	r2, [r3, #0]
 8006f78:	e000      	b.n	8006f7c <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	40010000 	.word	0x40010000
 8006f8c:	40000400 	.word	0x40000400
 8006f90:	40000800 	.word	0x40000800
 8006f94:	40000c00 	.word	0x40000c00
 8006f98:	40010400 	.word	0x40010400
 8006f9c:	40014000 	.word	0x40014000
 8006fa0:	40001800 	.word	0x40001800
 8006fa4:	00010007 	.word	0x00010007

08006fa8 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	6839      	ldr	r1, [r7, #0]
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f001 f896 	bl	80080ec <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	6a1a      	ldr	r2, [r3, #32]
 8006fc6:	f241 1311 	movw	r3, #4369	; 0x1111
 8006fca:	4013      	ands	r3, r2
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d10f      	bne.n	8006ff0 <HAL_TIM_IC_Stop+0x48>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	6a1a      	ldr	r2, [r3, #32]
 8006fd6:	f240 4344 	movw	r3, #1092	; 0x444
 8006fda:	4013      	ands	r3, r2
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d107      	bne.n	8006ff0 <HAL_TIM_IC_Stop+0x48>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f022 0201 	bic.w	r2, r2, #1
 8006fee:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d104      	bne.n	8007000 <HAL_TIM_IC_Stop+0x58>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ffe:	e023      	b.n	8007048 <HAL_TIM_IC_Stop+0xa0>
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	2b04      	cmp	r3, #4
 8007004:	d104      	bne.n	8007010 <HAL_TIM_IC_Stop+0x68>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2201      	movs	r2, #1
 800700a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800700e:	e01b      	b.n	8007048 <HAL_TIM_IC_Stop+0xa0>
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	2b08      	cmp	r3, #8
 8007014:	d104      	bne.n	8007020 <HAL_TIM_IC_Stop+0x78>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800701e:	e013      	b.n	8007048 <HAL_TIM_IC_Stop+0xa0>
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	2b0c      	cmp	r3, #12
 8007024:	d104      	bne.n	8007030 <HAL_TIM_IC_Stop+0x88>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2201      	movs	r2, #1
 800702a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800702e:	e00b      	b.n	8007048 <HAL_TIM_IC_Stop+0xa0>
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	2b10      	cmp	r3, #16
 8007034:	d104      	bne.n	8007040 <HAL_TIM_IC_Stop+0x98>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800703e:	e003      	b.n	8007048 <HAL_TIM_IC_Stop+0xa0>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d104      	bne.n	8007058 <HAL_TIM_IC_Stop+0xb0>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007056:	e013      	b.n	8007080 <HAL_TIM_IC_Stop+0xd8>
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	2b04      	cmp	r3, #4
 800705c:	d104      	bne.n	8007068 <HAL_TIM_IC_Stop+0xc0>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007066:	e00b      	b.n	8007080 <HAL_TIM_IC_Stop+0xd8>
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	2b08      	cmp	r3, #8
 800706c:	d104      	bne.n	8007078 <HAL_TIM_IC_Stop+0xd0>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007076:	e003      	b.n	8007080 <HAL_TIM_IC_Stop+0xd8>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3708      	adds	r7, #8
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
	...

0800708c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007096:	2300      	movs	r3, #0
 8007098:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d104      	bne.n	80070aa <HAL_TIM_IC_Start_IT+0x1e>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	e023      	b.n	80070f2 <HAL_TIM_IC_Start_IT+0x66>
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	2b04      	cmp	r3, #4
 80070ae:	d104      	bne.n	80070ba <HAL_TIM_IC_Start_IT+0x2e>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	e01b      	b.n	80070f2 <HAL_TIM_IC_Start_IT+0x66>
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	2b08      	cmp	r3, #8
 80070be:	d104      	bne.n	80070ca <HAL_TIM_IC_Start_IT+0x3e>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	e013      	b.n	80070f2 <HAL_TIM_IC_Start_IT+0x66>
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	2b0c      	cmp	r3, #12
 80070ce:	d104      	bne.n	80070da <HAL_TIM_IC_Start_IT+0x4e>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	e00b      	b.n	80070f2 <HAL_TIM_IC_Start_IT+0x66>
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	2b10      	cmp	r3, #16
 80070de:	d104      	bne.n	80070ea <HAL_TIM_IC_Start_IT+0x5e>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	e003      	b.n	80070f2 <HAL_TIM_IC_Start_IT+0x66>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d104      	bne.n	8007104 <HAL_TIM_IC_Start_IT+0x78>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007100:	b2db      	uxtb	r3, r3
 8007102:	e013      	b.n	800712c <HAL_TIM_IC_Start_IT+0xa0>
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	2b04      	cmp	r3, #4
 8007108:	d104      	bne.n	8007114 <HAL_TIM_IC_Start_IT+0x88>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007110:	b2db      	uxtb	r3, r3
 8007112:	e00b      	b.n	800712c <HAL_TIM_IC_Start_IT+0xa0>
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	2b08      	cmp	r3, #8
 8007118:	d104      	bne.n	8007124 <HAL_TIM_IC_Start_IT+0x98>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007120:	b2db      	uxtb	r3, r3
 8007122:	e003      	b.n	800712c <HAL_TIM_IC_Start_IT+0xa0>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800712a:	b2db      	uxtb	r3, r3
 800712c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800712e:	7bbb      	ldrb	r3, [r7, #14]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d102      	bne.n	800713a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007134:	7b7b      	ldrb	r3, [r7, #13]
 8007136:	2b01      	cmp	r3, #1
 8007138:	d001      	beq.n	800713e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e0e2      	b.n	8007304 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d104      	bne.n	800714e <HAL_TIM_IC_Start_IT+0xc2>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2202      	movs	r2, #2
 8007148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800714c:	e023      	b.n	8007196 <HAL_TIM_IC_Start_IT+0x10a>
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2b04      	cmp	r3, #4
 8007152:	d104      	bne.n	800715e <HAL_TIM_IC_Start_IT+0xd2>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2202      	movs	r2, #2
 8007158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800715c:	e01b      	b.n	8007196 <HAL_TIM_IC_Start_IT+0x10a>
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	2b08      	cmp	r3, #8
 8007162:	d104      	bne.n	800716e <HAL_TIM_IC_Start_IT+0xe2>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2202      	movs	r2, #2
 8007168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800716c:	e013      	b.n	8007196 <HAL_TIM_IC_Start_IT+0x10a>
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	2b0c      	cmp	r3, #12
 8007172:	d104      	bne.n	800717e <HAL_TIM_IC_Start_IT+0xf2>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2202      	movs	r2, #2
 8007178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800717c:	e00b      	b.n	8007196 <HAL_TIM_IC_Start_IT+0x10a>
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	2b10      	cmp	r3, #16
 8007182:	d104      	bne.n	800718e <HAL_TIM_IC_Start_IT+0x102>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2202      	movs	r2, #2
 8007188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800718c:	e003      	b.n	8007196 <HAL_TIM_IC_Start_IT+0x10a>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2202      	movs	r2, #2
 8007192:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d104      	bne.n	80071a6 <HAL_TIM_IC_Start_IT+0x11a>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2202      	movs	r2, #2
 80071a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071a4:	e013      	b.n	80071ce <HAL_TIM_IC_Start_IT+0x142>
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	2b04      	cmp	r3, #4
 80071aa:	d104      	bne.n	80071b6 <HAL_TIM_IC_Start_IT+0x12a>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2202      	movs	r2, #2
 80071b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071b4:	e00b      	b.n	80071ce <HAL_TIM_IC_Start_IT+0x142>
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	2b08      	cmp	r3, #8
 80071ba:	d104      	bne.n	80071c6 <HAL_TIM_IC_Start_IT+0x13a>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2202      	movs	r2, #2
 80071c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80071c4:	e003      	b.n	80071ce <HAL_TIM_IC_Start_IT+0x142>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2202      	movs	r2, #2
 80071ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	2b0c      	cmp	r3, #12
 80071d2:	d841      	bhi.n	8007258 <HAL_TIM_IC_Start_IT+0x1cc>
 80071d4:	a201      	add	r2, pc, #4	; (adr r2, 80071dc <HAL_TIM_IC_Start_IT+0x150>)
 80071d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071da:	bf00      	nop
 80071dc:	08007211 	.word	0x08007211
 80071e0:	08007259 	.word	0x08007259
 80071e4:	08007259 	.word	0x08007259
 80071e8:	08007259 	.word	0x08007259
 80071ec:	08007223 	.word	0x08007223
 80071f0:	08007259 	.word	0x08007259
 80071f4:	08007259 	.word	0x08007259
 80071f8:	08007259 	.word	0x08007259
 80071fc:	08007235 	.word	0x08007235
 8007200:	08007259 	.word	0x08007259
 8007204:	08007259 	.word	0x08007259
 8007208:	08007259 	.word	0x08007259
 800720c:	08007247 	.word	0x08007247
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68da      	ldr	r2, [r3, #12]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f042 0202 	orr.w	r2, r2, #2
 800721e:	60da      	str	r2, [r3, #12]
      break;
 8007220:	e01d      	b.n	800725e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68da      	ldr	r2, [r3, #12]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f042 0204 	orr.w	r2, r2, #4
 8007230:	60da      	str	r2, [r3, #12]
      break;
 8007232:	e014      	b.n	800725e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68da      	ldr	r2, [r3, #12]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f042 0208 	orr.w	r2, r2, #8
 8007242:	60da      	str	r2, [r3, #12]
      break;
 8007244:	e00b      	b.n	800725e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68da      	ldr	r2, [r3, #12]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f042 0210 	orr.w	r2, r2, #16
 8007254:	60da      	str	r2, [r3, #12]
      break;
 8007256:	e002      	b.n	800725e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	73fb      	strb	r3, [r7, #15]
      break;
 800725c:	bf00      	nop
  }

  if (status == HAL_OK)
 800725e:	7bfb      	ldrb	r3, [r7, #15]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d14e      	bne.n	8007302 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2201      	movs	r2, #1
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	4618      	mov	r0, r3
 800726e:	f000 ff3d 	bl	80080ec <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a25      	ldr	r2, [pc, #148]	; (800730c <HAL_TIM_IC_Start_IT+0x280>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d022      	beq.n	80072c2 <HAL_TIM_IC_Start_IT+0x236>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007284:	d01d      	beq.n	80072c2 <HAL_TIM_IC_Start_IT+0x236>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a21      	ldr	r2, [pc, #132]	; (8007310 <HAL_TIM_IC_Start_IT+0x284>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d018      	beq.n	80072c2 <HAL_TIM_IC_Start_IT+0x236>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a1f      	ldr	r2, [pc, #124]	; (8007314 <HAL_TIM_IC_Start_IT+0x288>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d013      	beq.n	80072c2 <HAL_TIM_IC_Start_IT+0x236>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a1e      	ldr	r2, [pc, #120]	; (8007318 <HAL_TIM_IC_Start_IT+0x28c>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d00e      	beq.n	80072c2 <HAL_TIM_IC_Start_IT+0x236>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a1c      	ldr	r2, [pc, #112]	; (800731c <HAL_TIM_IC_Start_IT+0x290>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d009      	beq.n	80072c2 <HAL_TIM_IC_Start_IT+0x236>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a1b      	ldr	r2, [pc, #108]	; (8007320 <HAL_TIM_IC_Start_IT+0x294>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d004      	beq.n	80072c2 <HAL_TIM_IC_Start_IT+0x236>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a19      	ldr	r2, [pc, #100]	; (8007324 <HAL_TIM_IC_Start_IT+0x298>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d115      	bne.n	80072ee <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	689a      	ldr	r2, [r3, #8]
 80072c8:	4b17      	ldr	r3, [pc, #92]	; (8007328 <HAL_TIM_IC_Start_IT+0x29c>)
 80072ca:	4013      	ands	r3, r2
 80072cc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	2b06      	cmp	r3, #6
 80072d2:	d015      	beq.n	8007300 <HAL_TIM_IC_Start_IT+0x274>
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072da:	d011      	beq.n	8007300 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f042 0201 	orr.w	r2, r2, #1
 80072ea:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072ec:	e008      	b.n	8007300 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f042 0201 	orr.w	r2, r2, #1
 80072fc:	601a      	str	r2, [r3, #0]
 80072fe:	e000      	b.n	8007302 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007300:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007302:	7bfb      	ldrb	r3, [r7, #15]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	40010000 	.word	0x40010000
 8007310:	40000400 	.word	0x40000400
 8007314:	40000800 	.word	0x40000800
 8007318:	40000c00 	.word	0x40000c00
 800731c:	40010400 	.word	0x40010400
 8007320:	40014000 	.word	0x40014000
 8007324:	40001800 	.word	0x40001800
 8007328:	00010007 	.word	0x00010007

0800732c <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007336:	2300      	movs	r3, #0
 8007338:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	2b0c      	cmp	r3, #12
 800733e:	d841      	bhi.n	80073c4 <HAL_TIM_IC_Stop_IT+0x98>
 8007340:	a201      	add	r2, pc, #4	; (adr r2, 8007348 <HAL_TIM_IC_Stop_IT+0x1c>)
 8007342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007346:	bf00      	nop
 8007348:	0800737d 	.word	0x0800737d
 800734c:	080073c5 	.word	0x080073c5
 8007350:	080073c5 	.word	0x080073c5
 8007354:	080073c5 	.word	0x080073c5
 8007358:	0800738f 	.word	0x0800738f
 800735c:	080073c5 	.word	0x080073c5
 8007360:	080073c5 	.word	0x080073c5
 8007364:	080073c5 	.word	0x080073c5
 8007368:	080073a1 	.word	0x080073a1
 800736c:	080073c5 	.word	0x080073c5
 8007370:	080073c5 	.word	0x080073c5
 8007374:	080073c5 	.word	0x080073c5
 8007378:	080073b3 	.word	0x080073b3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68da      	ldr	r2, [r3, #12]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f022 0202 	bic.w	r2, r2, #2
 800738a:	60da      	str	r2, [r3, #12]
      break;
 800738c:	e01d      	b.n	80073ca <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68da      	ldr	r2, [r3, #12]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f022 0204 	bic.w	r2, r2, #4
 800739c:	60da      	str	r2, [r3, #12]
      break;
 800739e:	e014      	b.n	80073ca <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68da      	ldr	r2, [r3, #12]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f022 0208 	bic.w	r2, r2, #8
 80073ae:	60da      	str	r2, [r3, #12]
      break;
 80073b0:	e00b      	b.n	80073ca <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68da      	ldr	r2, [r3, #12]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f022 0210 	bic.w	r2, r2, #16
 80073c0:	60da      	str	r2, [r3, #12]
      break;
 80073c2:	e002      	b.n	80073ca <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	73fb      	strb	r3, [r7, #15]
      break;
 80073c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80073ca:	7bfb      	ldrb	r3, [r7, #15]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d166      	bne.n	800749e <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2200      	movs	r2, #0
 80073d6:	6839      	ldr	r1, [r7, #0]
 80073d8:	4618      	mov	r0, r3
 80073da:	f000 fe87 	bl	80080ec <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	6a1a      	ldr	r2, [r3, #32]
 80073e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80073e8:	4013      	ands	r3, r2
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d10f      	bne.n	800740e <HAL_TIM_IC_Stop_IT+0xe2>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	6a1a      	ldr	r2, [r3, #32]
 80073f4:	f240 4344 	movw	r3, #1092	; 0x444
 80073f8:	4013      	ands	r3, r2
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d107      	bne.n	800740e <HAL_TIM_IC_Stop_IT+0xe2>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f022 0201 	bic.w	r2, r2, #1
 800740c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d104      	bne.n	800741e <HAL_TIM_IC_Stop_IT+0xf2>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800741c:	e023      	b.n	8007466 <HAL_TIM_IC_Stop_IT+0x13a>
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	2b04      	cmp	r3, #4
 8007422:	d104      	bne.n	800742e <HAL_TIM_IC_Stop_IT+0x102>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800742c:	e01b      	b.n	8007466 <HAL_TIM_IC_Stop_IT+0x13a>
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	2b08      	cmp	r3, #8
 8007432:	d104      	bne.n	800743e <HAL_TIM_IC_Stop_IT+0x112>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800743c:	e013      	b.n	8007466 <HAL_TIM_IC_Stop_IT+0x13a>
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	2b0c      	cmp	r3, #12
 8007442:	d104      	bne.n	800744e <HAL_TIM_IC_Stop_IT+0x122>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800744c:	e00b      	b.n	8007466 <HAL_TIM_IC_Stop_IT+0x13a>
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	2b10      	cmp	r3, #16
 8007452:	d104      	bne.n	800745e <HAL_TIM_IC_Stop_IT+0x132>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800745c:	e003      	b.n	8007466 <HAL_TIM_IC_Stop_IT+0x13a>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d104      	bne.n	8007476 <HAL_TIM_IC_Stop_IT+0x14a>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007474:	e013      	b.n	800749e <HAL_TIM_IC_Stop_IT+0x172>
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	2b04      	cmp	r3, #4
 800747a:	d104      	bne.n	8007486 <HAL_TIM_IC_Stop_IT+0x15a>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007484:	e00b      	b.n	800749e <HAL_TIM_IC_Stop_IT+0x172>
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	2b08      	cmp	r3, #8
 800748a:	d104      	bne.n	8007496 <HAL_TIM_IC_Stop_IT+0x16a>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007494:	e003      	b.n	800749e <HAL_TIM_IC_Stop_IT+0x172>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 800749e:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	f003 0302 	and.w	r3, r3, #2
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d122      	bne.n	8007504 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	f003 0302 	and.w	r3, r3, #2
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	d11b      	bne.n	8007504 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f06f 0202 	mvn.w	r2, #2
 80074d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	699b      	ldr	r3, [r3, #24]
 80074e2:	f003 0303 	and.w	r3, r3, #3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d003      	beq.n	80074f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f003 fd64 	bl	800afb8 <HAL_TIM_IC_CaptureCallback>
 80074f0:	e005      	b.n	80074fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fae4 	bl	8007ac0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 faeb 	bl	8007ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	f003 0304 	and.w	r3, r3, #4
 800750e:	2b04      	cmp	r3, #4
 8007510:	d122      	bne.n	8007558 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	f003 0304 	and.w	r3, r3, #4
 800751c:	2b04      	cmp	r3, #4
 800751e:	d11b      	bne.n	8007558 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f06f 0204 	mvn.w	r2, #4
 8007528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2202      	movs	r2, #2
 800752e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	699b      	ldr	r3, [r3, #24]
 8007536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800753a:	2b00      	cmp	r3, #0
 800753c:	d003      	beq.n	8007546 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f003 fd3a 	bl	800afb8 <HAL_TIM_IC_CaptureCallback>
 8007544:	e005      	b.n	8007552 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 faba 	bl	8007ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 fac1 	bl	8007ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	f003 0308 	and.w	r3, r3, #8
 8007562:	2b08      	cmp	r3, #8
 8007564:	d122      	bne.n	80075ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	f003 0308 	and.w	r3, r3, #8
 8007570:	2b08      	cmp	r3, #8
 8007572:	d11b      	bne.n	80075ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f06f 0208 	mvn.w	r2, #8
 800757c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2204      	movs	r2, #4
 8007582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	69db      	ldr	r3, [r3, #28]
 800758a:	f003 0303 	and.w	r3, r3, #3
 800758e:	2b00      	cmp	r3, #0
 8007590:	d003      	beq.n	800759a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f003 fd10 	bl	800afb8 <HAL_TIM_IC_CaptureCallback>
 8007598:	e005      	b.n	80075a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 fa90 	bl	8007ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 fa97 	bl	8007ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	f003 0310 	and.w	r3, r3, #16
 80075b6:	2b10      	cmp	r3, #16
 80075b8:	d122      	bne.n	8007600 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	f003 0310 	and.w	r3, r3, #16
 80075c4:	2b10      	cmp	r3, #16
 80075c6:	d11b      	bne.n	8007600 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f06f 0210 	mvn.w	r2, #16
 80075d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2208      	movs	r2, #8
 80075d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	69db      	ldr	r3, [r3, #28]
 80075de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d003      	beq.n	80075ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f003 fce6 	bl	800afb8 <HAL_TIM_IC_CaptureCallback>
 80075ec:	e005      	b.n	80075fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 fa66 	bl	8007ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 fa6d 	bl	8007ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	2b01      	cmp	r3, #1
 800760c:	d10e      	bne.n	800762c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	f003 0301 	and.w	r3, r3, #1
 8007618:	2b01      	cmp	r3, #1
 800761a:	d107      	bne.n	800762c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f06f 0201 	mvn.w	r2, #1
 8007624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f7f9 fd30 	bl	800108c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007636:	2b80      	cmp	r3, #128	; 0x80
 8007638:	d10e      	bne.n	8007658 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007644:	2b80      	cmp	r3, #128	; 0x80
 8007646:	d107      	bne.n	8007658 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fe08 	bl	8008268 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007666:	d10e      	bne.n	8007686 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007672:	2b80      	cmp	r3, #128	; 0x80
 8007674:	d107      	bne.n	8007686 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800767e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fdfb 	bl	800827c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007690:	2b40      	cmp	r3, #64	; 0x40
 8007692:	d10e      	bne.n	80076b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800769e:	2b40      	cmp	r3, #64	; 0x40
 80076a0:	d107      	bne.n	80076b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80076aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 fa1b 	bl	8007ae8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	f003 0320 	and.w	r3, r3, #32
 80076bc:	2b20      	cmp	r3, #32
 80076be:	d10e      	bne.n	80076de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	f003 0320 	and.w	r3, r3, #32
 80076ca:	2b20      	cmp	r3, #32
 80076cc:	d107      	bne.n	80076de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f06f 0220 	mvn.w	r2, #32
 80076d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 fdbb 	bl	8008254 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076de:	bf00      	nop
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b086      	sub	sp, #24
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	60f8      	str	r0, [r7, #12]
 80076ee:	60b9      	str	r1, [r7, #8]
 80076f0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076f2:	2300      	movs	r3, #0
 80076f4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d101      	bne.n	8007704 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007700:	2302      	movs	r3, #2
 8007702:	e088      	b.n	8007816 <HAL_TIM_IC_ConfigChannel+0x130>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d11b      	bne.n	800774a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6818      	ldr	r0, [r3, #0]
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	6819      	ldr	r1, [r3, #0]
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	685a      	ldr	r2, [r3, #4]
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	f000 fb1f 	bl	8007d64 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	699a      	ldr	r2, [r3, #24]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f022 020c 	bic.w	r2, r2, #12
 8007734:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	6999      	ldr	r1, [r3, #24]
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	689a      	ldr	r2, [r3, #8]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	430a      	orrs	r2, r1
 8007746:	619a      	str	r2, [r3, #24]
 8007748:	e060      	b.n	800780c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2b04      	cmp	r3, #4
 800774e:	d11c      	bne.n	800778a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6818      	ldr	r0, [r3, #0]
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	6819      	ldr	r1, [r3, #0]
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	f000 fba3 	bl	8007eaa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	699a      	ldr	r2, [r3, #24]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007772:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	6999      	ldr	r1, [r3, #24]
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	021a      	lsls	r2, r3, #8
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	430a      	orrs	r2, r1
 8007786:	619a      	str	r2, [r3, #24]
 8007788:	e040      	b.n	800780c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2b08      	cmp	r3, #8
 800778e:	d11b      	bne.n	80077c8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6818      	ldr	r0, [r3, #0]
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	6819      	ldr	r1, [r3, #0]
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	685a      	ldr	r2, [r3, #4]
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	f000 fbf0 	bl	8007f84 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	69da      	ldr	r2, [r3, #28]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f022 020c 	bic.w	r2, r2, #12
 80077b2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	69d9      	ldr	r1, [r3, #28]
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	689a      	ldr	r2, [r3, #8]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	430a      	orrs	r2, r1
 80077c4:	61da      	str	r2, [r3, #28]
 80077c6:	e021      	b.n	800780c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2b0c      	cmp	r3, #12
 80077cc:	d11c      	bne.n	8007808 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6818      	ldr	r0, [r3, #0]
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	6819      	ldr	r1, [r3, #0]
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	685a      	ldr	r2, [r3, #4]
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	f000 fc0d 	bl	8007ffc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	69da      	ldr	r2, [r3, #28]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80077f0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	69d9      	ldr	r1, [r3, #28]
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	021a      	lsls	r2, r3, #8
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	430a      	orrs	r2, r1
 8007804:	61da      	str	r2, [r3, #28]
 8007806:	e001      	b.n	800780c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007814:	7dfb      	ldrb	r3, [r7, #23]
}
 8007816:	4618      	mov	r0, r3
 8007818:	3718      	adds	r7, #24
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
	...

08007820 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800782a:	2300      	movs	r3, #0
 800782c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007834:	2b01      	cmp	r3, #1
 8007836:	d101      	bne.n	800783c <HAL_TIM_ConfigClockSource+0x1c>
 8007838:	2302      	movs	r3, #2
 800783a:	e0b4      	b.n	80079a6 <HAL_TIM_ConfigClockSource+0x186>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2202      	movs	r2, #2
 8007848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	4b56      	ldr	r3, [pc, #344]	; (80079b0 <HAL_TIM_ConfigClockSource+0x190>)
 8007858:	4013      	ands	r3, r2
 800785a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007862:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007874:	d03e      	beq.n	80078f4 <HAL_TIM_ConfigClockSource+0xd4>
 8007876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800787a:	f200 8087 	bhi.w	800798c <HAL_TIM_ConfigClockSource+0x16c>
 800787e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007882:	f000 8086 	beq.w	8007992 <HAL_TIM_ConfigClockSource+0x172>
 8007886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800788a:	d87f      	bhi.n	800798c <HAL_TIM_ConfigClockSource+0x16c>
 800788c:	2b70      	cmp	r3, #112	; 0x70
 800788e:	d01a      	beq.n	80078c6 <HAL_TIM_ConfigClockSource+0xa6>
 8007890:	2b70      	cmp	r3, #112	; 0x70
 8007892:	d87b      	bhi.n	800798c <HAL_TIM_ConfigClockSource+0x16c>
 8007894:	2b60      	cmp	r3, #96	; 0x60
 8007896:	d050      	beq.n	800793a <HAL_TIM_ConfigClockSource+0x11a>
 8007898:	2b60      	cmp	r3, #96	; 0x60
 800789a:	d877      	bhi.n	800798c <HAL_TIM_ConfigClockSource+0x16c>
 800789c:	2b50      	cmp	r3, #80	; 0x50
 800789e:	d03c      	beq.n	800791a <HAL_TIM_ConfigClockSource+0xfa>
 80078a0:	2b50      	cmp	r3, #80	; 0x50
 80078a2:	d873      	bhi.n	800798c <HAL_TIM_ConfigClockSource+0x16c>
 80078a4:	2b40      	cmp	r3, #64	; 0x40
 80078a6:	d058      	beq.n	800795a <HAL_TIM_ConfigClockSource+0x13a>
 80078a8:	2b40      	cmp	r3, #64	; 0x40
 80078aa:	d86f      	bhi.n	800798c <HAL_TIM_ConfigClockSource+0x16c>
 80078ac:	2b30      	cmp	r3, #48	; 0x30
 80078ae:	d064      	beq.n	800797a <HAL_TIM_ConfigClockSource+0x15a>
 80078b0:	2b30      	cmp	r3, #48	; 0x30
 80078b2:	d86b      	bhi.n	800798c <HAL_TIM_ConfigClockSource+0x16c>
 80078b4:	2b20      	cmp	r3, #32
 80078b6:	d060      	beq.n	800797a <HAL_TIM_ConfigClockSource+0x15a>
 80078b8:	2b20      	cmp	r3, #32
 80078ba:	d867      	bhi.n	800798c <HAL_TIM_ConfigClockSource+0x16c>
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d05c      	beq.n	800797a <HAL_TIM_ConfigClockSource+0x15a>
 80078c0:	2b10      	cmp	r3, #16
 80078c2:	d05a      	beq.n	800797a <HAL_TIM_ConfigClockSource+0x15a>
 80078c4:	e062      	b.n	800798c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6818      	ldr	r0, [r3, #0]
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	6899      	ldr	r1, [r3, #8]
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	685a      	ldr	r2, [r3, #4]
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	f000 fbe9 	bl	80080ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80078e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	68ba      	ldr	r2, [r7, #8]
 80078f0:	609a      	str	r2, [r3, #8]
      break;
 80078f2:	e04f      	b.n	8007994 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6818      	ldr	r0, [r3, #0]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	6899      	ldr	r1, [r3, #8]
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	685a      	ldr	r2, [r3, #4]
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	f000 fbd2 	bl	80080ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	689a      	ldr	r2, [r3, #8]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007916:	609a      	str	r2, [r3, #8]
      break;
 8007918:	e03c      	b.n	8007994 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6818      	ldr	r0, [r3, #0]
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	6859      	ldr	r1, [r3, #4]
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	461a      	mov	r2, r3
 8007928:	f000 fa90 	bl	8007e4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2150      	movs	r1, #80	; 0x50
 8007932:	4618      	mov	r0, r3
 8007934:	f000 fb9f 	bl	8008076 <TIM_ITRx_SetConfig>
      break;
 8007938:	e02c      	b.n	8007994 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6818      	ldr	r0, [r3, #0]
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	6859      	ldr	r1, [r3, #4]
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	461a      	mov	r2, r3
 8007948:	f000 faec 	bl	8007f24 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2160      	movs	r1, #96	; 0x60
 8007952:	4618      	mov	r0, r3
 8007954:	f000 fb8f 	bl	8008076 <TIM_ITRx_SetConfig>
      break;
 8007958:	e01c      	b.n	8007994 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6818      	ldr	r0, [r3, #0]
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	6859      	ldr	r1, [r3, #4]
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	461a      	mov	r2, r3
 8007968:	f000 fa70 	bl	8007e4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2140      	movs	r1, #64	; 0x40
 8007972:	4618      	mov	r0, r3
 8007974:	f000 fb7f 	bl	8008076 <TIM_ITRx_SetConfig>
      break;
 8007978:	e00c      	b.n	8007994 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4619      	mov	r1, r3
 8007984:	4610      	mov	r0, r2
 8007986:	f000 fb76 	bl	8008076 <TIM_ITRx_SetConfig>
      break;
 800798a:	e003      	b.n	8007994 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	73fb      	strb	r3, [r7, #15]
      break;
 8007990:	e000      	b.n	8007994 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007992:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80079a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	fffeff88 	.word	0xfffeff88

080079b4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d101      	bne.n	80079cc <HAL_TIM_SlaveConfigSynchro+0x18>
 80079c8:	2302      	movs	r3, #2
 80079ca:	e031      	b.n	8007a30 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2202      	movs	r2, #2
 80079d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f92c 	bl	8007c3c <TIM_SlaveTimer_SetConfig>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d009      	beq.n	80079fe <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	e018      	b.n	8007a30 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68da      	ldr	r2, [r3, #12]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a0c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68da      	ldr	r2, [r3, #12]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a1c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3708      	adds	r7, #8
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007a42:	2300      	movs	r3, #0
 8007a44:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	2b0c      	cmp	r3, #12
 8007a4a:	d831      	bhi.n	8007ab0 <HAL_TIM_ReadCapturedValue+0x78>
 8007a4c:	a201      	add	r2, pc, #4	; (adr r2, 8007a54 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a52:	bf00      	nop
 8007a54:	08007a89 	.word	0x08007a89
 8007a58:	08007ab1 	.word	0x08007ab1
 8007a5c:	08007ab1 	.word	0x08007ab1
 8007a60:	08007ab1 	.word	0x08007ab1
 8007a64:	08007a93 	.word	0x08007a93
 8007a68:	08007ab1 	.word	0x08007ab1
 8007a6c:	08007ab1 	.word	0x08007ab1
 8007a70:	08007ab1 	.word	0x08007ab1
 8007a74:	08007a9d 	.word	0x08007a9d
 8007a78:	08007ab1 	.word	0x08007ab1
 8007a7c:	08007ab1 	.word	0x08007ab1
 8007a80:	08007ab1 	.word	0x08007ab1
 8007a84:	08007aa7 	.word	0x08007aa7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a8e:	60fb      	str	r3, [r7, #12]

      break;
 8007a90:	e00f      	b.n	8007ab2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a98:	60fb      	str	r3, [r7, #12]

      break;
 8007a9a:	e00a      	b.n	8007ab2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa2:	60fb      	str	r3, [r7, #12]

      break;
 8007aa4:	e005      	b.n	8007ab2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aac:	60fb      	str	r3, [r7, #12]

      break;
 8007aae:	e000      	b.n	8007ab2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007ab0:	bf00      	nop
  }

  return tmpreg;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3714      	adds	r7, #20
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ac8:	bf00      	nop
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007adc:	bf00      	nop
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a40      	ldr	r2, [pc, #256]	; (8007c10 <TIM_Base_SetConfig+0x114>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d013      	beq.n	8007b3c <TIM_Base_SetConfig+0x40>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b1a:	d00f      	beq.n	8007b3c <TIM_Base_SetConfig+0x40>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a3d      	ldr	r2, [pc, #244]	; (8007c14 <TIM_Base_SetConfig+0x118>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d00b      	beq.n	8007b3c <TIM_Base_SetConfig+0x40>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a3c      	ldr	r2, [pc, #240]	; (8007c18 <TIM_Base_SetConfig+0x11c>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d007      	beq.n	8007b3c <TIM_Base_SetConfig+0x40>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a3b      	ldr	r2, [pc, #236]	; (8007c1c <TIM_Base_SetConfig+0x120>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d003      	beq.n	8007b3c <TIM_Base_SetConfig+0x40>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a3a      	ldr	r2, [pc, #232]	; (8007c20 <TIM_Base_SetConfig+0x124>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d108      	bne.n	8007b4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a2f      	ldr	r2, [pc, #188]	; (8007c10 <TIM_Base_SetConfig+0x114>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d02b      	beq.n	8007bae <TIM_Base_SetConfig+0xb2>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b5c:	d027      	beq.n	8007bae <TIM_Base_SetConfig+0xb2>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a2c      	ldr	r2, [pc, #176]	; (8007c14 <TIM_Base_SetConfig+0x118>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d023      	beq.n	8007bae <TIM_Base_SetConfig+0xb2>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a2b      	ldr	r2, [pc, #172]	; (8007c18 <TIM_Base_SetConfig+0x11c>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d01f      	beq.n	8007bae <TIM_Base_SetConfig+0xb2>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a2a      	ldr	r2, [pc, #168]	; (8007c1c <TIM_Base_SetConfig+0x120>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d01b      	beq.n	8007bae <TIM_Base_SetConfig+0xb2>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a29      	ldr	r2, [pc, #164]	; (8007c20 <TIM_Base_SetConfig+0x124>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d017      	beq.n	8007bae <TIM_Base_SetConfig+0xb2>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a28      	ldr	r2, [pc, #160]	; (8007c24 <TIM_Base_SetConfig+0x128>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d013      	beq.n	8007bae <TIM_Base_SetConfig+0xb2>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a27      	ldr	r2, [pc, #156]	; (8007c28 <TIM_Base_SetConfig+0x12c>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d00f      	beq.n	8007bae <TIM_Base_SetConfig+0xb2>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a26      	ldr	r2, [pc, #152]	; (8007c2c <TIM_Base_SetConfig+0x130>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d00b      	beq.n	8007bae <TIM_Base_SetConfig+0xb2>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a25      	ldr	r2, [pc, #148]	; (8007c30 <TIM_Base_SetConfig+0x134>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d007      	beq.n	8007bae <TIM_Base_SetConfig+0xb2>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a24      	ldr	r2, [pc, #144]	; (8007c34 <TIM_Base_SetConfig+0x138>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d003      	beq.n	8007bae <TIM_Base_SetConfig+0xb2>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a23      	ldr	r2, [pc, #140]	; (8007c38 <TIM_Base_SetConfig+0x13c>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d108      	bne.n	8007bc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	695b      	ldr	r3, [r3, #20]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	689a      	ldr	r2, [r3, #8]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a0a      	ldr	r2, [pc, #40]	; (8007c10 <TIM_Base_SetConfig+0x114>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d003      	beq.n	8007bf4 <TIM_Base_SetConfig+0xf8>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a0c      	ldr	r2, [pc, #48]	; (8007c20 <TIM_Base_SetConfig+0x124>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d103      	bne.n	8007bfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	691a      	ldr	r2, [r3, #16]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	615a      	str	r2, [r3, #20]
}
 8007c02:	bf00      	nop
 8007c04:	3714      	adds	r7, #20
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	40010000 	.word	0x40010000
 8007c14:	40000400 	.word	0x40000400
 8007c18:	40000800 	.word	0x40000800
 8007c1c:	40000c00 	.word	0x40000c00
 8007c20:	40010400 	.word	0x40010400
 8007c24:	40014000 	.word	0x40014000
 8007c28:	40014400 	.word	0x40014400
 8007c2c:	40014800 	.word	0x40014800
 8007c30:	40001800 	.word	0x40001800
 8007c34:	40001c00 	.word	0x40001c00
 8007c38:	40002000 	.word	0x40002000

08007c3c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b086      	sub	sp, #24
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c46:	2300      	movs	r3, #0
 8007c48:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c58:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	693a      	ldr	r2, [r7, #16]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007c64:	693a      	ldr	r2, [r7, #16]
 8007c66:	4b3e      	ldr	r3, [pc, #248]	; (8007d60 <TIM_SlaveTimer_SetConfig+0x124>)
 8007c68:	4013      	ands	r3, r2
 8007c6a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	693a      	ldr	r2, [r7, #16]
 8007c7c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	2b70      	cmp	r3, #112	; 0x70
 8007c84:	d01a      	beq.n	8007cbc <TIM_SlaveTimer_SetConfig+0x80>
 8007c86:	2b70      	cmp	r3, #112	; 0x70
 8007c88:	d860      	bhi.n	8007d4c <TIM_SlaveTimer_SetConfig+0x110>
 8007c8a:	2b60      	cmp	r3, #96	; 0x60
 8007c8c:	d054      	beq.n	8007d38 <TIM_SlaveTimer_SetConfig+0xfc>
 8007c8e:	2b60      	cmp	r3, #96	; 0x60
 8007c90:	d85c      	bhi.n	8007d4c <TIM_SlaveTimer_SetConfig+0x110>
 8007c92:	2b50      	cmp	r3, #80	; 0x50
 8007c94:	d046      	beq.n	8007d24 <TIM_SlaveTimer_SetConfig+0xe8>
 8007c96:	2b50      	cmp	r3, #80	; 0x50
 8007c98:	d858      	bhi.n	8007d4c <TIM_SlaveTimer_SetConfig+0x110>
 8007c9a:	2b40      	cmp	r3, #64	; 0x40
 8007c9c:	d019      	beq.n	8007cd2 <TIM_SlaveTimer_SetConfig+0x96>
 8007c9e:	2b40      	cmp	r3, #64	; 0x40
 8007ca0:	d854      	bhi.n	8007d4c <TIM_SlaveTimer_SetConfig+0x110>
 8007ca2:	2b30      	cmp	r3, #48	; 0x30
 8007ca4:	d055      	beq.n	8007d52 <TIM_SlaveTimer_SetConfig+0x116>
 8007ca6:	2b30      	cmp	r3, #48	; 0x30
 8007ca8:	d850      	bhi.n	8007d4c <TIM_SlaveTimer_SetConfig+0x110>
 8007caa:	2b20      	cmp	r3, #32
 8007cac:	d051      	beq.n	8007d52 <TIM_SlaveTimer_SetConfig+0x116>
 8007cae:	2b20      	cmp	r3, #32
 8007cb0:	d84c      	bhi.n	8007d4c <TIM_SlaveTimer_SetConfig+0x110>
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d04d      	beq.n	8007d52 <TIM_SlaveTimer_SetConfig+0x116>
 8007cb6:	2b10      	cmp	r3, #16
 8007cb8:	d04b      	beq.n	8007d52 <TIM_SlaveTimer_SetConfig+0x116>
 8007cba:	e047      	b.n	8007d4c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6818      	ldr	r0, [r3, #0]
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	68d9      	ldr	r1, [r3, #12]
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	689a      	ldr	r2, [r3, #8]
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	f000 f9ee 	bl	80080ac <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007cd0:	e040      	b.n	8007d54 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2b05      	cmp	r3, #5
 8007cd8:	d101      	bne.n	8007cde <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e03b      	b.n	8007d56 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	6a1b      	ldr	r3, [r3, #32]
 8007ce4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	6a1a      	ldr	r2, [r3, #32]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f022 0201 	bic.w	r2, r2, #1
 8007cf4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d04:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	011b      	lsls	r3, r3, #4
 8007d0c:	68ba      	ldr	r2, [r7, #8]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68ba      	ldr	r2, [r7, #8]
 8007d18:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	621a      	str	r2, [r3, #32]
      break;
 8007d22:	e017      	b.n	8007d54 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6818      	ldr	r0, [r3, #0]
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	6899      	ldr	r1, [r3, #8]
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	461a      	mov	r2, r3
 8007d32:	f000 f88b 	bl	8007e4c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007d36:	e00d      	b.n	8007d54 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6818      	ldr	r0, [r3, #0]
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	6899      	ldr	r1, [r3, #8]
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	461a      	mov	r2, r3
 8007d46:	f000 f8ed 	bl	8007f24 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007d4a:	e003      	b.n	8007d54 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d50:	e000      	b.n	8007d54 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8007d52:	bf00      	nop
  }

  return status;
 8007d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3718      	adds	r7, #24
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	fffefff8 	.word	0xfffefff8

08007d64 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b087      	sub	sp, #28
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
 8007d70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6a1b      	ldr	r3, [r3, #32]
 8007d76:	f023 0201 	bic.w	r2, r3, #1
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6a1b      	ldr	r3, [r3, #32]
 8007d88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	4a28      	ldr	r2, [pc, #160]	; (8007e30 <TIM_TI1_SetConfig+0xcc>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d01b      	beq.n	8007dca <TIM_TI1_SetConfig+0x66>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d98:	d017      	beq.n	8007dca <TIM_TI1_SetConfig+0x66>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	4a25      	ldr	r2, [pc, #148]	; (8007e34 <TIM_TI1_SetConfig+0xd0>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d013      	beq.n	8007dca <TIM_TI1_SetConfig+0x66>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	4a24      	ldr	r2, [pc, #144]	; (8007e38 <TIM_TI1_SetConfig+0xd4>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d00f      	beq.n	8007dca <TIM_TI1_SetConfig+0x66>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	4a23      	ldr	r2, [pc, #140]	; (8007e3c <TIM_TI1_SetConfig+0xd8>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d00b      	beq.n	8007dca <TIM_TI1_SetConfig+0x66>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	4a22      	ldr	r2, [pc, #136]	; (8007e40 <TIM_TI1_SetConfig+0xdc>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d007      	beq.n	8007dca <TIM_TI1_SetConfig+0x66>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	4a21      	ldr	r2, [pc, #132]	; (8007e44 <TIM_TI1_SetConfig+0xe0>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d003      	beq.n	8007dca <TIM_TI1_SetConfig+0x66>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	4a20      	ldr	r2, [pc, #128]	; (8007e48 <TIM_TI1_SetConfig+0xe4>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d101      	bne.n	8007dce <TIM_TI1_SetConfig+0x6a>
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e000      	b.n	8007dd0 <TIM_TI1_SetConfig+0x6c>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d008      	beq.n	8007de6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	f023 0303 	bic.w	r3, r3, #3
 8007dda:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007ddc:	697a      	ldr	r2, [r7, #20]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	617b      	str	r3, [r7, #20]
 8007de4:	e003      	b.n	8007dee <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	f043 0301 	orr.w	r3, r3, #1
 8007dec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007df4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	011b      	lsls	r3, r3, #4
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	697a      	ldr	r2, [r7, #20]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	f023 030a 	bic.w	r3, r3, #10
 8007e08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	f003 030a 	and.w	r3, r3, #10
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	697a      	ldr	r2, [r7, #20]
 8007e1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	621a      	str	r2, [r3, #32]
}
 8007e22:	bf00      	nop
 8007e24:	371c      	adds	r7, #28
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	40010000 	.word	0x40010000
 8007e34:	40000400 	.word	0x40000400
 8007e38:	40000800 	.word	0x40000800
 8007e3c:	40000c00 	.word	0x40000c00
 8007e40:	40010400 	.word	0x40010400
 8007e44:	40014000 	.word	0x40014000
 8007e48:	40001800 	.word	0x40001800

08007e4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b087      	sub	sp, #28
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6a1b      	ldr	r3, [r3, #32]
 8007e5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	f023 0201 	bic.w	r2, r3, #1
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	011b      	lsls	r3, r3, #4
 8007e7c:	693a      	ldr	r2, [r7, #16]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	f023 030a 	bic.w	r3, r3, #10
 8007e88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	693a      	ldr	r2, [r7, #16]
 8007e96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	697a      	ldr	r2, [r7, #20]
 8007e9c:	621a      	str	r2, [r3, #32]
}
 8007e9e:	bf00      	nop
 8007ea0:	371c      	adds	r7, #28
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b087      	sub	sp, #28
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	60f8      	str	r0, [r7, #12]
 8007eb2:	60b9      	str	r1, [r7, #8]
 8007eb4:	607a      	str	r2, [r7, #4]
 8007eb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6a1b      	ldr	r3, [r3, #32]
 8007ebc:	f023 0210 	bic.w	r2, r3, #16
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	699b      	ldr	r3, [r3, #24]
 8007ec8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6a1b      	ldr	r3, [r3, #32]
 8007ece:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ed6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	021b      	lsls	r3, r3, #8
 8007edc:	697a      	ldr	r2, [r7, #20]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ee8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	031b      	lsls	r3, r3, #12
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	697a      	ldr	r2, [r7, #20]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007efc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	011b      	lsls	r3, r3, #4
 8007f02:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	693a      	ldr	r2, [r7, #16]
 8007f16:	621a      	str	r2, [r3, #32]
}
 8007f18:	bf00      	nop
 8007f1a:	371c      	adds	r7, #28
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b087      	sub	sp, #28
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6a1b      	ldr	r3, [r3, #32]
 8007f34:	f023 0210 	bic.w	r2, r3, #16
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6a1b      	ldr	r3, [r3, #32]
 8007f46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	031b      	lsls	r3, r3, #12
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	011b      	lsls	r3, r3, #4
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	693a      	ldr	r2, [r7, #16]
 8007f76:	621a      	str	r2, [r3, #32]
}
 8007f78:	bf00      	nop
 8007f7a:	371c      	adds	r7, #28
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b087      	sub	sp, #28
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	607a      	str	r2, [r7, #4]
 8007f90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6a1b      	ldr	r3, [r3, #32]
 8007f96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6a1b      	ldr	r3, [r3, #32]
 8007fa8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	f023 0303 	bic.w	r3, r3, #3
 8007fb0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007fb2:	697a      	ldr	r2, [r7, #20]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fc0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	011b      	lsls	r3, r3, #4
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	697a      	ldr	r2, [r7, #20]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007fd4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	021b      	lsls	r3, r3, #8
 8007fda:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007fde:	693a      	ldr	r2, [r7, #16]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	697a      	ldr	r2, [r7, #20]
 8007fe8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	621a      	str	r2, [r3, #32]
}
 8007ff0:	bf00      	nop
 8007ff2:	371c      	adds	r7, #28
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b087      	sub	sp, #28
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	607a      	str	r2, [r7, #4]
 8008008:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6a1b      	ldr	r3, [r3, #32]
 800800e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	69db      	ldr	r3, [r3, #28]
 800801a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6a1b      	ldr	r3, [r3, #32]
 8008020:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008028:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	021b      	lsls	r3, r3, #8
 800802e:	697a      	ldr	r2, [r7, #20]
 8008030:	4313      	orrs	r3, r2
 8008032:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800803a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	031b      	lsls	r3, r3, #12
 8008040:	b29b      	uxth	r3, r3
 8008042:	697a      	ldr	r2, [r7, #20]
 8008044:	4313      	orrs	r3, r2
 8008046:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800804e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	031b      	lsls	r3, r3, #12
 8008054:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008058:	693a      	ldr	r2, [r7, #16]
 800805a:	4313      	orrs	r3, r2
 800805c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	697a      	ldr	r2, [r7, #20]
 8008062:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	693a      	ldr	r2, [r7, #16]
 8008068:	621a      	str	r2, [r3, #32]
}
 800806a:	bf00      	nop
 800806c:	371c      	adds	r7, #28
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr

08008076 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008076:	b480      	push	{r7}
 8008078:	b085      	sub	sp, #20
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
 800807e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800808c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800808e:	683a      	ldr	r2, [r7, #0]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	4313      	orrs	r3, r2
 8008094:	f043 0307 	orr.w	r3, r3, #7
 8008098:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	609a      	str	r2, [r3, #8]
}
 80080a0:	bf00      	nop
 80080a2:	3714      	adds	r7, #20
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b087      	sub	sp, #28
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
 80080b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	021a      	lsls	r2, r3, #8
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	431a      	orrs	r2, r3
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	697a      	ldr	r2, [r7, #20]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	697a      	ldr	r2, [r7, #20]
 80080de:	609a      	str	r2, [r3, #8]
}
 80080e0:	bf00      	nop
 80080e2:	371c      	adds	r7, #28
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b087      	sub	sp, #28
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	f003 031f 	and.w	r3, r3, #31
 80080fe:	2201      	movs	r2, #1
 8008100:	fa02 f303 	lsl.w	r3, r2, r3
 8008104:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6a1a      	ldr	r2, [r3, #32]
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	43db      	mvns	r3, r3
 800810e:	401a      	ands	r2, r3
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6a1a      	ldr	r2, [r3, #32]
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	f003 031f 	and.w	r3, r3, #31
 800811e:	6879      	ldr	r1, [r7, #4]
 8008120:	fa01 f303 	lsl.w	r3, r1, r3
 8008124:	431a      	orrs	r2, r3
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	621a      	str	r2, [r3, #32]
}
 800812a:	bf00      	nop
 800812c:	371c      	adds	r7, #28
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr
	...

08008138 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008148:	2b01      	cmp	r3, #1
 800814a:	d101      	bne.n	8008150 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800814c:	2302      	movs	r3, #2
 800814e:	e06d      	b.n	800822c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2202      	movs	r2, #2
 800815c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a30      	ldr	r2, [pc, #192]	; (8008238 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d004      	beq.n	8008184 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a2f      	ldr	r2, [pc, #188]	; (800823c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d108      	bne.n	8008196 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800818a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	4313      	orrs	r3, r2
 8008194:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800819c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a20      	ldr	r2, [pc, #128]	; (8008238 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d022      	beq.n	8008200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081c2:	d01d      	beq.n	8008200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a1d      	ldr	r2, [pc, #116]	; (8008240 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d018      	beq.n	8008200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a1c      	ldr	r2, [pc, #112]	; (8008244 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d013      	beq.n	8008200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a1a      	ldr	r2, [pc, #104]	; (8008248 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d00e      	beq.n	8008200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a15      	ldr	r2, [pc, #84]	; (800823c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d009      	beq.n	8008200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a16      	ldr	r2, [pc, #88]	; (800824c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d004      	beq.n	8008200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a15      	ldr	r2, [pc, #84]	; (8008250 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d10c      	bne.n	800821a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008206:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	4313      	orrs	r3, r2
 8008210:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	68ba      	ldr	r2, [r7, #8]
 8008218:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2201      	movs	r2, #1
 800821e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800822a:	2300      	movs	r3, #0
}
 800822c:	4618      	mov	r0, r3
 800822e:	3714      	adds	r7, #20
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr
 8008238:	40010000 	.word	0x40010000
 800823c:	40010400 	.word	0x40010400
 8008240:	40000400 	.word	0x40000400
 8008244:	40000800 	.word	0x40000800
 8008248:	40000c00 	.word	0x40000c00
 800824c:	40014000 	.word	0x40014000
 8008250:	40001800 	.word	0x40001800

08008254 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800825c:	bf00      	nop
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008284:	bf00      	nop
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d101      	bne.n	80082a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	e040      	b.n	8008324 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d106      	bne.n	80082b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f7f9 f9fc 	bl	80016b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2224      	movs	r2, #36	; 0x24
 80082bc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f022 0201 	bic.w	r2, r2, #1
 80082cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 fb46 	bl	8008960 <UART_SetConfig>
 80082d4:	4603      	mov	r3, r0
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d101      	bne.n	80082de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e022      	b.n	8008324 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d002      	beq.n	80082ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fd9e 	bl	8008e28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	685a      	ldr	r2, [r3, #4]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	689a      	ldr	r2, [r3, #8]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800830a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f042 0201 	orr.w	r2, r2, #1
 800831a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 fe25 	bl	8008f6c <UART_CheckIdleState>
 8008322:	4603      	mov	r3, r0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b0ba      	sub	sp, #232	; 0xe8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	69db      	ldr	r3, [r3, #28]
 800833a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008352:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008356:	f640 030f 	movw	r3, #2063	; 0x80f
 800835a:	4013      	ands	r3, r2
 800835c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008360:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008364:	2b00      	cmp	r3, #0
 8008366:	d115      	bne.n	8008394 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800836c:	f003 0320 	and.w	r3, r3, #32
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00f      	beq.n	8008394 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008378:	f003 0320 	and.w	r3, r3, #32
 800837c:	2b00      	cmp	r3, #0
 800837e:	d009      	beq.n	8008394 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008384:	2b00      	cmp	r3, #0
 8008386:	f000 82ac 	beq.w	80088e2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	4798      	blx	r3
      }
      return;
 8008392:	e2a6      	b.n	80088e2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008394:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008398:	2b00      	cmp	r3, #0
 800839a:	f000 8117 	beq.w	80085cc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800839e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083a2:	f003 0301 	and.w	r3, r3, #1
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d106      	bne.n	80083b8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80083aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80083ae:	4b85      	ldr	r3, [pc, #532]	; (80085c4 <HAL_UART_IRQHandler+0x298>)
 80083b0:	4013      	ands	r3, r2
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f000 810a 	beq.w	80085cc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80083b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083bc:	f003 0301 	and.w	r3, r3, #1
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d011      	beq.n	80083e8 <HAL_UART_IRQHandler+0xbc>
 80083c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00b      	beq.n	80083e8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2201      	movs	r2, #1
 80083d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083de:	f043 0201 	orr.w	r2, r3, #1
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083ec:	f003 0302 	and.w	r3, r3, #2
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d011      	beq.n	8008418 <HAL_UART_IRQHandler+0xec>
 80083f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083f8:	f003 0301 	and.w	r3, r3, #1
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00b      	beq.n	8008418 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2202      	movs	r2, #2
 8008406:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800840e:	f043 0204 	orr.w	r2, r3, #4
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800841c:	f003 0304 	and.w	r3, r3, #4
 8008420:	2b00      	cmp	r3, #0
 8008422:	d011      	beq.n	8008448 <HAL_UART_IRQHandler+0x11c>
 8008424:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008428:	f003 0301 	and.w	r3, r3, #1
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00b      	beq.n	8008448 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2204      	movs	r2, #4
 8008436:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800843e:	f043 0202 	orr.w	r2, r3, #2
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800844c:	f003 0308 	and.w	r3, r3, #8
 8008450:	2b00      	cmp	r3, #0
 8008452:	d017      	beq.n	8008484 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008458:	f003 0320 	and.w	r3, r3, #32
 800845c:	2b00      	cmp	r3, #0
 800845e:	d105      	bne.n	800846c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008460:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008464:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008468:	2b00      	cmp	r3, #0
 800846a:	d00b      	beq.n	8008484 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2208      	movs	r2, #8
 8008472:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800847a:	f043 0208 	orr.w	r2, r3, #8
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008488:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800848c:	2b00      	cmp	r3, #0
 800848e:	d012      	beq.n	80084b6 <HAL_UART_IRQHandler+0x18a>
 8008490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008494:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008498:	2b00      	cmp	r3, #0
 800849a:	d00c      	beq.n	80084b6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084ac:	f043 0220 	orr.w	r2, r3, #32
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f000 8212 	beq.w	80088e6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80084c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084c6:	f003 0320 	and.w	r3, r3, #32
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00d      	beq.n	80084ea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80084ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084d2:	f003 0320 	and.w	r3, r3, #32
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d007      	beq.n	80084ea <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d003      	beq.n	80084ea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084fe:	2b40      	cmp	r3, #64	; 0x40
 8008500:	d005      	beq.n	800850e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008502:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008506:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800850a:	2b00      	cmp	r3, #0
 800850c:	d04f      	beq.n	80085ae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 ff06 	bl	8009320 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800851e:	2b40      	cmp	r3, #64	; 0x40
 8008520:	d141      	bne.n	80085a6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	3308      	adds	r3, #8
 8008528:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008530:	e853 3f00 	ldrex	r3, [r3]
 8008534:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008538:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800853c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008540:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	3308      	adds	r3, #8
 800854a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800854e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008552:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008556:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800855a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800855e:	e841 2300 	strex	r3, r2, [r1]
 8008562:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008566:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d1d9      	bne.n	8008522 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008572:	2b00      	cmp	r3, #0
 8008574:	d013      	beq.n	800859e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800857a:	4a13      	ldr	r2, [pc, #76]	; (80085c8 <HAL_UART_IRQHandler+0x29c>)
 800857c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008582:	4618      	mov	r0, r3
 8008584:	f7f9 ff8a 	bl	800249c <HAL_DMA_Abort_IT>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d017      	beq.n	80085be <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008598:	4610      	mov	r0, r2
 800859a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800859c:	e00f      	b.n	80085be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 f9ca 	bl	8008938 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085a4:	e00b      	b.n	80085be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f9c6 	bl	8008938 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085ac:	e007      	b.n	80085be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f9c2 	bl	8008938 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80085bc:	e193      	b.n	80088e6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085be:	bf00      	nop
    return;
 80085c0:	e191      	b.n	80088e6 <HAL_UART_IRQHandler+0x5ba>
 80085c2:	bf00      	nop
 80085c4:	04000120 	.word	0x04000120
 80085c8:	080095cd 	.word	0x080095cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	f040 814c 	bne.w	800886e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80085d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085da:	f003 0310 	and.w	r3, r3, #16
 80085de:	2b00      	cmp	r3, #0
 80085e0:	f000 8145 	beq.w	800886e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80085e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085e8:	f003 0310 	and.w	r3, r3, #16
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f000 813e 	beq.w	800886e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2210      	movs	r2, #16
 80085f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008604:	2b40      	cmp	r3, #64	; 0x40
 8008606:	f040 80b6 	bne.w	8008776 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008616:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800861a:	2b00      	cmp	r3, #0
 800861c:	f000 8165 	beq.w	80088ea <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008626:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800862a:	429a      	cmp	r2, r3
 800862c:	f080 815d 	bcs.w	80088ea <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008636:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800863e:	69db      	ldr	r3, [r3, #28]
 8008640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008644:	f000 8086 	beq.w	8008754 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008650:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008654:	e853 3f00 	ldrex	r3, [r3]
 8008658:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800865c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008664:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	461a      	mov	r2, r3
 800866e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008672:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008676:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800867e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008682:	e841 2300 	strex	r3, r2, [r1]
 8008686:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800868a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1da      	bne.n	8008648 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	3308      	adds	r3, #8
 8008698:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800869c:	e853 3f00 	ldrex	r3, [r3]
 80086a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80086a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80086a4:	f023 0301 	bic.w	r3, r3, #1
 80086a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	3308      	adds	r3, #8
 80086b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80086b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80086ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80086be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80086c2:	e841 2300 	strex	r3, r2, [r1]
 80086c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80086c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d1e1      	bne.n	8008692 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	3308      	adds	r3, #8
 80086d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086d8:	e853 3f00 	ldrex	r3, [r3]
 80086dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80086de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	3308      	adds	r3, #8
 80086ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80086f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80086f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80086f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80086fa:	e841 2300 	strex	r3, r2, [r1]
 80086fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008700:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1e3      	bne.n	80086ce <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2220      	movs	r2, #32
 800870a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2200      	movs	r2, #0
 8008712:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800871c:	e853 3f00 	ldrex	r3, [r3]
 8008720:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008724:	f023 0310 	bic.w	r3, r3, #16
 8008728:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	461a      	mov	r2, r3
 8008732:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008736:	65bb      	str	r3, [r7, #88]	; 0x58
 8008738:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800873c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800873e:	e841 2300 	strex	r3, r2, [r1]
 8008742:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008746:	2b00      	cmp	r3, #0
 8008748:	d1e4      	bne.n	8008714 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800874e:	4618      	mov	r0, r3
 8008750:	f7f9 fe34 	bl	80023bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2202      	movs	r2, #2
 8008758:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008766:	b29b      	uxth	r3, r3
 8008768:	1ad3      	subs	r3, r2, r3
 800876a:	b29b      	uxth	r3, r3
 800876c:	4619      	mov	r1, r3
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f002 fc52 	bl	800b018 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008774:	e0b9      	b.n	80088ea <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008782:	b29b      	uxth	r3, r3
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008790:	b29b      	uxth	r3, r3
 8008792:	2b00      	cmp	r3, #0
 8008794:	f000 80ab 	beq.w	80088ee <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8008798:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800879c:	2b00      	cmp	r3, #0
 800879e:	f000 80a6 	beq.w	80088ee <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087aa:	e853 3f00 	ldrex	r3, [r3]
 80087ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80087b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	461a      	mov	r2, r3
 80087c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80087c4:	647b      	str	r3, [r7, #68]	; 0x44
 80087c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80087ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087cc:	e841 2300 	strex	r3, r2, [r1]
 80087d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80087d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1e4      	bne.n	80087a2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	3308      	adds	r3, #8
 80087de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e2:	e853 3f00 	ldrex	r3, [r3]
 80087e6:	623b      	str	r3, [r7, #32]
   return(result);
 80087e8:	6a3b      	ldr	r3, [r7, #32]
 80087ea:	f023 0301 	bic.w	r3, r3, #1
 80087ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	3308      	adds	r3, #8
 80087f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80087fc:	633a      	str	r2, [r7, #48]	; 0x30
 80087fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008800:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008802:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008804:	e841 2300 	strex	r3, r2, [r1]
 8008808:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800880a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1e3      	bne.n	80087d8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2220      	movs	r2, #32
 8008814:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	e853 3f00 	ldrex	r3, [r3]
 8008830:	60fb      	str	r3, [r7, #12]
   return(result);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f023 0310 	bic.w	r3, r3, #16
 8008838:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	461a      	mov	r2, r3
 8008842:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008846:	61fb      	str	r3, [r7, #28]
 8008848:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884a:	69b9      	ldr	r1, [r7, #24]
 800884c:	69fa      	ldr	r2, [r7, #28]
 800884e:	e841 2300 	strex	r3, r2, [r1]
 8008852:	617b      	str	r3, [r7, #20]
   return(result);
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d1e4      	bne.n	8008824 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2202      	movs	r2, #2
 800885e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008860:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008864:	4619      	mov	r1, r3
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f002 fbd6 	bl	800b018 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800886c:	e03f      	b.n	80088ee <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800886e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00e      	beq.n	8008898 <HAL_UART_IRQHandler+0x56c>
 800887a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800887e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008882:	2b00      	cmp	r3, #0
 8008884:	d008      	beq.n	8008898 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800888e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 f85b 	bl	800894c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008896:	e02d      	b.n	80088f4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800889c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d00e      	beq.n	80088c2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80088a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d008      	beq.n	80088c2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d01c      	beq.n	80088f2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	4798      	blx	r3
    }
    return;
 80088c0:	e017      	b.n	80088f2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80088c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d012      	beq.n	80088f4 <HAL_UART_IRQHandler+0x5c8>
 80088ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00c      	beq.n	80088f4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 fe8c 	bl	80095f8 <UART_EndTransmit_IT>
    return;
 80088e0:	e008      	b.n	80088f4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80088e2:	bf00      	nop
 80088e4:	e006      	b.n	80088f4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80088e6:	bf00      	nop
 80088e8:	e004      	b.n	80088f4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80088ea:	bf00      	nop
 80088ec:	e002      	b.n	80088f4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80088ee:	bf00      	nop
 80088f0:	e000      	b.n	80088f4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80088f2:	bf00      	nop
  }

}
 80088f4:	37e8      	adds	r7, #232	; 0xe8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop

080088fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008904:	bf00      	nop
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008918:	bf00      	nop
 800891a:	370c      	adds	r7, #12
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800892c:	bf00      	nop
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008940:	bf00      	nop
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008954:	bf00      	nop
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b088      	sub	sp, #32
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008968:	2300      	movs	r3, #0
 800896a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	689a      	ldr	r2, [r3, #8]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	691b      	ldr	r3, [r3, #16]
 8008974:	431a      	orrs	r2, r3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	695b      	ldr	r3, [r3, #20]
 800897a:	431a      	orrs	r2, r3
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	69db      	ldr	r3, [r3, #28]
 8008980:	4313      	orrs	r3, r2
 8008982:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	4ba6      	ldr	r3, [pc, #664]	; (8008c24 <UART_SetConfig+0x2c4>)
 800898c:	4013      	ands	r3, r2
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	6812      	ldr	r2, [r2, #0]
 8008992:	6979      	ldr	r1, [r7, #20]
 8008994:	430b      	orrs	r3, r1
 8008996:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	68da      	ldr	r2, [r3, #12]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	430a      	orrs	r2, r1
 80089ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	699b      	ldr	r3, [r3, #24]
 80089b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6a1b      	ldr	r3, [r3, #32]
 80089b8:	697a      	ldr	r2, [r7, #20]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	697a      	ldr	r2, [r7, #20]
 80089ce:	430a      	orrs	r2, r1
 80089d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a94      	ldr	r2, [pc, #592]	; (8008c28 <UART_SetConfig+0x2c8>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d120      	bne.n	8008a1e <UART_SetConfig+0xbe>
 80089dc:	4b93      	ldr	r3, [pc, #588]	; (8008c2c <UART_SetConfig+0x2cc>)
 80089de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089e2:	f003 0303 	and.w	r3, r3, #3
 80089e6:	2b03      	cmp	r3, #3
 80089e8:	d816      	bhi.n	8008a18 <UART_SetConfig+0xb8>
 80089ea:	a201      	add	r2, pc, #4	; (adr r2, 80089f0 <UART_SetConfig+0x90>)
 80089ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f0:	08008a01 	.word	0x08008a01
 80089f4:	08008a0d 	.word	0x08008a0d
 80089f8:	08008a07 	.word	0x08008a07
 80089fc:	08008a13 	.word	0x08008a13
 8008a00:	2301      	movs	r3, #1
 8008a02:	77fb      	strb	r3, [r7, #31]
 8008a04:	e150      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008a06:	2302      	movs	r3, #2
 8008a08:	77fb      	strb	r3, [r7, #31]
 8008a0a:	e14d      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008a0c:	2304      	movs	r3, #4
 8008a0e:	77fb      	strb	r3, [r7, #31]
 8008a10:	e14a      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008a12:	2308      	movs	r3, #8
 8008a14:	77fb      	strb	r3, [r7, #31]
 8008a16:	e147      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008a18:	2310      	movs	r3, #16
 8008a1a:	77fb      	strb	r3, [r7, #31]
 8008a1c:	e144      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a83      	ldr	r2, [pc, #524]	; (8008c30 <UART_SetConfig+0x2d0>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d132      	bne.n	8008a8e <UART_SetConfig+0x12e>
 8008a28:	4b80      	ldr	r3, [pc, #512]	; (8008c2c <UART_SetConfig+0x2cc>)
 8008a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a2e:	f003 030c 	and.w	r3, r3, #12
 8008a32:	2b0c      	cmp	r3, #12
 8008a34:	d828      	bhi.n	8008a88 <UART_SetConfig+0x128>
 8008a36:	a201      	add	r2, pc, #4	; (adr r2, 8008a3c <UART_SetConfig+0xdc>)
 8008a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a3c:	08008a71 	.word	0x08008a71
 8008a40:	08008a89 	.word	0x08008a89
 8008a44:	08008a89 	.word	0x08008a89
 8008a48:	08008a89 	.word	0x08008a89
 8008a4c:	08008a7d 	.word	0x08008a7d
 8008a50:	08008a89 	.word	0x08008a89
 8008a54:	08008a89 	.word	0x08008a89
 8008a58:	08008a89 	.word	0x08008a89
 8008a5c:	08008a77 	.word	0x08008a77
 8008a60:	08008a89 	.word	0x08008a89
 8008a64:	08008a89 	.word	0x08008a89
 8008a68:	08008a89 	.word	0x08008a89
 8008a6c:	08008a83 	.word	0x08008a83
 8008a70:	2300      	movs	r3, #0
 8008a72:	77fb      	strb	r3, [r7, #31]
 8008a74:	e118      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008a76:	2302      	movs	r3, #2
 8008a78:	77fb      	strb	r3, [r7, #31]
 8008a7a:	e115      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008a7c:	2304      	movs	r3, #4
 8008a7e:	77fb      	strb	r3, [r7, #31]
 8008a80:	e112      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008a82:	2308      	movs	r3, #8
 8008a84:	77fb      	strb	r3, [r7, #31]
 8008a86:	e10f      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008a88:	2310      	movs	r3, #16
 8008a8a:	77fb      	strb	r3, [r7, #31]
 8008a8c:	e10c      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a68      	ldr	r2, [pc, #416]	; (8008c34 <UART_SetConfig+0x2d4>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d120      	bne.n	8008ada <UART_SetConfig+0x17a>
 8008a98:	4b64      	ldr	r3, [pc, #400]	; (8008c2c <UART_SetConfig+0x2cc>)
 8008a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a9e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008aa2:	2b30      	cmp	r3, #48	; 0x30
 8008aa4:	d013      	beq.n	8008ace <UART_SetConfig+0x16e>
 8008aa6:	2b30      	cmp	r3, #48	; 0x30
 8008aa8:	d814      	bhi.n	8008ad4 <UART_SetConfig+0x174>
 8008aaa:	2b20      	cmp	r3, #32
 8008aac:	d009      	beq.n	8008ac2 <UART_SetConfig+0x162>
 8008aae:	2b20      	cmp	r3, #32
 8008ab0:	d810      	bhi.n	8008ad4 <UART_SetConfig+0x174>
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d002      	beq.n	8008abc <UART_SetConfig+0x15c>
 8008ab6:	2b10      	cmp	r3, #16
 8008ab8:	d006      	beq.n	8008ac8 <UART_SetConfig+0x168>
 8008aba:	e00b      	b.n	8008ad4 <UART_SetConfig+0x174>
 8008abc:	2300      	movs	r3, #0
 8008abe:	77fb      	strb	r3, [r7, #31]
 8008ac0:	e0f2      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	77fb      	strb	r3, [r7, #31]
 8008ac6:	e0ef      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008ac8:	2304      	movs	r3, #4
 8008aca:	77fb      	strb	r3, [r7, #31]
 8008acc:	e0ec      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008ace:	2308      	movs	r3, #8
 8008ad0:	77fb      	strb	r3, [r7, #31]
 8008ad2:	e0e9      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008ad4:	2310      	movs	r3, #16
 8008ad6:	77fb      	strb	r3, [r7, #31]
 8008ad8:	e0e6      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a56      	ldr	r2, [pc, #344]	; (8008c38 <UART_SetConfig+0x2d8>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d120      	bne.n	8008b26 <UART_SetConfig+0x1c6>
 8008ae4:	4b51      	ldr	r3, [pc, #324]	; (8008c2c <UART_SetConfig+0x2cc>)
 8008ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008aee:	2bc0      	cmp	r3, #192	; 0xc0
 8008af0:	d013      	beq.n	8008b1a <UART_SetConfig+0x1ba>
 8008af2:	2bc0      	cmp	r3, #192	; 0xc0
 8008af4:	d814      	bhi.n	8008b20 <UART_SetConfig+0x1c0>
 8008af6:	2b80      	cmp	r3, #128	; 0x80
 8008af8:	d009      	beq.n	8008b0e <UART_SetConfig+0x1ae>
 8008afa:	2b80      	cmp	r3, #128	; 0x80
 8008afc:	d810      	bhi.n	8008b20 <UART_SetConfig+0x1c0>
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d002      	beq.n	8008b08 <UART_SetConfig+0x1a8>
 8008b02:	2b40      	cmp	r3, #64	; 0x40
 8008b04:	d006      	beq.n	8008b14 <UART_SetConfig+0x1b4>
 8008b06:	e00b      	b.n	8008b20 <UART_SetConfig+0x1c0>
 8008b08:	2300      	movs	r3, #0
 8008b0a:	77fb      	strb	r3, [r7, #31]
 8008b0c:	e0cc      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008b0e:	2302      	movs	r3, #2
 8008b10:	77fb      	strb	r3, [r7, #31]
 8008b12:	e0c9      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008b14:	2304      	movs	r3, #4
 8008b16:	77fb      	strb	r3, [r7, #31]
 8008b18:	e0c6      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008b1a:	2308      	movs	r3, #8
 8008b1c:	77fb      	strb	r3, [r7, #31]
 8008b1e:	e0c3      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008b20:	2310      	movs	r3, #16
 8008b22:	77fb      	strb	r3, [r7, #31]
 8008b24:	e0c0      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a44      	ldr	r2, [pc, #272]	; (8008c3c <UART_SetConfig+0x2dc>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d125      	bne.n	8008b7c <UART_SetConfig+0x21c>
 8008b30:	4b3e      	ldr	r3, [pc, #248]	; (8008c2c <UART_SetConfig+0x2cc>)
 8008b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b3e:	d017      	beq.n	8008b70 <UART_SetConfig+0x210>
 8008b40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b44:	d817      	bhi.n	8008b76 <UART_SetConfig+0x216>
 8008b46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b4a:	d00b      	beq.n	8008b64 <UART_SetConfig+0x204>
 8008b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b50:	d811      	bhi.n	8008b76 <UART_SetConfig+0x216>
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d003      	beq.n	8008b5e <UART_SetConfig+0x1fe>
 8008b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b5a:	d006      	beq.n	8008b6a <UART_SetConfig+0x20a>
 8008b5c:	e00b      	b.n	8008b76 <UART_SetConfig+0x216>
 8008b5e:	2300      	movs	r3, #0
 8008b60:	77fb      	strb	r3, [r7, #31]
 8008b62:	e0a1      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008b64:	2302      	movs	r3, #2
 8008b66:	77fb      	strb	r3, [r7, #31]
 8008b68:	e09e      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008b6a:	2304      	movs	r3, #4
 8008b6c:	77fb      	strb	r3, [r7, #31]
 8008b6e:	e09b      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008b70:	2308      	movs	r3, #8
 8008b72:	77fb      	strb	r3, [r7, #31]
 8008b74:	e098      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008b76:	2310      	movs	r3, #16
 8008b78:	77fb      	strb	r3, [r7, #31]
 8008b7a:	e095      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a2f      	ldr	r2, [pc, #188]	; (8008c40 <UART_SetConfig+0x2e0>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d125      	bne.n	8008bd2 <UART_SetConfig+0x272>
 8008b86:	4b29      	ldr	r3, [pc, #164]	; (8008c2c <UART_SetConfig+0x2cc>)
 8008b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008b90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008b94:	d017      	beq.n	8008bc6 <UART_SetConfig+0x266>
 8008b96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008b9a:	d817      	bhi.n	8008bcc <UART_SetConfig+0x26c>
 8008b9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ba0:	d00b      	beq.n	8008bba <UART_SetConfig+0x25a>
 8008ba2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ba6:	d811      	bhi.n	8008bcc <UART_SetConfig+0x26c>
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d003      	beq.n	8008bb4 <UART_SetConfig+0x254>
 8008bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bb0:	d006      	beq.n	8008bc0 <UART_SetConfig+0x260>
 8008bb2:	e00b      	b.n	8008bcc <UART_SetConfig+0x26c>
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	77fb      	strb	r3, [r7, #31]
 8008bb8:	e076      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008bba:	2302      	movs	r3, #2
 8008bbc:	77fb      	strb	r3, [r7, #31]
 8008bbe:	e073      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008bc0:	2304      	movs	r3, #4
 8008bc2:	77fb      	strb	r3, [r7, #31]
 8008bc4:	e070      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008bc6:	2308      	movs	r3, #8
 8008bc8:	77fb      	strb	r3, [r7, #31]
 8008bca:	e06d      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008bcc:	2310      	movs	r3, #16
 8008bce:	77fb      	strb	r3, [r7, #31]
 8008bd0:	e06a      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a1b      	ldr	r2, [pc, #108]	; (8008c44 <UART_SetConfig+0x2e4>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d138      	bne.n	8008c4e <UART_SetConfig+0x2ee>
 8008bdc:	4b13      	ldr	r3, [pc, #76]	; (8008c2c <UART_SetConfig+0x2cc>)
 8008bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008be2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008be6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008bea:	d017      	beq.n	8008c1c <UART_SetConfig+0x2bc>
 8008bec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008bf0:	d82a      	bhi.n	8008c48 <UART_SetConfig+0x2e8>
 8008bf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bf6:	d00b      	beq.n	8008c10 <UART_SetConfig+0x2b0>
 8008bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bfc:	d824      	bhi.n	8008c48 <UART_SetConfig+0x2e8>
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d003      	beq.n	8008c0a <UART_SetConfig+0x2aa>
 8008c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c06:	d006      	beq.n	8008c16 <UART_SetConfig+0x2b6>
 8008c08:	e01e      	b.n	8008c48 <UART_SetConfig+0x2e8>
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	77fb      	strb	r3, [r7, #31]
 8008c0e:	e04b      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008c10:	2302      	movs	r3, #2
 8008c12:	77fb      	strb	r3, [r7, #31]
 8008c14:	e048      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008c16:	2304      	movs	r3, #4
 8008c18:	77fb      	strb	r3, [r7, #31]
 8008c1a:	e045      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008c1c:	2308      	movs	r3, #8
 8008c1e:	77fb      	strb	r3, [r7, #31]
 8008c20:	e042      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008c22:	bf00      	nop
 8008c24:	efff69f3 	.word	0xefff69f3
 8008c28:	40011000 	.word	0x40011000
 8008c2c:	40023800 	.word	0x40023800
 8008c30:	40004400 	.word	0x40004400
 8008c34:	40004800 	.word	0x40004800
 8008c38:	40004c00 	.word	0x40004c00
 8008c3c:	40005000 	.word	0x40005000
 8008c40:	40011400 	.word	0x40011400
 8008c44:	40007800 	.word	0x40007800
 8008c48:	2310      	movs	r3, #16
 8008c4a:	77fb      	strb	r3, [r7, #31]
 8008c4c:	e02c      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a72      	ldr	r2, [pc, #456]	; (8008e1c <UART_SetConfig+0x4bc>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d125      	bne.n	8008ca4 <UART_SetConfig+0x344>
 8008c58:	4b71      	ldr	r3, [pc, #452]	; (8008e20 <UART_SetConfig+0x4c0>)
 8008c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c5e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008c62:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008c66:	d017      	beq.n	8008c98 <UART_SetConfig+0x338>
 8008c68:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008c6c:	d817      	bhi.n	8008c9e <UART_SetConfig+0x33e>
 8008c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c72:	d00b      	beq.n	8008c8c <UART_SetConfig+0x32c>
 8008c74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c78:	d811      	bhi.n	8008c9e <UART_SetConfig+0x33e>
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d003      	beq.n	8008c86 <UART_SetConfig+0x326>
 8008c7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c82:	d006      	beq.n	8008c92 <UART_SetConfig+0x332>
 8008c84:	e00b      	b.n	8008c9e <UART_SetConfig+0x33e>
 8008c86:	2300      	movs	r3, #0
 8008c88:	77fb      	strb	r3, [r7, #31]
 8008c8a:	e00d      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008c8c:	2302      	movs	r3, #2
 8008c8e:	77fb      	strb	r3, [r7, #31]
 8008c90:	e00a      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008c92:	2304      	movs	r3, #4
 8008c94:	77fb      	strb	r3, [r7, #31]
 8008c96:	e007      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008c98:	2308      	movs	r3, #8
 8008c9a:	77fb      	strb	r3, [r7, #31]
 8008c9c:	e004      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008c9e:	2310      	movs	r3, #16
 8008ca0:	77fb      	strb	r3, [r7, #31]
 8008ca2:	e001      	b.n	8008ca8 <UART_SetConfig+0x348>
 8008ca4:	2310      	movs	r3, #16
 8008ca6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	69db      	ldr	r3, [r3, #28]
 8008cac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cb0:	d15b      	bne.n	8008d6a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008cb2:	7ffb      	ldrb	r3, [r7, #31]
 8008cb4:	2b08      	cmp	r3, #8
 8008cb6:	d828      	bhi.n	8008d0a <UART_SetConfig+0x3aa>
 8008cb8:	a201      	add	r2, pc, #4	; (adr r2, 8008cc0 <UART_SetConfig+0x360>)
 8008cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cbe:	bf00      	nop
 8008cc0:	08008ce5 	.word	0x08008ce5
 8008cc4:	08008ced 	.word	0x08008ced
 8008cc8:	08008cf5 	.word	0x08008cf5
 8008ccc:	08008d0b 	.word	0x08008d0b
 8008cd0:	08008cfb 	.word	0x08008cfb
 8008cd4:	08008d0b 	.word	0x08008d0b
 8008cd8:	08008d0b 	.word	0x08008d0b
 8008cdc:	08008d0b 	.word	0x08008d0b
 8008ce0:	08008d03 	.word	0x08008d03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ce4:	f7fc fc46 	bl	8005574 <HAL_RCC_GetPCLK1Freq>
 8008ce8:	61b8      	str	r0, [r7, #24]
        break;
 8008cea:	e013      	b.n	8008d14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008cec:	f7fc fc56 	bl	800559c <HAL_RCC_GetPCLK2Freq>
 8008cf0:	61b8      	str	r0, [r7, #24]
        break;
 8008cf2:	e00f      	b.n	8008d14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008cf4:	4b4b      	ldr	r3, [pc, #300]	; (8008e24 <UART_SetConfig+0x4c4>)
 8008cf6:	61bb      	str	r3, [r7, #24]
        break;
 8008cf8:	e00c      	b.n	8008d14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008cfa:	f7fc fb29 	bl	8005350 <HAL_RCC_GetSysClockFreq>
 8008cfe:	61b8      	str	r0, [r7, #24]
        break;
 8008d00:	e008      	b.n	8008d14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d06:	61bb      	str	r3, [r7, #24]
        break;
 8008d08:	e004      	b.n	8008d14 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	77bb      	strb	r3, [r7, #30]
        break;
 8008d12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d074      	beq.n	8008e04 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	005a      	lsls	r2, r3, #1
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	085b      	lsrs	r3, r3, #1
 8008d24:	441a      	add	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d2e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	2b0f      	cmp	r3, #15
 8008d34:	d916      	bls.n	8008d64 <UART_SetConfig+0x404>
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d3c:	d212      	bcs.n	8008d64 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	f023 030f 	bic.w	r3, r3, #15
 8008d46:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	085b      	lsrs	r3, r3, #1
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	f003 0307 	and.w	r3, r3, #7
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	89fb      	ldrh	r3, [r7, #14]
 8008d56:	4313      	orrs	r3, r2
 8008d58:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	89fa      	ldrh	r2, [r7, #14]
 8008d60:	60da      	str	r2, [r3, #12]
 8008d62:	e04f      	b.n	8008e04 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
 8008d66:	77bb      	strb	r3, [r7, #30]
 8008d68:	e04c      	b.n	8008e04 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d6a:	7ffb      	ldrb	r3, [r7, #31]
 8008d6c:	2b08      	cmp	r3, #8
 8008d6e:	d828      	bhi.n	8008dc2 <UART_SetConfig+0x462>
 8008d70:	a201      	add	r2, pc, #4	; (adr r2, 8008d78 <UART_SetConfig+0x418>)
 8008d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d76:	bf00      	nop
 8008d78:	08008d9d 	.word	0x08008d9d
 8008d7c:	08008da5 	.word	0x08008da5
 8008d80:	08008dad 	.word	0x08008dad
 8008d84:	08008dc3 	.word	0x08008dc3
 8008d88:	08008db3 	.word	0x08008db3
 8008d8c:	08008dc3 	.word	0x08008dc3
 8008d90:	08008dc3 	.word	0x08008dc3
 8008d94:	08008dc3 	.word	0x08008dc3
 8008d98:	08008dbb 	.word	0x08008dbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d9c:	f7fc fbea 	bl	8005574 <HAL_RCC_GetPCLK1Freq>
 8008da0:	61b8      	str	r0, [r7, #24]
        break;
 8008da2:	e013      	b.n	8008dcc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008da4:	f7fc fbfa 	bl	800559c <HAL_RCC_GetPCLK2Freq>
 8008da8:	61b8      	str	r0, [r7, #24]
        break;
 8008daa:	e00f      	b.n	8008dcc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008dac:	4b1d      	ldr	r3, [pc, #116]	; (8008e24 <UART_SetConfig+0x4c4>)
 8008dae:	61bb      	str	r3, [r7, #24]
        break;
 8008db0:	e00c      	b.n	8008dcc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008db2:	f7fc facd 	bl	8005350 <HAL_RCC_GetSysClockFreq>
 8008db6:	61b8      	str	r0, [r7, #24]
        break;
 8008db8:	e008      	b.n	8008dcc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dbe:	61bb      	str	r3, [r7, #24]
        break;
 8008dc0:	e004      	b.n	8008dcc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	77bb      	strb	r3, [r7, #30]
        break;
 8008dca:	bf00      	nop
    }

    if (pclk != 0U)
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d018      	beq.n	8008e04 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	085a      	lsrs	r2, r3, #1
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	441a      	add	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008de4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	2b0f      	cmp	r3, #15
 8008dea:	d909      	bls.n	8008e00 <UART_SetConfig+0x4a0>
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008df2:	d205      	bcs.n	8008e00 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	b29a      	uxth	r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	60da      	str	r2, [r3, #12]
 8008dfe:	e001      	b.n	8008e04 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008e10:	7fbb      	ldrb	r3, [r7, #30]
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3720      	adds	r7, #32
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	40007c00 	.word	0x40007c00
 8008e20:	40023800 	.word	0x40023800
 8008e24:	00f42400 	.word	0x00f42400

08008e28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e34:	f003 0301 	and.w	r3, r3, #1
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00a      	beq.n	8008e52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	430a      	orrs	r2, r1
 8008e50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e56:	f003 0302 	and.w	r3, r3, #2
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00a      	beq.n	8008e74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	430a      	orrs	r2, r1
 8008e72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e78:	f003 0304 	and.w	r3, r3, #4
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00a      	beq.n	8008e96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	430a      	orrs	r2, r1
 8008e94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9a:	f003 0308 	and.w	r3, r3, #8
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00a      	beq.n	8008eb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	430a      	orrs	r2, r1
 8008eb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ebc:	f003 0310 	and.w	r3, r3, #16
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00a      	beq.n	8008eda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	430a      	orrs	r2, r1
 8008ed8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ede:	f003 0320 	and.w	r3, r3, #32
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d00a      	beq.n	8008efc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	430a      	orrs	r2, r1
 8008efa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d01a      	beq.n	8008f3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	430a      	orrs	r2, r1
 8008f1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f26:	d10a      	bne.n	8008f3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	430a      	orrs	r2, r1
 8008f3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00a      	beq.n	8008f60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	430a      	orrs	r2, r1
 8008f5e:	605a      	str	r2, [r3, #4]
  }
}
 8008f60:	bf00      	nop
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b086      	sub	sp, #24
 8008f70:	af02      	add	r7, sp, #8
 8008f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f7c:	f7f8 fdac 	bl	8001ad8 <HAL_GetTick>
 8008f80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f003 0308 	and.w	r3, r3, #8
 8008f8c:	2b08      	cmp	r3, #8
 8008f8e:	d10e      	bne.n	8008fae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f94:	9300      	str	r3, [sp, #0]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 f831 	bl	8009006 <UART_WaitOnFlagUntilTimeout>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d001      	beq.n	8008fae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008faa:	2303      	movs	r3, #3
 8008fac:	e027      	b.n	8008ffe <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f003 0304 	and.w	r3, r3, #4
 8008fb8:	2b04      	cmp	r3, #4
 8008fba:	d10e      	bne.n	8008fda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008fc0:	9300      	str	r3, [sp, #0]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 f81b 	bl	8009006 <UART_WaitOnFlagUntilTimeout>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d001      	beq.n	8008fda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fd6:	2303      	movs	r3, #3
 8008fd8:	e011      	b.n	8008ffe <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2220      	movs	r2, #32
 8008fde:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2220      	movs	r2, #32
 8008fe4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b09c      	sub	sp, #112	; 0x70
 800900a:	af00      	add	r7, sp, #0
 800900c:	60f8      	str	r0, [r7, #12]
 800900e:	60b9      	str	r1, [r7, #8]
 8009010:	603b      	str	r3, [r7, #0]
 8009012:	4613      	mov	r3, r2
 8009014:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009016:	e0a7      	b.n	8009168 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009018:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800901a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800901e:	f000 80a3 	beq.w	8009168 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009022:	f7f8 fd59 	bl	8001ad8 <HAL_GetTick>
 8009026:	4602      	mov	r2, r0
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	1ad3      	subs	r3, r2, r3
 800902c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800902e:	429a      	cmp	r2, r3
 8009030:	d302      	bcc.n	8009038 <UART_WaitOnFlagUntilTimeout+0x32>
 8009032:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009034:	2b00      	cmp	r3, #0
 8009036:	d13f      	bne.n	80090b8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009040:	e853 3f00 	ldrex	r3, [r3]
 8009044:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009048:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800904c:	667b      	str	r3, [r7, #100]	; 0x64
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	461a      	mov	r2, r3
 8009054:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009056:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009058:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800905c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800905e:	e841 2300 	strex	r3, r2, [r1]
 8009062:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009064:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009066:	2b00      	cmp	r3, #0
 8009068:	d1e6      	bne.n	8009038 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	3308      	adds	r3, #8
 8009070:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009074:	e853 3f00 	ldrex	r3, [r3]
 8009078:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800907a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907c:	f023 0301 	bic.w	r3, r3, #1
 8009080:	663b      	str	r3, [r7, #96]	; 0x60
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	3308      	adds	r3, #8
 8009088:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800908a:	64ba      	str	r2, [r7, #72]	; 0x48
 800908c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009090:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009092:	e841 2300 	strex	r3, r2, [r1]
 8009096:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1e5      	bne.n	800906a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2220      	movs	r2, #32
 80090a2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2220      	movs	r2, #32
 80090a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2200      	movs	r2, #0
 80090b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80090b4:	2303      	movs	r3, #3
 80090b6:	e068      	b.n	800918a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f003 0304 	and.w	r3, r3, #4
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d050      	beq.n	8009168 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	69db      	ldr	r3, [r3, #28]
 80090cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090d4:	d148      	bne.n	8009168 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090de:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e8:	e853 3f00 	ldrex	r3, [r3]
 80090ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80090f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	461a      	mov	r2, r3
 80090fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090fe:	637b      	str	r3, [r7, #52]	; 0x34
 8009100:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009102:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009104:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009106:	e841 2300 	strex	r3, r2, [r1]
 800910a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800910c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910e:	2b00      	cmp	r3, #0
 8009110:	d1e6      	bne.n	80090e0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	3308      	adds	r3, #8
 8009118:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	e853 3f00 	ldrex	r3, [r3]
 8009120:	613b      	str	r3, [r7, #16]
   return(result);
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	f023 0301 	bic.w	r3, r3, #1
 8009128:	66bb      	str	r3, [r7, #104]	; 0x68
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	3308      	adds	r3, #8
 8009130:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009132:	623a      	str	r2, [r7, #32]
 8009134:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009136:	69f9      	ldr	r1, [r7, #28]
 8009138:	6a3a      	ldr	r2, [r7, #32]
 800913a:	e841 2300 	strex	r3, r2, [r1]
 800913e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d1e5      	bne.n	8009112 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2220      	movs	r2, #32
 800914a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2220      	movs	r2, #32
 8009150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2220      	movs	r2, #32
 8009158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2200      	movs	r2, #0
 8009160:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009164:	2303      	movs	r3, #3
 8009166:	e010      	b.n	800918a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	69da      	ldr	r2, [r3, #28]
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	4013      	ands	r3, r2
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	429a      	cmp	r2, r3
 8009176:	bf0c      	ite	eq
 8009178:	2301      	moveq	r3, #1
 800917a:	2300      	movne	r3, #0
 800917c:	b2db      	uxtb	r3, r3
 800917e:	461a      	mov	r2, r3
 8009180:	79fb      	ldrb	r3, [r7, #7]
 8009182:	429a      	cmp	r2, r3
 8009184:	f43f af48 	beq.w	8009018 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009188:	2300      	movs	r3, #0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3770      	adds	r7, #112	; 0x70
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
	...

08009194 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b096      	sub	sp, #88	; 0x58
 8009198:	af00      	add	r7, sp, #0
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	4613      	mov	r3, r2
 80091a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	68ba      	ldr	r2, [r7, #8]
 80091a6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	88fa      	ldrh	r2, [r7, #6]
 80091ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2200      	movs	r2, #0
 80091b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2222      	movs	r2, #34	; 0x22
 80091bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d028      	beq.n	800921a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091cc:	4a3e      	ldr	r2, [pc, #248]	; (80092c8 <UART_Start_Receive_DMA+0x134>)
 80091ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091d4:	4a3d      	ldr	r2, [pc, #244]	; (80092cc <UART_Start_Receive_DMA+0x138>)
 80091d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091dc:	4a3c      	ldr	r2, [pc, #240]	; (80092d0 <UART_Start_Receive_DMA+0x13c>)
 80091de:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091e4:	2200      	movs	r2, #0
 80091e6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	3324      	adds	r3, #36	; 0x24
 80091f2:	4619      	mov	r1, r3
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091f8:	461a      	mov	r2, r3
 80091fa:	88fb      	ldrh	r3, [r7, #6]
 80091fc:	f7f9 f87e 	bl	80022fc <HAL_DMA_Start_IT>
 8009200:	4603      	mov	r3, r0
 8009202:	2b00      	cmp	r3, #0
 8009204:	d009      	beq.n	800921a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2210      	movs	r2, #16
 800920a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2220      	movs	r2, #32
 8009212:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	e051      	b.n	80092be <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	691b      	ldr	r3, [r3, #16]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d018      	beq.n	8009254 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800922a:	e853 3f00 	ldrex	r3, [r3]
 800922e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009236:	657b      	str	r3, [r7, #84]	; 0x54
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	461a      	mov	r2, r3
 800923e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009240:	64bb      	str	r3, [r7, #72]	; 0x48
 8009242:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009244:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009246:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009248:	e841 2300 	strex	r3, r2, [r1]
 800924c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800924e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009250:	2b00      	cmp	r3, #0
 8009252:	d1e6      	bne.n	8009222 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	3308      	adds	r3, #8
 800925a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800925c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925e:	e853 3f00 	ldrex	r3, [r3]
 8009262:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009266:	f043 0301 	orr.w	r3, r3, #1
 800926a:	653b      	str	r3, [r7, #80]	; 0x50
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	3308      	adds	r3, #8
 8009272:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009274:	637a      	str	r2, [r7, #52]	; 0x34
 8009276:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009278:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800927a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800927c:	e841 2300 	strex	r3, r2, [r1]
 8009280:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009284:	2b00      	cmp	r3, #0
 8009286:	d1e5      	bne.n	8009254 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	3308      	adds	r3, #8
 800928e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	e853 3f00 	ldrex	r3, [r3]
 8009296:	613b      	str	r3, [r7, #16]
   return(result);
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800929e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	3308      	adds	r3, #8
 80092a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80092a8:	623a      	str	r2, [r7, #32]
 80092aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ac:	69f9      	ldr	r1, [r7, #28]
 80092ae:	6a3a      	ldr	r2, [r7, #32]
 80092b0:	e841 2300 	strex	r3, r2, [r1]
 80092b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d1e5      	bne.n	8009288 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80092bc:	2300      	movs	r3, #0
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3758      	adds	r7, #88	; 0x58
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	080093e9 	.word	0x080093e9
 80092cc:	08009511 	.word	0x08009511
 80092d0:	0800954f 	.word	0x0800954f

080092d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b089      	sub	sp, #36	; 0x24
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	e853 3f00 	ldrex	r3, [r3]
 80092e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80092f0:	61fb      	str	r3, [r7, #28]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	461a      	mov	r2, r3
 80092f8:	69fb      	ldr	r3, [r7, #28]
 80092fa:	61bb      	str	r3, [r7, #24]
 80092fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fe:	6979      	ldr	r1, [r7, #20]
 8009300:	69ba      	ldr	r2, [r7, #24]
 8009302:	e841 2300 	strex	r3, r2, [r1]
 8009306:	613b      	str	r3, [r7, #16]
   return(result);
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d1e6      	bne.n	80092dc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2220      	movs	r2, #32
 8009312:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8009314:	bf00      	nop
 8009316:	3724      	adds	r7, #36	; 0x24
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009320:	b480      	push	{r7}
 8009322:	b095      	sub	sp, #84	; 0x54
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009330:	e853 3f00 	ldrex	r3, [r3]
 8009334:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009338:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800933c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	461a      	mov	r2, r3
 8009344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009346:	643b      	str	r3, [r7, #64]	; 0x40
 8009348:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800934c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800934e:	e841 2300 	strex	r3, r2, [r1]
 8009352:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1e6      	bne.n	8009328 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	3308      	adds	r3, #8
 8009360:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009362:	6a3b      	ldr	r3, [r7, #32]
 8009364:	e853 3f00 	ldrex	r3, [r3]
 8009368:	61fb      	str	r3, [r7, #28]
   return(result);
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	f023 0301 	bic.w	r3, r3, #1
 8009370:	64bb      	str	r3, [r7, #72]	; 0x48
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	3308      	adds	r3, #8
 8009378:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800937a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800937c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800937e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009382:	e841 2300 	strex	r3, r2, [r1]
 8009386:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938a:	2b00      	cmp	r3, #0
 800938c:	d1e5      	bne.n	800935a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009392:	2b01      	cmp	r3, #1
 8009394:	d118      	bne.n	80093c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	e853 3f00 	ldrex	r3, [r3]
 80093a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	f023 0310 	bic.w	r3, r3, #16
 80093aa:	647b      	str	r3, [r7, #68]	; 0x44
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	461a      	mov	r2, r3
 80093b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093b4:	61bb      	str	r3, [r7, #24]
 80093b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b8:	6979      	ldr	r1, [r7, #20]
 80093ba:	69ba      	ldr	r2, [r7, #24]
 80093bc:	e841 2300 	strex	r3, r2, [r1]
 80093c0:	613b      	str	r3, [r7, #16]
   return(result);
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1e6      	bne.n	8009396 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2220      	movs	r2, #32
 80093cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	669a      	str	r2, [r3, #104]	; 0x68
}
 80093dc:	bf00      	nop
 80093de:	3754      	adds	r7, #84	; 0x54
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b09c      	sub	sp, #112	; 0x70
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	69db      	ldr	r3, [r3, #28]
 80093fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093fe:	d071      	beq.n	80094e4 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009402:	2200      	movs	r2, #0
 8009404:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009410:	e853 3f00 	ldrex	r3, [r3]
 8009414:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800941c:	66bb      	str	r3, [r7, #104]	; 0x68
 800941e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	461a      	mov	r2, r3
 8009424:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009426:	65bb      	str	r3, [r7, #88]	; 0x58
 8009428:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800942c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800942e:	e841 2300 	strex	r3, r2, [r1]
 8009432:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1e6      	bne.n	8009408 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800943a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	3308      	adds	r3, #8
 8009440:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009444:	e853 3f00 	ldrex	r3, [r3]
 8009448:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800944a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800944c:	f023 0301 	bic.w	r3, r3, #1
 8009450:	667b      	str	r3, [r7, #100]	; 0x64
 8009452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	3308      	adds	r3, #8
 8009458:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800945a:	647a      	str	r2, [r7, #68]	; 0x44
 800945c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800945e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009460:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009462:	e841 2300 	strex	r3, r2, [r1]
 8009466:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800946a:	2b00      	cmp	r3, #0
 800946c:	d1e5      	bne.n	800943a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800946e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	3308      	adds	r3, #8
 8009474:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009478:	e853 3f00 	ldrex	r3, [r3]
 800947c:	623b      	str	r3, [r7, #32]
   return(result);
 800947e:	6a3b      	ldr	r3, [r7, #32]
 8009480:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009484:	663b      	str	r3, [r7, #96]	; 0x60
 8009486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	3308      	adds	r3, #8
 800948c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800948e:	633a      	str	r2, [r7, #48]	; 0x30
 8009490:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009492:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009496:	e841 2300 	strex	r3, r2, [r1]
 800949a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800949c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1e5      	bne.n	800946e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80094a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094a4:	2220      	movs	r2, #32
 80094a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d118      	bne.n	80094e4 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	e853 3f00 	ldrex	r3, [r3]
 80094be:	60fb      	str	r3, [r7, #12]
   return(result);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f023 0310 	bic.w	r3, r3, #16
 80094c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	461a      	mov	r2, r3
 80094ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094d0:	61fb      	str	r3, [r7, #28]
 80094d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d4:	69b9      	ldr	r1, [r7, #24]
 80094d6:	69fa      	ldr	r2, [r7, #28]
 80094d8:	e841 2300 	strex	r3, r2, [r1]
 80094dc:	617b      	str	r3, [r7, #20]
   return(result);
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d1e6      	bne.n	80094b2 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094e6:	2200      	movs	r2, #0
 80094e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d107      	bne.n	8009502 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80094f8:	4619      	mov	r1, r3
 80094fa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80094fc:	f001 fd8c 	bl	800b018 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009500:	e002      	b.n	8009508 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8009502:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009504:	f7ff fa04 	bl	8008910 <HAL_UART_RxCpltCallback>
}
 8009508:	bf00      	nop
 800950a:	3770      	adds	r7, #112	; 0x70
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800951c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2201      	movs	r2, #1
 8009522:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009528:	2b01      	cmp	r3, #1
 800952a:	d109      	bne.n	8009540 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009532:	085b      	lsrs	r3, r3, #1
 8009534:	b29b      	uxth	r3, r3
 8009536:	4619      	mov	r1, r3
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f001 fd6d 	bl	800b018 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800953e:	e002      	b.n	8009546 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009540:	68f8      	ldr	r0, [r7, #12]
 8009542:	f7ff f9ef 	bl	8008924 <HAL_UART_RxHalfCpltCallback>
}
 8009546:	bf00      	nop
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800954e:	b580      	push	{r7, lr}
 8009550:	b086      	sub	sp, #24
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800955a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009560:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009568:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009574:	2b80      	cmp	r3, #128	; 0x80
 8009576:	d109      	bne.n	800958c <UART_DMAError+0x3e>
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	2b21      	cmp	r3, #33	; 0x21
 800957c:	d106      	bne.n	800958c <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	2200      	movs	r2, #0
 8009582:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8009586:	6978      	ldr	r0, [r7, #20]
 8009588:	f7ff fea4 	bl	80092d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009596:	2b40      	cmp	r3, #64	; 0x40
 8009598:	d109      	bne.n	80095ae <UART_DMAError+0x60>
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2b22      	cmp	r3, #34	; 0x22
 800959e:	d106      	bne.n	80095ae <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80095a8:	6978      	ldr	r0, [r7, #20]
 80095aa:	f7ff feb9 	bl	8009320 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095b4:	f043 0210 	orr.w	r2, r3, #16
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80095be:	6978      	ldr	r0, [r7, #20]
 80095c0:	f7ff f9ba 	bl	8008938 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095c4:	bf00      	nop
 80095c6:	3718      	adds	r7, #24
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2200      	movs	r2, #0
 80095de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80095ea:	68f8      	ldr	r0, [r7, #12]
 80095ec:	f7ff f9a4 	bl	8008938 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095f0:	bf00      	nop
 80095f2:	3710      	adds	r7, #16
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b088      	sub	sp, #32
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	e853 3f00 	ldrex	r3, [r3]
 800960c:	60bb      	str	r3, [r7, #8]
   return(result);
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009614:	61fb      	str	r3, [r7, #28]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	461a      	mov	r2, r3
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	61bb      	str	r3, [r7, #24]
 8009620:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009622:	6979      	ldr	r1, [r7, #20]
 8009624:	69ba      	ldr	r2, [r7, #24]
 8009626:	e841 2300 	strex	r3, r2, [r1]
 800962a:	613b      	str	r3, [r7, #16]
   return(result);
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1e6      	bne.n	8009600 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2220      	movs	r2, #32
 8009636:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f7ff f95c 	bl	80088fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009644:	bf00      	nop
 8009646:	3720      	adds	r7, #32
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b08c      	sub	sp, #48	; 0x30
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	4613      	mov	r3, r2
 8009658:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009660:	2b20      	cmp	r3, #32
 8009662:	d142      	bne.n	80096ea <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d002      	beq.n	8009670 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800966a:	88fb      	ldrh	r3, [r7, #6]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d101      	bne.n	8009674 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	e03b      	b.n	80096ec <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2201      	movs	r2, #1
 8009678:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2200      	movs	r2, #0
 800967e:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009680:	88fb      	ldrh	r3, [r7, #6]
 8009682:	461a      	mov	r2, r3
 8009684:	68b9      	ldr	r1, [r7, #8]
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	f7ff fd84 	bl	8009194 <UART_Start_Receive_DMA>
 800968c:	4603      	mov	r3, r0
 800968e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009692:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009696:	2b00      	cmp	r3, #0
 8009698:	d124      	bne.n	80096e4 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d11d      	bne.n	80096de <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	2210      	movs	r2, #16
 80096a8:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	e853 3f00 	ldrex	r3, [r3]
 80096b6:	617b      	str	r3, [r7, #20]
   return(result);
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	f043 0310 	orr.w	r3, r3, #16
 80096be:	62bb      	str	r3, [r7, #40]	; 0x28
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	461a      	mov	r2, r3
 80096c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c8:	627b      	str	r3, [r7, #36]	; 0x24
 80096ca:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096cc:	6a39      	ldr	r1, [r7, #32]
 80096ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096d0:	e841 2300 	strex	r3, r2, [r1]
 80096d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d1e6      	bne.n	80096aa <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80096dc:	e002      	b.n	80096e4 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80096e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80096e8:	e000      	b.n	80096ec <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80096ea:	2302      	movs	r3, #2
  }
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3730      	adds	r7, #48	; 0x30
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80096f4:	b084      	sub	sp, #16
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b084      	sub	sp, #16
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
 80096fe:	f107 001c 	add.w	r0, r7, #28
 8009702:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009708:	2b01      	cmp	r3, #1
 800970a:	d120      	bne.n	800974e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009710:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	68da      	ldr	r2, [r3, #12]
 800971c:	4b20      	ldr	r3, [pc, #128]	; (80097a0 <USB_CoreInit+0xac>)
 800971e:	4013      	ands	r3, r2
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	68db      	ldr	r3, [r3, #12]
 8009728:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009732:	2b01      	cmp	r3, #1
 8009734:	d105      	bne.n	8009742 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f001 fbee 	bl	800af24 <USB_CoreReset>
 8009748:	4603      	mov	r3, r0
 800974a:	73fb      	strb	r3, [r7, #15]
 800974c:	e010      	b.n	8009770 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f001 fbe2 	bl	800af24 <USB_CoreReset>
 8009760:	4603      	mov	r3, r0
 8009762:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009768:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8009770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009772:	2b01      	cmp	r3, #1
 8009774:	d10b      	bne.n	800978e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	f043 0206 	orr.w	r2, r3, #6
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	f043 0220 	orr.w	r2, r3, #32
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800978e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009790:	4618      	mov	r0, r3
 8009792:	3710      	adds	r7, #16
 8009794:	46bd      	mov	sp, r7
 8009796:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800979a:	b004      	add	sp, #16
 800979c:	4770      	bx	lr
 800979e:	bf00      	nop
 80097a0:	ffbdffbf 	.word	0xffbdffbf

080097a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b087      	sub	sp, #28
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	60b9      	str	r1, [r7, #8]
 80097ae:	4613      	mov	r3, r2
 80097b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80097b2:	79fb      	ldrb	r3, [r7, #7]
 80097b4:	2b02      	cmp	r3, #2
 80097b6:	d165      	bne.n	8009884 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	4a41      	ldr	r2, [pc, #260]	; (80098c0 <USB_SetTurnaroundTime+0x11c>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d906      	bls.n	80097ce <USB_SetTurnaroundTime+0x2a>
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	4a40      	ldr	r2, [pc, #256]	; (80098c4 <USB_SetTurnaroundTime+0x120>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d202      	bcs.n	80097ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80097c8:	230f      	movs	r3, #15
 80097ca:	617b      	str	r3, [r7, #20]
 80097cc:	e062      	b.n	8009894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	4a3c      	ldr	r2, [pc, #240]	; (80098c4 <USB_SetTurnaroundTime+0x120>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d306      	bcc.n	80097e4 <USB_SetTurnaroundTime+0x40>
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	4a3b      	ldr	r2, [pc, #236]	; (80098c8 <USB_SetTurnaroundTime+0x124>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d202      	bcs.n	80097e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80097de:	230e      	movs	r3, #14
 80097e0:	617b      	str	r3, [r7, #20]
 80097e2:	e057      	b.n	8009894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	4a38      	ldr	r2, [pc, #224]	; (80098c8 <USB_SetTurnaroundTime+0x124>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d306      	bcc.n	80097fa <USB_SetTurnaroundTime+0x56>
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	4a37      	ldr	r2, [pc, #220]	; (80098cc <USB_SetTurnaroundTime+0x128>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d202      	bcs.n	80097fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80097f4:	230d      	movs	r3, #13
 80097f6:	617b      	str	r3, [r7, #20]
 80097f8:	e04c      	b.n	8009894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	4a33      	ldr	r2, [pc, #204]	; (80098cc <USB_SetTurnaroundTime+0x128>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d306      	bcc.n	8009810 <USB_SetTurnaroundTime+0x6c>
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	4a32      	ldr	r2, [pc, #200]	; (80098d0 <USB_SetTurnaroundTime+0x12c>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d802      	bhi.n	8009810 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800980a:	230c      	movs	r3, #12
 800980c:	617b      	str	r3, [r7, #20]
 800980e:	e041      	b.n	8009894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	4a2f      	ldr	r2, [pc, #188]	; (80098d0 <USB_SetTurnaroundTime+0x12c>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d906      	bls.n	8009826 <USB_SetTurnaroundTime+0x82>
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	4a2e      	ldr	r2, [pc, #184]	; (80098d4 <USB_SetTurnaroundTime+0x130>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d802      	bhi.n	8009826 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009820:	230b      	movs	r3, #11
 8009822:	617b      	str	r3, [r7, #20]
 8009824:	e036      	b.n	8009894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	4a2a      	ldr	r2, [pc, #168]	; (80098d4 <USB_SetTurnaroundTime+0x130>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d906      	bls.n	800983c <USB_SetTurnaroundTime+0x98>
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	4a29      	ldr	r2, [pc, #164]	; (80098d8 <USB_SetTurnaroundTime+0x134>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d802      	bhi.n	800983c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009836:	230a      	movs	r3, #10
 8009838:	617b      	str	r3, [r7, #20]
 800983a:	e02b      	b.n	8009894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	4a26      	ldr	r2, [pc, #152]	; (80098d8 <USB_SetTurnaroundTime+0x134>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d906      	bls.n	8009852 <USB_SetTurnaroundTime+0xae>
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	4a25      	ldr	r2, [pc, #148]	; (80098dc <USB_SetTurnaroundTime+0x138>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d202      	bcs.n	8009852 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800984c:	2309      	movs	r3, #9
 800984e:	617b      	str	r3, [r7, #20]
 8009850:	e020      	b.n	8009894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	4a21      	ldr	r2, [pc, #132]	; (80098dc <USB_SetTurnaroundTime+0x138>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d306      	bcc.n	8009868 <USB_SetTurnaroundTime+0xc4>
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	4a20      	ldr	r2, [pc, #128]	; (80098e0 <USB_SetTurnaroundTime+0x13c>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d802      	bhi.n	8009868 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009862:	2308      	movs	r3, #8
 8009864:	617b      	str	r3, [r7, #20]
 8009866:	e015      	b.n	8009894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	4a1d      	ldr	r2, [pc, #116]	; (80098e0 <USB_SetTurnaroundTime+0x13c>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d906      	bls.n	800987e <USB_SetTurnaroundTime+0xda>
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	4a1c      	ldr	r2, [pc, #112]	; (80098e4 <USB_SetTurnaroundTime+0x140>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d202      	bcs.n	800987e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009878:	2307      	movs	r3, #7
 800987a:	617b      	str	r3, [r7, #20]
 800987c:	e00a      	b.n	8009894 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800987e:	2306      	movs	r3, #6
 8009880:	617b      	str	r3, [r7, #20]
 8009882:	e007      	b.n	8009894 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009884:	79fb      	ldrb	r3, [r7, #7]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d102      	bne.n	8009890 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800988a:	2309      	movs	r3, #9
 800988c:	617b      	str	r3, [r7, #20]
 800988e:	e001      	b.n	8009894 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009890:	2309      	movs	r3, #9
 8009892:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	68da      	ldr	r2, [r3, #12]
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	029b      	lsls	r3, r3, #10
 80098a8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80098ac:	431a      	orrs	r2, r3
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	371c      	adds	r7, #28
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr
 80098c0:	00d8acbf 	.word	0x00d8acbf
 80098c4:	00e4e1c0 	.word	0x00e4e1c0
 80098c8:	00f42400 	.word	0x00f42400
 80098cc:	01067380 	.word	0x01067380
 80098d0:	011a499f 	.word	0x011a499f
 80098d4:	01312cff 	.word	0x01312cff
 80098d8:	014ca43f 	.word	0x014ca43f
 80098dc:	016e3600 	.word	0x016e3600
 80098e0:	01a6ab1f 	.word	0x01a6ab1f
 80098e4:	01e84800 	.word	0x01e84800

080098e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	f043 0201 	orr.w	r2, r3, #1
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80098fc:	2300      	movs	r3, #0
}
 80098fe:	4618      	mov	r0, r3
 8009900:	370c      	adds	r7, #12
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr

0800990a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800990a:	b480      	push	{r7}
 800990c:	b083      	sub	sp, #12
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	689b      	ldr	r3, [r3, #8]
 8009916:	f023 0201 	bic.w	r2, r3, #1
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800991e:	2300      	movs	r3, #0
}
 8009920:	4618      	mov	r0, r3
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	460b      	mov	r3, r1
 8009936:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009938:	2300      	movs	r3, #0
 800993a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	68db      	ldr	r3, [r3, #12]
 8009940:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009948:	78fb      	ldrb	r3, [r7, #3]
 800994a:	2b01      	cmp	r3, #1
 800994c:	d115      	bne.n	800997a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	68db      	ldr	r3, [r3, #12]
 8009952:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800995a:	2001      	movs	r0, #1
 800995c:	f7f8 f8c8 	bl	8001af0 <HAL_Delay>
      ms++;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	3301      	adds	r3, #1
 8009964:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f001 fa4b 	bl	800ae02 <USB_GetMode>
 800996c:	4603      	mov	r3, r0
 800996e:	2b01      	cmp	r3, #1
 8009970:	d01e      	beq.n	80099b0 <USB_SetCurrentMode+0x84>
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2b31      	cmp	r3, #49	; 0x31
 8009976:	d9f0      	bls.n	800995a <USB_SetCurrentMode+0x2e>
 8009978:	e01a      	b.n	80099b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800997a:	78fb      	ldrb	r3, [r7, #3]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d115      	bne.n	80099ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800998c:	2001      	movs	r0, #1
 800998e:	f7f8 f8af 	bl	8001af0 <HAL_Delay>
      ms++;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	3301      	adds	r3, #1
 8009996:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f001 fa32 	bl	800ae02 <USB_GetMode>
 800999e:	4603      	mov	r3, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d005      	beq.n	80099b0 <USB_SetCurrentMode+0x84>
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2b31      	cmp	r3, #49	; 0x31
 80099a8:	d9f0      	bls.n	800998c <USB_SetCurrentMode+0x60>
 80099aa:	e001      	b.n	80099b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80099ac:	2301      	movs	r3, #1
 80099ae:	e005      	b.n	80099bc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2b32      	cmp	r3, #50	; 0x32
 80099b4:	d101      	bne.n	80099ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80099b6:	2301      	movs	r3, #1
 80099b8:	e000      	b.n	80099bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80099c4:	b084      	sub	sp, #16
 80099c6:	b580      	push	{r7, lr}
 80099c8:	b086      	sub	sp, #24
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
 80099ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80099d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80099d6:	2300      	movs	r3, #0
 80099d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80099de:	2300      	movs	r3, #0
 80099e0:	613b      	str	r3, [r7, #16]
 80099e2:	e009      	b.n	80099f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	3340      	adds	r3, #64	; 0x40
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	4413      	add	r3, r2
 80099ee:	2200      	movs	r2, #0
 80099f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	3301      	adds	r3, #1
 80099f6:	613b      	str	r3, [r7, #16]
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	2b0e      	cmp	r3, #14
 80099fc:	d9f2      	bls.n	80099e4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80099fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d11c      	bne.n	8009a3e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	68fa      	ldr	r2, [r7, #12]
 8009a0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a12:	f043 0302 	orr.w	r3, r3, #2
 8009a16:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a1c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	601a      	str	r2, [r3, #0]
 8009a3c:	e005      	b.n	8009a4a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a42:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009a50:	461a      	mov	r2, r3
 8009a52:	2300      	movs	r3, #0
 8009a54:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a64:	461a      	mov	r2, r3
 8009a66:	680b      	ldr	r3, [r1, #0]
 8009a68:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d10c      	bne.n	8009a8a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d104      	bne.n	8009a80 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009a76:	2100      	movs	r1, #0
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 f965 	bl	8009d48 <USB_SetDevSpeed>
 8009a7e:	e008      	b.n	8009a92 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009a80:	2101      	movs	r1, #1
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 f960 	bl	8009d48 <USB_SetDevSpeed>
 8009a88:	e003      	b.n	8009a92 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009a8a:	2103      	movs	r1, #3
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 f95b 	bl	8009d48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009a92:	2110      	movs	r1, #16
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 f8f3 	bl	8009c80 <USB_FlushTxFifo>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d001      	beq.n	8009aa4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 f91f 	bl	8009ce8 <USB_FlushRxFifo>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d001      	beq.n	8009ab4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aba:	461a      	mov	r2, r3
 8009abc:	2300      	movs	r3, #0
 8009abe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	2300      	movs	r3, #0
 8009aca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ad8:	2300      	movs	r3, #0
 8009ada:	613b      	str	r3, [r7, #16]
 8009adc:	e043      	b.n	8009b66 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	015a      	lsls	r2, r3, #5
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	4413      	add	r3, r2
 8009ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009af0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009af4:	d118      	bne.n	8009b28 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d10a      	bne.n	8009b12 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	015a      	lsls	r2, r3, #5
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	4413      	add	r3, r2
 8009b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b08:	461a      	mov	r2, r3
 8009b0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009b0e:	6013      	str	r3, [r2, #0]
 8009b10:	e013      	b.n	8009b3a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	015a      	lsls	r2, r3, #5
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	4413      	add	r3, r2
 8009b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b1e:	461a      	mov	r2, r3
 8009b20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009b24:	6013      	str	r3, [r2, #0]
 8009b26:	e008      	b.n	8009b3a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	015a      	lsls	r2, r3, #5
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	4413      	add	r3, r2
 8009b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b34:	461a      	mov	r2, r3
 8009b36:	2300      	movs	r3, #0
 8009b38:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	015a      	lsls	r2, r3, #5
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	4413      	add	r3, r2
 8009b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b46:	461a      	mov	r2, r3
 8009b48:	2300      	movs	r3, #0
 8009b4a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	015a      	lsls	r2, r3, #5
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	4413      	add	r3, r2
 8009b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b58:	461a      	mov	r2, r3
 8009b5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009b5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	3301      	adds	r3, #1
 8009b64:	613b      	str	r3, [r7, #16]
 8009b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b68:	693a      	ldr	r2, [r7, #16]
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d3b7      	bcc.n	8009ade <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b6e:	2300      	movs	r3, #0
 8009b70:	613b      	str	r3, [r7, #16]
 8009b72:	e043      	b.n	8009bfc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	015a      	lsls	r2, r3, #5
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b8a:	d118      	bne.n	8009bbe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d10a      	bne.n	8009ba8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	015a      	lsls	r2, r3, #5
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	4413      	add	r3, r2
 8009b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009ba4:	6013      	str	r3, [r2, #0]
 8009ba6:	e013      	b.n	8009bd0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	015a      	lsls	r2, r3, #5
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	4413      	add	r3, r2
 8009bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009bba:	6013      	str	r3, [r2, #0]
 8009bbc:	e008      	b.n	8009bd0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	015a      	lsls	r2, r3, #5
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	4413      	add	r3, r2
 8009bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bca:	461a      	mov	r2, r3
 8009bcc:	2300      	movs	r3, #0
 8009bce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	015a      	lsls	r2, r3, #5
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bdc:	461a      	mov	r2, r3
 8009bde:	2300      	movs	r3, #0
 8009be0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	015a      	lsls	r2, r3, #5
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	4413      	add	r3, r2
 8009bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bee:	461a      	mov	r2, r3
 8009bf0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009bf4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	613b      	str	r3, [r7, #16]
 8009bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfe:	693a      	ldr	r2, [r7, #16]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d3b7      	bcc.n	8009b74 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c0a:	691b      	ldr	r3, [r3, #16]
 8009c0c:	68fa      	ldr	r2, [r7, #12]
 8009c0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c16:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009c24:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d105      	bne.n	8009c38 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	699b      	ldr	r3, [r3, #24]
 8009c30:	f043 0210 	orr.w	r2, r3, #16
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	699a      	ldr	r2, [r3, #24]
 8009c3c:	4b0e      	ldr	r3, [pc, #56]	; (8009c78 <USB_DevInit+0x2b4>)
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d005      	beq.n	8009c56 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	699b      	ldr	r3, [r3, #24]
 8009c4e:	f043 0208 	orr.w	r2, r3, #8
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d105      	bne.n	8009c68 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	699a      	ldr	r2, [r3, #24]
 8009c60:	4b06      	ldr	r3, [pc, #24]	; (8009c7c <USB_DevInit+0x2b8>)
 8009c62:	4313      	orrs	r3, r2
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3718      	adds	r7, #24
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009c74:	b004      	add	sp, #16
 8009c76:	4770      	bx	lr
 8009c78:	803c3800 	.word	0x803c3800
 8009c7c:	40000004 	.word	0x40000004

08009c80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b085      	sub	sp, #20
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	3301      	adds	r3, #1
 8009c92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	4a13      	ldr	r2, [pc, #76]	; (8009ce4 <USB_FlushTxFifo+0x64>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d901      	bls.n	8009ca0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009c9c:	2303      	movs	r3, #3
 8009c9e:	e01b      	b.n	8009cd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	691b      	ldr	r3, [r3, #16]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	daf2      	bge.n	8009c8e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	019b      	lsls	r3, r3, #6
 8009cb0:	f043 0220 	orr.w	r2, r3, #32
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	3301      	adds	r3, #1
 8009cbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	4a08      	ldr	r2, [pc, #32]	; (8009ce4 <USB_FlushTxFifo+0x64>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d901      	bls.n	8009cca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009cc6:	2303      	movs	r3, #3
 8009cc8:	e006      	b.n	8009cd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	691b      	ldr	r3, [r3, #16]
 8009cce:	f003 0320 	and.w	r3, r3, #32
 8009cd2:	2b20      	cmp	r3, #32
 8009cd4:	d0f0      	beq.n	8009cb8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009cd6:	2300      	movs	r3, #0
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3714      	adds	r7, #20
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr
 8009ce4:	00030d40 	.word	0x00030d40

08009ce8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	4a11      	ldr	r2, [pc, #68]	; (8009d44 <USB_FlushRxFifo+0x5c>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d901      	bls.n	8009d06 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009d02:	2303      	movs	r3, #3
 8009d04:	e018      	b.n	8009d38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	691b      	ldr	r3, [r3, #16]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	daf2      	bge.n	8009cf4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2210      	movs	r2, #16
 8009d16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	4a08      	ldr	r2, [pc, #32]	; (8009d44 <USB_FlushRxFifo+0x5c>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d901      	bls.n	8009d2a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009d26:	2303      	movs	r3, #3
 8009d28:	e006      	b.n	8009d38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	691b      	ldr	r3, [r3, #16]
 8009d2e:	f003 0310 	and.w	r3, r3, #16
 8009d32:	2b10      	cmp	r3, #16
 8009d34:	d0f0      	beq.n	8009d18 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3714      	adds	r7, #20
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr
 8009d44:	00030d40 	.word	0x00030d40

08009d48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b085      	sub	sp, #20
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	460b      	mov	r3, r1
 8009d52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d5e:	681a      	ldr	r2, [r3, #0]
 8009d60:	78fb      	ldrb	r3, [r7, #3]
 8009d62:	68f9      	ldr	r1, [r7, #12]
 8009d64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3714      	adds	r7, #20
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr

08009d7a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009d7a:	b480      	push	{r7}
 8009d7c:	b087      	sub	sp, #28
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	f003 0306 	and.w	r3, r3, #6
 8009d92:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d102      	bne.n	8009da0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	75fb      	strb	r3, [r7, #23]
 8009d9e:	e00a      	b.n	8009db6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2b02      	cmp	r3, #2
 8009da4:	d002      	beq.n	8009dac <USB_GetDevSpeed+0x32>
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2b06      	cmp	r3, #6
 8009daa:	d102      	bne.n	8009db2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009dac:	2302      	movs	r3, #2
 8009dae:	75fb      	strb	r3, [r7, #23]
 8009db0:	e001      	b.n	8009db6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009db2:	230f      	movs	r3, #15
 8009db4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	371c      	adds	r7, #28
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b085      	sub	sp, #20
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	785b      	ldrb	r3, [r3, #1]
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d139      	bne.n	8009e54 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009de6:	69da      	ldr	r2, [r3, #28]
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	f003 030f 	and.w	r3, r3, #15
 8009df0:	2101      	movs	r1, #1
 8009df2:	fa01 f303 	lsl.w	r3, r1, r3
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	68f9      	ldr	r1, [r7, #12]
 8009dfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	015a      	lsls	r2, r3, #5
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	4413      	add	r3, r2
 8009e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d153      	bne.n	8009ec0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	015a      	lsls	r2, r3, #5
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	4413      	add	r3, r2
 8009e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	791b      	ldrb	r3, [r3, #4]
 8009e32:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009e34:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	059b      	lsls	r3, r3, #22
 8009e3a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009e3c:	431a      	orrs	r2, r3
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	0159      	lsls	r1, r3, #5
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	440b      	add	r3, r1
 8009e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	4b20      	ldr	r3, [pc, #128]	; (8009ed0 <USB_ActivateEndpoint+0x10c>)
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	600b      	str	r3, [r1, #0]
 8009e52:	e035      	b.n	8009ec0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e5a:	69da      	ldr	r2, [r3, #28]
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	f003 030f 	and.w	r3, r3, #15
 8009e64:	2101      	movs	r1, #1
 8009e66:	fa01 f303 	lsl.w	r3, r1, r3
 8009e6a:	041b      	lsls	r3, r3, #16
 8009e6c:	68f9      	ldr	r1, [r7, #12]
 8009e6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e72:	4313      	orrs	r3, r2
 8009e74:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	015a      	lsls	r2, r3, #5
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d119      	bne.n	8009ec0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	015a      	lsls	r2, r3, #5
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	4413      	add	r3, r2
 8009e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	68db      	ldr	r3, [r3, #12]
 8009e9e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	791b      	ldrb	r3, [r3, #4]
 8009ea6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009ea8:	430b      	orrs	r3, r1
 8009eaa:	431a      	orrs	r2, r3
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	0159      	lsls	r1, r3, #5
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	440b      	add	r3, r1
 8009eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eb8:	4619      	mov	r1, r3
 8009eba:	4b05      	ldr	r3, [pc, #20]	; (8009ed0 <USB_ActivateEndpoint+0x10c>)
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3714      	adds	r7, #20
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr
 8009ece:	bf00      	nop
 8009ed0:	10008000 	.word	0x10008000

08009ed4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b085      	sub	sp, #20
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	781b      	ldrb	r3, [r3, #0]
 8009ee6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	785b      	ldrb	r3, [r3, #1]
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d161      	bne.n	8009fb4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	015a      	lsls	r2, r3, #5
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	4413      	add	r3, r2
 8009ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f06:	d11f      	bne.n	8009f48 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	015a      	lsls	r2, r3, #5
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	4413      	add	r3, r2
 8009f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	68ba      	ldr	r2, [r7, #8]
 8009f18:	0151      	lsls	r1, r2, #5
 8009f1a:	68fa      	ldr	r2, [r7, #12]
 8009f1c:	440a      	add	r2, r1
 8009f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f26:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	015a      	lsls	r2, r3, #5
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	4413      	add	r3, r2
 8009f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	68ba      	ldr	r2, [r7, #8]
 8009f38:	0151      	lsls	r1, r2, #5
 8009f3a:	68fa      	ldr	r2, [r7, #12]
 8009f3c:	440a      	add	r2, r1
 8009f3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	f003 030f 	and.w	r3, r3, #15
 8009f58:	2101      	movs	r1, #1
 8009f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	43db      	mvns	r3, r3
 8009f62:	68f9      	ldr	r1, [r7, #12]
 8009f64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f68:	4013      	ands	r3, r2
 8009f6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f72:	69da      	ldr	r2, [r3, #28]
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	f003 030f 	and.w	r3, r3, #15
 8009f7c:	2101      	movs	r1, #1
 8009f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	43db      	mvns	r3, r3
 8009f86:	68f9      	ldr	r1, [r7, #12]
 8009f88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f8c:	4013      	ands	r3, r2
 8009f8e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	015a      	lsls	r2, r3, #5
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	4413      	add	r3, r2
 8009f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	0159      	lsls	r1, r3, #5
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	440b      	add	r3, r1
 8009fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009faa:	4619      	mov	r1, r3
 8009fac:	4b35      	ldr	r3, [pc, #212]	; (800a084 <USB_DeactivateEndpoint+0x1b0>)
 8009fae:	4013      	ands	r3, r2
 8009fb0:	600b      	str	r3, [r1, #0]
 8009fb2:	e060      	b.n	800a076 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	015a      	lsls	r2, r3, #5
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	4413      	add	r3, r2
 8009fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009fc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fca:	d11f      	bne.n	800a00c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	015a      	lsls	r2, r3, #5
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	0151      	lsls	r1, r2, #5
 8009fde:	68fa      	ldr	r2, [r7, #12]
 8009fe0:	440a      	add	r2, r1
 8009fe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fe6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009fea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	015a      	lsls	r2, r3, #5
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	68ba      	ldr	r2, [r7, #8]
 8009ffc:	0151      	lsls	r1, r2, #5
 8009ffe:	68fa      	ldr	r2, [r7, #12]
 800a000:	440a      	add	r2, r1
 800a002:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a006:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a00a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a012:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	f003 030f 	and.w	r3, r3, #15
 800a01c:	2101      	movs	r1, #1
 800a01e:	fa01 f303 	lsl.w	r3, r1, r3
 800a022:	041b      	lsls	r3, r3, #16
 800a024:	43db      	mvns	r3, r3
 800a026:	68f9      	ldr	r1, [r7, #12]
 800a028:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a02c:	4013      	ands	r3, r2
 800a02e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a036:	69da      	ldr	r2, [r3, #28]
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	f003 030f 	and.w	r3, r3, #15
 800a040:	2101      	movs	r1, #1
 800a042:	fa01 f303 	lsl.w	r3, r1, r3
 800a046:	041b      	lsls	r3, r3, #16
 800a048:	43db      	mvns	r3, r3
 800a04a:	68f9      	ldr	r1, [r7, #12]
 800a04c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a050:	4013      	ands	r3, r2
 800a052:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	015a      	lsls	r2, r3, #5
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	4413      	add	r3, r2
 800a05c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	0159      	lsls	r1, r3, #5
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	440b      	add	r3, r1
 800a06a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a06e:	4619      	mov	r1, r3
 800a070:	4b05      	ldr	r3, [pc, #20]	; (800a088 <USB_DeactivateEndpoint+0x1b4>)
 800a072:	4013      	ands	r3, r2
 800a074:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a076:	2300      	movs	r3, #0
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3714      	adds	r7, #20
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr
 800a084:	ec337800 	.word	0xec337800
 800a088:	eff37800 	.word	0xeff37800

0800a08c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b08a      	sub	sp, #40	; 0x28
 800a090:	af02      	add	r7, sp, #8
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	60b9      	str	r1, [r7, #8]
 800a096:	4613      	mov	r3, r2
 800a098:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	785b      	ldrb	r3, [r3, #1]
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	f040 8163 	bne.w	800a374 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	699b      	ldr	r3, [r3, #24]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d132      	bne.n	800a11c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	015a      	lsls	r2, r3, #5
 800a0ba:	69fb      	ldr	r3, [r7, #28]
 800a0bc:	4413      	add	r3, r2
 800a0be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0c2:	691a      	ldr	r2, [r3, #16]
 800a0c4:	69bb      	ldr	r3, [r7, #24]
 800a0c6:	0159      	lsls	r1, r3, #5
 800a0c8:	69fb      	ldr	r3, [r7, #28]
 800a0ca:	440b      	add	r3, r1
 800a0cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	4ba5      	ldr	r3, [pc, #660]	; (800a368 <USB_EPStartXfer+0x2dc>)
 800a0d4:	4013      	ands	r3, r2
 800a0d6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a0d8:	69bb      	ldr	r3, [r7, #24]
 800a0da:	015a      	lsls	r2, r3, #5
 800a0dc:	69fb      	ldr	r3, [r7, #28]
 800a0de:	4413      	add	r3, r2
 800a0e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0e4:	691b      	ldr	r3, [r3, #16]
 800a0e6:	69ba      	ldr	r2, [r7, #24]
 800a0e8:	0151      	lsls	r1, r2, #5
 800a0ea:	69fa      	ldr	r2, [r7, #28]
 800a0ec:	440a      	add	r2, r1
 800a0ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a0f8:	69bb      	ldr	r3, [r7, #24]
 800a0fa:	015a      	lsls	r2, r3, #5
 800a0fc:	69fb      	ldr	r3, [r7, #28]
 800a0fe:	4413      	add	r3, r2
 800a100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a104:	691a      	ldr	r2, [r3, #16]
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	0159      	lsls	r1, r3, #5
 800a10a:	69fb      	ldr	r3, [r7, #28]
 800a10c:	440b      	add	r3, r1
 800a10e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a112:	4619      	mov	r1, r3
 800a114:	4b95      	ldr	r3, [pc, #596]	; (800a36c <USB_EPStartXfer+0x2e0>)
 800a116:	4013      	ands	r3, r2
 800a118:	610b      	str	r3, [r1, #16]
 800a11a:	e074      	b.n	800a206 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a11c:	69bb      	ldr	r3, [r7, #24]
 800a11e:	015a      	lsls	r2, r3, #5
 800a120:	69fb      	ldr	r3, [r7, #28]
 800a122:	4413      	add	r3, r2
 800a124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a128:	691a      	ldr	r2, [r3, #16]
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	0159      	lsls	r1, r3, #5
 800a12e:	69fb      	ldr	r3, [r7, #28]
 800a130:	440b      	add	r3, r1
 800a132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a136:	4619      	mov	r1, r3
 800a138:	4b8c      	ldr	r3, [pc, #560]	; (800a36c <USB_EPStartXfer+0x2e0>)
 800a13a:	4013      	ands	r3, r2
 800a13c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a13e:	69bb      	ldr	r3, [r7, #24]
 800a140:	015a      	lsls	r2, r3, #5
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	4413      	add	r3, r2
 800a146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a14a:	691a      	ldr	r2, [r3, #16]
 800a14c:	69bb      	ldr	r3, [r7, #24]
 800a14e:	0159      	lsls	r1, r3, #5
 800a150:	69fb      	ldr	r3, [r7, #28]
 800a152:	440b      	add	r3, r1
 800a154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a158:	4619      	mov	r1, r3
 800a15a:	4b83      	ldr	r3, [pc, #524]	; (800a368 <USB_EPStartXfer+0x2dc>)
 800a15c:	4013      	ands	r3, r2
 800a15e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	015a      	lsls	r2, r3, #5
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	4413      	add	r3, r2
 800a168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a16c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	6999      	ldr	r1, [r3, #24]
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	68db      	ldr	r3, [r3, #12]
 800a176:	440b      	add	r3, r1
 800a178:	1e59      	subs	r1, r3, #1
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	fbb1 f3f3 	udiv	r3, r1, r3
 800a182:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a184:	4b7a      	ldr	r3, [pc, #488]	; (800a370 <USB_EPStartXfer+0x2e4>)
 800a186:	400b      	ands	r3, r1
 800a188:	69b9      	ldr	r1, [r7, #24]
 800a18a:	0148      	lsls	r0, r1, #5
 800a18c:	69f9      	ldr	r1, [r7, #28]
 800a18e:	4401      	add	r1, r0
 800a190:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a194:	4313      	orrs	r3, r2
 800a196:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	015a      	lsls	r2, r3, #5
 800a19c:	69fb      	ldr	r3, [r7, #28]
 800a19e:	4413      	add	r3, r2
 800a1a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1a4:	691a      	ldr	r2, [r3, #16]
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	699b      	ldr	r3, [r3, #24]
 800a1aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a1ae:	69b9      	ldr	r1, [r7, #24]
 800a1b0:	0148      	lsls	r0, r1, #5
 800a1b2:	69f9      	ldr	r1, [r7, #28]
 800a1b4:	4401      	add	r1, r0
 800a1b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	791b      	ldrb	r3, [r3, #4]
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d11f      	bne.n	800a206 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a1c6:	69bb      	ldr	r3, [r7, #24]
 800a1c8:	015a      	lsls	r2, r3, #5
 800a1ca:	69fb      	ldr	r3, [r7, #28]
 800a1cc:	4413      	add	r3, r2
 800a1ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1d2:	691b      	ldr	r3, [r3, #16]
 800a1d4:	69ba      	ldr	r2, [r7, #24]
 800a1d6:	0151      	lsls	r1, r2, #5
 800a1d8:	69fa      	ldr	r2, [r7, #28]
 800a1da:	440a      	add	r2, r1
 800a1dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1e0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a1e4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	015a      	lsls	r2, r3, #5
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	4413      	add	r3, r2
 800a1ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1f2:	691b      	ldr	r3, [r3, #16]
 800a1f4:	69ba      	ldr	r2, [r7, #24]
 800a1f6:	0151      	lsls	r1, r2, #5
 800a1f8:	69fa      	ldr	r2, [r7, #28]
 800a1fa:	440a      	add	r2, r1
 800a1fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a200:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a204:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a206:	79fb      	ldrb	r3, [r7, #7]
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d14b      	bne.n	800a2a4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	695b      	ldr	r3, [r3, #20]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d009      	beq.n	800a228 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	015a      	lsls	r2, r3, #5
 800a218:	69fb      	ldr	r3, [r7, #28]
 800a21a:	4413      	add	r3, r2
 800a21c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a220:	461a      	mov	r2, r3
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	695b      	ldr	r3, [r3, #20]
 800a226:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	791b      	ldrb	r3, [r3, #4]
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d128      	bne.n	800a282 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d110      	bne.n	800a262 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	015a      	lsls	r2, r3, #5
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	4413      	add	r3, r2
 800a248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	69ba      	ldr	r2, [r7, #24]
 800a250:	0151      	lsls	r1, r2, #5
 800a252:	69fa      	ldr	r2, [r7, #28]
 800a254:	440a      	add	r2, r1
 800a256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a25a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a25e:	6013      	str	r3, [r2, #0]
 800a260:	e00f      	b.n	800a282 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	015a      	lsls	r2, r3, #5
 800a266:	69fb      	ldr	r3, [r7, #28]
 800a268:	4413      	add	r3, r2
 800a26a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	69ba      	ldr	r2, [r7, #24]
 800a272:	0151      	lsls	r1, r2, #5
 800a274:	69fa      	ldr	r2, [r7, #28]
 800a276:	440a      	add	r2, r1
 800a278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a27c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a280:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	015a      	lsls	r2, r3, #5
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	4413      	add	r3, r2
 800a28a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	69ba      	ldr	r2, [r7, #24]
 800a292:	0151      	lsls	r1, r2, #5
 800a294:	69fa      	ldr	r2, [r7, #28]
 800a296:	440a      	add	r2, r1
 800a298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a29c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a2a0:	6013      	str	r3, [r2, #0]
 800a2a2:	e137      	b.n	800a514 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	015a      	lsls	r2, r3, #5
 800a2a8:	69fb      	ldr	r3, [r7, #28]
 800a2aa:	4413      	add	r3, r2
 800a2ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	69ba      	ldr	r2, [r7, #24]
 800a2b4:	0151      	lsls	r1, r2, #5
 800a2b6:	69fa      	ldr	r2, [r7, #28]
 800a2b8:	440a      	add	r2, r1
 800a2ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a2c2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	791b      	ldrb	r3, [r3, #4]
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d015      	beq.n	800a2f8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	699b      	ldr	r3, [r3, #24]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	f000 811f 	beq.w	800a514 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a2d6:	69fb      	ldr	r3, [r7, #28]
 800a2d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	f003 030f 	and.w	r3, r3, #15
 800a2e6:	2101      	movs	r1, #1
 800a2e8:	fa01 f303 	lsl.w	r3, r1, r3
 800a2ec:	69f9      	ldr	r1, [r7, #28]
 800a2ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	634b      	str	r3, [r1, #52]	; 0x34
 800a2f6:	e10d      	b.n	800a514 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2fe:	689b      	ldr	r3, [r3, #8]
 800a300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a304:	2b00      	cmp	r3, #0
 800a306:	d110      	bne.n	800a32a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a308:	69bb      	ldr	r3, [r7, #24]
 800a30a:	015a      	lsls	r2, r3, #5
 800a30c:	69fb      	ldr	r3, [r7, #28]
 800a30e:	4413      	add	r3, r2
 800a310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	69ba      	ldr	r2, [r7, #24]
 800a318:	0151      	lsls	r1, r2, #5
 800a31a:	69fa      	ldr	r2, [r7, #28]
 800a31c:	440a      	add	r2, r1
 800a31e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a322:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a326:	6013      	str	r3, [r2, #0]
 800a328:	e00f      	b.n	800a34a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a32a:	69bb      	ldr	r3, [r7, #24]
 800a32c:	015a      	lsls	r2, r3, #5
 800a32e:	69fb      	ldr	r3, [r7, #28]
 800a330:	4413      	add	r3, r2
 800a332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	69ba      	ldr	r2, [r7, #24]
 800a33a:	0151      	lsls	r1, r2, #5
 800a33c:	69fa      	ldr	r2, [r7, #28]
 800a33e:	440a      	add	r2, r1
 800a340:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a348:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	6919      	ldr	r1, [r3, #16]
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	781a      	ldrb	r2, [r3, #0]
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	699b      	ldr	r3, [r3, #24]
 800a356:	b298      	uxth	r0, r3
 800a358:	79fb      	ldrb	r3, [r7, #7]
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	4603      	mov	r3, r0
 800a35e:	68f8      	ldr	r0, [r7, #12]
 800a360:	f000 faea 	bl	800a938 <USB_WritePacket>
 800a364:	e0d6      	b.n	800a514 <USB_EPStartXfer+0x488>
 800a366:	bf00      	nop
 800a368:	e007ffff 	.word	0xe007ffff
 800a36c:	fff80000 	.word	0xfff80000
 800a370:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a374:	69bb      	ldr	r3, [r7, #24]
 800a376:	015a      	lsls	r2, r3, #5
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	4413      	add	r3, r2
 800a37c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a380:	691a      	ldr	r2, [r3, #16]
 800a382:	69bb      	ldr	r3, [r7, #24]
 800a384:	0159      	lsls	r1, r3, #5
 800a386:	69fb      	ldr	r3, [r7, #28]
 800a388:	440b      	add	r3, r1
 800a38a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a38e:	4619      	mov	r1, r3
 800a390:	4b63      	ldr	r3, [pc, #396]	; (800a520 <USB_EPStartXfer+0x494>)
 800a392:	4013      	ands	r3, r2
 800a394:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	015a      	lsls	r2, r3, #5
 800a39a:	69fb      	ldr	r3, [r7, #28]
 800a39c:	4413      	add	r3, r2
 800a39e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3a2:	691a      	ldr	r2, [r3, #16]
 800a3a4:	69bb      	ldr	r3, [r7, #24]
 800a3a6:	0159      	lsls	r1, r3, #5
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	440b      	add	r3, r1
 800a3ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	4b5c      	ldr	r3, [pc, #368]	; (800a524 <USB_EPStartXfer+0x498>)
 800a3b4:	4013      	ands	r3, r2
 800a3b6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	699b      	ldr	r3, [r3, #24]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d123      	bne.n	800a408 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	015a      	lsls	r2, r3, #5
 800a3c4:	69fb      	ldr	r3, [r7, #28]
 800a3c6:	4413      	add	r3, r2
 800a3c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3cc:	691a      	ldr	r2, [r3, #16]
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3d6:	69b9      	ldr	r1, [r7, #24]
 800a3d8:	0148      	lsls	r0, r1, #5
 800a3da:	69f9      	ldr	r1, [r7, #28]
 800a3dc:	4401      	add	r1, r0
 800a3de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a3e6:	69bb      	ldr	r3, [r7, #24]
 800a3e8:	015a      	lsls	r2, r3, #5
 800a3ea:	69fb      	ldr	r3, [r7, #28]
 800a3ec:	4413      	add	r3, r2
 800a3ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3f2:	691b      	ldr	r3, [r3, #16]
 800a3f4:	69ba      	ldr	r2, [r7, #24]
 800a3f6:	0151      	lsls	r1, r2, #5
 800a3f8:	69fa      	ldr	r2, [r7, #28]
 800a3fa:	440a      	add	r2, r1
 800a3fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a400:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a404:	6113      	str	r3, [r2, #16]
 800a406:	e037      	b.n	800a478 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	699a      	ldr	r2, [r3, #24]
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	68db      	ldr	r3, [r3, #12]
 800a410:	4413      	add	r3, r2
 800a412:	1e5a      	subs	r2, r3, #1
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	fbb2 f3f3 	udiv	r3, r2, r3
 800a41c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	68db      	ldr	r3, [r3, #12]
 800a422:	8afa      	ldrh	r2, [r7, #22]
 800a424:	fb03 f202 	mul.w	r2, r3, r2
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a42c:	69bb      	ldr	r3, [r7, #24]
 800a42e:	015a      	lsls	r2, r3, #5
 800a430:	69fb      	ldr	r3, [r7, #28]
 800a432:	4413      	add	r3, r2
 800a434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a438:	691a      	ldr	r2, [r3, #16]
 800a43a:	8afb      	ldrh	r3, [r7, #22]
 800a43c:	04d9      	lsls	r1, r3, #19
 800a43e:	4b3a      	ldr	r3, [pc, #232]	; (800a528 <USB_EPStartXfer+0x49c>)
 800a440:	400b      	ands	r3, r1
 800a442:	69b9      	ldr	r1, [r7, #24]
 800a444:	0148      	lsls	r0, r1, #5
 800a446:	69f9      	ldr	r1, [r7, #28]
 800a448:	4401      	add	r1, r0
 800a44a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a44e:	4313      	orrs	r3, r2
 800a450:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	015a      	lsls	r2, r3, #5
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	4413      	add	r3, r2
 800a45a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a45e:	691a      	ldr	r2, [r3, #16]
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	69db      	ldr	r3, [r3, #28]
 800a464:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a468:	69b9      	ldr	r1, [r7, #24]
 800a46a:	0148      	lsls	r0, r1, #5
 800a46c:	69f9      	ldr	r1, [r7, #28]
 800a46e:	4401      	add	r1, r0
 800a470:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a474:	4313      	orrs	r3, r2
 800a476:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a478:	79fb      	ldrb	r3, [r7, #7]
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d10d      	bne.n	800a49a <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	691b      	ldr	r3, [r3, #16]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d009      	beq.n	800a49a <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	6919      	ldr	r1, [r3, #16]
 800a48a:	69bb      	ldr	r3, [r7, #24]
 800a48c:	015a      	lsls	r2, r3, #5
 800a48e:	69fb      	ldr	r3, [r7, #28]
 800a490:	4413      	add	r3, r2
 800a492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a496:	460a      	mov	r2, r1
 800a498:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	791b      	ldrb	r3, [r3, #4]
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d128      	bne.n	800a4f4 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a4a2:	69fb      	ldr	r3, [r7, #28]
 800a4a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d110      	bne.n	800a4d4 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a4b2:	69bb      	ldr	r3, [r7, #24]
 800a4b4:	015a      	lsls	r2, r3, #5
 800a4b6:	69fb      	ldr	r3, [r7, #28]
 800a4b8:	4413      	add	r3, r2
 800a4ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	69ba      	ldr	r2, [r7, #24]
 800a4c2:	0151      	lsls	r1, r2, #5
 800a4c4:	69fa      	ldr	r2, [r7, #28]
 800a4c6:	440a      	add	r2, r1
 800a4c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a4d0:	6013      	str	r3, [r2, #0]
 800a4d2:	e00f      	b.n	800a4f4 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a4d4:	69bb      	ldr	r3, [r7, #24]
 800a4d6:	015a      	lsls	r2, r3, #5
 800a4d8:	69fb      	ldr	r3, [r7, #28]
 800a4da:	4413      	add	r3, r2
 800a4dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	69ba      	ldr	r2, [r7, #24]
 800a4e4:	0151      	lsls	r1, r2, #5
 800a4e6:	69fa      	ldr	r2, [r7, #28]
 800a4e8:	440a      	add	r2, r1
 800a4ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a4f4:	69bb      	ldr	r3, [r7, #24]
 800a4f6:	015a      	lsls	r2, r3, #5
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	4413      	add	r3, r2
 800a4fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	69ba      	ldr	r2, [r7, #24]
 800a504:	0151      	lsls	r1, r2, #5
 800a506:	69fa      	ldr	r2, [r7, #28]
 800a508:	440a      	add	r2, r1
 800a50a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a50e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a512:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a514:	2300      	movs	r3, #0
}
 800a516:	4618      	mov	r0, r3
 800a518:	3720      	adds	r7, #32
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	fff80000 	.word	0xfff80000
 800a524:	e007ffff 	.word	0xe007ffff
 800a528:	1ff80000 	.word	0x1ff80000

0800a52c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b087      	sub	sp, #28
 800a530:	af00      	add	r7, sp, #0
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	60b9      	str	r1, [r7, #8]
 800a536:	4613      	mov	r3, r2
 800a538:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	785b      	ldrb	r3, [r3, #1]
 800a548:	2b01      	cmp	r3, #1
 800a54a:	f040 80ce 	bne.w	800a6ea <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	699b      	ldr	r3, [r3, #24]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d132      	bne.n	800a5bc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	015a      	lsls	r2, r3, #5
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	4413      	add	r3, r2
 800a55e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a562:	691a      	ldr	r2, [r3, #16]
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	0159      	lsls	r1, r3, #5
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	440b      	add	r3, r1
 800a56c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a570:	4619      	mov	r1, r3
 800a572:	4b9a      	ldr	r3, [pc, #616]	; (800a7dc <USB_EP0StartXfer+0x2b0>)
 800a574:	4013      	ands	r3, r2
 800a576:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	015a      	lsls	r2, r3, #5
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	4413      	add	r3, r2
 800a580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a584:	691b      	ldr	r3, [r3, #16]
 800a586:	693a      	ldr	r2, [r7, #16]
 800a588:	0151      	lsls	r1, r2, #5
 800a58a:	697a      	ldr	r2, [r7, #20]
 800a58c:	440a      	add	r2, r1
 800a58e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a592:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a596:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	015a      	lsls	r2, r3, #5
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	4413      	add	r3, r2
 800a5a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5a4:	691a      	ldr	r2, [r3, #16]
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	0159      	lsls	r1, r3, #5
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	440b      	add	r3, r1
 800a5ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	4b8a      	ldr	r3, [pc, #552]	; (800a7e0 <USB_EP0StartXfer+0x2b4>)
 800a5b6:	4013      	ands	r3, r2
 800a5b8:	610b      	str	r3, [r1, #16]
 800a5ba:	e04e      	b.n	800a65a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	015a      	lsls	r2, r3, #5
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	4413      	add	r3, r2
 800a5c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5c8:	691a      	ldr	r2, [r3, #16]
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	0159      	lsls	r1, r3, #5
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	440b      	add	r3, r1
 800a5d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	4b81      	ldr	r3, [pc, #516]	; (800a7e0 <USB_EP0StartXfer+0x2b4>)
 800a5da:	4013      	ands	r3, r2
 800a5dc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	015a      	lsls	r2, r3, #5
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5ea:	691a      	ldr	r2, [r3, #16]
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	0159      	lsls	r1, r3, #5
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	440b      	add	r3, r1
 800a5f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	4b78      	ldr	r3, [pc, #480]	; (800a7dc <USB_EP0StartXfer+0x2b0>)
 800a5fc:	4013      	ands	r3, r2
 800a5fe:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	699a      	ldr	r2, [r3, #24]
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	68db      	ldr	r3, [r3, #12]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d903      	bls.n	800a614 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	68da      	ldr	r2, [r3, #12]
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	015a      	lsls	r2, r3, #5
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	4413      	add	r3, r2
 800a61c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a620:	691b      	ldr	r3, [r3, #16]
 800a622:	693a      	ldr	r2, [r7, #16]
 800a624:	0151      	lsls	r1, r2, #5
 800a626:	697a      	ldr	r2, [r7, #20]
 800a628:	440a      	add	r2, r1
 800a62a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a62e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a632:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	015a      	lsls	r2, r3, #5
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	4413      	add	r3, r2
 800a63c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a640:	691a      	ldr	r2, [r3, #16]
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	699b      	ldr	r3, [r3, #24]
 800a646:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a64a:	6939      	ldr	r1, [r7, #16]
 800a64c:	0148      	lsls	r0, r1, #5
 800a64e:	6979      	ldr	r1, [r7, #20]
 800a650:	4401      	add	r1, r0
 800a652:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a656:	4313      	orrs	r3, r2
 800a658:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a65a:	79fb      	ldrb	r3, [r7, #7]
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	d11e      	bne.n	800a69e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	695b      	ldr	r3, [r3, #20]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d009      	beq.n	800a67c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	015a      	lsls	r2, r3, #5
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	4413      	add	r3, r2
 800a670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a674:	461a      	mov	r2, r3
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	695b      	ldr	r3, [r3, #20]
 800a67a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	015a      	lsls	r2, r3, #5
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	4413      	add	r3, r2
 800a684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	693a      	ldr	r2, [r7, #16]
 800a68c:	0151      	lsls	r1, r2, #5
 800a68e:	697a      	ldr	r2, [r7, #20]
 800a690:	440a      	add	r2, r1
 800a692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a696:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a69a:	6013      	str	r3, [r2, #0]
 800a69c:	e097      	b.n	800a7ce <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	015a      	lsls	r2, r3, #5
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	4413      	add	r3, r2
 800a6a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	693a      	ldr	r2, [r7, #16]
 800a6ae:	0151      	lsls	r1, r2, #5
 800a6b0:	697a      	ldr	r2, [r7, #20]
 800a6b2:	440a      	add	r2, r1
 800a6b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a6bc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	699b      	ldr	r3, [r3, #24]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	f000 8083 	beq.w	800a7ce <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	f003 030f 	and.w	r3, r3, #15
 800a6d8:	2101      	movs	r1, #1
 800a6da:	fa01 f303 	lsl.w	r3, r1, r3
 800a6de:	6979      	ldr	r1, [r7, #20]
 800a6e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	634b      	str	r3, [r1, #52]	; 0x34
 800a6e8:	e071      	b.n	800a7ce <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	015a      	lsls	r2, r3, #5
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	4413      	add	r3, r2
 800a6f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6f6:	691a      	ldr	r2, [r3, #16]
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	0159      	lsls	r1, r3, #5
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	440b      	add	r3, r1
 800a700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a704:	4619      	mov	r1, r3
 800a706:	4b36      	ldr	r3, [pc, #216]	; (800a7e0 <USB_EP0StartXfer+0x2b4>)
 800a708:	4013      	ands	r3, r2
 800a70a:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	015a      	lsls	r2, r3, #5
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	4413      	add	r3, r2
 800a714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a718:	691a      	ldr	r2, [r3, #16]
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	0159      	lsls	r1, r3, #5
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	440b      	add	r3, r1
 800a722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a726:	4619      	mov	r1, r3
 800a728:	4b2c      	ldr	r3, [pc, #176]	; (800a7dc <USB_EP0StartXfer+0x2b0>)
 800a72a:	4013      	ands	r3, r2
 800a72c:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	699b      	ldr	r3, [r3, #24]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d003      	beq.n	800a73e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	68da      	ldr	r2, [r3, #12]
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	68da      	ldr	r2, [r3, #12]
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	015a      	lsls	r2, r3, #5
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	4413      	add	r3, r2
 800a74e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a752:	691b      	ldr	r3, [r3, #16]
 800a754:	693a      	ldr	r2, [r7, #16]
 800a756:	0151      	lsls	r1, r2, #5
 800a758:	697a      	ldr	r2, [r7, #20]
 800a75a:	440a      	add	r2, r1
 800a75c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a760:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a764:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	015a      	lsls	r2, r3, #5
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	4413      	add	r3, r2
 800a76e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a772:	691a      	ldr	r2, [r3, #16]
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	69db      	ldr	r3, [r3, #28]
 800a778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a77c:	6939      	ldr	r1, [r7, #16]
 800a77e:	0148      	lsls	r0, r1, #5
 800a780:	6979      	ldr	r1, [r7, #20]
 800a782:	4401      	add	r1, r0
 800a784:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a788:	4313      	orrs	r3, r2
 800a78a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a78c:	79fb      	ldrb	r3, [r7, #7]
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d10d      	bne.n	800a7ae <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	691b      	ldr	r3, [r3, #16]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d009      	beq.n	800a7ae <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	6919      	ldr	r1, [r3, #16]
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	015a      	lsls	r2, r3, #5
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	4413      	add	r3, r2
 800a7a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7aa:	460a      	mov	r2, r1
 800a7ac:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	015a      	lsls	r2, r3, #5
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	4413      	add	r3, r2
 800a7b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	693a      	ldr	r2, [r7, #16]
 800a7be:	0151      	lsls	r1, r2, #5
 800a7c0:	697a      	ldr	r2, [r7, #20]
 800a7c2:	440a      	add	r2, r1
 800a7c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a7cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a7ce:	2300      	movs	r3, #0
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	371c      	adds	r7, #28
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr
 800a7dc:	e007ffff 	.word	0xe007ffff
 800a7e0:	fff80000 	.word	0xfff80000

0800a7e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b087      	sub	sp, #28
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	785b      	ldrb	r3, [r3, #1]
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d14a      	bne.n	800a898 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	015a      	lsls	r2, r3, #5
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	4413      	add	r3, r2
 800a80c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a816:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a81a:	f040 8086 	bne.w	800a92a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	015a      	lsls	r2, r3, #5
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	4413      	add	r3, r2
 800a828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	683a      	ldr	r2, [r7, #0]
 800a830:	7812      	ldrb	r2, [r2, #0]
 800a832:	0151      	lsls	r1, r2, #5
 800a834:	693a      	ldr	r2, [r7, #16]
 800a836:	440a      	add	r2, r1
 800a838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a83c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a840:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	015a      	lsls	r2, r3, #5
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	4413      	add	r3, r2
 800a84c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	683a      	ldr	r2, [r7, #0]
 800a854:	7812      	ldrb	r2, [r2, #0]
 800a856:	0151      	lsls	r1, r2, #5
 800a858:	693a      	ldr	r2, [r7, #16]
 800a85a:	440a      	add	r2, r1
 800a85c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a860:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a864:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	3301      	adds	r3, #1
 800a86a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f242 7210 	movw	r2, #10000	; 0x2710
 800a872:	4293      	cmp	r3, r2
 800a874:	d902      	bls.n	800a87c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a876:	2301      	movs	r3, #1
 800a878:	75fb      	strb	r3, [r7, #23]
          break;
 800a87a:	e056      	b.n	800a92a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	015a      	lsls	r2, r3, #5
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	4413      	add	r3, r2
 800a886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a890:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a894:	d0e7      	beq.n	800a866 <USB_EPStopXfer+0x82>
 800a896:	e048      	b.n	800a92a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	015a      	lsls	r2, r3, #5
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a8ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8b0:	d13b      	bne.n	800a92a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	015a      	lsls	r2, r3, #5
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	4413      	add	r3, r2
 800a8bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	683a      	ldr	r2, [r7, #0]
 800a8c4:	7812      	ldrb	r2, [r2, #0]
 800a8c6:	0151      	lsls	r1, r2, #5
 800a8c8:	693a      	ldr	r2, [r7, #16]
 800a8ca:	440a      	add	r2, r1
 800a8cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a8d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	015a      	lsls	r2, r3, #5
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	4413      	add	r3, r2
 800a8e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	683a      	ldr	r2, [r7, #0]
 800a8e8:	7812      	ldrb	r2, [r2, #0]
 800a8ea:	0151      	lsls	r1, r2, #5
 800a8ec:	693a      	ldr	r2, [r7, #16]
 800a8ee:	440a      	add	r2, r1
 800a8f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a8f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f242 7210 	movw	r2, #10000	; 0x2710
 800a906:	4293      	cmp	r3, r2
 800a908:	d902      	bls.n	800a910 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a90a:	2301      	movs	r3, #1
 800a90c:	75fb      	strb	r3, [r7, #23]
          break;
 800a90e:	e00c      	b.n	800a92a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	015a      	lsls	r2, r3, #5
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	4413      	add	r3, r2
 800a91a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a924:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a928:	d0e7      	beq.n	800a8fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a92a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	371c      	adds	r7, #28
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr

0800a938 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a938:	b480      	push	{r7}
 800a93a:	b089      	sub	sp, #36	; 0x24
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	4611      	mov	r1, r2
 800a944:	461a      	mov	r2, r3
 800a946:	460b      	mov	r3, r1
 800a948:	71fb      	strb	r3, [r7, #7]
 800a94a:	4613      	mov	r3, r2
 800a94c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a956:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d123      	bne.n	800a9a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a95e:	88bb      	ldrh	r3, [r7, #4]
 800a960:	3303      	adds	r3, #3
 800a962:	089b      	lsrs	r3, r3, #2
 800a964:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a966:	2300      	movs	r3, #0
 800a968:	61bb      	str	r3, [r7, #24]
 800a96a:	e018      	b.n	800a99e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a96c:	79fb      	ldrb	r3, [r7, #7]
 800a96e:	031a      	lsls	r2, r3, #12
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	4413      	add	r3, r2
 800a974:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a978:	461a      	mov	r2, r3
 800a97a:	69fb      	ldr	r3, [r7, #28]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a980:	69fb      	ldr	r3, [r7, #28]
 800a982:	3301      	adds	r3, #1
 800a984:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a986:	69fb      	ldr	r3, [r7, #28]
 800a988:	3301      	adds	r3, #1
 800a98a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a98c:	69fb      	ldr	r3, [r7, #28]
 800a98e:	3301      	adds	r3, #1
 800a990:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a992:	69fb      	ldr	r3, [r7, #28]
 800a994:	3301      	adds	r3, #1
 800a996:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a998:	69bb      	ldr	r3, [r7, #24]
 800a99a:	3301      	adds	r3, #1
 800a99c:	61bb      	str	r3, [r7, #24]
 800a99e:	69ba      	ldr	r2, [r7, #24]
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d3e2      	bcc.n	800a96c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a9a6:	2300      	movs	r3, #0
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3724      	adds	r7, #36	; 0x24
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b08b      	sub	sp, #44	; 0x2c
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	60f8      	str	r0, [r7, #12]
 800a9bc:	60b9      	str	r1, [r7, #8]
 800a9be:	4613      	mov	r3, r2
 800a9c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a9ca:	88fb      	ldrh	r3, [r7, #6]
 800a9cc:	089b      	lsrs	r3, r3, #2
 800a9ce:	b29b      	uxth	r3, r3
 800a9d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a9d2:	88fb      	ldrh	r3, [r7, #6]
 800a9d4:	f003 0303 	and.w	r3, r3, #3
 800a9d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a9da:	2300      	movs	r3, #0
 800a9dc:	623b      	str	r3, [r7, #32]
 800a9de:	e014      	b.n	800aa0a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a9e0:	69bb      	ldr	r3, [r7, #24]
 800a9e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ea:	601a      	str	r2, [r3, #0]
    pDest++;
 800a9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa00:	3301      	adds	r3, #1
 800aa02:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800aa04:	6a3b      	ldr	r3, [r7, #32]
 800aa06:	3301      	adds	r3, #1
 800aa08:	623b      	str	r3, [r7, #32]
 800aa0a:	6a3a      	ldr	r2, [r7, #32]
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d3e6      	bcc.n	800a9e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800aa12:	8bfb      	ldrh	r3, [r7, #30]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d01e      	beq.n	800aa56 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa22:	461a      	mov	r2, r3
 800aa24:	f107 0310 	add.w	r3, r7, #16
 800aa28:	6812      	ldr	r2, [r2, #0]
 800aa2a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800aa2c:	693a      	ldr	r2, [r7, #16]
 800aa2e:	6a3b      	ldr	r3, [r7, #32]
 800aa30:	b2db      	uxtb	r3, r3
 800aa32:	00db      	lsls	r3, r3, #3
 800aa34:	fa22 f303 	lsr.w	r3, r2, r3
 800aa38:	b2da      	uxtb	r2, r3
 800aa3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3c:	701a      	strb	r2, [r3, #0]
      i++;
 800aa3e:	6a3b      	ldr	r3, [r7, #32]
 800aa40:	3301      	adds	r3, #1
 800aa42:	623b      	str	r3, [r7, #32]
      pDest++;
 800aa44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa46:	3301      	adds	r3, #1
 800aa48:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800aa4a:	8bfb      	ldrh	r3, [r7, #30]
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800aa50:	8bfb      	ldrh	r3, [r7, #30]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d1ea      	bne.n	800aa2c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800aa56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	372c      	adds	r7, #44	; 0x2c
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b085      	sub	sp, #20
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	785b      	ldrb	r3, [r3, #1]
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d12c      	bne.n	800aada <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	015a      	lsls	r2, r3, #5
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	4413      	add	r3, r2
 800aa88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	db12      	blt.n	800aab8 <USB_EPSetStall+0x54>
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d00f      	beq.n	800aab8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	015a      	lsls	r2, r3, #5
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	4413      	add	r3, r2
 800aaa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	68ba      	ldr	r2, [r7, #8]
 800aaa8:	0151      	lsls	r1, r2, #5
 800aaaa:	68fa      	ldr	r2, [r7, #12]
 800aaac:	440a      	add	r2, r1
 800aaae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aab2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aab6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	015a      	lsls	r2, r3, #5
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	4413      	add	r3, r2
 800aac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	68ba      	ldr	r2, [r7, #8]
 800aac8:	0151      	lsls	r1, r2, #5
 800aaca:	68fa      	ldr	r2, [r7, #12]
 800aacc:	440a      	add	r2, r1
 800aace:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aad2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aad6:	6013      	str	r3, [r2, #0]
 800aad8:	e02b      	b.n	800ab32 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	015a      	lsls	r2, r3, #5
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	4413      	add	r3, r2
 800aae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	db12      	blt.n	800ab12 <USB_EPSetStall+0xae>
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d00f      	beq.n	800ab12 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	015a      	lsls	r2, r3, #5
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	4413      	add	r3, r2
 800aafa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	68ba      	ldr	r2, [r7, #8]
 800ab02:	0151      	lsls	r1, r2, #5
 800ab04:	68fa      	ldr	r2, [r7, #12]
 800ab06:	440a      	add	r2, r1
 800ab08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ab10:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	015a      	lsls	r2, r3, #5
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	4413      	add	r3, r2
 800ab1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	68ba      	ldr	r2, [r7, #8]
 800ab22:	0151      	lsls	r1, r2, #5
 800ab24:	68fa      	ldr	r2, [r7, #12]
 800ab26:	440a      	add	r2, r1
 800ab28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ab30:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab32:	2300      	movs	r3, #0
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3714      	adds	r7, #20
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr

0800ab40 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b085      	sub	sp, #20
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	785b      	ldrb	r3, [r3, #1]
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d128      	bne.n	800abae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	015a      	lsls	r2, r3, #5
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	4413      	add	r3, r2
 800ab64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	68ba      	ldr	r2, [r7, #8]
 800ab6c:	0151      	lsls	r1, r2, #5
 800ab6e:	68fa      	ldr	r2, [r7, #12]
 800ab70:	440a      	add	r2, r1
 800ab72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ab7a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	791b      	ldrb	r3, [r3, #4]
 800ab80:	2b03      	cmp	r3, #3
 800ab82:	d003      	beq.n	800ab8c <USB_EPClearStall+0x4c>
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	791b      	ldrb	r3, [r3, #4]
 800ab88:	2b02      	cmp	r3, #2
 800ab8a:	d138      	bne.n	800abfe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	015a      	lsls	r2, r3, #5
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	4413      	add	r3, r2
 800ab94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	68ba      	ldr	r2, [r7, #8]
 800ab9c:	0151      	lsls	r1, r2, #5
 800ab9e:	68fa      	ldr	r2, [r7, #12]
 800aba0:	440a      	add	r2, r1
 800aba2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abaa:	6013      	str	r3, [r2, #0]
 800abac:	e027      	b.n	800abfe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	015a      	lsls	r2, r3, #5
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	4413      	add	r3, r2
 800abb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	68ba      	ldr	r2, [r7, #8]
 800abbe:	0151      	lsls	r1, r2, #5
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	440a      	add	r2, r1
 800abc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800abcc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	791b      	ldrb	r3, [r3, #4]
 800abd2:	2b03      	cmp	r3, #3
 800abd4:	d003      	beq.n	800abde <USB_EPClearStall+0x9e>
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	791b      	ldrb	r3, [r3, #4]
 800abda:	2b02      	cmp	r3, #2
 800abdc:	d10f      	bne.n	800abfe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	015a      	lsls	r2, r3, #5
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	4413      	add	r3, r2
 800abe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	68ba      	ldr	r2, [r7, #8]
 800abee:	0151      	lsls	r1, r2, #5
 800abf0:	68fa      	ldr	r2, [r7, #12]
 800abf2:	440a      	add	r2, r1
 800abf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abfc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800abfe:	2300      	movs	r3, #0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3714      	adds	r7, #20
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr

0800ac0c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b085      	sub	sp, #20
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	460b      	mov	r3, r1
 800ac16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	68fa      	ldr	r2, [r7, #12]
 800ac26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac2a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ac2e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac36:	681a      	ldr	r2, [r3, #0]
 800ac38:	78fb      	ldrb	r3, [r7, #3]
 800ac3a:	011b      	lsls	r3, r3, #4
 800ac3c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ac40:	68f9      	ldr	r1, [r7, #12]
 800ac42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac46:	4313      	orrs	r3, r2
 800ac48:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ac4a:	2300      	movs	r3, #0
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3714      	adds	r7, #20
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b085      	sub	sp, #20
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	68fa      	ldr	r2, [r7, #12]
 800ac6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ac72:	f023 0303 	bic.w	r3, r3, #3
 800ac76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac86:	f023 0302 	bic.w	r3, r3, #2
 800ac8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ac8c:	2300      	movs	r3, #0
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3714      	adds	r7, #20
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr

0800ac9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ac9a:	b480      	push	{r7}
 800ac9c:	b085      	sub	sp, #20
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	68fa      	ldr	r2, [r7, #12]
 800acb0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800acb4:	f023 0303 	bic.w	r3, r3, #3
 800acb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	68fa      	ldr	r2, [r7, #12]
 800acc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800acc8:	f043 0302 	orr.w	r3, r3, #2
 800accc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800acce:	2300      	movs	r3, #0
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3714      	adds	r7, #20
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr

0800acdc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800acdc:	b480      	push	{r7}
 800acde:	b085      	sub	sp, #20
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	695b      	ldr	r3, [r3, #20]
 800ace8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	699b      	ldr	r3, [r3, #24]
 800acee:	68fa      	ldr	r2, [r7, #12]
 800acf0:	4013      	ands	r3, r2
 800acf2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800acf4:	68fb      	ldr	r3, [r7, #12]
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3714      	adds	r7, #20
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr

0800ad02 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad02:	b480      	push	{r7}
 800ad04:	b085      	sub	sp, #20
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad14:	699b      	ldr	r3, [r3, #24]
 800ad16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad1e:	69db      	ldr	r3, [r3, #28]
 800ad20:	68ba      	ldr	r2, [r7, #8]
 800ad22:	4013      	ands	r3, r2
 800ad24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	0c1b      	lsrs	r3, r3, #16
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3714      	adds	r7, #20
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr

0800ad36 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad36:	b480      	push	{r7}
 800ad38:	b085      	sub	sp, #20
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad48:	699b      	ldr	r3, [r3, #24]
 800ad4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad52:	69db      	ldr	r3, [r3, #28]
 800ad54:	68ba      	ldr	r2, [r7, #8]
 800ad56:	4013      	ands	r3, r2
 800ad58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	b29b      	uxth	r3, r3
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3714      	adds	r7, #20
 800ad62:	46bd      	mov	sp, r7
 800ad64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad68:	4770      	bx	lr

0800ad6a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ad6a:	b480      	push	{r7}
 800ad6c:	b085      	sub	sp, #20
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
 800ad72:	460b      	mov	r3, r1
 800ad74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ad7a:	78fb      	ldrb	r3, [r7, #3]
 800ad7c:	015a      	lsls	r2, r3, #5
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	4413      	add	r3, r2
 800ad82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad86:	689b      	ldr	r3, [r3, #8]
 800ad88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad90:	695b      	ldr	r3, [r3, #20]
 800ad92:	68ba      	ldr	r2, [r7, #8]
 800ad94:	4013      	ands	r3, r2
 800ad96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ad98:	68bb      	ldr	r3, [r7, #8]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3714      	adds	r7, #20
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr

0800ada6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ada6:	b480      	push	{r7}
 800ada8:	b087      	sub	sp, #28
 800adaa:	af00      	add	r7, sp, #0
 800adac:	6078      	str	r0, [r7, #4]
 800adae:	460b      	mov	r3, r1
 800adb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adbc:	691b      	ldr	r3, [r3, #16]
 800adbe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adc8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800adca:	78fb      	ldrb	r3, [r7, #3]
 800adcc:	f003 030f 	and.w	r3, r3, #15
 800add0:	68fa      	ldr	r2, [r7, #12]
 800add2:	fa22 f303 	lsr.w	r3, r2, r3
 800add6:	01db      	lsls	r3, r3, #7
 800add8:	b2db      	uxtb	r3, r3
 800adda:	693a      	ldr	r2, [r7, #16]
 800addc:	4313      	orrs	r3, r2
 800adde:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ade0:	78fb      	ldrb	r3, [r7, #3]
 800ade2:	015a      	lsls	r2, r3, #5
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	4413      	add	r3, r2
 800ade8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adec:	689b      	ldr	r3, [r3, #8]
 800adee:	693a      	ldr	r2, [r7, #16]
 800adf0:	4013      	ands	r3, r2
 800adf2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800adf4:	68bb      	ldr	r3, [r7, #8]
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	371c      	adds	r7, #28
 800adfa:	46bd      	mov	sp, r7
 800adfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae00:	4770      	bx	lr

0800ae02 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ae02:	b480      	push	{r7}
 800ae04:	b083      	sub	sp, #12
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	695b      	ldr	r3, [r3, #20]
 800ae0e:	f003 0301 	and.w	r3, r3, #1
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	370c      	adds	r7, #12
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr
	...

0800ae20 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b085      	sub	sp, #20
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	4b09      	ldr	r3, [pc, #36]	; (800ae64 <USB_ActivateSetup+0x44>)
 800ae3e:	4013      	ands	r3, r2
 800ae40:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae48:	685b      	ldr	r3, [r3, #4]
 800ae4a:	68fa      	ldr	r2, [r7, #12]
 800ae4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ae56:	2300      	movs	r3, #0
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3714      	adds	r7, #20
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr
 800ae64:	fffff800 	.word	0xfffff800

0800ae68 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b087      	sub	sp, #28
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	60f8      	str	r0, [r7, #12]
 800ae70:	460b      	mov	r3, r1
 800ae72:	607a      	str	r2, [r7, #4]
 800ae74:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	333c      	adds	r3, #60	; 0x3c
 800ae7e:	3304      	adds	r3, #4
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	4a26      	ldr	r2, [pc, #152]	; (800af20 <USB_EP0_OutStart+0xb8>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d90a      	bls.n	800aea2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae9c:	d101      	bne.n	800aea2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	e037      	b.n	800af12 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aea8:	461a      	mov	r2, r3
 800aeaa:	2300      	movs	r3, #0
 800aeac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeb4:	691b      	ldr	r3, [r3, #16]
 800aeb6:	697a      	ldr	r2, [r7, #20]
 800aeb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aebc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aec0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aec8:	691b      	ldr	r3, [r3, #16]
 800aeca:	697a      	ldr	r2, [r7, #20]
 800aecc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aed0:	f043 0318 	orr.w	r3, r3, #24
 800aed4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aedc:	691b      	ldr	r3, [r3, #16]
 800aede:	697a      	ldr	r2, [r7, #20]
 800aee0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aee4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800aee8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800aeea:	7afb      	ldrb	r3, [r7, #11]
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d10f      	bne.n	800af10 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aef6:	461a      	mov	r2, r3
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	697a      	ldr	r2, [r7, #20]
 800af06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af0a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800af0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af10:	2300      	movs	r3, #0
}
 800af12:	4618      	mov	r0, r3
 800af14:	371c      	adds	r7, #28
 800af16:	46bd      	mov	sp, r7
 800af18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1c:	4770      	bx	lr
 800af1e:	bf00      	nop
 800af20:	4f54300a 	.word	0x4f54300a

0800af24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800af24:	b480      	push	{r7}
 800af26:	b085      	sub	sp, #20
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800af2c:	2300      	movs	r3, #0
 800af2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	3301      	adds	r3, #1
 800af34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	4a13      	ldr	r2, [pc, #76]	; (800af88 <USB_CoreReset+0x64>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d901      	bls.n	800af42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800af3e:	2303      	movs	r3, #3
 800af40:	e01b      	b.n	800af7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	691b      	ldr	r3, [r3, #16]
 800af46:	2b00      	cmp	r3, #0
 800af48:	daf2      	bge.n	800af30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800af4a:	2300      	movs	r3, #0
 800af4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	691b      	ldr	r3, [r3, #16]
 800af52:	f043 0201 	orr.w	r2, r3, #1
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	3301      	adds	r3, #1
 800af5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	4a09      	ldr	r2, [pc, #36]	; (800af88 <USB_CoreReset+0x64>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d901      	bls.n	800af6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800af68:	2303      	movs	r3, #3
 800af6a:	e006      	b.n	800af7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	691b      	ldr	r3, [r3, #16]
 800af70:	f003 0301 	and.w	r3, r3, #1
 800af74:	2b01      	cmp	r3, #1
 800af76:	d0f0      	beq.n	800af5a <USB_CoreReset+0x36>

  return HAL_OK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3714      	adds	r7, #20
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr
 800af86:	bf00      	nop
 800af88:	00030d40 	.word	0x00030d40

0800af8c <HiL_Init_MSGQ>:
#include "HiL_MSGQ.h"

extern osMessageQueueId_t USB_MSGQ_Rx;
//extern osMessageQueueId_t USB_MSGQ_Tx;

uint8_t HiL_Init_MSGQ (void) {
 800af8c:	b580      	push	{r7, lr}
 800af8e:	af00      	add	r7, sp, #0

	USB_MSGQ_Rx = osMessageQueueNew(HiL_USB_MSQG_len, sizeof(MSGQ_obj), NULL);
 800af90:	2200      	movs	r2, #0
 800af92:	2104      	movs	r1, #4
 800af94:	200a      	movs	r0, #10
 800af96:	f002 fd8f 	bl	800dab8 <osMessageQueueNew>
 800af9a:	4603      	mov	r3, r0
 800af9c:	4a05      	ldr	r2, [pc, #20]	; (800afb4 <HiL_Init_MSGQ+0x28>)
 800af9e:	6013      	str	r3, [r2, #0]
  if (USB_MSGQ_Rx == NULL) {
 800afa0:	4b04      	ldr	r3, [pc, #16]	; (800afb4 <HiL_Init_MSGQ+0x28>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d101      	bne.n	800afac <HiL_Init_MSGQ+0x20>
	  return -1;
 800afa8:	23ff      	movs	r3, #255	; 0xff
 800afaa:	e000      	b.n	800afae <HiL_Init_MSGQ+0x22>
  }
//  USB_MSGQ_Tx = osMessageQueueNew(10, sizeof(MSGQ_obj), NULL);
//    if (USB_MSGQ_Tx == NULL) {
//  	  return -1;
//    }
  return 0;
 800afac:	2300      	movs	r3, #0
}
 800afae:	4618      	mov	r0, r3
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	2000078c 	.word	0x2000078c

0800afb8 <HAL_TIM_IC_CaptureCallback>:
uint8_t uart_main_buffer[HIL_UART_BUFFER_SIZE] = "Default";
extern uint8_t uart_rx_buffer[HIL_UART_BUFFER_SIZE];
extern UART_HandleTypeDef huart7;


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {						// Timer callback code on interrupts from rising and falling edges
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4a10      	ldr	r2, [pc, #64]	; (800b008 <HAL_TIM_IC_CaptureCallback+0x50>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d11a      	bne.n	800b000 <HAL_TIM_IC_CaptureCallback+0x48>
		// Used for duty cycle measurements

		//#define TIMER_CLOCK_FREQ 96000000 // APB2 Timer Clock. With 96 MHz, 16 bit res -> Reload/wraparound freq @ 732 Hz
																				// -> Tested lowest measureable pwm freq is 1.7 kHz

		Cnt_full = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) + 1;
 800afca:	2100      	movs	r1, #0
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f7fc fd33 	bl	8007a38 <HAL_TIM_ReadCapturedValue>
 800afd2:	4603      	mov	r3, r0
 800afd4:	3301      	adds	r3, #1
 800afd6:	4a0d      	ldr	r2, [pc, #52]	; (800b00c <HAL_TIM_IC_CaptureCallback+0x54>)
 800afd8:	6013      	str	r3, [r2, #0]
		Cnt_high = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800afda:	2104      	movs	r1, #4
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f7fc fd2b 	bl	8007a38 <HAL_TIM_ReadCapturedValue>
 800afe2:	4603      	mov	r3, r0
 800afe4:	4a0a      	ldr	r2, [pc, #40]	; (800b010 <HAL_TIM_IC_CaptureCallback+0x58>)
 800afe6:	6013      	str	r3, [r2, #0]

		Duty =  100 * Cnt_high / Cnt_full;
 800afe8:	4b09      	ldr	r3, [pc, #36]	; (800b010 <HAL_TIM_IC_CaptureCallback+0x58>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	2264      	movs	r2, #100	; 0x64
 800afee:	fb03 f202 	mul.w	r2, r3, r2
 800aff2:	4b06      	ldr	r3, [pc, #24]	; (800b00c <HAL_TIM_IC_CaptureCallback+0x54>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	fbb2 f3f3 	udiv	r3, r2, r3
 800affa:	b2da      	uxtb	r2, r3
 800affc:	4b05      	ldr	r3, [pc, #20]	; (800b014 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800affe:	701a      	strb	r2, [r3, #0]
	}
}
 800b000:	bf00      	nop
 800b002:	3708      	adds	r7, #8
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}
 800b008:	40010000 	.word	0x40010000
 800b00c:	20000874 	.word	0x20000874
 800b010:	20000878 	.word	0x20000878
 800b014:	2000087c 	.word	0x2000087c

0800b018 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b082      	sub	sp, #8
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	460b      	mov	r3, r1
 800b022:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == UART7)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4a08      	ldr	r2, [pc, #32]	; (800b04c <HAL_UARTEx_RxEventCallback+0x34>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d10a      	bne.n	800b044 <HAL_UARTEx_RxEventCallback+0x2c>
	{
		memcpy(uart_main_buffer,uart_rx_buffer,Size);
 800b02e:	887b      	ldrh	r3, [r7, #2]
 800b030:	461a      	mov	r2, r3
 800b032:	4907      	ldr	r1, [pc, #28]	; (800b050 <HAL_UARTEx_RxEventCallback+0x38>)
 800b034:	4807      	ldr	r0, [pc, #28]	; (800b054 <HAL_UARTEx_RxEventCallback+0x3c>)
 800b036:	f006 fd91 	bl	8011b5c <memcpy>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart7, uart_rx_buffer, HIL_UART_BUFFER_SIZE);
 800b03a:	2280      	movs	r2, #128	; 0x80
 800b03c:	4904      	ldr	r1, [pc, #16]	; (800b050 <HAL_UARTEx_RxEventCallback+0x38>)
 800b03e:	4806      	ldr	r0, [pc, #24]	; (800b058 <HAL_UARTEx_RxEventCallback+0x40>)
 800b040:	f7fe fb04 	bl	800964c <HAL_UARTEx_ReceiveToIdle_DMA>
	}

}
 800b044:	bf00      	nop
 800b046:	3708      	adds	r7, #8
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}
 800b04c:	40007800 	.word	0x40007800
 800b050:	20000798 	.word	0x20000798
 800b054:	2000000c 	.word	0x2000000c
 800b058:	2000063c 	.word	0x2000063c

0800b05c <HiL_controller_copy_array>:

static uint8_t recieved_data[HiL_MSGQ_Buf_arr_len];
	   uint8_t controller_reply[2];

void HiL_controller_copy_array(uint8_t* to_be_copied)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b085      	sub	sp, #20
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i<HiL_MSGQ_Buf_arr_len; i++)
 800b064:	2300      	movs	r3, #0
 800b066:	73fb      	strb	r3, [r7, #15]
 800b068:	e009      	b.n	800b07e <HiL_controller_copy_array+0x22>
	{
		recieved_data[i] = to_be_copied[i];
 800b06a:	7bfb      	ldrb	r3, [r7, #15]
 800b06c:	687a      	ldr	r2, [r7, #4]
 800b06e:	441a      	add	r2, r3
 800b070:	7bfb      	ldrb	r3, [r7, #15]
 800b072:	7811      	ldrb	r1, [r2, #0]
 800b074:	4a07      	ldr	r2, [pc, #28]	; (800b094 <HiL_controller_copy_array+0x38>)
 800b076:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i<HiL_MSGQ_Buf_arr_len; i++)
 800b078:	7bfb      	ldrb	r3, [r7, #15]
 800b07a:	3301      	adds	r3, #1
 800b07c:	73fb      	strb	r3, [r7, #15]
 800b07e:	7bfb      	ldrb	r3, [r7, #15]
 800b080:	2b03      	cmp	r3, #3
 800b082:	d9f2      	bls.n	800b06a <HiL_controller_copy_array+0xe>
	}
}
 800b084:	bf00      	nop
 800b086:	bf00      	nop
 800b088:	3714      	adds	r7, #20
 800b08a:	46bd      	mov	sp, r7
 800b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b090:	4770      	bx	lr
 800b092:	bf00      	nop
 800b094:	20000880 	.word	0x20000880

0800b098 <HiL_controller_read_message>:

//parses message, and tries to execute commands.
void HiL_controller_read_message(uint8_t* recieved_data)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b082      	sub	sp, #8
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
	//reset status array
	controller_reply[CONTROLLER_VALUE1] = 0;
 800b0a0:	4b32      	ldr	r3, [pc, #200]	; (800b16c <HiL_controller_read_message+0xd4>)
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	701a      	strb	r2, [r3, #0]
	controller_reply[CONTROLLER_VALUE2] = 0;
 800b0a6:	4b31      	ldr	r3, [pc, #196]	; (800b16c <HiL_controller_read_message+0xd4>)
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	705a      	strb	r2, [r3, #1]

	// gets newest instruction
	HiL_controller_copy_array(recieved_data);
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f7ff ffd5 	bl	800b05c <HiL_controller_copy_array>

	// identify the message content
	switch(recieved_data[CONTROLLER_REQUEST])
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	2b03      	cmp	r3, #3
 800b0b8:	d847      	bhi.n	800b14a <HiL_controller_read_message+0xb2>
 800b0ba:	a201      	add	r2, pc, #4	; (adr r2, 800b0c0 <HiL_controller_read_message+0x28>)
 800b0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0c0:	0800b0d1 	.word	0x0800b0d1
 800b0c4:	0800b0d7 	.word	0x0800b0d7
 800b0c8:	0800b105 	.word	0x0800b105
 800b0cc:	0800b133 	.word	0x0800b133
	{

		case CONTROLLER_REQUEST_GET: 

			HiL_controller_send_message();
 800b0d0:	f000 f84e 	bl	800b170 <HiL_controller_send_message>
			break;
 800b0d4:	e045      	b.n	800b162 <HiL_controller_read_message+0xca>


		case CONTROLLER_REQUEST_ACTUATE:
			
			controller_reply[CONTROLLER_VALUE1] =  HiL_mcu_commands_binary_action(
													recieved_data[CONTROLLER_OBJECT],
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	3301      	adds	r3, #1
			controller_reply[CONTROLLER_VALUE1] =  HiL_mcu_commands_binary_action(
 800b0da:	781a      	ldrb	r2, [r3, #0]
													recieved_data[CONTROLLER_ACTION1]);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	3302      	adds	r3, #2
			controller_reply[CONTROLLER_VALUE1] =  HiL_mcu_commands_binary_action(
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	4610      	mov	r0, r2
 800b0e6:	f000 f8db 	bl	800b2a0 <HiL_mcu_commands_binary_action>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	4b1f      	ldr	r3, [pc, #124]	; (800b16c <HiL_controller_read_message+0xd4>)
 800b0f0:	701a      	strb	r2, [r3, #0]
			
			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800b0f2:	4b1e      	ldr	r3, [pc, #120]	; (800b16c <HiL_controller_read_message+0xd4>)
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	4a1d      	ldr	r2, [pc, #116]	; (800b16c <HiL_controller_read_message+0xd4>)
 800b0f8:	7852      	ldrb	r2, [r2, #1]
 800b0fa:	4611      	mov	r1, r2
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f000 f895 	bl	800b22c <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);			
			break;
 800b102:	e02e      	b.n	800b162 <HiL_controller_read_message+0xca>

		case CONTROLLER_REQUEST_POTENTIOMETER:
	

			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_potentiometer_emulator(
													recieved_data[CONTROLLER_ACTION1],
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	3302      	adds	r3, #2
			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_potentiometer_emulator(
 800b108:	781a      	ldrb	r2, [r3, #0]
													recieved_data[CONTROLLER_ACTION2]);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	3303      	adds	r3, #3
			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_potentiometer_emulator(
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	4619      	mov	r1, r3
 800b112:	4610      	mov	r0, r2
 800b114:	f000 f8a0 	bl	800b258 <HiL_mcu_commands_potentiometer_emulator>
 800b118:	4603      	mov	r3, r0
 800b11a:	461a      	mov	r2, r3
 800b11c:	4b13      	ldr	r3, [pc, #76]	; (800b16c <HiL_controller_read_message+0xd4>)
 800b11e:	701a      	strb	r2, [r3, #0]

			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800b120:	4b12      	ldr	r3, [pc, #72]	; (800b16c <HiL_controller_read_message+0xd4>)
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	4a11      	ldr	r2, [pc, #68]	; (800b16c <HiL_controller_read_message+0xd4>)
 800b126:	7852      	ldrb	r2, [r2, #1]
 800b128:	4611      	mov	r1, r2
 800b12a:	4618      	mov	r0, r3
 800b12c:	f000 f87e 	bl	800b22c <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);

			break;
 800b130:	e017      	b.n	800b162 <HiL_controller_read_message+0xca>
			

		case CONTROLLER_REQUEST_SHT20:
			
			controller_reply[CONTROLLER_VALUE1] = CONTROLLER_ERROR_NO_SUPPORT;
 800b132:	4b0e      	ldr	r3, [pc, #56]	; (800b16c <HiL_controller_read_message+0xd4>)
 800b134:	2202      	movs	r2, #2
 800b136:	701a      	strb	r2, [r3, #0]

			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800b138:	4b0c      	ldr	r3, [pc, #48]	; (800b16c <HiL_controller_read_message+0xd4>)
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	4a0b      	ldr	r2, [pc, #44]	; (800b16c <HiL_controller_read_message+0xd4>)
 800b13e:	7852      	ldrb	r2, [r2, #1]
 800b140:	4611      	mov	r1, r2
 800b142:	4618      	mov	r0, r3
 800b144:	f000 f872 	bl	800b22c <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);
			
			break;
 800b148:	e00b      	b.n	800b162 <HiL_controller_read_message+0xca>


		default: 

			// Reply with error
			controller_reply[CONTROLLER_VALUE1] = CONTROLLER_ERROR_UNSPECIFIED;
 800b14a:	4b08      	ldr	r3, [pc, #32]	; (800b16c <HiL_controller_read_message+0xd4>)
 800b14c:	2201      	movs	r2, #1
 800b14e:	701a      	strb	r2, [r3, #0]

			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800b150:	4b06      	ldr	r3, [pc, #24]	; (800b16c <HiL_controller_read_message+0xd4>)
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	4a05      	ldr	r2, [pc, #20]	; (800b16c <HiL_controller_read_message+0xd4>)
 800b156:	7852      	ldrb	r2, [r2, #1]
 800b158:	4611      	mov	r1, r2
 800b15a:	4618      	mov	r0, r3
 800b15c:	f000 f866 	bl	800b22c <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);
			
	}	
}
 800b160:	bf00      	nop
 800b162:	bf00      	nop
 800b164:	3708      	adds	r7, #8
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	20000884 	.word	0x20000884

0800b170 <HiL_controller_send_message>:

void HiL_controller_send_message()
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b082      	sub	sp, #8
 800b174:	af00      	add	r7, sp, #0
	
	switch(recieved_data[CONTROLLER_GET_GROUP])
 800b176:	4b2b      	ldr	r3, [pc, #172]	; (800b224 <HiL_controller_send_message+0xb4>)
 800b178:	785b      	ldrb	r3, [r3, #1]
 800b17a:	2b03      	cmp	r3, #3
 800b17c:	d027      	beq.n	800b1ce <HiL_controller_send_message+0x5e>
 800b17e:	2b03      	cmp	r3, #3
 800b180:	dc43      	bgt.n	800b20a <HiL_controller_send_message+0x9a>
 800b182:	2b00      	cmp	r3, #0
 800b184:	d002      	beq.n	800b18c <HiL_controller_send_message+0x1c>
 800b186:	2b01      	cmp	r3, #1
 800b188:	d012      	beq.n	800b1b0 <HiL_controller_send_message+0x40>
 800b18a:	e03e      	b.n	800b20a <HiL_controller_send_message+0x9a>
	{
		
		case CONTROLLER_GET_GROUP_BINARY:
			
			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_binary_status(recieved_data[CONTROLLER_GET_OBJECT]);
 800b18c:	4b25      	ldr	r3, [pc, #148]	; (800b224 <HiL_controller_send_message+0xb4>)
 800b18e:	789b      	ldrb	r3, [r3, #2]
 800b190:	4618      	mov	r0, r3
 800b192:	f000 f92f 	bl	800b3f4 <HiL_mcu_commands_binary_status>
 800b196:	4603      	mov	r3, r0
 800b198:	461a      	mov	r2, r3
 800b19a:	4b23      	ldr	r3, [pc, #140]	; (800b228 <HiL_controller_send_message+0xb8>)
 800b19c:	701a      	strb	r2, [r3, #0]
			
			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800b19e:	4b22      	ldr	r3, [pc, #136]	; (800b228 <HiL_controller_send_message+0xb8>)
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	4a21      	ldr	r2, [pc, #132]	; (800b228 <HiL_controller_send_message+0xb8>)
 800b1a4:	7852      	ldrb	r2, [r2, #1]
 800b1a6:	4611      	mov	r1, r2
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f000 f83f 	bl	800b22c <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);
			break;
 800b1ae:	e034      	b.n	800b21a <HiL_controller_send_message+0xaa>

		case CONTROLLER_GET_GROUP_PWM:


			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_PWM_measure();
 800b1b0:	f000 f9aa 	bl	800b508 <HiL_mcu_commands_PWM_measure>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	4b1b      	ldr	r3, [pc, #108]	; (800b228 <HiL_controller_send_message+0xb8>)
 800b1ba:	701a      	strb	r2, [r3, #0]

			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800b1bc:	4b1a      	ldr	r3, [pc, #104]	; (800b228 <HiL_controller_send_message+0xb8>)
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	4a19      	ldr	r2, [pc, #100]	; (800b228 <HiL_controller_send_message+0xb8>)
 800b1c2:	7852      	ldrb	r2, [r2, #1]
 800b1c4:	4611      	mov	r1, r2
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f000 f830 	bl	800b22c <HiL_gateway_transmit_message>
										 controller_reply[CONTROLLER_VALUE2]);

			break;
 800b1cc:	e025      	b.n	800b21a <HiL_controller_send_message+0xaa>

		case CONTROLLER_GET_GROUP_DATA_STREAMS:

			if (recieved_data[CONTROLLER_GET_OBJECT] == DATA_STREAM_OBJECTS_UART)
 800b1ce:	4b15      	ldr	r3, [pc, #84]	; (800b224 <HiL_controller_send_message+0xb4>)
 800b1d0:	789b      	ldrb	r3, [r3, #2]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d119      	bne.n	800b20a <HiL_controller_send_message+0x9a>
			{

				uint16_t function_return = HiL_mcu_commands_UART_handler(recieved_data[CONTROLLER_GET_ACTION]);
 800b1d6:	4b13      	ldr	r3, [pc, #76]	; (800b224 <HiL_controller_send_message+0xb4>)
 800b1d8:	78db      	ldrb	r3, [r3, #3]
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f000 f9b2 	bl	800b544 <HiL_mcu_commands_UART_handler>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	80fb      	strh	r3, [r7, #6]

				controller_reply[CONTROLLER_VALUE1] =  function_return       & 0xff;
 800b1e4:	88fb      	ldrh	r3, [r7, #6]
 800b1e6:	b2da      	uxtb	r2, r3
 800b1e8:	4b0f      	ldr	r3, [pc, #60]	; (800b228 <HiL_controller_send_message+0xb8>)
 800b1ea:	701a      	strb	r2, [r3, #0]
				controller_reply[CONTROLLER_VALUE2] = (function_return >> 8) & 0xff;
 800b1ec:	88fb      	ldrh	r3, [r7, #6]
 800b1ee:	0a1b      	lsrs	r3, r3, #8
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	b2da      	uxtb	r2, r3
 800b1f4:	4b0c      	ldr	r3, [pc, #48]	; (800b228 <HiL_controller_send_message+0xb8>)
 800b1f6:	705a      	strb	r2, [r3, #1]

				HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800b1f8:	4b0b      	ldr	r3, [pc, #44]	; (800b228 <HiL_controller_send_message+0xb8>)
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	4a0a      	ldr	r2, [pc, #40]	; (800b228 <HiL_controller_send_message+0xb8>)
 800b1fe:	7852      	ldrb	r2, [r2, #1]
 800b200:	4611      	mov	r1, r2
 800b202:	4618      	mov	r0, r3
 800b204:	f000 f812 	bl	800b22c <HiL_gateway_transmit_message>
										     controller_reply[CONTROLLER_VALUE2]);

				break;
 800b208:	e007      	b.n	800b21a <HiL_controller_send_message+0xaa>



		default:
			// Reply with error
			controller_reply[CONTROLLER_VALUE1] = CONTROLLER_ERROR_NO_SUPPORT;
 800b20a:	4b07      	ldr	r3, [pc, #28]	; (800b228 <HiL_controller_send_message+0xb8>)
 800b20c:	2202      	movs	r2, #2
 800b20e:	701a      	strb	r2, [r3, #0]
			HiL_gateway_transmit_message(0,32);
 800b210:	2120      	movs	r1, #32
 800b212:	2000      	movs	r0, #0
 800b214:	f000 f80a 	bl	800b22c <HiL_gateway_transmit_message>
	}
}
 800b218:	bf00      	nop
 800b21a:	bf00      	nop
 800b21c:	3708      	adds	r7, #8
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	20000880 	.word	0x20000880
 800b228:	20000884 	.word	0x20000884

0800b22c <HiL_gateway_transmit_message>:


#include "HiL_gateway.h"

void HiL_gateway_transmit_message(uint8_t value1, uint8_t value2)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b084      	sub	sp, #16
 800b230:	af00      	add	r7, sp, #0
 800b232:	4603      	mov	r3, r0
 800b234:	460a      	mov	r2, r1
 800b236:	71fb      	strb	r3, [r7, #7]
 800b238:	4613      	mov	r3, r2
 800b23a:	71bb      	strb	r3, [r7, #6]
	uint8_t values[2];
	values[0] = value1;
 800b23c:	79fb      	ldrb	r3, [r7, #7]
 800b23e:	733b      	strb	r3, [r7, #12]
	values[1] = value2;
 800b240:	79bb      	ldrb	r3, [r7, #6]
 800b242:	737b      	strb	r3, [r7, #13]

	CDC_Transmit_FS( /*(uint8_t *)*/ values, sizeof(values));		// Transmit what's been recieved in our msg queue
 800b244:	f107 030c 	add.w	r3, r7, #12
 800b248:	2102      	movs	r1, #2
 800b24a:	4618      	mov	r0, r3
 800b24c:	f005 ff82 	bl	8011154 <CDC_Transmit_FS>
}
 800b250:	bf00      	nop
 800b252:	3710      	adds	r7, #16
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <HiL_mcu_commands_potentiometer_emulator>:
uint8_t uart_main_buffer_pointer = 0;



uint8_t HiL_mcu_commands_potentiometer_emulator(uint8_t value1, uint8_t value2)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b084      	sub	sp, #16
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	4603      	mov	r3, r0
 800b260:	460a      	mov	r2, r1
 800b262:	71fb      	strb	r3, [r7, #7]
 800b264:	4613      	mov	r3, r2
 800b266:	71bb      	strb	r3, [r7, #6]

	uint16_t desired_output_voltage = value1 + (value2 << 8);
 800b268:	79fb      	ldrb	r3, [r7, #7]
 800b26a:	b29a      	uxth	r2, r3
 800b26c:	79bb      	ldrb	r3, [r7, #6]
 800b26e:	b29b      	uxth	r3, r3
 800b270:	021b      	lsls	r3, r3, #8
 800b272:	b29b      	uxth	r3, r3
 800b274:	4413      	add	r3, r2
 800b276:	81fb      	strh	r3, [r7, #14]

	if( (desired_output_voltage < 0) || (desired_output_voltage > 4095) ){
 800b278:	89fb      	ldrh	r3, [r7, #14]
 800b27a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b27e:	d301      	bcc.n	800b284 <HiL_mcu_commands_potentiometer_emulator+0x2c>
		return 3; //error: out of bounds
 800b280:	2303      	movs	r3, #3
 800b282:	e006      	b.n	800b292 <HiL_mcu_commands_potentiometer_emulator+0x3a>
	}

	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, desired_output_voltage);
 800b284:	89fb      	ldrh	r3, [r7, #14]
 800b286:	2200      	movs	r2, #0
 800b288:	2100      	movs	r1, #0
 800b28a:	4804      	ldr	r0, [pc, #16]	; (800b29c <HiL_mcu_commands_potentiometer_emulator+0x44>)
 800b28c:	f7f6 ff00 	bl	8002090 <HAL_DAC_SetValue>
	return 0;
 800b290:	2300      	movs	r3, #0
}
 800b292:	4618      	mov	r0, r3
 800b294:	3710      	adds	r7, #16
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	bf00      	nop
 800b29c:	200003b0 	.word	0x200003b0

0800b2a0 <HiL_mcu_commands_binary_action>:


uint8_t HiL_mcu_commands_binary_action (uint8_t binary_object, uint8_t desired_state)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	460a      	mov	r2, r1
 800b2aa:	71fb      	strb	r3, [r7, #7]
 800b2ac:	4613      	mov	r3, r2
 800b2ae:	71bb      	strb	r3, [r7, #6]

	GPIO_PinState pin_state;
	
	if (desired_state == ON)
 800b2b0:	79bb      	ldrb	r3, [r7, #6]
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	d102      	bne.n	800b2bc <HiL_mcu_commands_binary_action+0x1c>
	{
		pin_state = GPIO_PIN_SET;
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	73fb      	strb	r3, [r7, #15]
 800b2ba:	e007      	b.n	800b2cc <HiL_mcu_commands_binary_action+0x2c>
	}
	else if (desired_state == OFF)
 800b2bc:	79bb      	ldrb	r3, [r7, #6]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d102      	bne.n	800b2c8 <HiL_mcu_commands_binary_action+0x28>
	{
		pin_state = GPIO_PIN_RESET;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	73fb      	strb	r3, [r7, #15]
 800b2c6:	e001      	b.n	800b2cc <HiL_mcu_commands_binary_action+0x2c>
	}
	else
	{
		return CONTROLLER_ERROR_BAD_REQUEST; // Invalid state indication
 800b2c8:	2303      	movs	r3, #3
 800b2ca:	e082      	b.n	800b3d2 <HiL_mcu_commands_binary_action+0x132>
	}

	switch (binary_object)
 800b2cc:	79fb      	ldrb	r3, [r7, #7]
 800b2ce:	2b0c      	cmp	r3, #12
 800b2d0:	d87c      	bhi.n	800b3cc <HiL_mcu_commands_binary_action+0x12c>
 800b2d2:	a201      	add	r2, pc, #4	; (adr r2, 800b2d8 <HiL_mcu_commands_binary_action+0x38>)
 800b2d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2d8:	0800b30d 	.word	0x0800b30d
 800b2dc:	0800b31d 	.word	0x0800b31d
 800b2e0:	0800b32d 	.word	0x0800b32d
 800b2e4:	0800b33b 	.word	0x0800b33b
 800b2e8:	0800b34b 	.word	0x0800b34b
 800b2ec:	0800b359 	.word	0x0800b359
 800b2f0:	0800b367 	.word	0x0800b367
 800b2f4:	0800b375 	.word	0x0800b375
 800b2f8:	0800b383 	.word	0x0800b383
 800b2fc:	0800b391 	.word	0x0800b391
 800b300:	0800b3a1 	.word	0x0800b3a1
 800b304:	0800b3af 	.word	0x0800b3af
 800b308:	0800b3bf 	.word	0x0800b3bf
	{

		case HiL_SW5:
			HAL_GPIO_WritePin(HiL_SW5_GPIO_Port, HiL_SW5_Pin, pin_state);
 800b30c:	7bfb      	ldrb	r3, [r7, #15]
 800b30e:	461a      	mov	r2, r3
 800b310:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b314:	4831      	ldr	r0, [pc, #196]	; (800b3dc <HiL_mcu_commands_binary_action+0x13c>)
 800b316:	f7f8 f837 	bl	8003388 <HAL_GPIO_WritePin>
			break;
 800b31a:	e059      	b.n	800b3d0 <HiL_mcu_commands_binary_action+0x130>

		case HiL_SW6:
			HAL_GPIO_WritePin(HiL_SW6_GPIO_Port, HiL_SW6_Pin, pin_state);
 800b31c:	7bfb      	ldrb	r3, [r7, #15]
 800b31e:	461a      	mov	r2, r3
 800b320:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b324:	482d      	ldr	r0, [pc, #180]	; (800b3dc <HiL_mcu_commands_binary_action+0x13c>)
 800b326:	f7f8 f82f 	bl	8003388 <HAL_GPIO_WritePin>
			break;
 800b32a:	e051      	b.n	800b3d0 <HiL_mcu_commands_binary_action+0x130>

		case HiL_SW7:
			HAL_GPIO_WritePin(HiL_SW7_GPIO_Port, HiL_SW7_Pin, pin_state);
 800b32c:	7bfb      	ldrb	r3, [r7, #15]
 800b32e:	461a      	mov	r2, r3
 800b330:	2110      	movs	r1, #16
 800b332:	482a      	ldr	r0, [pc, #168]	; (800b3dc <HiL_mcu_commands_binary_action+0x13c>)
 800b334:	f7f8 f828 	bl	8003388 <HAL_GPIO_WritePin>
			break;
 800b338:	e04a      	b.n	800b3d0 <HiL_mcu_commands_binary_action+0x130>

		case HiL_SW8:
			HAL_GPIO_WritePin(HiL_SW8_GPIO_Port, HiL_SW8_Pin, pin_state);
 800b33a:	7bfb      	ldrb	r3, [r7, #15]
 800b33c:	461a      	mov	r2, r3
 800b33e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b342:	4826      	ldr	r0, [pc, #152]	; (800b3dc <HiL_mcu_commands_binary_action+0x13c>)
 800b344:	f7f8 f820 	bl	8003388 <HAL_GPIO_WritePin>
			break;
 800b348:	e042      	b.n	800b3d0 <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_A:
			HAL_GPIO_WritePin(HiL_button3_A_GPIO_Port, HiL_button3_A_Pin, pin_state);
 800b34a:	7bfb      	ldrb	r3, [r7, #15]
 800b34c:	461a      	mov	r2, r3
 800b34e:	2108      	movs	r1, #8
 800b350:	4823      	ldr	r0, [pc, #140]	; (800b3e0 <HiL_mcu_commands_binary_action+0x140>)
 800b352:	f7f8 f819 	bl	8003388 <HAL_GPIO_WritePin>
			break;
 800b356:	e03b      	b.n	800b3d0 <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_B:
			HAL_GPIO_WritePin(HiL_button3_B_GPIO_Port, HiL_button3_B_Pin, pin_state);
 800b358:	7bfb      	ldrb	r3, [r7, #15]
 800b35a:	461a      	mov	r2, r3
 800b35c:	2104      	movs	r1, #4
 800b35e:	4820      	ldr	r0, [pc, #128]	; (800b3e0 <HiL_mcu_commands_binary_action+0x140>)
 800b360:	f7f8 f812 	bl	8003388 <HAL_GPIO_WritePin>
			break;
 800b364:	e034      	b.n	800b3d0 <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_C:
			HAL_GPIO_WritePin(HiL_button3_C_GPIO_Port, HiL_button3_C_Pin, pin_state);
 800b366:	7bfb      	ldrb	r3, [r7, #15]
 800b368:	461a      	mov	r2, r3
 800b36a:	2110      	movs	r1, #16
 800b36c:	481d      	ldr	r0, [pc, #116]	; (800b3e4 <HiL_mcu_commands_binary_action+0x144>)
 800b36e:	f7f8 f80b 	bl	8003388 <HAL_GPIO_WritePin>
			break;
 800b372:	e02d      	b.n	800b3d0 <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_D:
			HAL_GPIO_WritePin(HiL_button3_D_GPIO_Port, HiL_button3_D_Pin, pin_state);
 800b374:	7bfb      	ldrb	r3, [r7, #15]
 800b376:	461a      	mov	r2, r3
 800b378:	2120      	movs	r1, #32
 800b37a:	481a      	ldr	r0, [pc, #104]	; (800b3e4 <HiL_mcu_commands_binary_action+0x144>)
 800b37c:	f7f8 f804 	bl	8003388 <HAL_GPIO_WritePin>
			break;
 800b380:	e026      	b.n	800b3d0 <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_center:
			HAL_GPIO_WritePin(HiL_button3_center_GPIO_Port, HiL_button3_center_Pin, pin_state);
 800b382:	7bfb      	ldrb	r3, [r7, #15]
 800b384:	461a      	mov	r2, r3
 800b386:	2140      	movs	r1, #64	; 0x40
 800b388:	4816      	ldr	r0, [pc, #88]	; (800b3e4 <HiL_mcu_commands_binary_action+0x144>)
 800b38a:	f7f7 fffd 	bl	8003388 <HAL_GPIO_WritePin>
			break;
 800b38e:	e01f      	b.n	800b3d0 <HiL_mcu_commands_binary_action+0x130>

		case HiL_TL1_Car:
			HAL_GPIO_WritePin(HiL_TL1_Car_GPIO_Port, HiL_TL1_Car_Pin, pin_state);
 800b390:	7bfb      	ldrb	r3, [r7, #15]
 800b392:	461a      	mov	r2, r3
 800b394:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b398:	4813      	ldr	r0, [pc, #76]	; (800b3e8 <HiL_mcu_commands_binary_action+0x148>)
 800b39a:	f7f7 fff5 	bl	8003388 <HAL_GPIO_WritePin>
			break;
 800b39e:	e017      	b.n	800b3d0 <HiL_mcu_commands_binary_action+0x130>

		case HiL_TL2_Car:
			HAL_GPIO_WritePin(HiL_TL2_Car_GPIO_Port, HiL_TL2_Car_Pin, pin_state);
 800b3a0:	7bfb      	ldrb	r3, [r7, #15]
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	2180      	movs	r1, #128	; 0x80
 800b3a6:	4811      	ldr	r0, [pc, #68]	; (800b3ec <HiL_mcu_commands_binary_action+0x14c>)
 800b3a8:	f7f7 ffee 	bl	8003388 <HAL_GPIO_WritePin>
			break;
 800b3ac:	e010      	b.n	800b3d0 <HiL_mcu_commands_binary_action+0x130>

		case HiL_TL3_Car:
			HAL_GPIO_WritePin(HiL_TL3_Car_GPIO_Port, HiL_TL3_Car_Pin, pin_state);
 800b3ae:	7bfb      	ldrb	r3, [r7, #15]
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b3b6:	480e      	ldr	r0, [pc, #56]	; (800b3f0 <HiL_mcu_commands_binary_action+0x150>)
 800b3b8:	f7f7 ffe6 	bl	8003388 <HAL_GPIO_WritePin>
			break;
 800b3bc:	e008      	b.n	800b3d0 <HiL_mcu_commands_binary_action+0x130>

		case HiL_TL4_Car:
			HAL_GPIO_WritePin(HiL_TL4_Car_GPIO_Port, HiL_TL4_Car_Pin, pin_state);
 800b3be:	7bfb      	ldrb	r3, [r7, #15]
 800b3c0:	461a      	mov	r2, r3
 800b3c2:	2104      	movs	r1, #4
 800b3c4:	4807      	ldr	r0, [pc, #28]	; (800b3e4 <HiL_mcu_commands_binary_action+0x144>)
 800b3c6:	f7f7 ffdf 	bl	8003388 <HAL_GPIO_WritePin>
			break;
 800b3ca:	e001      	b.n	800b3d0 <HiL_mcu_commands_binary_action+0x130>

		default:
			return CONTROLLER_ERROR_NO_SUPPORT; // Switch not currently supported
 800b3cc:	2302      	movs	r3, #2
 800b3ce:	e000      	b.n	800b3d2 <HiL_mcu_commands_binary_action+0x132>

	}

	return 0; // Function returned successfully 
 800b3d0:	2300      	movs	r3, #0
	
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3710      	adds	r7, #16
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	40020400 	.word	0x40020400
 800b3e0:	40021800 	.word	0x40021800
 800b3e4:	40020c00 	.word	0x40020c00
 800b3e8:	40020800 	.word	0x40020800
 800b3ec:	40021400 	.word	0x40021400
 800b3f0:	40020000 	.word	0x40020000

0800b3f4 <HiL_mcu_commands_binary_status>:

uint8_t HiL_mcu_commands_binary_status (uint8_t binary_object)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b082      	sub	sp, #8
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	71fb      	strb	r3, [r7, #7]
	switch (binary_object)
 800b3fe:	79fb      	ldrb	r3, [r7, #7]
 800b400:	2b0c      	cmp	r3, #12
 800b402:	d870      	bhi.n	800b4e6 <HiL_mcu_commands_binary_status+0xf2>
 800b404:	a201      	add	r2, pc, #4	; (adr r2, 800b40c <HiL_mcu_commands_binary_status+0x18>)
 800b406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b40a:	bf00      	nop
 800b40c:	0800b441 	.word	0x0800b441
 800b410:	0800b44f 	.word	0x0800b44f
 800b414:	0800b45d 	.word	0x0800b45d
 800b418:	0800b469 	.word	0x0800b469
 800b41c:	0800b477 	.word	0x0800b477
 800b420:	0800b483 	.word	0x0800b483
 800b424:	0800b48f 	.word	0x0800b48f
 800b428:	0800b49b 	.word	0x0800b49b
 800b42c:	0800b4a7 	.word	0x0800b4a7
 800b430:	0800b4b3 	.word	0x0800b4b3
 800b434:	0800b4c1 	.word	0x0800b4c1
 800b438:	0800b4cd 	.word	0x0800b4cd
 800b43c:	0800b4db 	.word	0x0800b4db
	{

		case HiL_SW5:
			return HAL_GPIO_ReadPin(HiL_SW5_GPIO_Port, HiL_SW5_Pin);
 800b440:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b444:	482a      	ldr	r0, [pc, #168]	; (800b4f0 <HiL_mcu_commands_binary_status+0xfc>)
 800b446:	f7f7 ff87 	bl	8003358 <HAL_GPIO_ReadPin>
 800b44a:	4603      	mov	r3, r0
 800b44c:	e04c      	b.n	800b4e8 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_SW6:
			return HAL_GPIO_ReadPin(HiL_SW6_GPIO_Port, HiL_SW6_Pin);
 800b44e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b452:	4827      	ldr	r0, [pc, #156]	; (800b4f0 <HiL_mcu_commands_binary_status+0xfc>)
 800b454:	f7f7 ff80 	bl	8003358 <HAL_GPIO_ReadPin>
 800b458:	4603      	mov	r3, r0
 800b45a:	e045      	b.n	800b4e8 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_SW7:
			return HAL_GPIO_ReadPin(HiL_SW7_GPIO_Port, HiL_SW7_Pin);
 800b45c:	2110      	movs	r1, #16
 800b45e:	4824      	ldr	r0, [pc, #144]	; (800b4f0 <HiL_mcu_commands_binary_status+0xfc>)
 800b460:	f7f7 ff7a 	bl	8003358 <HAL_GPIO_ReadPin>
 800b464:	4603      	mov	r3, r0
 800b466:	e03f      	b.n	800b4e8 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_SW8:
			return HAL_GPIO_ReadPin(HiL_SW8_GPIO_Port, HiL_SW8_Pin);
 800b468:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b46c:	4820      	ldr	r0, [pc, #128]	; (800b4f0 <HiL_mcu_commands_binary_status+0xfc>)
 800b46e:	f7f7 ff73 	bl	8003358 <HAL_GPIO_ReadPin>
 800b472:	4603      	mov	r3, r0
 800b474:	e038      	b.n	800b4e8 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_A:
			return HAL_GPIO_ReadPin(HiL_button3_A_GPIO_Port, HiL_button3_A_Pin);
 800b476:	2108      	movs	r1, #8
 800b478:	481e      	ldr	r0, [pc, #120]	; (800b4f4 <HiL_mcu_commands_binary_status+0x100>)
 800b47a:	f7f7 ff6d 	bl	8003358 <HAL_GPIO_ReadPin>
 800b47e:	4603      	mov	r3, r0
 800b480:	e032      	b.n	800b4e8 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_B:
			return HAL_GPIO_ReadPin(HiL_button3_B_GPIO_Port, HiL_button3_B_Pin);
 800b482:	2104      	movs	r1, #4
 800b484:	481b      	ldr	r0, [pc, #108]	; (800b4f4 <HiL_mcu_commands_binary_status+0x100>)
 800b486:	f7f7 ff67 	bl	8003358 <HAL_GPIO_ReadPin>
 800b48a:	4603      	mov	r3, r0
 800b48c:	e02c      	b.n	800b4e8 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_C:
			return HAL_GPIO_ReadPin(HiL_button3_C_GPIO_Port, HiL_button3_C_Pin);
 800b48e:	2110      	movs	r1, #16
 800b490:	4819      	ldr	r0, [pc, #100]	; (800b4f8 <HiL_mcu_commands_binary_status+0x104>)
 800b492:	f7f7 ff61 	bl	8003358 <HAL_GPIO_ReadPin>
 800b496:	4603      	mov	r3, r0
 800b498:	e026      	b.n	800b4e8 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_D:
			return HAL_GPIO_ReadPin(HiL_button3_D_GPIO_Port, HiL_button3_D_Pin);
 800b49a:	2120      	movs	r1, #32
 800b49c:	4816      	ldr	r0, [pc, #88]	; (800b4f8 <HiL_mcu_commands_binary_status+0x104>)
 800b49e:	f7f7 ff5b 	bl	8003358 <HAL_GPIO_ReadPin>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	e020      	b.n	800b4e8 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_center:
			return HAL_GPIO_ReadPin(HiL_button3_center_GPIO_Port, HiL_button3_center_Pin);
 800b4a6:	2140      	movs	r1, #64	; 0x40
 800b4a8:	4813      	ldr	r0, [pc, #76]	; (800b4f8 <HiL_mcu_commands_binary_status+0x104>)
 800b4aa:	f7f7 ff55 	bl	8003358 <HAL_GPIO_ReadPin>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	e01a      	b.n	800b4e8 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_TL1_Car:
			return HAL_GPIO_ReadPin(HiL_TL1_Car_GPIO_Port, HiL_TL1_Car_Pin);
 800b4b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b4b6:	4811      	ldr	r0, [pc, #68]	; (800b4fc <HiL_mcu_commands_binary_status+0x108>)
 800b4b8:	f7f7 ff4e 	bl	8003358 <HAL_GPIO_ReadPin>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	e013      	b.n	800b4e8 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_TL2_Car:
			return HAL_GPIO_ReadPin(HiL_TL2_Car_GPIO_Port, HiL_TL2_Car_Pin);
 800b4c0:	2180      	movs	r1, #128	; 0x80
 800b4c2:	480f      	ldr	r0, [pc, #60]	; (800b500 <HiL_mcu_commands_binary_status+0x10c>)
 800b4c4:	f7f7 ff48 	bl	8003358 <HAL_GPIO_ReadPin>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	e00d      	b.n	800b4e8 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_TL3_Car:
			return HAL_GPIO_ReadPin(HiL_TL3_Car_GPIO_Port, HiL_TL3_Car_Pin);
 800b4cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b4d0:	480c      	ldr	r0, [pc, #48]	; (800b504 <HiL_mcu_commands_binary_status+0x110>)
 800b4d2:	f7f7 ff41 	bl	8003358 <HAL_GPIO_ReadPin>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	e006      	b.n	800b4e8 <HiL_mcu_commands_binary_status+0xf4>

		case HiL_TL4_Car:
			return HAL_GPIO_ReadPin(HiL_TL4_Car_GPIO_Port, HiL_TL4_Car_Pin);
 800b4da:	2104      	movs	r1, #4
 800b4dc:	4806      	ldr	r0, [pc, #24]	; (800b4f8 <HiL_mcu_commands_binary_status+0x104>)
 800b4de:	f7f7 ff3b 	bl	8003358 <HAL_GPIO_ReadPin>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	e000      	b.n	800b4e8 <HiL_mcu_commands_binary_status+0xf4>

		default:
			return CONTROLLER_ERROR_NO_SUPPORT; // Switch not currently supported
 800b4e6:	2302      	movs	r3, #2

	}
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3708      	adds	r7, #8
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}
 800b4f0:	40020400 	.word	0x40020400
 800b4f4:	40021800 	.word	0x40021800
 800b4f8:	40020c00 	.word	0x40020c00
 800b4fc:	40020800 	.word	0x40020800
 800b500:	40021400 	.word	0x40021400
 800b504:	40020000 	.word	0x40020000

0800b508 <HiL_mcu_commands_PWM_measure>:

uint8_t HiL_mcu_commands_PWM_measure ()
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	af00      	add	r7, sp, #0
													// Start timers and interrupts
		HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); // Primary channel - rising edge - rinse and repeat
 800b50c:	2100      	movs	r1, #0
 800b50e:	480b      	ldr	r0, [pc, #44]	; (800b53c <HiL_mcu_commands_PWM_measure+0x34>)
 800b510:	f7fb fdbc 	bl	800708c <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);    // Secondary channel - falling edge - stop second counter
 800b514:	2104      	movs	r1, #4
 800b516:	4809      	ldr	r0, [pc, #36]	; (800b53c <HiL_mcu_commands_PWM_measure+0x34>)
 800b518:	f7fb fc42 	bl	8006da0 <HAL_TIM_IC_Start>

		osDelay(1);				//	Wait for  pwm-period to complete. Smallest tick time is currently 1 millisecond. PWM freq is 8 kHz, so this is slow
 800b51c:	2001      	movs	r0, #1
 800b51e:	f002 f943 	bl	800d7a8 <osDelay>

												   // Stop timers and interrupts
		HAL_TIM_IC_Stop_IT(&htim1, TIM_CHANNEL_1); // Primary channel - rising edge - rinse and repeat
 800b522:	2100      	movs	r1, #0
 800b524:	4805      	ldr	r0, [pc, #20]	; (800b53c <HiL_mcu_commands_PWM_measure+0x34>)
 800b526:	f7fb ff01 	bl	800732c <HAL_TIM_IC_Stop_IT>
		HAL_TIM_IC_Stop(&htim1, TIM_CHANNEL_2);    // Secondary channel - falling edge - stop second counter
 800b52a:	2104      	movs	r1, #4
 800b52c:	4803      	ldr	r0, [pc, #12]	; (800b53c <HiL_mcu_commands_PWM_measure+0x34>)
 800b52e:	f7fb fd3b 	bl	8006fa8 <HAL_TIM_IC_Stop>

		return Duty;
 800b532:	4b03      	ldr	r3, [pc, #12]	; (800b540 <HiL_mcu_commands_PWM_measure+0x38>)
 800b534:	781b      	ldrb	r3, [r3, #0]
}
 800b536:	4618      	mov	r0, r3
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	200005f0 	.word	0x200005f0
 800b540:	2000087c 	.word	0x2000087c

0800b544 <HiL_mcu_commands_UART_handler>:


uint16_t HiL_mcu_commands_UART_handler (uint8_t controller_get_action)
{
 800b544:	b480      	push	{r7}
 800b546:	b085      	sub	sp, #20
 800b548:	af00      	add	r7, sp, #0
 800b54a:	4603      	mov	r3, r0
 800b54c:	71fb      	strb	r3, [r7, #7]
	if (controller_get_action == 0)
 800b54e:	79fb      	ldrb	r3, [r7, #7]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d104      	bne.n	800b55e <HiL_mcu_commands_UART_handler+0x1a>
	{
		uart_main_buffer_pointer = 0;
 800b554:	4b10      	ldr	r3, [pc, #64]	; (800b598 <HiL_mcu_commands_UART_handler+0x54>)
 800b556:	2200      	movs	r2, #0
 800b558:	701a      	strb	r2, [r3, #0]
		return 0<<12; // transaction status: all good
 800b55a:	2300      	movs	r3, #0
 800b55c:	e016      	b.n	800b58c <HiL_mcu_commands_UART_handler+0x48>
	}
	else
	{
		uint16_t return_value = uart_main_buffer[uart_main_buffer_pointer];
 800b55e:	4b0e      	ldr	r3, [pc, #56]	; (800b598 <HiL_mcu_commands_UART_handler+0x54>)
 800b560:	781b      	ldrb	r3, [r3, #0]
 800b562:	461a      	mov	r2, r3
 800b564:	4b0d      	ldr	r3, [pc, #52]	; (800b59c <HiL_mcu_commands_UART_handler+0x58>)
 800b566:	5c9b      	ldrb	r3, [r3, r2]
 800b568:	81fb      	strh	r3, [r7, #14]

		if (return_value != 0)
 800b56a:	89fb      	ldrh	r3, [r7, #14]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d00c      	beq.n	800b58a <HiL_mcu_commands_UART_handler+0x46>
		{
			uart_main_buffer_pointer = (uart_main_buffer_pointer < HIL_UART_BUFFER_SIZE ? uart_main_buffer_pointer+1 : 0);
 800b570:	4b09      	ldr	r3, [pc, #36]	; (800b598 <HiL_mcu_commands_UART_handler+0x54>)
 800b572:	781b      	ldrb	r3, [r3, #0]
 800b574:	b25b      	sxtb	r3, r3
 800b576:	2b00      	cmp	r3, #0
 800b578:	db04      	blt.n	800b584 <HiL_mcu_commands_UART_handler+0x40>
 800b57a:	4b07      	ldr	r3, [pc, #28]	; (800b598 <HiL_mcu_commands_UART_handler+0x54>)
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	3301      	adds	r3, #1
 800b580:	b2db      	uxtb	r3, r3
 800b582:	e000      	b.n	800b586 <HiL_mcu_commands_UART_handler+0x42>
 800b584:	2300      	movs	r3, #0
 800b586:	4a04      	ldr	r2, [pc, #16]	; (800b598 <HiL_mcu_commands_UART_handler+0x54>)
 800b588:	7013      	strb	r3, [r2, #0]
		}

		return return_value;
 800b58a:	89fb      	ldrh	r3, [r7, #14]
	}

}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3714      	adds	r7, #20
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr
 800b598:	20000886 	.word	0x20000886
 800b59c:	2000000c 	.word	0x2000000c

0800b5a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	460b      	mov	r3, r1
 800b5aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b5ac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b5b0:	f006 fac4 	bl	8011b3c <malloc>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d109      	bne.n	800b5d2 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	32b0      	adds	r2, #176	; 0xb0
 800b5c8:	2100      	movs	r1, #0
 800b5ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b5ce:	2302      	movs	r3, #2
 800b5d0:	e0d4      	b.n	800b77c <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b5d2:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b5d6:	2100      	movs	r1, #0
 800b5d8:	68f8      	ldr	r0, [r7, #12]
 800b5da:	f006 facd 	bl	8011b78 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	32b0      	adds	r2, #176	; 0xb0
 800b5e8:	68f9      	ldr	r1, [r7, #12]
 800b5ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	32b0      	adds	r2, #176	; 0xb0
 800b5f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	7c1b      	ldrb	r3, [r3, #16]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d138      	bne.n	800b67c <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b60a:	4b5e      	ldr	r3, [pc, #376]	; (800b784 <USBD_CDC_Init+0x1e4>)
 800b60c:	7819      	ldrb	r1, [r3, #0]
 800b60e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b612:	2202      	movs	r2, #2
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f006 f8c2 	bl	801179e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b61a:	4b5a      	ldr	r3, [pc, #360]	; (800b784 <USBD_CDC_Init+0x1e4>)
 800b61c:	781b      	ldrb	r3, [r3, #0]
 800b61e:	f003 020f 	and.w	r2, r3, #15
 800b622:	6879      	ldr	r1, [r7, #4]
 800b624:	4613      	mov	r3, r2
 800b626:	009b      	lsls	r3, r3, #2
 800b628:	4413      	add	r3, r2
 800b62a:	009b      	lsls	r3, r3, #2
 800b62c:	440b      	add	r3, r1
 800b62e:	3324      	adds	r3, #36	; 0x24
 800b630:	2201      	movs	r2, #1
 800b632:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b634:	4b54      	ldr	r3, [pc, #336]	; (800b788 <USBD_CDC_Init+0x1e8>)
 800b636:	7819      	ldrb	r1, [r3, #0]
 800b638:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b63c:	2202      	movs	r2, #2
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f006 f8ad 	bl	801179e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b644:	4b50      	ldr	r3, [pc, #320]	; (800b788 <USBD_CDC_Init+0x1e8>)
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	f003 020f 	and.w	r2, r3, #15
 800b64c:	6879      	ldr	r1, [r7, #4]
 800b64e:	4613      	mov	r3, r2
 800b650:	009b      	lsls	r3, r3, #2
 800b652:	4413      	add	r3, r2
 800b654:	009b      	lsls	r3, r3, #2
 800b656:	440b      	add	r3, r1
 800b658:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b65c:	2201      	movs	r2, #1
 800b65e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b660:	4b4a      	ldr	r3, [pc, #296]	; (800b78c <USBD_CDC_Init+0x1ec>)
 800b662:	781b      	ldrb	r3, [r3, #0]
 800b664:	f003 020f 	and.w	r2, r3, #15
 800b668:	6879      	ldr	r1, [r7, #4]
 800b66a:	4613      	mov	r3, r2
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	4413      	add	r3, r2
 800b670:	009b      	lsls	r3, r3, #2
 800b672:	440b      	add	r3, r1
 800b674:	3326      	adds	r3, #38	; 0x26
 800b676:	2210      	movs	r2, #16
 800b678:	801a      	strh	r2, [r3, #0]
 800b67a:	e035      	b.n	800b6e8 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b67c:	4b41      	ldr	r3, [pc, #260]	; (800b784 <USBD_CDC_Init+0x1e4>)
 800b67e:	7819      	ldrb	r1, [r3, #0]
 800b680:	2340      	movs	r3, #64	; 0x40
 800b682:	2202      	movs	r2, #2
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f006 f88a 	bl	801179e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b68a:	4b3e      	ldr	r3, [pc, #248]	; (800b784 <USBD_CDC_Init+0x1e4>)
 800b68c:	781b      	ldrb	r3, [r3, #0]
 800b68e:	f003 020f 	and.w	r2, r3, #15
 800b692:	6879      	ldr	r1, [r7, #4]
 800b694:	4613      	mov	r3, r2
 800b696:	009b      	lsls	r3, r3, #2
 800b698:	4413      	add	r3, r2
 800b69a:	009b      	lsls	r3, r3, #2
 800b69c:	440b      	add	r3, r1
 800b69e:	3324      	adds	r3, #36	; 0x24
 800b6a0:	2201      	movs	r2, #1
 800b6a2:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b6a4:	4b38      	ldr	r3, [pc, #224]	; (800b788 <USBD_CDC_Init+0x1e8>)
 800b6a6:	7819      	ldrb	r1, [r3, #0]
 800b6a8:	2340      	movs	r3, #64	; 0x40
 800b6aa:	2202      	movs	r2, #2
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f006 f876 	bl	801179e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b6b2:	4b35      	ldr	r3, [pc, #212]	; (800b788 <USBD_CDC_Init+0x1e8>)
 800b6b4:	781b      	ldrb	r3, [r3, #0]
 800b6b6:	f003 020f 	and.w	r2, r3, #15
 800b6ba:	6879      	ldr	r1, [r7, #4]
 800b6bc:	4613      	mov	r3, r2
 800b6be:	009b      	lsls	r3, r3, #2
 800b6c0:	4413      	add	r3, r2
 800b6c2:	009b      	lsls	r3, r3, #2
 800b6c4:	440b      	add	r3, r1
 800b6c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b6ce:	4b2f      	ldr	r3, [pc, #188]	; (800b78c <USBD_CDC_Init+0x1ec>)
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	f003 020f 	and.w	r2, r3, #15
 800b6d6:	6879      	ldr	r1, [r7, #4]
 800b6d8:	4613      	mov	r3, r2
 800b6da:	009b      	lsls	r3, r3, #2
 800b6dc:	4413      	add	r3, r2
 800b6de:	009b      	lsls	r3, r3, #2
 800b6e0:	440b      	add	r3, r1
 800b6e2:	3326      	adds	r3, #38	; 0x26
 800b6e4:	2210      	movs	r2, #16
 800b6e6:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b6e8:	4b28      	ldr	r3, [pc, #160]	; (800b78c <USBD_CDC_Init+0x1ec>)
 800b6ea:	7819      	ldrb	r1, [r3, #0]
 800b6ec:	2308      	movs	r3, #8
 800b6ee:	2203      	movs	r2, #3
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f006 f854 	bl	801179e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b6f6:	4b25      	ldr	r3, [pc, #148]	; (800b78c <USBD_CDC_Init+0x1ec>)
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	f003 020f 	and.w	r2, r3, #15
 800b6fe:	6879      	ldr	r1, [r7, #4]
 800b700:	4613      	mov	r3, r2
 800b702:	009b      	lsls	r3, r3, #2
 800b704:	4413      	add	r3, r2
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	440b      	add	r3, r1
 800b70a:	3324      	adds	r3, #36	; 0x24
 800b70c:	2201      	movs	r2, #1
 800b70e:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	2200      	movs	r2, #0
 800b714:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	33b0      	adds	r3, #176	; 0xb0
 800b722:	009b      	lsls	r3, r3, #2
 800b724:	4413      	add	r3, r2
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2200      	movs	r2, #0
 800b730:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2200      	movs	r2, #0
 800b738:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b742:	2b00      	cmp	r3, #0
 800b744:	d101      	bne.n	800b74a <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800b746:	2302      	movs	r3, #2
 800b748:	e018      	b.n	800b77c <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	7c1b      	ldrb	r3, [r3, #16]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d10a      	bne.n	800b768 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b752:	4b0d      	ldr	r3, [pc, #52]	; (800b788 <USBD_CDC_Init+0x1e8>)
 800b754:	7819      	ldrb	r1, [r3, #0]
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b75c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f006 f90b 	bl	801197c <USBD_LL_PrepareReceive>
 800b766:	e008      	b.n	800b77a <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b768:	4b07      	ldr	r3, [pc, #28]	; (800b788 <USBD_CDC_Init+0x1e8>)
 800b76a:	7819      	ldrb	r1, [r3, #0]
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b772:	2340      	movs	r3, #64	; 0x40
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f006 f901 	bl	801197c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b77a:	2300      	movs	r3, #0
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3710      	adds	r7, #16
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}
 800b784:	20000113 	.word	0x20000113
 800b788:	20000114 	.word	0x20000114
 800b78c:	20000115 	.word	0x20000115

0800b790 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b082      	sub	sp, #8
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
 800b798:	460b      	mov	r3, r1
 800b79a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b79c:	4b3a      	ldr	r3, [pc, #232]	; (800b888 <USBD_CDC_DeInit+0xf8>)
 800b79e:	781b      	ldrb	r3, [r3, #0]
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f006 f821 	bl	80117ea <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b7a8:	4b37      	ldr	r3, [pc, #220]	; (800b888 <USBD_CDC_DeInit+0xf8>)
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	f003 020f 	and.w	r2, r3, #15
 800b7b0:	6879      	ldr	r1, [r7, #4]
 800b7b2:	4613      	mov	r3, r2
 800b7b4:	009b      	lsls	r3, r3, #2
 800b7b6:	4413      	add	r3, r2
 800b7b8:	009b      	lsls	r3, r3, #2
 800b7ba:	440b      	add	r3, r1
 800b7bc:	3324      	adds	r3, #36	; 0x24
 800b7be:	2200      	movs	r2, #0
 800b7c0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b7c2:	4b32      	ldr	r3, [pc, #200]	; (800b88c <USBD_CDC_DeInit+0xfc>)
 800b7c4:	781b      	ldrb	r3, [r3, #0]
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f006 f80e 	bl	80117ea <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b7ce:	4b2f      	ldr	r3, [pc, #188]	; (800b88c <USBD_CDC_DeInit+0xfc>)
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	f003 020f 	and.w	r2, r3, #15
 800b7d6:	6879      	ldr	r1, [r7, #4]
 800b7d8:	4613      	mov	r3, r2
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	4413      	add	r3, r2
 800b7de:	009b      	lsls	r3, r3, #2
 800b7e0:	440b      	add	r3, r1
 800b7e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b7ea:	4b29      	ldr	r3, [pc, #164]	; (800b890 <USBD_CDC_DeInit+0x100>)
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f005 fffa 	bl	80117ea <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b7f6:	4b26      	ldr	r3, [pc, #152]	; (800b890 <USBD_CDC_DeInit+0x100>)
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	f003 020f 	and.w	r2, r3, #15
 800b7fe:	6879      	ldr	r1, [r7, #4]
 800b800:	4613      	mov	r3, r2
 800b802:	009b      	lsls	r3, r3, #2
 800b804:	4413      	add	r3, r2
 800b806:	009b      	lsls	r3, r3, #2
 800b808:	440b      	add	r3, r1
 800b80a:	3324      	adds	r3, #36	; 0x24
 800b80c:	2200      	movs	r2, #0
 800b80e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b810:	4b1f      	ldr	r3, [pc, #124]	; (800b890 <USBD_CDC_DeInit+0x100>)
 800b812:	781b      	ldrb	r3, [r3, #0]
 800b814:	f003 020f 	and.w	r2, r3, #15
 800b818:	6879      	ldr	r1, [r7, #4]
 800b81a:	4613      	mov	r3, r2
 800b81c:	009b      	lsls	r3, r3, #2
 800b81e:	4413      	add	r3, r2
 800b820:	009b      	lsls	r3, r3, #2
 800b822:	440b      	add	r3, r1
 800b824:	3326      	adds	r3, #38	; 0x26
 800b826:	2200      	movs	r2, #0
 800b828:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	32b0      	adds	r2, #176	; 0xb0
 800b834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d01f      	beq.n	800b87c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	33b0      	adds	r3, #176	; 0xb0
 800b846:	009b      	lsls	r3, r3, #2
 800b848:	4413      	add	r3, r2
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	32b0      	adds	r2, #176	; 0xb0
 800b85a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b85e:	4618      	mov	r0, r3
 800b860:	f006 f974 	bl	8011b4c <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	32b0      	adds	r2, #176	; 0xb0
 800b86e:	2100      	movs	r1, #0
 800b870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2200      	movs	r2, #0
 800b878:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b87c:	2300      	movs	r3, #0
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3708      	adds	r7, #8
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}
 800b886:	bf00      	nop
 800b888:	20000113 	.word	0x20000113
 800b88c:	20000114 	.word	0x20000114
 800b890:	20000115 	.word	0x20000115

0800b894 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b086      	sub	sp, #24
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	32b0      	adds	r2, #176	; 0xb0
 800b8a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d101      	bne.n	800b8c4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b8c0:	2303      	movs	r3, #3
 800b8c2:	e0bf      	b.n	800ba44 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d050      	beq.n	800b972 <USBD_CDC_Setup+0xde>
 800b8d0:	2b20      	cmp	r3, #32
 800b8d2:	f040 80af 	bne.w	800ba34 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	88db      	ldrh	r3, [r3, #6]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d03a      	beq.n	800b954 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	781b      	ldrb	r3, [r3, #0]
 800b8e2:	b25b      	sxtb	r3, r3
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	da1b      	bge.n	800b920 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b8ee:	687a      	ldr	r2, [r7, #4]
 800b8f0:	33b0      	adds	r3, #176	; 0xb0
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	4413      	add	r3, r2
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	689b      	ldr	r3, [r3, #8]
 800b8fa:	683a      	ldr	r2, [r7, #0]
 800b8fc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b8fe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b900:	683a      	ldr	r2, [r7, #0]
 800b902:	88d2      	ldrh	r2, [r2, #6]
 800b904:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	88db      	ldrh	r3, [r3, #6]
 800b90a:	2b07      	cmp	r3, #7
 800b90c:	bf28      	it	cs
 800b90e:	2307      	movcs	r3, #7
 800b910:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	89fa      	ldrh	r2, [r7, #14]
 800b916:	4619      	mov	r1, r3
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f001 fdad 	bl	800d478 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b91e:	e090      	b.n	800ba42 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	785a      	ldrb	r2, [r3, #1]
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	88db      	ldrh	r3, [r3, #6]
 800b92e:	2b3f      	cmp	r3, #63	; 0x3f
 800b930:	d803      	bhi.n	800b93a <USBD_CDC_Setup+0xa6>
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	88db      	ldrh	r3, [r3, #6]
 800b936:	b2da      	uxtb	r2, r3
 800b938:	e000      	b.n	800b93c <USBD_CDC_Setup+0xa8>
 800b93a:	2240      	movs	r2, #64	; 0x40
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b942:	6939      	ldr	r1, [r7, #16]
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b94a:	461a      	mov	r2, r3
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f001 fdbf 	bl	800d4d0 <USBD_CtlPrepareRx>
      break;
 800b952:	e076      	b.n	800ba42 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b95a:	687a      	ldr	r2, [r7, #4]
 800b95c:	33b0      	adds	r3, #176	; 0xb0
 800b95e:	009b      	lsls	r3, r3, #2
 800b960:	4413      	add	r3, r2
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	689b      	ldr	r3, [r3, #8]
 800b966:	683a      	ldr	r2, [r7, #0]
 800b968:	7850      	ldrb	r0, [r2, #1]
 800b96a:	2200      	movs	r2, #0
 800b96c:	6839      	ldr	r1, [r7, #0]
 800b96e:	4798      	blx	r3
      break;
 800b970:	e067      	b.n	800ba42 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	785b      	ldrb	r3, [r3, #1]
 800b976:	2b0b      	cmp	r3, #11
 800b978:	d851      	bhi.n	800ba1e <USBD_CDC_Setup+0x18a>
 800b97a:	a201      	add	r2, pc, #4	; (adr r2, 800b980 <USBD_CDC_Setup+0xec>)
 800b97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b980:	0800b9b1 	.word	0x0800b9b1
 800b984:	0800ba2d 	.word	0x0800ba2d
 800b988:	0800ba1f 	.word	0x0800ba1f
 800b98c:	0800ba1f 	.word	0x0800ba1f
 800b990:	0800ba1f 	.word	0x0800ba1f
 800b994:	0800ba1f 	.word	0x0800ba1f
 800b998:	0800ba1f 	.word	0x0800ba1f
 800b99c:	0800ba1f 	.word	0x0800ba1f
 800b9a0:	0800ba1f 	.word	0x0800ba1f
 800b9a4:	0800ba1f 	.word	0x0800ba1f
 800b9a8:	0800b9db 	.word	0x0800b9db
 800b9ac:	0800ba05 	.word	0x0800ba05
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	2b03      	cmp	r3, #3
 800b9ba:	d107      	bne.n	800b9cc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b9bc:	f107 030a 	add.w	r3, r7, #10
 800b9c0:	2202      	movs	r2, #2
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f001 fd57 	bl	800d478 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b9ca:	e032      	b.n	800ba32 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b9cc:	6839      	ldr	r1, [r7, #0]
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f001 fce1 	bl	800d396 <USBD_CtlError>
            ret = USBD_FAIL;
 800b9d4:	2303      	movs	r3, #3
 800b9d6:	75fb      	strb	r3, [r7, #23]
          break;
 800b9d8:	e02b      	b.n	800ba32 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	2b03      	cmp	r3, #3
 800b9e4:	d107      	bne.n	800b9f6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b9e6:	f107 030d 	add.w	r3, r7, #13
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f001 fd42 	bl	800d478 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b9f4:	e01d      	b.n	800ba32 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b9f6:	6839      	ldr	r1, [r7, #0]
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f001 fccc 	bl	800d396 <USBD_CtlError>
            ret = USBD_FAIL;
 800b9fe:	2303      	movs	r3, #3
 800ba00:	75fb      	strb	r3, [r7, #23]
          break;
 800ba02:	e016      	b.n	800ba32 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba0a:	b2db      	uxtb	r3, r3
 800ba0c:	2b03      	cmp	r3, #3
 800ba0e:	d00f      	beq.n	800ba30 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ba10:	6839      	ldr	r1, [r7, #0]
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f001 fcbf 	bl	800d396 <USBD_CtlError>
            ret = USBD_FAIL;
 800ba18:	2303      	movs	r3, #3
 800ba1a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ba1c:	e008      	b.n	800ba30 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ba1e:	6839      	ldr	r1, [r7, #0]
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f001 fcb8 	bl	800d396 <USBD_CtlError>
          ret = USBD_FAIL;
 800ba26:	2303      	movs	r3, #3
 800ba28:	75fb      	strb	r3, [r7, #23]
          break;
 800ba2a:	e002      	b.n	800ba32 <USBD_CDC_Setup+0x19e>
          break;
 800ba2c:	bf00      	nop
 800ba2e:	e008      	b.n	800ba42 <USBD_CDC_Setup+0x1ae>
          break;
 800ba30:	bf00      	nop
      }
      break;
 800ba32:	e006      	b.n	800ba42 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ba34:	6839      	ldr	r1, [r7, #0]
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f001 fcad 	bl	800d396 <USBD_CtlError>
      ret = USBD_FAIL;
 800ba3c:	2303      	movs	r3, #3
 800ba3e:	75fb      	strb	r3, [r7, #23]
      break;
 800ba40:	bf00      	nop
  }

  return (uint8_t)ret;
 800ba42:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3718      	adds	r7, #24
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	460b      	mov	r3, r1
 800ba56:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	32b0      	adds	r2, #176	; 0xb0
 800ba6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d101      	bne.n	800ba76 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ba72:	2303      	movs	r3, #3
 800ba74:	e065      	b.n	800bb42 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	32b0      	adds	r2, #176	; 0xb0
 800ba80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba84:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ba86:	78fb      	ldrb	r3, [r7, #3]
 800ba88:	f003 020f 	and.w	r2, r3, #15
 800ba8c:	6879      	ldr	r1, [r7, #4]
 800ba8e:	4613      	mov	r3, r2
 800ba90:	009b      	lsls	r3, r3, #2
 800ba92:	4413      	add	r3, r2
 800ba94:	009b      	lsls	r3, r3, #2
 800ba96:	440b      	add	r3, r1
 800ba98:	3318      	adds	r3, #24
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d02f      	beq.n	800bb00 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800baa0:	78fb      	ldrb	r3, [r7, #3]
 800baa2:	f003 020f 	and.w	r2, r3, #15
 800baa6:	6879      	ldr	r1, [r7, #4]
 800baa8:	4613      	mov	r3, r2
 800baaa:	009b      	lsls	r3, r3, #2
 800baac:	4413      	add	r3, r2
 800baae:	009b      	lsls	r3, r3, #2
 800bab0:	440b      	add	r3, r1
 800bab2:	3318      	adds	r3, #24
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	78fb      	ldrb	r3, [r7, #3]
 800bab8:	f003 010f 	and.w	r1, r3, #15
 800babc:	68f8      	ldr	r0, [r7, #12]
 800babe:	460b      	mov	r3, r1
 800bac0:	00db      	lsls	r3, r3, #3
 800bac2:	440b      	add	r3, r1
 800bac4:	009b      	lsls	r3, r3, #2
 800bac6:	4403      	add	r3, r0
 800bac8:	3348      	adds	r3, #72	; 0x48
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	fbb2 f1f3 	udiv	r1, r2, r3
 800bad0:	fb01 f303 	mul.w	r3, r1, r3
 800bad4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d112      	bne.n	800bb00 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800bada:	78fb      	ldrb	r3, [r7, #3]
 800badc:	f003 020f 	and.w	r2, r3, #15
 800bae0:	6879      	ldr	r1, [r7, #4]
 800bae2:	4613      	mov	r3, r2
 800bae4:	009b      	lsls	r3, r3, #2
 800bae6:	4413      	add	r3, r2
 800bae8:	009b      	lsls	r3, r3, #2
 800baea:	440b      	add	r3, r1
 800baec:	3318      	adds	r3, #24
 800baee:	2200      	movs	r2, #0
 800baf0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800baf2:	78f9      	ldrb	r1, [r7, #3]
 800baf4:	2300      	movs	r3, #0
 800baf6:	2200      	movs	r2, #0
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f005 ff1e 	bl	801193a <USBD_LL_Transmit>
 800bafe:	e01f      	b.n	800bb40 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	2200      	movs	r2, #0
 800bb04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	33b0      	adds	r3, #176	; 0xb0
 800bb12:	009b      	lsls	r3, r3, #2
 800bb14:	4413      	add	r3, r2
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	691b      	ldr	r3, [r3, #16]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d010      	beq.n	800bb40 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bb24:	687a      	ldr	r2, [r7, #4]
 800bb26:	33b0      	adds	r3, #176	; 0xb0
 800bb28:	009b      	lsls	r3, r3, #2
 800bb2a:	4413      	add	r3, r2
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	691b      	ldr	r3, [r3, #16]
 800bb30:	68ba      	ldr	r2, [r7, #8]
 800bb32:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bb36:	68ba      	ldr	r2, [r7, #8]
 800bb38:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bb3c:	78fa      	ldrb	r2, [r7, #3]
 800bb3e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bb40:	2300      	movs	r3, #0
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3710      	adds	r7, #16
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}

0800bb4a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bb4a:	b580      	push	{r7, lr}
 800bb4c:	b084      	sub	sp, #16
 800bb4e:	af00      	add	r7, sp, #0
 800bb50:	6078      	str	r0, [r7, #4]
 800bb52:	460b      	mov	r3, r1
 800bb54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	32b0      	adds	r2, #176	; 0xb0
 800bb60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb64:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	32b0      	adds	r2, #176	; 0xb0
 800bb70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d101      	bne.n	800bb7c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800bb78:	2303      	movs	r3, #3
 800bb7a:	e01a      	b.n	800bbb2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bb7c:	78fb      	ldrb	r3, [r7, #3]
 800bb7e:	4619      	mov	r1, r3
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f005 ff1c 	bl	80119be <USBD_LL_GetRxDataSize>
 800bb86:	4602      	mov	r2, r0
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	33b0      	adds	r3, #176	; 0xb0
 800bb98:	009b      	lsls	r3, r3, #2
 800bb9a:	4413      	add	r3, r2
 800bb9c:	685b      	ldr	r3, [r3, #4]
 800bb9e:	68db      	ldr	r3, [r3, #12]
 800bba0:	68fa      	ldr	r2, [r7, #12]
 800bba2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bba6:	68fa      	ldr	r2, [r7, #12]
 800bba8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bbac:	4611      	mov	r1, r2
 800bbae:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bbb0:	2300      	movs	r3, #0
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3710      	adds	r7, #16
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}

0800bbba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bbba:	b580      	push	{r7, lr}
 800bbbc:	b084      	sub	sp, #16
 800bbbe:	af00      	add	r7, sp, #0
 800bbc0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	32b0      	adds	r2, #176	; 0xb0
 800bbcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbd0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d101      	bne.n	800bbdc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bbd8:	2303      	movs	r3, #3
 800bbda:	e025      	b.n	800bc28 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	33b0      	adds	r3, #176	; 0xb0
 800bbe6:	009b      	lsls	r3, r3, #2
 800bbe8:	4413      	add	r3, r2
 800bbea:	685b      	ldr	r3, [r3, #4]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d01a      	beq.n	800bc26 <USBD_CDC_EP0_RxReady+0x6c>
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bbf6:	2bff      	cmp	r3, #255	; 0xff
 800bbf8:	d015      	beq.n	800bc26 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	33b0      	adds	r3, #176	; 0xb0
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	4413      	add	r3, r2
 800bc08:	685b      	ldr	r3, [r3, #4]
 800bc0a:	689b      	ldr	r3, [r3, #8]
 800bc0c:	68fa      	ldr	r2, [r7, #12]
 800bc0e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800bc12:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800bc14:	68fa      	ldr	r2, [r7, #12]
 800bc16:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bc1a:	b292      	uxth	r2, r2
 800bc1c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	22ff      	movs	r2, #255	; 0xff
 800bc22:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800bc26:	2300      	movs	r3, #0
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3710      	adds	r7, #16
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b086      	sub	sp, #24
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bc38:	2182      	movs	r1, #130	; 0x82
 800bc3a:	4818      	ldr	r0, [pc, #96]	; (800bc9c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bc3c:	f000 fd49 	bl	800c6d2 <USBD_GetEpDesc>
 800bc40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bc42:	2101      	movs	r1, #1
 800bc44:	4815      	ldr	r0, [pc, #84]	; (800bc9c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bc46:	f000 fd44 	bl	800c6d2 <USBD_GetEpDesc>
 800bc4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bc4c:	2181      	movs	r1, #129	; 0x81
 800bc4e:	4813      	ldr	r0, [pc, #76]	; (800bc9c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bc50:	f000 fd3f 	bl	800c6d2 <USBD_GetEpDesc>
 800bc54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d002      	beq.n	800bc62 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	2210      	movs	r2, #16
 800bc60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d006      	beq.n	800bc76 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bc70:	711a      	strb	r2, [r3, #4]
 800bc72:	2200      	movs	r2, #0
 800bc74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d006      	beq.n	800bc8a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bc84:	711a      	strb	r2, [r3, #4]
 800bc86:	2200      	movs	r2, #0
 800bc88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2243      	movs	r2, #67	; 0x43
 800bc8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bc90:	4b02      	ldr	r3, [pc, #8]	; (800bc9c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3718      	adds	r7, #24
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
 800bc9a:	bf00      	nop
 800bc9c:	200000d0 	.word	0x200000d0

0800bca0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b086      	sub	sp, #24
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bca8:	2182      	movs	r1, #130	; 0x82
 800bcaa:	4818      	ldr	r0, [pc, #96]	; (800bd0c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bcac:	f000 fd11 	bl	800c6d2 <USBD_GetEpDesc>
 800bcb0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bcb2:	2101      	movs	r1, #1
 800bcb4:	4815      	ldr	r0, [pc, #84]	; (800bd0c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bcb6:	f000 fd0c 	bl	800c6d2 <USBD_GetEpDesc>
 800bcba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bcbc:	2181      	movs	r1, #129	; 0x81
 800bcbe:	4813      	ldr	r0, [pc, #76]	; (800bd0c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bcc0:	f000 fd07 	bl	800c6d2 <USBD_GetEpDesc>
 800bcc4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d002      	beq.n	800bcd2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	2210      	movs	r2, #16
 800bcd0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d006      	beq.n	800bce6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	711a      	strb	r2, [r3, #4]
 800bcde:	2200      	movs	r2, #0
 800bce0:	f042 0202 	orr.w	r2, r2, #2
 800bce4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d006      	beq.n	800bcfa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	711a      	strb	r2, [r3, #4]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	f042 0202 	orr.w	r2, r2, #2
 800bcf8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2243      	movs	r2, #67	; 0x43
 800bcfe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bd00:	4b02      	ldr	r3, [pc, #8]	; (800bd0c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3718      	adds	r7, #24
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
 800bd0a:	bf00      	nop
 800bd0c:	200000d0 	.word	0x200000d0

0800bd10 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b086      	sub	sp, #24
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bd18:	2182      	movs	r1, #130	; 0x82
 800bd1a:	4818      	ldr	r0, [pc, #96]	; (800bd7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bd1c:	f000 fcd9 	bl	800c6d2 <USBD_GetEpDesc>
 800bd20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bd22:	2101      	movs	r1, #1
 800bd24:	4815      	ldr	r0, [pc, #84]	; (800bd7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bd26:	f000 fcd4 	bl	800c6d2 <USBD_GetEpDesc>
 800bd2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bd2c:	2181      	movs	r1, #129	; 0x81
 800bd2e:	4813      	ldr	r0, [pc, #76]	; (800bd7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bd30:	f000 fccf 	bl	800c6d2 <USBD_GetEpDesc>
 800bd34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d002      	beq.n	800bd42 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	2210      	movs	r2, #16
 800bd40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d006      	beq.n	800bd56 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd50:	711a      	strb	r2, [r3, #4]
 800bd52:	2200      	movs	r2, #0
 800bd54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d006      	beq.n	800bd6a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd64:	711a      	strb	r2, [r3, #4]
 800bd66:	2200      	movs	r2, #0
 800bd68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2243      	movs	r2, #67	; 0x43
 800bd6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bd70:	4b02      	ldr	r3, [pc, #8]	; (800bd7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3718      	adds	r7, #24
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	bf00      	nop
 800bd7c:	200000d0 	.word	0x200000d0

0800bd80 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b083      	sub	sp, #12
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	220a      	movs	r2, #10
 800bd8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bd8e:	4b03      	ldr	r3, [pc, #12]	; (800bd9c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	370c      	adds	r7, #12
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr
 800bd9c:	2000008c 	.word	0x2000008c

0800bda0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b083      	sub	sp, #12
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d101      	bne.n	800bdb4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bdb0:	2303      	movs	r3, #3
 800bdb2:	e009      	b.n	800bdc8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bdba:	687a      	ldr	r2, [r7, #4]
 800bdbc:	33b0      	adds	r3, #176	; 0xb0
 800bdbe:	009b      	lsls	r3, r3, #2
 800bdc0:	4413      	add	r3, r2
 800bdc2:	683a      	ldr	r2, [r7, #0]
 800bdc4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800bdc6:	2300      	movs	r3, #0
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	370c      	adds	r7, #12
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr

0800bdd4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b087      	sub	sp, #28
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	60f8      	str	r0, [r7, #12]
 800bddc:	60b9      	str	r1, [r7, #8]
 800bdde:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	32b0      	adds	r2, #176	; 0xb0
 800bdea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdee:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d101      	bne.n	800bdfa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bdf6:	2303      	movs	r3, #3
 800bdf8:	e008      	b.n	800be0c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	68ba      	ldr	r2, [r7, #8]
 800bdfe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	687a      	ldr	r2, [r7, #4]
 800be06:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800be0a:	2300      	movs	r3, #0
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	371c      	adds	r7, #28
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr

0800be18 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800be18:	b480      	push	{r7}
 800be1a:	b085      	sub	sp, #20
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
 800be20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	32b0      	adds	r2, #176	; 0xb0
 800be2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be30:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d101      	bne.n	800be3c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800be38:	2303      	movs	r3, #3
 800be3a:	e004      	b.n	800be46 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	683a      	ldr	r2, [r7, #0]
 800be40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800be44:	2300      	movs	r3, #0
}
 800be46:	4618      	mov	r0, r3
 800be48:	3714      	adds	r7, #20
 800be4a:	46bd      	mov	sp, r7
 800be4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be50:	4770      	bx	lr
	...

0800be54 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b084      	sub	sp, #16
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	32b0      	adds	r2, #176	; 0xb0
 800be66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be6a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800be6c:	2301      	movs	r3, #1
 800be6e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d101      	bne.n	800be7a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800be76:	2303      	movs	r3, #3
 800be78:	e025      	b.n	800bec6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800be80:	2b00      	cmp	r3, #0
 800be82:	d11f      	bne.n	800bec4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	2201      	movs	r2, #1
 800be88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800be8c:	4b10      	ldr	r3, [pc, #64]	; (800bed0 <USBD_CDC_TransmitPacket+0x7c>)
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	f003 020f 	and.w	r2, r3, #15
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	4613      	mov	r3, r2
 800be9e:	009b      	lsls	r3, r3, #2
 800bea0:	4413      	add	r3, r2
 800bea2:	009b      	lsls	r3, r3, #2
 800bea4:	4403      	add	r3, r0
 800bea6:	3318      	adds	r3, #24
 800bea8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800beaa:	4b09      	ldr	r3, [pc, #36]	; (800bed0 <USBD_CDC_TransmitPacket+0x7c>)
 800beac:	7819      	ldrb	r1, [r3, #0]
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f005 fd3d 	bl	801193a <USBD_LL_Transmit>

    ret = USBD_OK;
 800bec0:	2300      	movs	r3, #0
 800bec2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bec4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3710      	adds	r7, #16
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}
 800bece:	bf00      	nop
 800bed0:	20000113 	.word	0x20000113

0800bed4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	32b0      	adds	r2, #176	; 0xb0
 800bee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	32b0      	adds	r2, #176	; 0xb0
 800bef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d101      	bne.n	800bf02 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800befe:	2303      	movs	r3, #3
 800bf00:	e018      	b.n	800bf34 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	7c1b      	ldrb	r3, [r3, #16]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d10a      	bne.n	800bf20 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bf0a:	4b0c      	ldr	r3, [pc, #48]	; (800bf3c <USBD_CDC_ReceivePacket+0x68>)
 800bf0c:	7819      	ldrb	r1, [r3, #0]
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bf14:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f005 fd2f 	bl	801197c <USBD_LL_PrepareReceive>
 800bf1e:	e008      	b.n	800bf32 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bf20:	4b06      	ldr	r3, [pc, #24]	; (800bf3c <USBD_CDC_ReceivePacket+0x68>)
 800bf22:	7819      	ldrb	r1, [r3, #0]
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bf2a:	2340      	movs	r3, #64	; 0x40
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f005 fd25 	bl	801197c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bf32:	2300      	movs	r3, #0
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3710      	adds	r7, #16
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	20000114 	.word	0x20000114

0800bf40 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b086      	sub	sp, #24
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	60b9      	str	r1, [r7, #8]
 800bf4a:	4613      	mov	r3, r2
 800bf4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d101      	bne.n	800bf58 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bf54:	2303      	movs	r3, #3
 800bf56:	e01f      	b.n	800bf98 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2200      	movs	r2, #0
 800bf64:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d003      	beq.n	800bf7e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	68ba      	ldr	r2, [r7, #8]
 800bf7a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	2201      	movs	r2, #1
 800bf82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	79fa      	ldrb	r2, [r7, #7]
 800bf8a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bf8c:	68f8      	ldr	r0, [r7, #12]
 800bf8e:	f005 fb9f 	bl	80116d0 <USBD_LL_Init>
 800bf92:	4603      	mov	r3, r0
 800bf94:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bf96:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3718      	adds	r7, #24
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b084      	sub	sp, #16
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
 800bfa8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d101      	bne.n	800bfb8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bfb4:	2303      	movs	r3, #3
 800bfb6:	e025      	b.n	800c004 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	683a      	ldr	r2, [r7, #0]
 800bfbc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	32ae      	adds	r2, #174	; 0xae
 800bfca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d00f      	beq.n	800bff4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	32ae      	adds	r2, #174	; 0xae
 800bfde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfe4:	f107 020e 	add.w	r2, r7, #14
 800bfe8:	4610      	mov	r0, r2
 800bfea:	4798      	blx	r3
 800bfec:	4602      	mov	r2, r0
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bffa:	1c5a      	adds	r2, r3, #1
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c002:	2300      	movs	r3, #0
}
 800c004:	4618      	mov	r0, r3
 800c006:	3710      	adds	r7, #16
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b082      	sub	sp, #8
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f005 fba7 	bl	8011768 <USBD_LL_Start>
 800c01a:	4603      	mov	r3, r0
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3708      	adds	r7, #8
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}

0800c024 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c024:	b480      	push	{r7}
 800c026:	b083      	sub	sp, #12
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c02c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c02e:	4618      	mov	r0, r3
 800c030:	370c      	adds	r7, #12
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr

0800c03a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c03a:	b580      	push	{r7, lr}
 800c03c:	b084      	sub	sp, #16
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
 800c042:	460b      	mov	r3, r1
 800c044:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c046:	2300      	movs	r3, #0
 800c048:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c050:	2b00      	cmp	r3, #0
 800c052:	d009      	beq.n	800c068 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	78fa      	ldrb	r2, [r7, #3]
 800c05e:	4611      	mov	r1, r2
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	4798      	blx	r3
 800c064:	4603      	mov	r3, r0
 800c066:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c068:	7bfb      	ldrb	r3, [r7, #15]
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3710      	adds	r7, #16
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}

0800c072 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c072:	b580      	push	{r7, lr}
 800c074:	b084      	sub	sp, #16
 800c076:	af00      	add	r7, sp, #0
 800c078:	6078      	str	r0, [r7, #4]
 800c07a:	460b      	mov	r3, r1
 800c07c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c07e:	2300      	movs	r3, #0
 800c080:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c088:	685b      	ldr	r3, [r3, #4]
 800c08a:	78fa      	ldrb	r2, [r7, #3]
 800c08c:	4611      	mov	r1, r2
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	4798      	blx	r3
 800c092:	4603      	mov	r3, r0
 800c094:	2b00      	cmp	r3, #0
 800c096:	d001      	beq.n	800c09c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c098:	2303      	movs	r3, #3
 800c09a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c09c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3710      	adds	r7, #16
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}

0800c0a6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c0a6:	b580      	push	{r7, lr}
 800c0a8:	b084      	sub	sp, #16
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
 800c0ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c0b6:	6839      	ldr	r1, [r7, #0]
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f001 f932 	bl	800d322 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c0da:	f003 031f 	and.w	r3, r3, #31
 800c0de:	2b02      	cmp	r3, #2
 800c0e0:	d01a      	beq.n	800c118 <USBD_LL_SetupStage+0x72>
 800c0e2:	2b02      	cmp	r3, #2
 800c0e4:	d822      	bhi.n	800c12c <USBD_LL_SetupStage+0x86>
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d002      	beq.n	800c0f0 <USBD_LL_SetupStage+0x4a>
 800c0ea:	2b01      	cmp	r3, #1
 800c0ec:	d00a      	beq.n	800c104 <USBD_LL_SetupStage+0x5e>
 800c0ee:	e01d      	b.n	800c12c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f000 fb5f 	bl	800c7bc <USBD_StdDevReq>
 800c0fe:	4603      	mov	r3, r0
 800c100:	73fb      	strb	r3, [r7, #15]
      break;
 800c102:	e020      	b.n	800c146 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c10a:	4619      	mov	r1, r3
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f000 fbc7 	bl	800c8a0 <USBD_StdItfReq>
 800c112:	4603      	mov	r3, r0
 800c114:	73fb      	strb	r3, [r7, #15]
      break;
 800c116:	e016      	b.n	800c146 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c11e:	4619      	mov	r1, r3
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f000 fc29 	bl	800c978 <USBD_StdEPReq>
 800c126:	4603      	mov	r3, r0
 800c128:	73fb      	strb	r3, [r7, #15]
      break;
 800c12a:	e00c      	b.n	800c146 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c132:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c136:	b2db      	uxtb	r3, r3
 800c138:	4619      	mov	r1, r3
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f005 fb74 	bl	8011828 <USBD_LL_StallEP>
 800c140:	4603      	mov	r3, r0
 800c142:	73fb      	strb	r3, [r7, #15]
      break;
 800c144:	bf00      	nop
  }

  return ret;
 800c146:	7bfb      	ldrb	r3, [r7, #15]
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3710      	adds	r7, #16
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}

0800c150 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b086      	sub	sp, #24
 800c154:	af00      	add	r7, sp, #0
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	460b      	mov	r3, r1
 800c15a:	607a      	str	r2, [r7, #4]
 800c15c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c15e:	2300      	movs	r3, #0
 800c160:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c162:	7afb      	ldrb	r3, [r7, #11]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d16e      	bne.n	800c246 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c16e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c176:	2b03      	cmp	r3, #3
 800c178:	f040 8098 	bne.w	800c2ac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	689a      	ldr	r2, [r3, #8]
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	68db      	ldr	r3, [r3, #12]
 800c184:	429a      	cmp	r2, r3
 800c186:	d913      	bls.n	800c1b0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	689a      	ldr	r2, [r3, #8]
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	68db      	ldr	r3, [r3, #12]
 800c190:	1ad2      	subs	r2, r2, r3
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	68da      	ldr	r2, [r3, #12]
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	689b      	ldr	r3, [r3, #8]
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	bf28      	it	cs
 800c1a2:	4613      	movcs	r3, r2
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	6879      	ldr	r1, [r7, #4]
 800c1a8:	68f8      	ldr	r0, [r7, #12]
 800c1aa:	f001 f9ae 	bl	800d50a <USBD_CtlContinueRx>
 800c1ae:	e07d      	b.n	800c2ac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c1b6:	f003 031f 	and.w	r3, r3, #31
 800c1ba:	2b02      	cmp	r3, #2
 800c1bc:	d014      	beq.n	800c1e8 <USBD_LL_DataOutStage+0x98>
 800c1be:	2b02      	cmp	r3, #2
 800c1c0:	d81d      	bhi.n	800c1fe <USBD_LL_DataOutStage+0xae>
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d002      	beq.n	800c1cc <USBD_LL_DataOutStage+0x7c>
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d003      	beq.n	800c1d2 <USBD_LL_DataOutStage+0x82>
 800c1ca:	e018      	b.n	800c1fe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	75bb      	strb	r3, [r7, #22]
            break;
 800c1d0:	e018      	b.n	800c204 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c1d8:	b2db      	uxtb	r3, r3
 800c1da:	4619      	mov	r1, r3
 800c1dc:	68f8      	ldr	r0, [r7, #12]
 800c1de:	f000 fa5e 	bl	800c69e <USBD_CoreFindIF>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	75bb      	strb	r3, [r7, #22]
            break;
 800c1e6:	e00d      	b.n	800c204 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c1ee:	b2db      	uxtb	r3, r3
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	68f8      	ldr	r0, [r7, #12]
 800c1f4:	f000 fa60 	bl	800c6b8 <USBD_CoreFindEP>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	75bb      	strb	r3, [r7, #22]
            break;
 800c1fc:	e002      	b.n	800c204 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c1fe:	2300      	movs	r3, #0
 800c200:	75bb      	strb	r3, [r7, #22]
            break;
 800c202:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c204:	7dbb      	ldrb	r3, [r7, #22]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d119      	bne.n	800c23e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c210:	b2db      	uxtb	r3, r3
 800c212:	2b03      	cmp	r3, #3
 800c214:	d113      	bne.n	800c23e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c216:	7dba      	ldrb	r2, [r7, #22]
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	32ae      	adds	r2, #174	; 0xae
 800c21c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c220:	691b      	ldr	r3, [r3, #16]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d00b      	beq.n	800c23e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c226:	7dba      	ldrb	r2, [r7, #22]
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c22e:	7dba      	ldrb	r2, [r7, #22]
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	32ae      	adds	r2, #174	; 0xae
 800c234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c238:	691b      	ldr	r3, [r3, #16]
 800c23a:	68f8      	ldr	r0, [r7, #12]
 800c23c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c23e:	68f8      	ldr	r0, [r7, #12]
 800c240:	f001 f974 	bl	800d52c <USBD_CtlSendStatus>
 800c244:	e032      	b.n	800c2ac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c246:	7afb      	ldrb	r3, [r7, #11]
 800c248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c24c:	b2db      	uxtb	r3, r3
 800c24e:	4619      	mov	r1, r3
 800c250:	68f8      	ldr	r0, [r7, #12]
 800c252:	f000 fa31 	bl	800c6b8 <USBD_CoreFindEP>
 800c256:	4603      	mov	r3, r0
 800c258:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c25a:	7dbb      	ldrb	r3, [r7, #22]
 800c25c:	2bff      	cmp	r3, #255	; 0xff
 800c25e:	d025      	beq.n	800c2ac <USBD_LL_DataOutStage+0x15c>
 800c260:	7dbb      	ldrb	r3, [r7, #22]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d122      	bne.n	800c2ac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c26c:	b2db      	uxtb	r3, r3
 800c26e:	2b03      	cmp	r3, #3
 800c270:	d117      	bne.n	800c2a2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c272:	7dba      	ldrb	r2, [r7, #22]
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	32ae      	adds	r2, #174	; 0xae
 800c278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c27c:	699b      	ldr	r3, [r3, #24]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d00f      	beq.n	800c2a2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c282:	7dba      	ldrb	r2, [r7, #22]
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c28a:	7dba      	ldrb	r2, [r7, #22]
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	32ae      	adds	r2, #174	; 0xae
 800c290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c294:	699b      	ldr	r3, [r3, #24]
 800c296:	7afa      	ldrb	r2, [r7, #11]
 800c298:	4611      	mov	r1, r2
 800c29a:	68f8      	ldr	r0, [r7, #12]
 800c29c:	4798      	blx	r3
 800c29e:	4603      	mov	r3, r0
 800c2a0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c2a2:	7dfb      	ldrb	r3, [r7, #23]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d001      	beq.n	800c2ac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c2a8:	7dfb      	ldrb	r3, [r7, #23]
 800c2aa:	e000      	b.n	800c2ae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c2ac:	2300      	movs	r3, #0
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3718      	adds	r7, #24
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}

0800c2b6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c2b6:	b580      	push	{r7, lr}
 800c2b8:	b086      	sub	sp, #24
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	60f8      	str	r0, [r7, #12]
 800c2be:	460b      	mov	r3, r1
 800c2c0:	607a      	str	r2, [r7, #4]
 800c2c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c2c4:	7afb      	ldrb	r3, [r7, #11]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d16f      	bne.n	800c3aa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	3314      	adds	r3, #20
 800c2ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c2d6:	2b02      	cmp	r3, #2
 800c2d8:	d15a      	bne.n	800c390 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c2da:	693b      	ldr	r3, [r7, #16]
 800c2dc:	689a      	ldr	r2, [r3, #8]
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	68db      	ldr	r3, [r3, #12]
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d914      	bls.n	800c310 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	689a      	ldr	r2, [r3, #8]
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	68db      	ldr	r3, [r3, #12]
 800c2ee:	1ad2      	subs	r2, r2, r3
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	689b      	ldr	r3, [r3, #8]
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	6879      	ldr	r1, [r7, #4]
 800c2fc:	68f8      	ldr	r0, [r7, #12]
 800c2fe:	f001 f8d6 	bl	800d4ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c302:	2300      	movs	r3, #0
 800c304:	2200      	movs	r2, #0
 800c306:	2100      	movs	r1, #0
 800c308:	68f8      	ldr	r0, [r7, #12]
 800c30a:	f005 fb37 	bl	801197c <USBD_LL_PrepareReceive>
 800c30e:	e03f      	b.n	800c390 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	68da      	ldr	r2, [r3, #12]
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	689b      	ldr	r3, [r3, #8]
 800c318:	429a      	cmp	r2, r3
 800c31a:	d11c      	bne.n	800c356 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	685a      	ldr	r2, [r3, #4]
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c324:	429a      	cmp	r2, r3
 800c326:	d316      	bcc.n	800c356 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	685a      	ldr	r2, [r3, #4]
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c332:	429a      	cmp	r2, r3
 800c334:	d20f      	bcs.n	800c356 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c336:	2200      	movs	r2, #0
 800c338:	2100      	movs	r1, #0
 800c33a:	68f8      	ldr	r0, [r7, #12]
 800c33c:	f001 f8b7 	bl	800d4ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	2200      	movs	r2, #0
 800c344:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c348:	2300      	movs	r3, #0
 800c34a:	2200      	movs	r2, #0
 800c34c:	2100      	movs	r1, #0
 800c34e:	68f8      	ldr	r0, [r7, #12]
 800c350:	f005 fb14 	bl	801197c <USBD_LL_PrepareReceive>
 800c354:	e01c      	b.n	800c390 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c35c:	b2db      	uxtb	r3, r3
 800c35e:	2b03      	cmp	r3, #3
 800c360:	d10f      	bne.n	800c382 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c368:	68db      	ldr	r3, [r3, #12]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d009      	beq.n	800c382 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	2200      	movs	r2, #0
 800c372:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c37c:	68db      	ldr	r3, [r3, #12]
 800c37e:	68f8      	ldr	r0, [r7, #12]
 800c380:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c382:	2180      	movs	r1, #128	; 0x80
 800c384:	68f8      	ldr	r0, [r7, #12]
 800c386:	f005 fa4f 	bl	8011828 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c38a:	68f8      	ldr	r0, [r7, #12]
 800c38c:	f001 f8e1 	bl	800d552 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c396:	2b00      	cmp	r3, #0
 800c398:	d03a      	beq.n	800c410 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c39a:	68f8      	ldr	r0, [r7, #12]
 800c39c:	f7ff fe42 	bl	800c024 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c3a8:	e032      	b.n	800c410 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c3aa:	7afb      	ldrb	r3, [r7, #11]
 800c3ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c3b0:	b2db      	uxtb	r3, r3
 800c3b2:	4619      	mov	r1, r3
 800c3b4:	68f8      	ldr	r0, [r7, #12]
 800c3b6:	f000 f97f 	bl	800c6b8 <USBD_CoreFindEP>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c3be:	7dfb      	ldrb	r3, [r7, #23]
 800c3c0:	2bff      	cmp	r3, #255	; 0xff
 800c3c2:	d025      	beq.n	800c410 <USBD_LL_DataInStage+0x15a>
 800c3c4:	7dfb      	ldrb	r3, [r7, #23]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d122      	bne.n	800c410 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3d0:	b2db      	uxtb	r3, r3
 800c3d2:	2b03      	cmp	r3, #3
 800c3d4:	d11c      	bne.n	800c410 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c3d6:	7dfa      	ldrb	r2, [r7, #23]
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	32ae      	adds	r2, #174	; 0xae
 800c3dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3e0:	695b      	ldr	r3, [r3, #20]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d014      	beq.n	800c410 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c3e6:	7dfa      	ldrb	r2, [r7, #23]
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c3ee:	7dfa      	ldrb	r2, [r7, #23]
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	32ae      	adds	r2, #174	; 0xae
 800c3f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3f8:	695b      	ldr	r3, [r3, #20]
 800c3fa:	7afa      	ldrb	r2, [r7, #11]
 800c3fc:	4611      	mov	r1, r2
 800c3fe:	68f8      	ldr	r0, [r7, #12]
 800c400:	4798      	blx	r3
 800c402:	4603      	mov	r3, r0
 800c404:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c406:	7dbb      	ldrb	r3, [r7, #22]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d001      	beq.n	800c410 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c40c:	7dbb      	ldrb	r3, [r7, #22]
 800c40e:	e000      	b.n	800c412 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c410:	2300      	movs	r3, #0
}
 800c412:	4618      	mov	r0, r3
 800c414:	3718      	adds	r7, #24
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}

0800c41a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c41a:	b580      	push	{r7, lr}
 800c41c:	b084      	sub	sp, #16
 800c41e:	af00      	add	r7, sp, #0
 800c420:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c422:	2300      	movs	r3, #0
 800c424:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2201      	movs	r2, #1
 800c42a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2200      	movs	r2, #0
 800c432:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2200      	movs	r2, #0
 800c43a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2200      	movs	r2, #0
 800c440:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2200      	movs	r2, #0
 800c448:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c452:	2b00      	cmp	r3, #0
 800c454:	d014      	beq.n	800c480 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d00e      	beq.n	800c480 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c468:	685b      	ldr	r3, [r3, #4]
 800c46a:	687a      	ldr	r2, [r7, #4]
 800c46c:	6852      	ldr	r2, [r2, #4]
 800c46e:	b2d2      	uxtb	r2, r2
 800c470:	4611      	mov	r1, r2
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	4798      	blx	r3
 800c476:	4603      	mov	r3, r0
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d001      	beq.n	800c480 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c47c:	2303      	movs	r3, #3
 800c47e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c480:	2340      	movs	r3, #64	; 0x40
 800c482:	2200      	movs	r2, #0
 800c484:	2100      	movs	r1, #0
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f005 f989 	bl	801179e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2201      	movs	r2, #1
 800c490:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2240      	movs	r2, #64	; 0x40
 800c498:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c49c:	2340      	movs	r3, #64	; 0x40
 800c49e:	2200      	movs	r2, #0
 800c4a0:	2180      	movs	r1, #128	; 0x80
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f005 f97b 	bl	801179e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2240      	movs	r2, #64	; 0x40
 800c4b2:	621a      	str	r2, [r3, #32]

  return ret;
 800c4b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3710      	adds	r7, #16
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}

0800c4be <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c4be:	b480      	push	{r7}
 800c4c0:	b083      	sub	sp, #12
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	6078      	str	r0, [r7, #4]
 800c4c6:	460b      	mov	r3, r1
 800c4c8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	78fa      	ldrb	r2, [r7, #3]
 800c4ce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c4d0:	2300      	movs	r3, #0
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	370c      	adds	r7, #12
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4dc:	4770      	bx	lr

0800c4de <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c4de:	b480      	push	{r7}
 800c4e0:	b083      	sub	sp, #12
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4ec:	b2da      	uxtb	r2, r3
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2204      	movs	r2, #4
 800c4f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c4fc:	2300      	movs	r3, #0
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	370c      	adds	r7, #12
 800c502:	46bd      	mov	sp, r7
 800c504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c508:	4770      	bx	lr

0800c50a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c50a:	b480      	push	{r7}
 800c50c:	b083      	sub	sp, #12
 800c50e:	af00      	add	r7, sp, #0
 800c510:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c518:	b2db      	uxtb	r3, r3
 800c51a:	2b04      	cmp	r3, #4
 800c51c:	d106      	bne.n	800c52c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c524:	b2da      	uxtb	r2, r3
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c52c:	2300      	movs	r3, #0
}
 800c52e:	4618      	mov	r0, r3
 800c530:	370c      	adds	r7, #12
 800c532:	46bd      	mov	sp, r7
 800c534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c538:	4770      	bx	lr

0800c53a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c53a:	b580      	push	{r7, lr}
 800c53c:	b082      	sub	sp, #8
 800c53e:	af00      	add	r7, sp, #0
 800c540:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c548:	b2db      	uxtb	r3, r3
 800c54a:	2b03      	cmp	r3, #3
 800c54c:	d110      	bne.n	800c570 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c554:	2b00      	cmp	r3, #0
 800c556:	d00b      	beq.n	800c570 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c55e:	69db      	ldr	r3, [r3, #28]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d005      	beq.n	800c570 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c56a:	69db      	ldr	r3, [r3, #28]
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c570:	2300      	movs	r3, #0
}
 800c572:	4618      	mov	r0, r3
 800c574:	3708      	adds	r7, #8
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}

0800c57a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c57a:	b580      	push	{r7, lr}
 800c57c:	b082      	sub	sp, #8
 800c57e:	af00      	add	r7, sp, #0
 800c580:	6078      	str	r0, [r7, #4]
 800c582:	460b      	mov	r3, r1
 800c584:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	32ae      	adds	r2, #174	; 0xae
 800c590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d101      	bne.n	800c59c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c598:	2303      	movs	r3, #3
 800c59a:	e01c      	b.n	800c5d6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5a2:	b2db      	uxtb	r3, r3
 800c5a4:	2b03      	cmp	r3, #3
 800c5a6:	d115      	bne.n	800c5d4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	32ae      	adds	r2, #174	; 0xae
 800c5b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5b6:	6a1b      	ldr	r3, [r3, #32]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d00b      	beq.n	800c5d4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	32ae      	adds	r2, #174	; 0xae
 800c5c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5ca:	6a1b      	ldr	r3, [r3, #32]
 800c5cc:	78fa      	ldrb	r2, [r7, #3]
 800c5ce:	4611      	mov	r1, r2
 800c5d0:	6878      	ldr	r0, [r7, #4]
 800c5d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c5d4:	2300      	movs	r3, #0
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3708      	adds	r7, #8
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}

0800c5de <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c5de:	b580      	push	{r7, lr}
 800c5e0:	b082      	sub	sp, #8
 800c5e2:	af00      	add	r7, sp, #0
 800c5e4:	6078      	str	r0, [r7, #4]
 800c5e6:	460b      	mov	r3, r1
 800c5e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	32ae      	adds	r2, #174	; 0xae
 800c5f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d101      	bne.n	800c600 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c5fc:	2303      	movs	r3, #3
 800c5fe:	e01c      	b.n	800c63a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c606:	b2db      	uxtb	r3, r3
 800c608:	2b03      	cmp	r3, #3
 800c60a:	d115      	bne.n	800c638 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	32ae      	adds	r2, #174	; 0xae
 800c616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d00b      	beq.n	800c638 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	32ae      	adds	r2, #174	; 0xae
 800c62a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c630:	78fa      	ldrb	r2, [r7, #3]
 800c632:	4611      	mov	r1, r2
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c638:	2300      	movs	r3, #0
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3708      	adds	r7, #8
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}

0800c642 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c642:	b480      	push	{r7}
 800c644:	b083      	sub	sp, #12
 800c646:	af00      	add	r7, sp, #0
 800c648:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c64a:	2300      	movs	r3, #0
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	370c      	adds	r7, #12
 800c650:	46bd      	mov	sp, r7
 800c652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c656:	4770      	bx	lr

0800c658 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b084      	sub	sp, #16
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c660:	2300      	movs	r3, #0
 800c662:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2201      	movs	r2, #1
 800c668:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c672:	2b00      	cmp	r3, #0
 800c674:	d00e      	beq.n	800c694 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c67c:	685b      	ldr	r3, [r3, #4]
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	6852      	ldr	r2, [r2, #4]
 800c682:	b2d2      	uxtb	r2, r2
 800c684:	4611      	mov	r1, r2
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	4798      	blx	r3
 800c68a:	4603      	mov	r3, r0
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d001      	beq.n	800c694 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c690:	2303      	movs	r3, #3
 800c692:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c694:	7bfb      	ldrb	r3, [r7, #15]
}
 800c696:	4618      	mov	r0, r3
 800c698:	3710      	adds	r7, #16
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}

0800c69e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c69e:	b480      	push	{r7}
 800c6a0:	b083      	sub	sp, #12
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	6078      	str	r0, [r7, #4]
 800c6a6:	460b      	mov	r3, r1
 800c6a8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c6aa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	370c      	adds	r7, #12
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b6:	4770      	bx	lr

0800c6b8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b083      	sub	sp, #12
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	460b      	mov	r3, r1
 800c6c2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c6c4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	370c      	adds	r7, #12
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d0:	4770      	bx	lr

0800c6d2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c6d2:	b580      	push	{r7, lr}
 800c6d4:	b086      	sub	sp, #24
 800c6d6:	af00      	add	r7, sp, #0
 800c6d8:	6078      	str	r0, [r7, #4]
 800c6da:	460b      	mov	r3, r1
 800c6dc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	885b      	ldrh	r3, [r3, #2]
 800c6ee:	b29a      	uxth	r2, r3
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	b29b      	uxth	r3, r3
 800c6f6:	429a      	cmp	r2, r3
 800c6f8:	d920      	bls.n	800c73c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	b29b      	uxth	r3, r3
 800c700:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c702:	e013      	b.n	800c72c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c704:	f107 030a 	add.w	r3, r7, #10
 800c708:	4619      	mov	r1, r3
 800c70a:	6978      	ldr	r0, [r7, #20]
 800c70c:	f000 f81b 	bl	800c746 <USBD_GetNextDesc>
 800c710:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	785b      	ldrb	r3, [r3, #1]
 800c716:	2b05      	cmp	r3, #5
 800c718:	d108      	bne.n	800c72c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	789b      	ldrb	r3, [r3, #2]
 800c722:	78fa      	ldrb	r2, [r7, #3]
 800c724:	429a      	cmp	r2, r3
 800c726:	d008      	beq.n	800c73a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c728:	2300      	movs	r3, #0
 800c72a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	885b      	ldrh	r3, [r3, #2]
 800c730:	b29a      	uxth	r2, r3
 800c732:	897b      	ldrh	r3, [r7, #10]
 800c734:	429a      	cmp	r2, r3
 800c736:	d8e5      	bhi.n	800c704 <USBD_GetEpDesc+0x32>
 800c738:	e000      	b.n	800c73c <USBD_GetEpDesc+0x6a>
          break;
 800c73a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c73c:	693b      	ldr	r3, [r7, #16]
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3718      	adds	r7, #24
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}

0800c746 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c746:	b480      	push	{r7}
 800c748:	b085      	sub	sp, #20
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
 800c74e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	881a      	ldrh	r2, [r3, #0]
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	781b      	ldrb	r3, [r3, #0]
 800c75c:	b29b      	uxth	r3, r3
 800c75e:	4413      	add	r3, r2
 800c760:	b29a      	uxth	r2, r3
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	461a      	mov	r2, r3
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	4413      	add	r3, r2
 800c770:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c772:	68fb      	ldr	r3, [r7, #12]
}
 800c774:	4618      	mov	r0, r3
 800c776:	3714      	adds	r7, #20
 800c778:	46bd      	mov	sp, r7
 800c77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77e:	4770      	bx	lr

0800c780 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c780:	b480      	push	{r7}
 800c782:	b087      	sub	sp, #28
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	3301      	adds	r3, #1
 800c796:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	781b      	ldrb	r3, [r3, #0]
 800c79c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c79e:	8a3b      	ldrh	r3, [r7, #16]
 800c7a0:	021b      	lsls	r3, r3, #8
 800c7a2:	b21a      	sxth	r2, r3
 800c7a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c7a8:	4313      	orrs	r3, r2
 800c7aa:	b21b      	sxth	r3, r3
 800c7ac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c7ae:	89fb      	ldrh	r3, [r7, #14]
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	371c      	adds	r7, #28
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ba:	4770      	bx	lr

0800c7bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b084      	sub	sp, #16
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	781b      	ldrb	r3, [r3, #0]
 800c7ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c7d2:	2b40      	cmp	r3, #64	; 0x40
 800c7d4:	d005      	beq.n	800c7e2 <USBD_StdDevReq+0x26>
 800c7d6:	2b40      	cmp	r3, #64	; 0x40
 800c7d8:	d857      	bhi.n	800c88a <USBD_StdDevReq+0xce>
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d00f      	beq.n	800c7fe <USBD_StdDevReq+0x42>
 800c7de:	2b20      	cmp	r3, #32
 800c7e0:	d153      	bne.n	800c88a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	32ae      	adds	r2, #174	; 0xae
 800c7ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7f0:	689b      	ldr	r3, [r3, #8]
 800c7f2:	6839      	ldr	r1, [r7, #0]
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	4798      	blx	r3
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	73fb      	strb	r3, [r7, #15]
      break;
 800c7fc:	e04a      	b.n	800c894 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	785b      	ldrb	r3, [r3, #1]
 800c802:	2b09      	cmp	r3, #9
 800c804:	d83b      	bhi.n	800c87e <USBD_StdDevReq+0xc2>
 800c806:	a201      	add	r2, pc, #4	; (adr r2, 800c80c <USBD_StdDevReq+0x50>)
 800c808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c80c:	0800c861 	.word	0x0800c861
 800c810:	0800c875 	.word	0x0800c875
 800c814:	0800c87f 	.word	0x0800c87f
 800c818:	0800c86b 	.word	0x0800c86b
 800c81c:	0800c87f 	.word	0x0800c87f
 800c820:	0800c83f 	.word	0x0800c83f
 800c824:	0800c835 	.word	0x0800c835
 800c828:	0800c87f 	.word	0x0800c87f
 800c82c:	0800c857 	.word	0x0800c857
 800c830:	0800c849 	.word	0x0800c849
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c834:	6839      	ldr	r1, [r7, #0]
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f000 fa3c 	bl	800ccb4 <USBD_GetDescriptor>
          break;
 800c83c:	e024      	b.n	800c888 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c83e:	6839      	ldr	r1, [r7, #0]
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f000 fbcb 	bl	800cfdc <USBD_SetAddress>
          break;
 800c846:	e01f      	b.n	800c888 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c848:	6839      	ldr	r1, [r7, #0]
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f000 fc0a 	bl	800d064 <USBD_SetConfig>
 800c850:	4603      	mov	r3, r0
 800c852:	73fb      	strb	r3, [r7, #15]
          break;
 800c854:	e018      	b.n	800c888 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c856:	6839      	ldr	r1, [r7, #0]
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f000 fcad 	bl	800d1b8 <USBD_GetConfig>
          break;
 800c85e:	e013      	b.n	800c888 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c860:	6839      	ldr	r1, [r7, #0]
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f000 fcde 	bl	800d224 <USBD_GetStatus>
          break;
 800c868:	e00e      	b.n	800c888 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c86a:	6839      	ldr	r1, [r7, #0]
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f000 fd0d 	bl	800d28c <USBD_SetFeature>
          break;
 800c872:	e009      	b.n	800c888 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c874:	6839      	ldr	r1, [r7, #0]
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f000 fd31 	bl	800d2de <USBD_ClrFeature>
          break;
 800c87c:	e004      	b.n	800c888 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c87e:	6839      	ldr	r1, [r7, #0]
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f000 fd88 	bl	800d396 <USBD_CtlError>
          break;
 800c886:	bf00      	nop
      }
      break;
 800c888:	e004      	b.n	800c894 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c88a:	6839      	ldr	r1, [r7, #0]
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f000 fd82 	bl	800d396 <USBD_CtlError>
      break;
 800c892:	bf00      	nop
  }

  return ret;
 800c894:	7bfb      	ldrb	r3, [r7, #15]
}
 800c896:	4618      	mov	r0, r3
 800c898:	3710      	adds	r7, #16
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}
 800c89e:	bf00      	nop

0800c8a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b084      	sub	sp, #16
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c8b6:	2b40      	cmp	r3, #64	; 0x40
 800c8b8:	d005      	beq.n	800c8c6 <USBD_StdItfReq+0x26>
 800c8ba:	2b40      	cmp	r3, #64	; 0x40
 800c8bc:	d852      	bhi.n	800c964 <USBD_StdItfReq+0xc4>
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d001      	beq.n	800c8c6 <USBD_StdItfReq+0x26>
 800c8c2:	2b20      	cmp	r3, #32
 800c8c4:	d14e      	bne.n	800c964 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8cc:	b2db      	uxtb	r3, r3
 800c8ce:	3b01      	subs	r3, #1
 800c8d0:	2b02      	cmp	r3, #2
 800c8d2:	d840      	bhi.n	800c956 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	889b      	ldrh	r3, [r3, #4]
 800c8d8:	b2db      	uxtb	r3, r3
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	d836      	bhi.n	800c94c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	889b      	ldrh	r3, [r3, #4]
 800c8e2:	b2db      	uxtb	r3, r3
 800c8e4:	4619      	mov	r1, r3
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f7ff fed9 	bl	800c69e <USBD_CoreFindIF>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c8f0:	7bbb      	ldrb	r3, [r7, #14]
 800c8f2:	2bff      	cmp	r3, #255	; 0xff
 800c8f4:	d01d      	beq.n	800c932 <USBD_StdItfReq+0x92>
 800c8f6:	7bbb      	ldrb	r3, [r7, #14]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d11a      	bne.n	800c932 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c8fc:	7bba      	ldrb	r2, [r7, #14]
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	32ae      	adds	r2, #174	; 0xae
 800c902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c906:	689b      	ldr	r3, [r3, #8]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d00f      	beq.n	800c92c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c90c:	7bba      	ldrb	r2, [r7, #14]
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c914:	7bba      	ldrb	r2, [r7, #14]
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	32ae      	adds	r2, #174	; 0xae
 800c91a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c91e:	689b      	ldr	r3, [r3, #8]
 800c920:	6839      	ldr	r1, [r7, #0]
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	4798      	blx	r3
 800c926:	4603      	mov	r3, r0
 800c928:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c92a:	e004      	b.n	800c936 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c92c:	2303      	movs	r3, #3
 800c92e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c930:	e001      	b.n	800c936 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c932:	2303      	movs	r3, #3
 800c934:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	88db      	ldrh	r3, [r3, #6]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d110      	bne.n	800c960 <USBD_StdItfReq+0xc0>
 800c93e:	7bfb      	ldrb	r3, [r7, #15]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d10d      	bne.n	800c960 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f000 fdf1 	bl	800d52c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c94a:	e009      	b.n	800c960 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c94c:	6839      	ldr	r1, [r7, #0]
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f000 fd21 	bl	800d396 <USBD_CtlError>
          break;
 800c954:	e004      	b.n	800c960 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c956:	6839      	ldr	r1, [r7, #0]
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f000 fd1c 	bl	800d396 <USBD_CtlError>
          break;
 800c95e:	e000      	b.n	800c962 <USBD_StdItfReq+0xc2>
          break;
 800c960:	bf00      	nop
      }
      break;
 800c962:	e004      	b.n	800c96e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c964:	6839      	ldr	r1, [r7, #0]
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f000 fd15 	bl	800d396 <USBD_CtlError>
      break;
 800c96c:	bf00      	nop
  }

  return ret;
 800c96e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c970:	4618      	mov	r0, r3
 800c972:	3710      	adds	r7, #16
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}

0800c978 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b084      	sub	sp, #16
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
 800c980:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c982:	2300      	movs	r3, #0
 800c984:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	889b      	ldrh	r3, [r3, #4]
 800c98a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	781b      	ldrb	r3, [r3, #0]
 800c990:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c994:	2b40      	cmp	r3, #64	; 0x40
 800c996:	d007      	beq.n	800c9a8 <USBD_StdEPReq+0x30>
 800c998:	2b40      	cmp	r3, #64	; 0x40
 800c99a:	f200 817f 	bhi.w	800cc9c <USBD_StdEPReq+0x324>
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d02a      	beq.n	800c9f8 <USBD_StdEPReq+0x80>
 800c9a2:	2b20      	cmp	r3, #32
 800c9a4:	f040 817a 	bne.w	800cc9c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c9a8:	7bbb      	ldrb	r3, [r7, #14]
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f7ff fe83 	bl	800c6b8 <USBD_CoreFindEP>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c9b6:	7b7b      	ldrb	r3, [r7, #13]
 800c9b8:	2bff      	cmp	r3, #255	; 0xff
 800c9ba:	f000 8174 	beq.w	800cca6 <USBD_StdEPReq+0x32e>
 800c9be:	7b7b      	ldrb	r3, [r7, #13]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	f040 8170 	bne.w	800cca6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c9c6:	7b7a      	ldrb	r2, [r7, #13]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c9ce:	7b7a      	ldrb	r2, [r7, #13]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	32ae      	adds	r2, #174	; 0xae
 800c9d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9d8:	689b      	ldr	r3, [r3, #8]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	f000 8163 	beq.w	800cca6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c9e0:	7b7a      	ldrb	r2, [r7, #13]
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	32ae      	adds	r2, #174	; 0xae
 800c9e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9ea:	689b      	ldr	r3, [r3, #8]
 800c9ec:	6839      	ldr	r1, [r7, #0]
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	4798      	blx	r3
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c9f6:	e156      	b.n	800cca6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	785b      	ldrb	r3, [r3, #1]
 800c9fc:	2b03      	cmp	r3, #3
 800c9fe:	d008      	beq.n	800ca12 <USBD_StdEPReq+0x9a>
 800ca00:	2b03      	cmp	r3, #3
 800ca02:	f300 8145 	bgt.w	800cc90 <USBD_StdEPReq+0x318>
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	f000 809b 	beq.w	800cb42 <USBD_StdEPReq+0x1ca>
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	d03c      	beq.n	800ca8a <USBD_StdEPReq+0x112>
 800ca10:	e13e      	b.n	800cc90 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca18:	b2db      	uxtb	r3, r3
 800ca1a:	2b02      	cmp	r3, #2
 800ca1c:	d002      	beq.n	800ca24 <USBD_StdEPReq+0xac>
 800ca1e:	2b03      	cmp	r3, #3
 800ca20:	d016      	beq.n	800ca50 <USBD_StdEPReq+0xd8>
 800ca22:	e02c      	b.n	800ca7e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca24:	7bbb      	ldrb	r3, [r7, #14]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d00d      	beq.n	800ca46 <USBD_StdEPReq+0xce>
 800ca2a:	7bbb      	ldrb	r3, [r7, #14]
 800ca2c:	2b80      	cmp	r3, #128	; 0x80
 800ca2e:	d00a      	beq.n	800ca46 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca30:	7bbb      	ldrb	r3, [r7, #14]
 800ca32:	4619      	mov	r1, r3
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f004 fef7 	bl	8011828 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca3a:	2180      	movs	r1, #128	; 0x80
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f004 fef3 	bl	8011828 <USBD_LL_StallEP>
 800ca42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ca44:	e020      	b.n	800ca88 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ca46:	6839      	ldr	r1, [r7, #0]
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f000 fca4 	bl	800d396 <USBD_CtlError>
              break;
 800ca4e:	e01b      	b.n	800ca88 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	885b      	ldrh	r3, [r3, #2]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d10e      	bne.n	800ca76 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ca58:	7bbb      	ldrb	r3, [r7, #14]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d00b      	beq.n	800ca76 <USBD_StdEPReq+0xfe>
 800ca5e:	7bbb      	ldrb	r3, [r7, #14]
 800ca60:	2b80      	cmp	r3, #128	; 0x80
 800ca62:	d008      	beq.n	800ca76 <USBD_StdEPReq+0xfe>
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	88db      	ldrh	r3, [r3, #6]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d104      	bne.n	800ca76 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca6c:	7bbb      	ldrb	r3, [r7, #14]
 800ca6e:	4619      	mov	r1, r3
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f004 fed9 	bl	8011828 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f000 fd58 	bl	800d52c <USBD_CtlSendStatus>

              break;
 800ca7c:	e004      	b.n	800ca88 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ca7e:	6839      	ldr	r1, [r7, #0]
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f000 fc88 	bl	800d396 <USBD_CtlError>
              break;
 800ca86:	bf00      	nop
          }
          break;
 800ca88:	e107      	b.n	800cc9a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca90:	b2db      	uxtb	r3, r3
 800ca92:	2b02      	cmp	r3, #2
 800ca94:	d002      	beq.n	800ca9c <USBD_StdEPReq+0x124>
 800ca96:	2b03      	cmp	r3, #3
 800ca98:	d016      	beq.n	800cac8 <USBD_StdEPReq+0x150>
 800ca9a:	e04b      	b.n	800cb34 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca9c:	7bbb      	ldrb	r3, [r7, #14]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d00d      	beq.n	800cabe <USBD_StdEPReq+0x146>
 800caa2:	7bbb      	ldrb	r3, [r7, #14]
 800caa4:	2b80      	cmp	r3, #128	; 0x80
 800caa6:	d00a      	beq.n	800cabe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800caa8:	7bbb      	ldrb	r3, [r7, #14]
 800caaa:	4619      	mov	r1, r3
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f004 febb 	bl	8011828 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cab2:	2180      	movs	r1, #128	; 0x80
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f004 feb7 	bl	8011828 <USBD_LL_StallEP>
 800caba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cabc:	e040      	b.n	800cb40 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800cabe:	6839      	ldr	r1, [r7, #0]
 800cac0:	6878      	ldr	r0, [r7, #4]
 800cac2:	f000 fc68 	bl	800d396 <USBD_CtlError>
              break;
 800cac6:	e03b      	b.n	800cb40 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	885b      	ldrh	r3, [r3, #2]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d136      	bne.n	800cb3e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cad0:	7bbb      	ldrb	r3, [r7, #14]
 800cad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d004      	beq.n	800cae4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cada:	7bbb      	ldrb	r3, [r7, #14]
 800cadc:	4619      	mov	r1, r3
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f004 fec1 	bl	8011866 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f000 fd21 	bl	800d52c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800caea:	7bbb      	ldrb	r3, [r7, #14]
 800caec:	4619      	mov	r1, r3
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f7ff fde2 	bl	800c6b8 <USBD_CoreFindEP>
 800caf4:	4603      	mov	r3, r0
 800caf6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800caf8:	7b7b      	ldrb	r3, [r7, #13]
 800cafa:	2bff      	cmp	r3, #255	; 0xff
 800cafc:	d01f      	beq.n	800cb3e <USBD_StdEPReq+0x1c6>
 800cafe:	7b7b      	ldrb	r3, [r7, #13]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d11c      	bne.n	800cb3e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cb04:	7b7a      	ldrb	r2, [r7, #13]
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cb0c:	7b7a      	ldrb	r2, [r7, #13]
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	32ae      	adds	r2, #174	; 0xae
 800cb12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb16:	689b      	ldr	r3, [r3, #8]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d010      	beq.n	800cb3e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cb1c:	7b7a      	ldrb	r2, [r7, #13]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	32ae      	adds	r2, #174	; 0xae
 800cb22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb26:	689b      	ldr	r3, [r3, #8]
 800cb28:	6839      	ldr	r1, [r7, #0]
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	4798      	blx	r3
 800cb2e:	4603      	mov	r3, r0
 800cb30:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800cb32:	e004      	b.n	800cb3e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cb34:	6839      	ldr	r1, [r7, #0]
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f000 fc2d 	bl	800d396 <USBD_CtlError>
              break;
 800cb3c:	e000      	b.n	800cb40 <USBD_StdEPReq+0x1c8>
              break;
 800cb3e:	bf00      	nop
          }
          break;
 800cb40:	e0ab      	b.n	800cc9a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb48:	b2db      	uxtb	r3, r3
 800cb4a:	2b02      	cmp	r3, #2
 800cb4c:	d002      	beq.n	800cb54 <USBD_StdEPReq+0x1dc>
 800cb4e:	2b03      	cmp	r3, #3
 800cb50:	d032      	beq.n	800cbb8 <USBD_StdEPReq+0x240>
 800cb52:	e097      	b.n	800cc84 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb54:	7bbb      	ldrb	r3, [r7, #14]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d007      	beq.n	800cb6a <USBD_StdEPReq+0x1f2>
 800cb5a:	7bbb      	ldrb	r3, [r7, #14]
 800cb5c:	2b80      	cmp	r3, #128	; 0x80
 800cb5e:	d004      	beq.n	800cb6a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cb60:	6839      	ldr	r1, [r7, #0]
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f000 fc17 	bl	800d396 <USBD_CtlError>
                break;
 800cb68:	e091      	b.n	800cc8e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	da0b      	bge.n	800cb8a <USBD_StdEPReq+0x212>
 800cb72:	7bbb      	ldrb	r3, [r7, #14]
 800cb74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cb78:	4613      	mov	r3, r2
 800cb7a:	009b      	lsls	r3, r3, #2
 800cb7c:	4413      	add	r3, r2
 800cb7e:	009b      	lsls	r3, r3, #2
 800cb80:	3310      	adds	r3, #16
 800cb82:	687a      	ldr	r2, [r7, #4]
 800cb84:	4413      	add	r3, r2
 800cb86:	3304      	adds	r3, #4
 800cb88:	e00b      	b.n	800cba2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cb8a:	7bbb      	ldrb	r3, [r7, #14]
 800cb8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb90:	4613      	mov	r3, r2
 800cb92:	009b      	lsls	r3, r3, #2
 800cb94:	4413      	add	r3, r2
 800cb96:	009b      	lsls	r3, r3, #2
 800cb98:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cb9c:	687a      	ldr	r2, [r7, #4]
 800cb9e:	4413      	add	r3, r2
 800cba0:	3304      	adds	r3, #4
 800cba2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	2200      	movs	r2, #0
 800cba8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	2202      	movs	r2, #2
 800cbae:	4619      	mov	r1, r3
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f000 fc61 	bl	800d478 <USBD_CtlSendData>
              break;
 800cbb6:	e06a      	b.n	800cc8e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cbb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	da11      	bge.n	800cbe4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cbc0:	7bbb      	ldrb	r3, [r7, #14]
 800cbc2:	f003 020f 	and.w	r2, r3, #15
 800cbc6:	6879      	ldr	r1, [r7, #4]
 800cbc8:	4613      	mov	r3, r2
 800cbca:	009b      	lsls	r3, r3, #2
 800cbcc:	4413      	add	r3, r2
 800cbce:	009b      	lsls	r3, r3, #2
 800cbd0:	440b      	add	r3, r1
 800cbd2:	3324      	adds	r3, #36	; 0x24
 800cbd4:	881b      	ldrh	r3, [r3, #0]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d117      	bne.n	800cc0a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cbda:	6839      	ldr	r1, [r7, #0]
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f000 fbda 	bl	800d396 <USBD_CtlError>
                  break;
 800cbe2:	e054      	b.n	800cc8e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cbe4:	7bbb      	ldrb	r3, [r7, #14]
 800cbe6:	f003 020f 	and.w	r2, r3, #15
 800cbea:	6879      	ldr	r1, [r7, #4]
 800cbec:	4613      	mov	r3, r2
 800cbee:	009b      	lsls	r3, r3, #2
 800cbf0:	4413      	add	r3, r2
 800cbf2:	009b      	lsls	r3, r3, #2
 800cbf4:	440b      	add	r3, r1
 800cbf6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cbfa:	881b      	ldrh	r3, [r3, #0]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d104      	bne.n	800cc0a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cc00:	6839      	ldr	r1, [r7, #0]
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f000 fbc7 	bl	800d396 <USBD_CtlError>
                  break;
 800cc08:	e041      	b.n	800cc8e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	da0b      	bge.n	800cc2a <USBD_StdEPReq+0x2b2>
 800cc12:	7bbb      	ldrb	r3, [r7, #14]
 800cc14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc18:	4613      	mov	r3, r2
 800cc1a:	009b      	lsls	r3, r3, #2
 800cc1c:	4413      	add	r3, r2
 800cc1e:	009b      	lsls	r3, r3, #2
 800cc20:	3310      	adds	r3, #16
 800cc22:	687a      	ldr	r2, [r7, #4]
 800cc24:	4413      	add	r3, r2
 800cc26:	3304      	adds	r3, #4
 800cc28:	e00b      	b.n	800cc42 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cc2a:	7bbb      	ldrb	r3, [r7, #14]
 800cc2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc30:	4613      	mov	r3, r2
 800cc32:	009b      	lsls	r3, r3, #2
 800cc34:	4413      	add	r3, r2
 800cc36:	009b      	lsls	r3, r3, #2
 800cc38:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cc3c:	687a      	ldr	r2, [r7, #4]
 800cc3e:	4413      	add	r3, r2
 800cc40:	3304      	adds	r3, #4
 800cc42:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cc44:	7bbb      	ldrb	r3, [r7, #14]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d002      	beq.n	800cc50 <USBD_StdEPReq+0x2d8>
 800cc4a:	7bbb      	ldrb	r3, [r7, #14]
 800cc4c:	2b80      	cmp	r3, #128	; 0x80
 800cc4e:	d103      	bne.n	800cc58 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	2200      	movs	r2, #0
 800cc54:	601a      	str	r2, [r3, #0]
 800cc56:	e00e      	b.n	800cc76 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cc58:	7bbb      	ldrb	r3, [r7, #14]
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f004 fe21 	bl	80118a4 <USBD_LL_IsStallEP>
 800cc62:	4603      	mov	r3, r0
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d003      	beq.n	800cc70 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	2201      	movs	r2, #1
 800cc6c:	601a      	str	r2, [r3, #0]
 800cc6e:	e002      	b.n	800cc76 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	2200      	movs	r2, #0
 800cc74:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	2202      	movs	r2, #2
 800cc7a:	4619      	mov	r1, r3
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f000 fbfb 	bl	800d478 <USBD_CtlSendData>
              break;
 800cc82:	e004      	b.n	800cc8e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800cc84:	6839      	ldr	r1, [r7, #0]
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f000 fb85 	bl	800d396 <USBD_CtlError>
              break;
 800cc8c:	bf00      	nop
          }
          break;
 800cc8e:	e004      	b.n	800cc9a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800cc90:	6839      	ldr	r1, [r7, #0]
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f000 fb7f 	bl	800d396 <USBD_CtlError>
          break;
 800cc98:	bf00      	nop
      }
      break;
 800cc9a:	e005      	b.n	800cca8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800cc9c:	6839      	ldr	r1, [r7, #0]
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f000 fb79 	bl	800d396 <USBD_CtlError>
      break;
 800cca4:	e000      	b.n	800cca8 <USBD_StdEPReq+0x330>
      break;
 800cca6:	bf00      	nop
  }

  return ret;
 800cca8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	3710      	adds	r7, #16
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}
	...

0800ccb4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b084      	sub	sp, #16
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	885b      	ldrh	r3, [r3, #2]
 800ccce:	0a1b      	lsrs	r3, r3, #8
 800ccd0:	b29b      	uxth	r3, r3
 800ccd2:	3b01      	subs	r3, #1
 800ccd4:	2b0e      	cmp	r3, #14
 800ccd6:	f200 8152 	bhi.w	800cf7e <USBD_GetDescriptor+0x2ca>
 800ccda:	a201      	add	r2, pc, #4	; (adr r2, 800cce0 <USBD_GetDescriptor+0x2c>)
 800ccdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cce0:	0800cd51 	.word	0x0800cd51
 800cce4:	0800cd69 	.word	0x0800cd69
 800cce8:	0800cda9 	.word	0x0800cda9
 800ccec:	0800cf7f 	.word	0x0800cf7f
 800ccf0:	0800cf7f 	.word	0x0800cf7f
 800ccf4:	0800cf1f 	.word	0x0800cf1f
 800ccf8:	0800cf4b 	.word	0x0800cf4b
 800ccfc:	0800cf7f 	.word	0x0800cf7f
 800cd00:	0800cf7f 	.word	0x0800cf7f
 800cd04:	0800cf7f 	.word	0x0800cf7f
 800cd08:	0800cf7f 	.word	0x0800cf7f
 800cd0c:	0800cf7f 	.word	0x0800cf7f
 800cd10:	0800cf7f 	.word	0x0800cf7f
 800cd14:	0800cf7f 	.word	0x0800cf7f
 800cd18:	0800cd1d 	.word	0x0800cd1d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd22:	69db      	ldr	r3, [r3, #28]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d00b      	beq.n	800cd40 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd2e:	69db      	ldr	r3, [r3, #28]
 800cd30:	687a      	ldr	r2, [r7, #4]
 800cd32:	7c12      	ldrb	r2, [r2, #16]
 800cd34:	f107 0108 	add.w	r1, r7, #8
 800cd38:	4610      	mov	r0, r2
 800cd3a:	4798      	blx	r3
 800cd3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cd3e:	e126      	b.n	800cf8e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cd40:	6839      	ldr	r1, [r7, #0]
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f000 fb27 	bl	800d396 <USBD_CtlError>
        err++;
 800cd48:	7afb      	ldrb	r3, [r7, #11]
 800cd4a:	3301      	adds	r3, #1
 800cd4c:	72fb      	strb	r3, [r7, #11]
      break;
 800cd4e:	e11e      	b.n	800cf8e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	687a      	ldr	r2, [r7, #4]
 800cd5a:	7c12      	ldrb	r2, [r2, #16]
 800cd5c:	f107 0108 	add.w	r1, r7, #8
 800cd60:	4610      	mov	r0, r2
 800cd62:	4798      	blx	r3
 800cd64:	60f8      	str	r0, [r7, #12]
      break;
 800cd66:	e112      	b.n	800cf8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	7c1b      	ldrb	r3, [r3, #16]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d10d      	bne.n	800cd8c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd78:	f107 0208 	add.w	r2, r7, #8
 800cd7c:	4610      	mov	r0, r2
 800cd7e:	4798      	blx	r3
 800cd80:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	3301      	adds	r3, #1
 800cd86:	2202      	movs	r2, #2
 800cd88:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cd8a:	e100      	b.n	800cf8e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd94:	f107 0208 	add.w	r2, r7, #8
 800cd98:	4610      	mov	r0, r2
 800cd9a:	4798      	blx	r3
 800cd9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	3301      	adds	r3, #1
 800cda2:	2202      	movs	r2, #2
 800cda4:	701a      	strb	r2, [r3, #0]
      break;
 800cda6:	e0f2      	b.n	800cf8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	885b      	ldrh	r3, [r3, #2]
 800cdac:	b2db      	uxtb	r3, r3
 800cdae:	2b05      	cmp	r3, #5
 800cdb0:	f200 80ac 	bhi.w	800cf0c <USBD_GetDescriptor+0x258>
 800cdb4:	a201      	add	r2, pc, #4	; (adr r2, 800cdbc <USBD_GetDescriptor+0x108>)
 800cdb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdba:	bf00      	nop
 800cdbc:	0800cdd5 	.word	0x0800cdd5
 800cdc0:	0800ce09 	.word	0x0800ce09
 800cdc4:	0800ce3d 	.word	0x0800ce3d
 800cdc8:	0800ce71 	.word	0x0800ce71
 800cdcc:	0800cea5 	.word	0x0800cea5
 800cdd0:	0800ced9 	.word	0x0800ced9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdda:	685b      	ldr	r3, [r3, #4]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d00b      	beq.n	800cdf8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cde6:	685b      	ldr	r3, [r3, #4]
 800cde8:	687a      	ldr	r2, [r7, #4]
 800cdea:	7c12      	ldrb	r2, [r2, #16]
 800cdec:	f107 0108 	add.w	r1, r7, #8
 800cdf0:	4610      	mov	r0, r2
 800cdf2:	4798      	blx	r3
 800cdf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cdf6:	e091      	b.n	800cf1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cdf8:	6839      	ldr	r1, [r7, #0]
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f000 facb 	bl	800d396 <USBD_CtlError>
            err++;
 800ce00:	7afb      	ldrb	r3, [r7, #11]
 800ce02:	3301      	adds	r3, #1
 800ce04:	72fb      	strb	r3, [r7, #11]
          break;
 800ce06:	e089      	b.n	800cf1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce0e:	689b      	ldr	r3, [r3, #8]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d00b      	beq.n	800ce2c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce1a:	689b      	ldr	r3, [r3, #8]
 800ce1c:	687a      	ldr	r2, [r7, #4]
 800ce1e:	7c12      	ldrb	r2, [r2, #16]
 800ce20:	f107 0108 	add.w	r1, r7, #8
 800ce24:	4610      	mov	r0, r2
 800ce26:	4798      	blx	r3
 800ce28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce2a:	e077      	b.n	800cf1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ce2c:	6839      	ldr	r1, [r7, #0]
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f000 fab1 	bl	800d396 <USBD_CtlError>
            err++;
 800ce34:	7afb      	ldrb	r3, [r7, #11]
 800ce36:	3301      	adds	r3, #1
 800ce38:	72fb      	strb	r3, [r7, #11]
          break;
 800ce3a:	e06f      	b.n	800cf1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce42:	68db      	ldr	r3, [r3, #12]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d00b      	beq.n	800ce60 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce4e:	68db      	ldr	r3, [r3, #12]
 800ce50:	687a      	ldr	r2, [r7, #4]
 800ce52:	7c12      	ldrb	r2, [r2, #16]
 800ce54:	f107 0108 	add.w	r1, r7, #8
 800ce58:	4610      	mov	r0, r2
 800ce5a:	4798      	blx	r3
 800ce5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce5e:	e05d      	b.n	800cf1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ce60:	6839      	ldr	r1, [r7, #0]
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f000 fa97 	bl	800d396 <USBD_CtlError>
            err++;
 800ce68:	7afb      	ldrb	r3, [r7, #11]
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	72fb      	strb	r3, [r7, #11]
          break;
 800ce6e:	e055      	b.n	800cf1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce76:	691b      	ldr	r3, [r3, #16]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d00b      	beq.n	800ce94 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce82:	691b      	ldr	r3, [r3, #16]
 800ce84:	687a      	ldr	r2, [r7, #4]
 800ce86:	7c12      	ldrb	r2, [r2, #16]
 800ce88:	f107 0108 	add.w	r1, r7, #8
 800ce8c:	4610      	mov	r0, r2
 800ce8e:	4798      	blx	r3
 800ce90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce92:	e043      	b.n	800cf1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ce94:	6839      	ldr	r1, [r7, #0]
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f000 fa7d 	bl	800d396 <USBD_CtlError>
            err++;
 800ce9c:	7afb      	ldrb	r3, [r7, #11]
 800ce9e:	3301      	adds	r3, #1
 800cea0:	72fb      	strb	r3, [r7, #11]
          break;
 800cea2:	e03b      	b.n	800cf1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ceaa:	695b      	ldr	r3, [r3, #20]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d00b      	beq.n	800cec8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ceb6:	695b      	ldr	r3, [r3, #20]
 800ceb8:	687a      	ldr	r2, [r7, #4]
 800ceba:	7c12      	ldrb	r2, [r2, #16]
 800cebc:	f107 0108 	add.w	r1, r7, #8
 800cec0:	4610      	mov	r0, r2
 800cec2:	4798      	blx	r3
 800cec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cec6:	e029      	b.n	800cf1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cec8:	6839      	ldr	r1, [r7, #0]
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f000 fa63 	bl	800d396 <USBD_CtlError>
            err++;
 800ced0:	7afb      	ldrb	r3, [r7, #11]
 800ced2:	3301      	adds	r3, #1
 800ced4:	72fb      	strb	r3, [r7, #11]
          break;
 800ced6:	e021      	b.n	800cf1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cede:	699b      	ldr	r3, [r3, #24]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d00b      	beq.n	800cefc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ceea:	699b      	ldr	r3, [r3, #24]
 800ceec:	687a      	ldr	r2, [r7, #4]
 800ceee:	7c12      	ldrb	r2, [r2, #16]
 800cef0:	f107 0108 	add.w	r1, r7, #8
 800cef4:	4610      	mov	r0, r2
 800cef6:	4798      	blx	r3
 800cef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cefa:	e00f      	b.n	800cf1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cefc:	6839      	ldr	r1, [r7, #0]
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f000 fa49 	bl	800d396 <USBD_CtlError>
            err++;
 800cf04:	7afb      	ldrb	r3, [r7, #11]
 800cf06:	3301      	adds	r3, #1
 800cf08:	72fb      	strb	r3, [r7, #11]
          break;
 800cf0a:	e007      	b.n	800cf1c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cf0c:	6839      	ldr	r1, [r7, #0]
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f000 fa41 	bl	800d396 <USBD_CtlError>
          err++;
 800cf14:	7afb      	ldrb	r3, [r7, #11]
 800cf16:	3301      	adds	r3, #1
 800cf18:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800cf1a:	bf00      	nop
      }
      break;
 800cf1c:	e037      	b.n	800cf8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	7c1b      	ldrb	r3, [r3, #16]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d109      	bne.n	800cf3a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf2e:	f107 0208 	add.w	r2, r7, #8
 800cf32:	4610      	mov	r0, r2
 800cf34:	4798      	blx	r3
 800cf36:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cf38:	e029      	b.n	800cf8e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cf3a:	6839      	ldr	r1, [r7, #0]
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f000 fa2a 	bl	800d396 <USBD_CtlError>
        err++;
 800cf42:	7afb      	ldrb	r3, [r7, #11]
 800cf44:	3301      	adds	r3, #1
 800cf46:	72fb      	strb	r3, [r7, #11]
      break;
 800cf48:	e021      	b.n	800cf8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	7c1b      	ldrb	r3, [r3, #16]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d10d      	bne.n	800cf6e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf5a:	f107 0208 	add.w	r2, r7, #8
 800cf5e:	4610      	mov	r0, r2
 800cf60:	4798      	blx	r3
 800cf62:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	3301      	adds	r3, #1
 800cf68:	2207      	movs	r2, #7
 800cf6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cf6c:	e00f      	b.n	800cf8e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cf6e:	6839      	ldr	r1, [r7, #0]
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f000 fa10 	bl	800d396 <USBD_CtlError>
        err++;
 800cf76:	7afb      	ldrb	r3, [r7, #11]
 800cf78:	3301      	adds	r3, #1
 800cf7a:	72fb      	strb	r3, [r7, #11]
      break;
 800cf7c:	e007      	b.n	800cf8e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800cf7e:	6839      	ldr	r1, [r7, #0]
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f000 fa08 	bl	800d396 <USBD_CtlError>
      err++;
 800cf86:	7afb      	ldrb	r3, [r7, #11]
 800cf88:	3301      	adds	r3, #1
 800cf8a:	72fb      	strb	r3, [r7, #11]
      break;
 800cf8c:	bf00      	nop
  }

  if (err != 0U)
 800cf8e:	7afb      	ldrb	r3, [r7, #11]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d11e      	bne.n	800cfd2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	88db      	ldrh	r3, [r3, #6]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d016      	beq.n	800cfca <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800cf9c:	893b      	ldrh	r3, [r7, #8]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d00e      	beq.n	800cfc0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	88da      	ldrh	r2, [r3, #6]
 800cfa6:	893b      	ldrh	r3, [r7, #8]
 800cfa8:	4293      	cmp	r3, r2
 800cfaa:	bf28      	it	cs
 800cfac:	4613      	movcs	r3, r2
 800cfae:	b29b      	uxth	r3, r3
 800cfb0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cfb2:	893b      	ldrh	r3, [r7, #8]
 800cfb4:	461a      	mov	r2, r3
 800cfb6:	68f9      	ldr	r1, [r7, #12]
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f000 fa5d 	bl	800d478 <USBD_CtlSendData>
 800cfbe:	e009      	b.n	800cfd4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cfc0:	6839      	ldr	r1, [r7, #0]
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f000 f9e7 	bl	800d396 <USBD_CtlError>
 800cfc8:	e004      	b.n	800cfd4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f000 faae 	bl	800d52c <USBD_CtlSendStatus>
 800cfd0:	e000      	b.n	800cfd4 <USBD_GetDescriptor+0x320>
    return;
 800cfd2:	bf00      	nop
  }
}
 800cfd4:	3710      	adds	r7, #16
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}
 800cfda:	bf00      	nop

0800cfdc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b084      	sub	sp, #16
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	889b      	ldrh	r3, [r3, #4]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d131      	bne.n	800d052 <USBD_SetAddress+0x76>
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	88db      	ldrh	r3, [r3, #6]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d12d      	bne.n	800d052 <USBD_SetAddress+0x76>
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	885b      	ldrh	r3, [r3, #2]
 800cffa:	2b7f      	cmp	r3, #127	; 0x7f
 800cffc:	d829      	bhi.n	800d052 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	885b      	ldrh	r3, [r3, #2]
 800d002:	b2db      	uxtb	r3, r3
 800d004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d008:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d010:	b2db      	uxtb	r3, r3
 800d012:	2b03      	cmp	r3, #3
 800d014:	d104      	bne.n	800d020 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d016:	6839      	ldr	r1, [r7, #0]
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	f000 f9bc 	bl	800d396 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d01e:	e01d      	b.n	800d05c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	7bfa      	ldrb	r2, [r7, #15]
 800d024:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d028:	7bfb      	ldrb	r3, [r7, #15]
 800d02a:	4619      	mov	r1, r3
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f004 fc65 	bl	80118fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f000 fa7a 	bl	800d52c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d038:	7bfb      	ldrb	r3, [r7, #15]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d004      	beq.n	800d048 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2202      	movs	r2, #2
 800d042:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d046:	e009      	b.n	800d05c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2201      	movs	r2, #1
 800d04c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d050:	e004      	b.n	800d05c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d052:	6839      	ldr	r1, [r7, #0]
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	f000 f99e 	bl	800d396 <USBD_CtlError>
  }
}
 800d05a:	bf00      	nop
 800d05c:	bf00      	nop
 800d05e:	3710      	adds	r7, #16
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b084      	sub	sp, #16
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
 800d06c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d06e:	2300      	movs	r3, #0
 800d070:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	885b      	ldrh	r3, [r3, #2]
 800d076:	b2da      	uxtb	r2, r3
 800d078:	4b4e      	ldr	r3, [pc, #312]	; (800d1b4 <USBD_SetConfig+0x150>)
 800d07a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d07c:	4b4d      	ldr	r3, [pc, #308]	; (800d1b4 <USBD_SetConfig+0x150>)
 800d07e:	781b      	ldrb	r3, [r3, #0]
 800d080:	2b01      	cmp	r3, #1
 800d082:	d905      	bls.n	800d090 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d084:	6839      	ldr	r1, [r7, #0]
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	f000 f985 	bl	800d396 <USBD_CtlError>
    return USBD_FAIL;
 800d08c:	2303      	movs	r3, #3
 800d08e:	e08c      	b.n	800d1aa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d096:	b2db      	uxtb	r3, r3
 800d098:	2b02      	cmp	r3, #2
 800d09a:	d002      	beq.n	800d0a2 <USBD_SetConfig+0x3e>
 800d09c:	2b03      	cmp	r3, #3
 800d09e:	d029      	beq.n	800d0f4 <USBD_SetConfig+0x90>
 800d0a0:	e075      	b.n	800d18e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d0a2:	4b44      	ldr	r3, [pc, #272]	; (800d1b4 <USBD_SetConfig+0x150>)
 800d0a4:	781b      	ldrb	r3, [r3, #0]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d020      	beq.n	800d0ec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d0aa:	4b42      	ldr	r3, [pc, #264]	; (800d1b4 <USBD_SetConfig+0x150>)
 800d0ac:	781b      	ldrb	r3, [r3, #0]
 800d0ae:	461a      	mov	r2, r3
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d0b4:	4b3f      	ldr	r3, [pc, #252]	; (800d1b4 <USBD_SetConfig+0x150>)
 800d0b6:	781b      	ldrb	r3, [r3, #0]
 800d0b8:	4619      	mov	r1, r3
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f7fe ffbd 	bl	800c03a <USBD_SetClassConfig>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d0c4:	7bfb      	ldrb	r3, [r7, #15]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d008      	beq.n	800d0dc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d0ca:	6839      	ldr	r1, [r7, #0]
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f000 f962 	bl	800d396 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2202      	movs	r2, #2
 800d0d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d0da:	e065      	b.n	800d1a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f000 fa25 	bl	800d52c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2203      	movs	r2, #3
 800d0e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d0ea:	e05d      	b.n	800d1a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f000 fa1d 	bl	800d52c <USBD_CtlSendStatus>
      break;
 800d0f2:	e059      	b.n	800d1a8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d0f4:	4b2f      	ldr	r3, [pc, #188]	; (800d1b4 <USBD_SetConfig+0x150>)
 800d0f6:	781b      	ldrb	r3, [r3, #0]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d112      	bne.n	800d122 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2202      	movs	r2, #2
 800d100:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d104:	4b2b      	ldr	r3, [pc, #172]	; (800d1b4 <USBD_SetConfig+0x150>)
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	461a      	mov	r2, r3
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d10e:	4b29      	ldr	r3, [pc, #164]	; (800d1b4 <USBD_SetConfig+0x150>)
 800d110:	781b      	ldrb	r3, [r3, #0]
 800d112:	4619      	mov	r1, r3
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f7fe ffac 	bl	800c072 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f000 fa06 	bl	800d52c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d120:	e042      	b.n	800d1a8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d122:	4b24      	ldr	r3, [pc, #144]	; (800d1b4 <USBD_SetConfig+0x150>)
 800d124:	781b      	ldrb	r3, [r3, #0]
 800d126:	461a      	mov	r2, r3
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	685b      	ldr	r3, [r3, #4]
 800d12c:	429a      	cmp	r2, r3
 800d12e:	d02a      	beq.n	800d186 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	685b      	ldr	r3, [r3, #4]
 800d134:	b2db      	uxtb	r3, r3
 800d136:	4619      	mov	r1, r3
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f7fe ff9a 	bl	800c072 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d13e:	4b1d      	ldr	r3, [pc, #116]	; (800d1b4 <USBD_SetConfig+0x150>)
 800d140:	781b      	ldrb	r3, [r3, #0]
 800d142:	461a      	mov	r2, r3
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d148:	4b1a      	ldr	r3, [pc, #104]	; (800d1b4 <USBD_SetConfig+0x150>)
 800d14a:	781b      	ldrb	r3, [r3, #0]
 800d14c:	4619      	mov	r1, r3
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f7fe ff73 	bl	800c03a <USBD_SetClassConfig>
 800d154:	4603      	mov	r3, r0
 800d156:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d158:	7bfb      	ldrb	r3, [r7, #15]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d00f      	beq.n	800d17e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d15e:	6839      	ldr	r1, [r7, #0]
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f000 f918 	bl	800d396 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	685b      	ldr	r3, [r3, #4]
 800d16a:	b2db      	uxtb	r3, r3
 800d16c:	4619      	mov	r1, r3
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f7fe ff7f 	bl	800c072 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2202      	movs	r2, #2
 800d178:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d17c:	e014      	b.n	800d1a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f000 f9d4 	bl	800d52c <USBD_CtlSendStatus>
      break;
 800d184:	e010      	b.n	800d1a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f000 f9d0 	bl	800d52c <USBD_CtlSendStatus>
      break;
 800d18c:	e00c      	b.n	800d1a8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d18e:	6839      	ldr	r1, [r7, #0]
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f000 f900 	bl	800d396 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d196:	4b07      	ldr	r3, [pc, #28]	; (800d1b4 <USBD_SetConfig+0x150>)
 800d198:	781b      	ldrb	r3, [r3, #0]
 800d19a:	4619      	mov	r1, r3
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f7fe ff68 	bl	800c072 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d1a2:	2303      	movs	r3, #3
 800d1a4:	73fb      	strb	r3, [r7, #15]
      break;
 800d1a6:	bf00      	nop
  }

  return ret;
 800d1a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3710      	adds	r7, #16
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}
 800d1b2:	bf00      	nop
 800d1b4:	20000887 	.word	0x20000887

0800d1b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	88db      	ldrh	r3, [r3, #6]
 800d1c6:	2b01      	cmp	r3, #1
 800d1c8:	d004      	beq.n	800d1d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d1ca:	6839      	ldr	r1, [r7, #0]
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f000 f8e2 	bl	800d396 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d1d2:	e023      	b.n	800d21c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1da:	b2db      	uxtb	r3, r3
 800d1dc:	2b02      	cmp	r3, #2
 800d1de:	dc02      	bgt.n	800d1e6 <USBD_GetConfig+0x2e>
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	dc03      	bgt.n	800d1ec <USBD_GetConfig+0x34>
 800d1e4:	e015      	b.n	800d212 <USBD_GetConfig+0x5a>
 800d1e6:	2b03      	cmp	r3, #3
 800d1e8:	d00b      	beq.n	800d202 <USBD_GetConfig+0x4a>
 800d1ea:	e012      	b.n	800d212 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	3308      	adds	r3, #8
 800d1f6:	2201      	movs	r2, #1
 800d1f8:	4619      	mov	r1, r3
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f000 f93c 	bl	800d478 <USBD_CtlSendData>
        break;
 800d200:	e00c      	b.n	800d21c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	3304      	adds	r3, #4
 800d206:	2201      	movs	r2, #1
 800d208:	4619      	mov	r1, r3
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f000 f934 	bl	800d478 <USBD_CtlSendData>
        break;
 800d210:	e004      	b.n	800d21c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d212:	6839      	ldr	r1, [r7, #0]
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f000 f8be 	bl	800d396 <USBD_CtlError>
        break;
 800d21a:	bf00      	nop
}
 800d21c:	bf00      	nop
 800d21e:	3708      	adds	r7, #8
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}

0800d224 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b082      	sub	sp, #8
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
 800d22c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d234:	b2db      	uxtb	r3, r3
 800d236:	3b01      	subs	r3, #1
 800d238:	2b02      	cmp	r3, #2
 800d23a:	d81e      	bhi.n	800d27a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	88db      	ldrh	r3, [r3, #6]
 800d240:	2b02      	cmp	r3, #2
 800d242:	d004      	beq.n	800d24e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d244:	6839      	ldr	r1, [r7, #0]
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f000 f8a5 	bl	800d396 <USBD_CtlError>
        break;
 800d24c:	e01a      	b.n	800d284 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2201      	movs	r2, #1
 800d252:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d005      	beq.n	800d26a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	68db      	ldr	r3, [r3, #12]
 800d262:	f043 0202 	orr.w	r2, r3, #2
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	330c      	adds	r3, #12
 800d26e:	2202      	movs	r2, #2
 800d270:	4619      	mov	r1, r3
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f000 f900 	bl	800d478 <USBD_CtlSendData>
      break;
 800d278:	e004      	b.n	800d284 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d27a:	6839      	ldr	r1, [r7, #0]
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f000 f88a 	bl	800d396 <USBD_CtlError>
      break;
 800d282:	bf00      	nop
  }
}
 800d284:	bf00      	nop
 800d286:	3708      	adds	r7, #8
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}

0800d28c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b082      	sub	sp, #8
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	885b      	ldrh	r3, [r3, #2]
 800d29a:	2b01      	cmp	r3, #1
 800d29c:	d107      	bne.n	800d2ae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2201      	movs	r2, #1
 800d2a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f000 f940 	bl	800d52c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d2ac:	e013      	b.n	800d2d6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	885b      	ldrh	r3, [r3, #2]
 800d2b2:	2b02      	cmp	r3, #2
 800d2b4:	d10b      	bne.n	800d2ce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	889b      	ldrh	r3, [r3, #4]
 800d2ba:	0a1b      	lsrs	r3, r3, #8
 800d2bc:	b29b      	uxth	r3, r3
 800d2be:	b2da      	uxtb	r2, r3
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f000 f930 	bl	800d52c <USBD_CtlSendStatus>
}
 800d2cc:	e003      	b.n	800d2d6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d2ce:	6839      	ldr	r1, [r7, #0]
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f000 f860 	bl	800d396 <USBD_CtlError>
}
 800d2d6:	bf00      	nop
 800d2d8:	3708      	adds	r7, #8
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}

0800d2de <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2de:	b580      	push	{r7, lr}
 800d2e0:	b082      	sub	sp, #8
 800d2e2:	af00      	add	r7, sp, #0
 800d2e4:	6078      	str	r0, [r7, #4]
 800d2e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2ee:	b2db      	uxtb	r3, r3
 800d2f0:	3b01      	subs	r3, #1
 800d2f2:	2b02      	cmp	r3, #2
 800d2f4:	d80b      	bhi.n	800d30e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	885b      	ldrh	r3, [r3, #2]
 800d2fa:	2b01      	cmp	r3, #1
 800d2fc:	d10c      	bne.n	800d318 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2200      	movs	r2, #0
 800d302:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f000 f910 	bl	800d52c <USBD_CtlSendStatus>
      }
      break;
 800d30c:	e004      	b.n	800d318 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d30e:	6839      	ldr	r1, [r7, #0]
 800d310:	6878      	ldr	r0, [r7, #4]
 800d312:	f000 f840 	bl	800d396 <USBD_CtlError>
      break;
 800d316:	e000      	b.n	800d31a <USBD_ClrFeature+0x3c>
      break;
 800d318:	bf00      	nop
  }
}
 800d31a:	bf00      	nop
 800d31c:	3708      	adds	r7, #8
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}

0800d322 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d322:	b580      	push	{r7, lr}
 800d324:	b084      	sub	sp, #16
 800d326:	af00      	add	r7, sp, #0
 800d328:	6078      	str	r0, [r7, #4]
 800d32a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	781a      	ldrb	r2, [r3, #0]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	3301      	adds	r3, #1
 800d33c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	781a      	ldrb	r2, [r3, #0]
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	3301      	adds	r3, #1
 800d34a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d34c:	68f8      	ldr	r0, [r7, #12]
 800d34e:	f7ff fa17 	bl	800c780 <SWAPBYTE>
 800d352:	4603      	mov	r3, r0
 800d354:	461a      	mov	r2, r3
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	3301      	adds	r3, #1
 800d35e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	3301      	adds	r3, #1
 800d364:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d366:	68f8      	ldr	r0, [r7, #12]
 800d368:	f7ff fa0a 	bl	800c780 <SWAPBYTE>
 800d36c:	4603      	mov	r3, r0
 800d36e:	461a      	mov	r2, r3
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	3301      	adds	r3, #1
 800d378:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	3301      	adds	r3, #1
 800d37e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d380:	68f8      	ldr	r0, [r7, #12]
 800d382:	f7ff f9fd 	bl	800c780 <SWAPBYTE>
 800d386:	4603      	mov	r3, r0
 800d388:	461a      	mov	r2, r3
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	80da      	strh	r2, [r3, #6]
}
 800d38e:	bf00      	nop
 800d390:	3710      	adds	r7, #16
 800d392:	46bd      	mov	sp, r7
 800d394:	bd80      	pop	{r7, pc}

0800d396 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d396:	b580      	push	{r7, lr}
 800d398:	b082      	sub	sp, #8
 800d39a:	af00      	add	r7, sp, #0
 800d39c:	6078      	str	r0, [r7, #4]
 800d39e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d3a0:	2180      	movs	r1, #128	; 0x80
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	f004 fa40 	bl	8011828 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d3a8:	2100      	movs	r1, #0
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f004 fa3c 	bl	8011828 <USBD_LL_StallEP>
}
 800d3b0:	bf00      	nop
 800d3b2:	3708      	adds	r7, #8
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}

0800d3b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b086      	sub	sp, #24
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	60f8      	str	r0, [r7, #12]
 800d3c0:	60b9      	str	r1, [r7, #8]
 800d3c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d036      	beq.n	800d43c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d3d2:	6938      	ldr	r0, [r7, #16]
 800d3d4:	f000 f836 	bl	800d444 <USBD_GetLen>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	3301      	adds	r3, #1
 800d3dc:	b29b      	uxth	r3, r3
 800d3de:	005b      	lsls	r3, r3, #1
 800d3e0:	b29a      	uxth	r2, r3
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d3e6:	7dfb      	ldrb	r3, [r7, #23]
 800d3e8:	68ba      	ldr	r2, [r7, #8]
 800d3ea:	4413      	add	r3, r2
 800d3ec:	687a      	ldr	r2, [r7, #4]
 800d3ee:	7812      	ldrb	r2, [r2, #0]
 800d3f0:	701a      	strb	r2, [r3, #0]
  idx++;
 800d3f2:	7dfb      	ldrb	r3, [r7, #23]
 800d3f4:	3301      	adds	r3, #1
 800d3f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d3f8:	7dfb      	ldrb	r3, [r7, #23]
 800d3fa:	68ba      	ldr	r2, [r7, #8]
 800d3fc:	4413      	add	r3, r2
 800d3fe:	2203      	movs	r2, #3
 800d400:	701a      	strb	r2, [r3, #0]
  idx++;
 800d402:	7dfb      	ldrb	r3, [r7, #23]
 800d404:	3301      	adds	r3, #1
 800d406:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d408:	e013      	b.n	800d432 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d40a:	7dfb      	ldrb	r3, [r7, #23]
 800d40c:	68ba      	ldr	r2, [r7, #8]
 800d40e:	4413      	add	r3, r2
 800d410:	693a      	ldr	r2, [r7, #16]
 800d412:	7812      	ldrb	r2, [r2, #0]
 800d414:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	3301      	adds	r3, #1
 800d41a:	613b      	str	r3, [r7, #16]
    idx++;
 800d41c:	7dfb      	ldrb	r3, [r7, #23]
 800d41e:	3301      	adds	r3, #1
 800d420:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d422:	7dfb      	ldrb	r3, [r7, #23]
 800d424:	68ba      	ldr	r2, [r7, #8]
 800d426:	4413      	add	r3, r2
 800d428:	2200      	movs	r2, #0
 800d42a:	701a      	strb	r2, [r3, #0]
    idx++;
 800d42c:	7dfb      	ldrb	r3, [r7, #23]
 800d42e:	3301      	adds	r3, #1
 800d430:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d432:	693b      	ldr	r3, [r7, #16]
 800d434:	781b      	ldrb	r3, [r3, #0]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d1e7      	bne.n	800d40a <USBD_GetString+0x52>
 800d43a:	e000      	b.n	800d43e <USBD_GetString+0x86>
    return;
 800d43c:	bf00      	nop
  }
}
 800d43e:	3718      	adds	r7, #24
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d444:	b480      	push	{r7}
 800d446:	b085      	sub	sp, #20
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d44c:	2300      	movs	r3, #0
 800d44e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d454:	e005      	b.n	800d462 <USBD_GetLen+0x1e>
  {
    len++;
 800d456:	7bfb      	ldrb	r3, [r7, #15]
 800d458:	3301      	adds	r3, #1
 800d45a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	3301      	adds	r3, #1
 800d460:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	781b      	ldrb	r3, [r3, #0]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d1f5      	bne.n	800d456 <USBD_GetLen+0x12>
  }

  return len;
 800d46a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3714      	adds	r7, #20
 800d470:	46bd      	mov	sp, r7
 800d472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d476:	4770      	bx	lr

0800d478 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b084      	sub	sp, #16
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	60f8      	str	r0, [r7, #12]
 800d480:	60b9      	str	r1, [r7, #8]
 800d482:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2202      	movs	r2, #2
 800d488:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	687a      	ldr	r2, [r7, #4]
 800d490:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	687a      	ldr	r2, [r7, #4]
 800d496:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	68ba      	ldr	r2, [r7, #8]
 800d49c:	2100      	movs	r1, #0
 800d49e:	68f8      	ldr	r0, [r7, #12]
 800d4a0:	f004 fa4b 	bl	801193a <USBD_LL_Transmit>

  return USBD_OK;
 800d4a4:	2300      	movs	r3, #0
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	3710      	adds	r7, #16
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}

0800d4ae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d4ae:	b580      	push	{r7, lr}
 800d4b0:	b084      	sub	sp, #16
 800d4b2:	af00      	add	r7, sp, #0
 800d4b4:	60f8      	str	r0, [r7, #12]
 800d4b6:	60b9      	str	r1, [r7, #8]
 800d4b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	68ba      	ldr	r2, [r7, #8]
 800d4be:	2100      	movs	r1, #0
 800d4c0:	68f8      	ldr	r0, [r7, #12]
 800d4c2:	f004 fa3a 	bl	801193a <USBD_LL_Transmit>

  return USBD_OK;
 800d4c6:	2300      	movs	r3, #0
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3710      	adds	r7, #16
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}

0800d4d0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b084      	sub	sp, #16
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	60f8      	str	r0, [r7, #12]
 800d4d8:	60b9      	str	r1, [r7, #8]
 800d4da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2203      	movs	r2, #3
 800d4e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	687a      	ldr	r2, [r7, #4]
 800d4e8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	687a      	ldr	r2, [r7, #4]
 800d4f0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	68ba      	ldr	r2, [r7, #8]
 800d4f8:	2100      	movs	r1, #0
 800d4fa:	68f8      	ldr	r0, [r7, #12]
 800d4fc:	f004 fa3e 	bl	801197c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d500:	2300      	movs	r3, #0
}
 800d502:	4618      	mov	r0, r3
 800d504:	3710      	adds	r7, #16
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}

0800d50a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d50a:	b580      	push	{r7, lr}
 800d50c:	b084      	sub	sp, #16
 800d50e:	af00      	add	r7, sp, #0
 800d510:	60f8      	str	r0, [r7, #12]
 800d512:	60b9      	str	r1, [r7, #8]
 800d514:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	68ba      	ldr	r2, [r7, #8]
 800d51a:	2100      	movs	r1, #0
 800d51c:	68f8      	ldr	r0, [r7, #12]
 800d51e:	f004 fa2d 	bl	801197c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d522:	2300      	movs	r3, #0
}
 800d524:	4618      	mov	r0, r3
 800d526:	3710      	adds	r7, #16
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}

0800d52c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b082      	sub	sp, #8
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2204      	movs	r2, #4
 800d538:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d53c:	2300      	movs	r3, #0
 800d53e:	2200      	movs	r2, #0
 800d540:	2100      	movs	r1, #0
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f004 f9f9 	bl	801193a <USBD_LL_Transmit>

  return USBD_OK;
 800d548:	2300      	movs	r3, #0
}
 800d54a:	4618      	mov	r0, r3
 800d54c:	3708      	adds	r7, #8
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}

0800d552 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d552:	b580      	push	{r7, lr}
 800d554:	b082      	sub	sp, #8
 800d556:	af00      	add	r7, sp, #0
 800d558:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2205      	movs	r2, #5
 800d55e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d562:	2300      	movs	r3, #0
 800d564:	2200      	movs	r2, #0
 800d566:	2100      	movs	r1, #0
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f004 fa07 	bl	801197c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d56e:	2300      	movs	r3, #0
}
 800d570:	4618      	mov	r0, r3
 800d572:	3708      	adds	r7, #8
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d578:	b480      	push	{r7}
 800d57a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800d57c:	bf00      	nop
 800d57e:	46bd      	mov	sp, r7
 800d580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d584:	4770      	bx	lr
	...

0800d588 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d588:	b480      	push	{r7}
 800d58a:	b085      	sub	sp, #20
 800d58c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d58e:	f3ef 8305 	mrs	r3, IPSR
 800d592:	60bb      	str	r3, [r7, #8]
  return(result);
 800d594:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d596:	2b00      	cmp	r3, #0
 800d598:	d10f      	bne.n	800d5ba <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d59a:	f3ef 8310 	mrs	r3, PRIMASK
 800d59e:	607b      	str	r3, [r7, #4]
  return(result);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d105      	bne.n	800d5b2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d5a6:	f3ef 8311 	mrs	r3, BASEPRI
 800d5aa:	603b      	str	r3, [r7, #0]
  return(result);
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d007      	beq.n	800d5c2 <osKernelInitialize+0x3a>
 800d5b2:	4b0e      	ldr	r3, [pc, #56]	; (800d5ec <osKernelInitialize+0x64>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	2b02      	cmp	r3, #2
 800d5b8:	d103      	bne.n	800d5c2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800d5ba:	f06f 0305 	mvn.w	r3, #5
 800d5be:	60fb      	str	r3, [r7, #12]
 800d5c0:	e00c      	b.n	800d5dc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d5c2:	4b0a      	ldr	r3, [pc, #40]	; (800d5ec <osKernelInitialize+0x64>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d105      	bne.n	800d5d6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d5ca:	4b08      	ldr	r3, [pc, #32]	; (800d5ec <osKernelInitialize+0x64>)
 800d5cc:	2201      	movs	r2, #1
 800d5ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	60fb      	str	r3, [r7, #12]
 800d5d4:	e002      	b.n	800d5dc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800d5d6:	f04f 33ff 	mov.w	r3, #4294967295
 800d5da:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d5dc:	68fb      	ldr	r3, [r7, #12]
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3714      	adds	r7, #20
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e8:	4770      	bx	lr
 800d5ea:	bf00      	nop
 800d5ec:	20000888 	.word	0x20000888

0800d5f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b084      	sub	sp, #16
 800d5f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d5f6:	f3ef 8305 	mrs	r3, IPSR
 800d5fa:	60bb      	str	r3, [r7, #8]
  return(result);
 800d5fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d10f      	bne.n	800d622 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d602:	f3ef 8310 	mrs	r3, PRIMASK
 800d606:	607b      	str	r3, [r7, #4]
  return(result);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d105      	bne.n	800d61a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d60e:	f3ef 8311 	mrs	r3, BASEPRI
 800d612:	603b      	str	r3, [r7, #0]
  return(result);
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d007      	beq.n	800d62a <osKernelStart+0x3a>
 800d61a:	4b0f      	ldr	r3, [pc, #60]	; (800d658 <osKernelStart+0x68>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	2b02      	cmp	r3, #2
 800d620:	d103      	bne.n	800d62a <osKernelStart+0x3a>
    stat = osErrorISR;
 800d622:	f06f 0305 	mvn.w	r3, #5
 800d626:	60fb      	str	r3, [r7, #12]
 800d628:	e010      	b.n	800d64c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d62a:	4b0b      	ldr	r3, [pc, #44]	; (800d658 <osKernelStart+0x68>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	2b01      	cmp	r3, #1
 800d630:	d109      	bne.n	800d646 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d632:	f7ff ffa1 	bl	800d578 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d636:	4b08      	ldr	r3, [pc, #32]	; (800d658 <osKernelStart+0x68>)
 800d638:	2202      	movs	r2, #2
 800d63a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d63c:	f001 fedc 	bl	800f3f8 <vTaskStartScheduler>
      stat = osOK;
 800d640:	2300      	movs	r3, #0
 800d642:	60fb      	str	r3, [r7, #12]
 800d644:	e002      	b.n	800d64c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800d646:	f04f 33ff 	mov.w	r3, #4294967295
 800d64a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d64c:	68fb      	ldr	r3, [r7, #12]
}
 800d64e:	4618      	mov	r0, r3
 800d650:	3710      	adds	r7, #16
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}
 800d656:	bf00      	nop
 800d658:	20000888 	.word	0x20000888

0800d65c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b090      	sub	sp, #64	; 0x40
 800d660:	af04      	add	r7, sp, #16
 800d662:	60f8      	str	r0, [r7, #12]
 800d664:	60b9      	str	r1, [r7, #8]
 800d666:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d668:	2300      	movs	r3, #0
 800d66a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d66c:	f3ef 8305 	mrs	r3, IPSR
 800d670:	61fb      	str	r3, [r7, #28]
  return(result);
 800d672:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800d674:	2b00      	cmp	r3, #0
 800d676:	f040 8090 	bne.w	800d79a <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d67a:	f3ef 8310 	mrs	r3, PRIMASK
 800d67e:	61bb      	str	r3, [r7, #24]
  return(result);
 800d680:	69bb      	ldr	r3, [r7, #24]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d105      	bne.n	800d692 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d686:	f3ef 8311 	mrs	r3, BASEPRI
 800d68a:	617b      	str	r3, [r7, #20]
  return(result);
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d003      	beq.n	800d69a <osThreadNew+0x3e>
 800d692:	4b44      	ldr	r3, [pc, #272]	; (800d7a4 <osThreadNew+0x148>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	2b02      	cmp	r3, #2
 800d698:	d07f      	beq.n	800d79a <osThreadNew+0x13e>
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d07c      	beq.n	800d79a <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800d6a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d6a4:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800d6a6:	2318      	movs	r3, #24
 800d6a8:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800d6ae:	f04f 33ff 	mov.w	r3, #4294967295
 800d6b2:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d045      	beq.n	800d746 <osThreadNew+0xea>
      if (attr->name != NULL) {
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d002      	beq.n	800d6c8 <osThreadNew+0x6c>
        name = attr->name;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	699b      	ldr	r3, [r3, #24]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d002      	beq.n	800d6d6 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	699b      	ldr	r3, [r3, #24]
 800d6d4:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d008      	beq.n	800d6ee <osThreadNew+0x92>
 800d6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6de:	2b38      	cmp	r3, #56	; 0x38
 800d6e0:	d805      	bhi.n	800d6ee <osThreadNew+0x92>
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	685b      	ldr	r3, [r3, #4]
 800d6e6:	f003 0301 	and.w	r3, r3, #1
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d001      	beq.n	800d6f2 <osThreadNew+0x96>
        return (NULL);
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	e054      	b.n	800d79c <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	695b      	ldr	r3, [r3, #20]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d003      	beq.n	800d702 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	695b      	ldr	r3, [r3, #20]
 800d6fe:	089b      	lsrs	r3, r3, #2
 800d700:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	689b      	ldr	r3, [r3, #8]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d00e      	beq.n	800d728 <osThreadNew+0xcc>
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	68db      	ldr	r3, [r3, #12]
 800d70e:	2bbb      	cmp	r3, #187	; 0xbb
 800d710:	d90a      	bls.n	800d728 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d716:	2b00      	cmp	r3, #0
 800d718:	d006      	beq.n	800d728 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	695b      	ldr	r3, [r3, #20]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d002      	beq.n	800d728 <osThreadNew+0xcc>
        mem = 1;
 800d722:	2301      	movs	r3, #1
 800d724:	623b      	str	r3, [r7, #32]
 800d726:	e010      	b.n	800d74a <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	689b      	ldr	r3, [r3, #8]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d10c      	bne.n	800d74a <osThreadNew+0xee>
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	68db      	ldr	r3, [r3, #12]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d108      	bne.n	800d74a <osThreadNew+0xee>
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	691b      	ldr	r3, [r3, #16]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d104      	bne.n	800d74a <osThreadNew+0xee>
          mem = 0;
 800d740:	2300      	movs	r3, #0
 800d742:	623b      	str	r3, [r7, #32]
 800d744:	e001      	b.n	800d74a <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800d746:	2300      	movs	r3, #0
 800d748:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d74a:	6a3b      	ldr	r3, [r7, #32]
 800d74c:	2b01      	cmp	r3, #1
 800d74e:	d110      	bne.n	800d772 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800d754:	687a      	ldr	r2, [r7, #4]
 800d756:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d758:	9202      	str	r2, [sp, #8]
 800d75a:	9301      	str	r3, [sp, #4]
 800d75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d75e:	9300      	str	r3, [sp, #0]
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d764:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d766:	68f8      	ldr	r0, [r7, #12]
 800d768:	f001 fc50 	bl	800f00c <xTaskCreateStatic>
 800d76c:	4603      	mov	r3, r0
 800d76e:	613b      	str	r3, [r7, #16]
 800d770:	e013      	b.n	800d79a <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800d772:	6a3b      	ldr	r3, [r7, #32]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d110      	bne.n	800d79a <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d77a:	b29a      	uxth	r2, r3
 800d77c:	f107 0310 	add.w	r3, r7, #16
 800d780:	9301      	str	r3, [sp, #4]
 800d782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d784:	9300      	str	r3, [sp, #0]
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d78a:	68f8      	ldr	r0, [r7, #12]
 800d78c:	f001 fca1 	bl	800f0d2 <xTaskCreate>
 800d790:	4603      	mov	r3, r0
 800d792:	2b01      	cmp	r3, #1
 800d794:	d001      	beq.n	800d79a <osThreadNew+0x13e>
          hTask = NULL;
 800d796:	2300      	movs	r3, #0
 800d798:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d79a:	693b      	ldr	r3, [r7, #16]
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	3730      	adds	r7, #48	; 0x30
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}
 800d7a4:	20000888 	.word	0x20000888

0800d7a8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b086      	sub	sp, #24
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7b0:	f3ef 8305 	mrs	r3, IPSR
 800d7b4:	613b      	str	r3, [r7, #16]
  return(result);
 800d7b6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d10f      	bne.n	800d7dc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d7bc:	f3ef 8310 	mrs	r3, PRIMASK
 800d7c0:	60fb      	str	r3, [r7, #12]
  return(result);
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d105      	bne.n	800d7d4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d7c8:	f3ef 8311 	mrs	r3, BASEPRI
 800d7cc:	60bb      	str	r3, [r7, #8]
  return(result);
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d007      	beq.n	800d7e4 <osDelay+0x3c>
 800d7d4:	4b0a      	ldr	r3, [pc, #40]	; (800d800 <osDelay+0x58>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	2b02      	cmp	r3, #2
 800d7da:	d103      	bne.n	800d7e4 <osDelay+0x3c>
    stat = osErrorISR;
 800d7dc:	f06f 0305 	mvn.w	r3, #5
 800d7e0:	617b      	str	r3, [r7, #20]
 800d7e2:	e007      	b.n	800d7f4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d002      	beq.n	800d7f4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f001 fdcc 	bl	800f38c <vTaskDelay>
    }
  }

  return (stat);
 800d7f4:	697b      	ldr	r3, [r7, #20]
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3718      	adds	r7, #24
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}
 800d7fe:	bf00      	nop
 800d800:	20000888 	.word	0x20000888

0800d804 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800d804:	b580      	push	{r7, lr}
 800d806:	b08c      	sub	sp, #48	; 0x30
 800d808:	af02      	add	r7, sp, #8
 800d80a:	60f8      	str	r0, [r7, #12]
 800d80c:	60b9      	str	r1, [r7, #8]
 800d80e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800d810:	2300      	movs	r3, #0
 800d812:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d814:	f3ef 8305 	mrs	r3, IPSR
 800d818:	61bb      	str	r3, [r7, #24]
  return(result);
 800d81a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	f040 8086 	bne.w	800d92e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d822:	f3ef 8310 	mrs	r3, PRIMASK
 800d826:	617b      	str	r3, [r7, #20]
  return(result);
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d105      	bne.n	800d83a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d82e:	f3ef 8311 	mrs	r3, BASEPRI
 800d832:	613b      	str	r3, [r7, #16]
  return(result);
 800d834:	693b      	ldr	r3, [r7, #16]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d003      	beq.n	800d842 <osSemaphoreNew+0x3e>
 800d83a:	4b3f      	ldr	r3, [pc, #252]	; (800d938 <osSemaphoreNew+0x134>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	2b02      	cmp	r3, #2
 800d840:	d075      	beq.n	800d92e <osSemaphoreNew+0x12a>
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d072      	beq.n	800d92e <osSemaphoreNew+0x12a>
 800d848:	68ba      	ldr	r2, [r7, #8]
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d86e      	bhi.n	800d92e <osSemaphoreNew+0x12a>
    mem = -1;
 800d850:	f04f 33ff 	mov.w	r3, #4294967295
 800d854:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d015      	beq.n	800d888 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	689b      	ldr	r3, [r3, #8]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d006      	beq.n	800d872 <osSemaphoreNew+0x6e>
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	68db      	ldr	r3, [r3, #12]
 800d868:	2b4f      	cmp	r3, #79	; 0x4f
 800d86a:	d902      	bls.n	800d872 <osSemaphoreNew+0x6e>
        mem = 1;
 800d86c:	2301      	movs	r3, #1
 800d86e:	623b      	str	r3, [r7, #32]
 800d870:	e00c      	b.n	800d88c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	689b      	ldr	r3, [r3, #8]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d108      	bne.n	800d88c <osSemaphoreNew+0x88>
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	68db      	ldr	r3, [r3, #12]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d104      	bne.n	800d88c <osSemaphoreNew+0x88>
          mem = 0;
 800d882:	2300      	movs	r3, #0
 800d884:	623b      	str	r3, [r7, #32]
 800d886:	e001      	b.n	800d88c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800d888:	2300      	movs	r3, #0
 800d88a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800d88c:	6a3b      	ldr	r3, [r7, #32]
 800d88e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d892:	d04c      	beq.n	800d92e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	2b01      	cmp	r3, #1
 800d898:	d128      	bne.n	800d8ec <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800d89a:	6a3b      	ldr	r3, [r7, #32]
 800d89c:	2b01      	cmp	r3, #1
 800d89e:	d10a      	bne.n	800d8b6 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	689b      	ldr	r3, [r3, #8]
 800d8a4:	2203      	movs	r2, #3
 800d8a6:	9200      	str	r2, [sp, #0]
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	2100      	movs	r1, #0
 800d8ac:	2001      	movs	r0, #1
 800d8ae:	f000 fbc1 	bl	800e034 <xQueueGenericCreateStatic>
 800d8b2:	6278      	str	r0, [r7, #36]	; 0x24
 800d8b4:	e005      	b.n	800d8c2 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800d8b6:	2203      	movs	r2, #3
 800d8b8:	2100      	movs	r1, #0
 800d8ba:	2001      	movs	r0, #1
 800d8bc:	f000 fc3c 	bl	800e138 <xQueueGenericCreate>
 800d8c0:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800d8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d022      	beq.n	800d90e <osSemaphoreNew+0x10a>
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d01f      	beq.n	800d90e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	2100      	movs	r1, #0
 800d8d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d8d6:	f000 fd07 	bl	800e2e8 <xQueueGenericSend>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	2b01      	cmp	r3, #1
 800d8de:	d016      	beq.n	800d90e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800d8e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d8e2:	f001 f9bd 	bl	800ec60 <vQueueDelete>
            hSemaphore = NULL;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	627b      	str	r3, [r7, #36]	; 0x24
 800d8ea:	e010      	b.n	800d90e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800d8ec:	6a3b      	ldr	r3, [r7, #32]
 800d8ee:	2b01      	cmp	r3, #1
 800d8f0:	d108      	bne.n	800d904 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	689b      	ldr	r3, [r3, #8]
 800d8f6:	461a      	mov	r2, r3
 800d8f8:	68b9      	ldr	r1, [r7, #8]
 800d8fa:	68f8      	ldr	r0, [r7, #12]
 800d8fc:	f000 fc81 	bl	800e202 <xQueueCreateCountingSemaphoreStatic>
 800d900:	6278      	str	r0, [r7, #36]	; 0x24
 800d902:	e004      	b.n	800d90e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800d904:	68b9      	ldr	r1, [r7, #8]
 800d906:	68f8      	ldr	r0, [r7, #12]
 800d908:	f000 fcb6 	bl	800e278 <xQueueCreateCountingSemaphore>
 800d90c:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800d90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d910:	2b00      	cmp	r3, #0
 800d912:	d00c      	beq.n	800d92e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d003      	beq.n	800d922 <osSemaphoreNew+0x11e>
          name = attr->name;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	61fb      	str	r3, [r7, #28]
 800d920:	e001      	b.n	800d926 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800d922:	2300      	movs	r3, #0
 800d924:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800d926:	69f9      	ldr	r1, [r7, #28]
 800d928:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d92a:	f001 fae7 	bl	800eefc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800d92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d930:	4618      	mov	r0, r3
 800d932:	3728      	adds	r7, #40	; 0x28
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}
 800d938:	20000888 	.word	0x20000888

0800d93c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b088      	sub	sp, #32
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
 800d944:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d94a:	2300      	movs	r3, #0
 800d94c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800d94e:	69bb      	ldr	r3, [r7, #24]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d103      	bne.n	800d95c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800d954:	f06f 0303 	mvn.w	r3, #3
 800d958:	61fb      	str	r3, [r7, #28]
 800d95a:	e04b      	b.n	800d9f4 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d95c:	f3ef 8305 	mrs	r3, IPSR
 800d960:	617b      	str	r3, [r7, #20]
  return(result);
 800d962:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d964:	2b00      	cmp	r3, #0
 800d966:	d10f      	bne.n	800d988 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d968:	f3ef 8310 	mrs	r3, PRIMASK
 800d96c:	613b      	str	r3, [r7, #16]
  return(result);
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d105      	bne.n	800d980 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d974:	f3ef 8311 	mrs	r3, BASEPRI
 800d978:	60fb      	str	r3, [r7, #12]
  return(result);
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d026      	beq.n	800d9ce <osSemaphoreAcquire+0x92>
 800d980:	4b1f      	ldr	r3, [pc, #124]	; (800da00 <osSemaphoreAcquire+0xc4>)
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	2b02      	cmp	r3, #2
 800d986:	d122      	bne.n	800d9ce <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d003      	beq.n	800d996 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800d98e:	f06f 0303 	mvn.w	r3, #3
 800d992:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800d994:	e02d      	b.n	800d9f2 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800d996:	2300      	movs	r3, #0
 800d998:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d99a:	f107 0308 	add.w	r3, r7, #8
 800d99e:	461a      	mov	r2, r3
 800d9a0:	2100      	movs	r1, #0
 800d9a2:	69b8      	ldr	r0, [r7, #24]
 800d9a4:	f001 f8d6 	bl	800eb54 <xQueueReceiveFromISR>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	2b01      	cmp	r3, #1
 800d9ac:	d003      	beq.n	800d9b6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800d9ae:	f06f 0302 	mvn.w	r3, #2
 800d9b2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800d9b4:	e01d      	b.n	800d9f2 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d01a      	beq.n	800d9f2 <osSemaphoreAcquire+0xb6>
 800d9bc:	4b11      	ldr	r3, [pc, #68]	; (800da04 <osSemaphoreAcquire+0xc8>)
 800d9be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9c2:	601a      	str	r2, [r3, #0]
 800d9c4:	f3bf 8f4f 	dsb	sy
 800d9c8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800d9cc:	e011      	b.n	800d9f2 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800d9ce:	6839      	ldr	r1, [r7, #0]
 800d9d0:	69b8      	ldr	r0, [r7, #24]
 800d9d2:	f000 ffab 	bl	800e92c <xQueueSemaphoreTake>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	2b01      	cmp	r3, #1
 800d9da:	d00b      	beq.n	800d9f4 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d003      	beq.n	800d9ea <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800d9e2:	f06f 0301 	mvn.w	r3, #1
 800d9e6:	61fb      	str	r3, [r7, #28]
 800d9e8:	e004      	b.n	800d9f4 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800d9ea:	f06f 0302 	mvn.w	r3, #2
 800d9ee:	61fb      	str	r3, [r7, #28]
 800d9f0:	e000      	b.n	800d9f4 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800d9f2:	bf00      	nop
      }
    }
  }

  return (stat);
 800d9f4:	69fb      	ldr	r3, [r7, #28]
}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3720      	adds	r7, #32
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}
 800d9fe:	bf00      	nop
 800da00:	20000888 	.word	0x20000888
 800da04:	e000ed04 	.word	0xe000ed04

0800da08 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800da08:	b580      	push	{r7, lr}
 800da0a:	b088      	sub	sp, #32
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800da14:	2300      	movs	r3, #0
 800da16:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800da18:	69bb      	ldr	r3, [r7, #24]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d103      	bne.n	800da26 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800da1e:	f06f 0303 	mvn.w	r3, #3
 800da22:	61fb      	str	r3, [r7, #28]
 800da24:	e03e      	b.n	800daa4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da26:	f3ef 8305 	mrs	r3, IPSR
 800da2a:	617b      	str	r3, [r7, #20]
  return(result);
 800da2c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d10f      	bne.n	800da52 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da32:	f3ef 8310 	mrs	r3, PRIMASK
 800da36:	613b      	str	r3, [r7, #16]
  return(result);
 800da38:	693b      	ldr	r3, [r7, #16]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d105      	bne.n	800da4a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800da3e:	f3ef 8311 	mrs	r3, BASEPRI
 800da42:	60fb      	str	r3, [r7, #12]
  return(result);
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d01e      	beq.n	800da88 <osSemaphoreRelease+0x80>
 800da4a:	4b19      	ldr	r3, [pc, #100]	; (800dab0 <osSemaphoreRelease+0xa8>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	2b02      	cmp	r3, #2
 800da50:	d11a      	bne.n	800da88 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800da52:	2300      	movs	r3, #0
 800da54:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800da56:	f107 0308 	add.w	r3, r7, #8
 800da5a:	4619      	mov	r1, r3
 800da5c:	69b8      	ldr	r0, [r7, #24]
 800da5e:	f000 fde9 	bl	800e634 <xQueueGiveFromISR>
 800da62:	4603      	mov	r3, r0
 800da64:	2b01      	cmp	r3, #1
 800da66:	d003      	beq.n	800da70 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800da68:	f06f 0302 	mvn.w	r3, #2
 800da6c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800da6e:	e018      	b.n	800daa2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d015      	beq.n	800daa2 <osSemaphoreRelease+0x9a>
 800da76:	4b0f      	ldr	r3, [pc, #60]	; (800dab4 <osSemaphoreRelease+0xac>)
 800da78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da7c:	601a      	str	r2, [r3, #0]
 800da7e:	f3bf 8f4f 	dsb	sy
 800da82:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800da86:	e00c      	b.n	800daa2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800da88:	2300      	movs	r3, #0
 800da8a:	2200      	movs	r2, #0
 800da8c:	2100      	movs	r1, #0
 800da8e:	69b8      	ldr	r0, [r7, #24]
 800da90:	f000 fc2a 	bl	800e2e8 <xQueueGenericSend>
 800da94:	4603      	mov	r3, r0
 800da96:	2b01      	cmp	r3, #1
 800da98:	d004      	beq.n	800daa4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800da9a:	f06f 0302 	mvn.w	r3, #2
 800da9e:	61fb      	str	r3, [r7, #28]
 800daa0:	e000      	b.n	800daa4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800daa2:	bf00      	nop
    }
  }

  return (stat);
 800daa4:	69fb      	ldr	r3, [r7, #28]
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	3720      	adds	r7, #32
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}
 800daae:	bf00      	nop
 800dab0:	20000888 	.word	0x20000888
 800dab4:	e000ed04 	.word	0xe000ed04

0800dab8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800dab8:	b580      	push	{r7, lr}
 800daba:	b08c      	sub	sp, #48	; 0x30
 800dabc:	af02      	add	r7, sp, #8
 800dabe:	60f8      	str	r0, [r7, #12]
 800dac0:	60b9      	str	r1, [r7, #8]
 800dac2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800dac4:	2300      	movs	r3, #0
 800dac6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dac8:	f3ef 8305 	mrs	r3, IPSR
 800dacc:	61bb      	str	r3, [r7, #24]
  return(result);
 800dace:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d16f      	bne.n	800dbb4 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dad4:	f3ef 8310 	mrs	r3, PRIMASK
 800dad8:	617b      	str	r3, [r7, #20]
  return(result);
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d105      	bne.n	800daec <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dae0:	f3ef 8311 	mrs	r3, BASEPRI
 800dae4:	613b      	str	r3, [r7, #16]
  return(result);
 800dae6:	693b      	ldr	r3, [r7, #16]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d003      	beq.n	800daf4 <osMessageQueueNew+0x3c>
 800daec:	4b34      	ldr	r3, [pc, #208]	; (800dbc0 <osMessageQueueNew+0x108>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	2b02      	cmp	r3, #2
 800daf2:	d05f      	beq.n	800dbb4 <osMessageQueueNew+0xfc>
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d05c      	beq.n	800dbb4 <osMessageQueueNew+0xfc>
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d059      	beq.n	800dbb4 <osMessageQueueNew+0xfc>
    mem = -1;
 800db00:	f04f 33ff 	mov.w	r3, #4294967295
 800db04:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d029      	beq.n	800db60 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	689b      	ldr	r3, [r3, #8]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d012      	beq.n	800db3a <osMessageQueueNew+0x82>
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	68db      	ldr	r3, [r3, #12]
 800db18:	2b4f      	cmp	r3, #79	; 0x4f
 800db1a:	d90e      	bls.n	800db3a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800db20:	2b00      	cmp	r3, #0
 800db22:	d00a      	beq.n	800db3a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	695a      	ldr	r2, [r3, #20]
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	68b9      	ldr	r1, [r7, #8]
 800db2c:	fb01 f303 	mul.w	r3, r1, r3
 800db30:	429a      	cmp	r2, r3
 800db32:	d302      	bcc.n	800db3a <osMessageQueueNew+0x82>
        mem = 1;
 800db34:	2301      	movs	r3, #1
 800db36:	623b      	str	r3, [r7, #32]
 800db38:	e014      	b.n	800db64 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	689b      	ldr	r3, [r3, #8]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d110      	bne.n	800db64 <osMessageQueueNew+0xac>
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	68db      	ldr	r3, [r3, #12]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d10c      	bne.n	800db64 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d108      	bne.n	800db64 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	695b      	ldr	r3, [r3, #20]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d104      	bne.n	800db64 <osMessageQueueNew+0xac>
          mem = 0;
 800db5a:	2300      	movs	r3, #0
 800db5c:	623b      	str	r3, [r7, #32]
 800db5e:	e001      	b.n	800db64 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800db60:	2300      	movs	r3, #0
 800db62:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800db64:	6a3b      	ldr	r3, [r7, #32]
 800db66:	2b01      	cmp	r3, #1
 800db68:	d10b      	bne.n	800db82 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	691a      	ldr	r2, [r3, #16]
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	689b      	ldr	r3, [r3, #8]
 800db72:	2100      	movs	r1, #0
 800db74:	9100      	str	r1, [sp, #0]
 800db76:	68b9      	ldr	r1, [r7, #8]
 800db78:	68f8      	ldr	r0, [r7, #12]
 800db7a:	f000 fa5b 	bl	800e034 <xQueueGenericCreateStatic>
 800db7e:	6278      	str	r0, [r7, #36]	; 0x24
 800db80:	e008      	b.n	800db94 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800db82:	6a3b      	ldr	r3, [r7, #32]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d105      	bne.n	800db94 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800db88:	2200      	movs	r2, #0
 800db8a:	68b9      	ldr	r1, [r7, #8]
 800db8c:	68f8      	ldr	r0, [r7, #12]
 800db8e:	f000 fad3 	bl	800e138 <xQueueGenericCreate>
 800db92:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800db94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db96:	2b00      	cmp	r3, #0
 800db98:	d00c      	beq.n	800dbb4 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d003      	beq.n	800dba8 <osMessageQueueNew+0xf0>
        name = attr->name;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	61fb      	str	r3, [r7, #28]
 800dba6:	e001      	b.n	800dbac <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800dba8:	2300      	movs	r3, #0
 800dbaa:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800dbac:	69f9      	ldr	r1, [r7, #28]
 800dbae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbb0:	f001 f9a4 	bl	800eefc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800dbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	3728      	adds	r7, #40	; 0x28
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}
 800dbbe:	bf00      	nop
 800dbc0:	20000888 	.word	0x20000888

0800dbc4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b08a      	sub	sp, #40	; 0x28
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	60f8      	str	r0, [r7, #12]
 800dbcc:	60b9      	str	r1, [r7, #8]
 800dbce:	603b      	str	r3, [r7, #0]
 800dbd0:	4613      	mov	r3, r2
 800dbd2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dbd8:	2300      	movs	r3, #0
 800dbda:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbdc:	f3ef 8305 	mrs	r3, IPSR
 800dbe0:	61fb      	str	r3, [r7, #28]
  return(result);
 800dbe2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d10f      	bne.n	800dc08 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbe8:	f3ef 8310 	mrs	r3, PRIMASK
 800dbec:	61bb      	str	r3, [r7, #24]
  return(result);
 800dbee:	69bb      	ldr	r3, [r7, #24]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d105      	bne.n	800dc00 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dbf4:	f3ef 8311 	mrs	r3, BASEPRI
 800dbf8:	617b      	str	r3, [r7, #20]
  return(result);
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d02c      	beq.n	800dc5a <osMessageQueuePut+0x96>
 800dc00:	4b28      	ldr	r3, [pc, #160]	; (800dca4 <osMessageQueuePut+0xe0>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	2b02      	cmp	r3, #2
 800dc06:	d128      	bne.n	800dc5a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dc08:	6a3b      	ldr	r3, [r7, #32]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d005      	beq.n	800dc1a <osMessageQueuePut+0x56>
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d002      	beq.n	800dc1a <osMessageQueuePut+0x56>
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d003      	beq.n	800dc22 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800dc1a:	f06f 0303 	mvn.w	r3, #3
 800dc1e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dc20:	e039      	b.n	800dc96 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800dc22:	2300      	movs	r3, #0
 800dc24:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800dc26:	f107 0210 	add.w	r2, r7, #16
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	68b9      	ldr	r1, [r7, #8]
 800dc2e:	6a38      	ldr	r0, [r7, #32]
 800dc30:	f000 fc60 	bl	800e4f4 <xQueueGenericSendFromISR>
 800dc34:	4603      	mov	r3, r0
 800dc36:	2b01      	cmp	r3, #1
 800dc38:	d003      	beq.n	800dc42 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800dc3a:	f06f 0302 	mvn.w	r3, #2
 800dc3e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dc40:	e029      	b.n	800dc96 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800dc42:	693b      	ldr	r3, [r7, #16]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d026      	beq.n	800dc96 <osMessageQueuePut+0xd2>
 800dc48:	4b17      	ldr	r3, [pc, #92]	; (800dca8 <osMessageQueuePut+0xe4>)
 800dc4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc4e:	601a      	str	r2, [r3, #0]
 800dc50:	f3bf 8f4f 	dsb	sy
 800dc54:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dc58:	e01d      	b.n	800dc96 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dc5a:	6a3b      	ldr	r3, [r7, #32]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d002      	beq.n	800dc66 <osMessageQueuePut+0xa2>
 800dc60:	68bb      	ldr	r3, [r7, #8]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d103      	bne.n	800dc6e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800dc66:	f06f 0303 	mvn.w	r3, #3
 800dc6a:	627b      	str	r3, [r7, #36]	; 0x24
 800dc6c:	e014      	b.n	800dc98 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800dc6e:	2300      	movs	r3, #0
 800dc70:	683a      	ldr	r2, [r7, #0]
 800dc72:	68b9      	ldr	r1, [r7, #8]
 800dc74:	6a38      	ldr	r0, [r7, #32]
 800dc76:	f000 fb37 	bl	800e2e8 <xQueueGenericSend>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	2b01      	cmp	r3, #1
 800dc7e:	d00b      	beq.n	800dc98 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d003      	beq.n	800dc8e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800dc86:	f06f 0301 	mvn.w	r3, #1
 800dc8a:	627b      	str	r3, [r7, #36]	; 0x24
 800dc8c:	e004      	b.n	800dc98 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800dc8e:	f06f 0302 	mvn.w	r3, #2
 800dc92:	627b      	str	r3, [r7, #36]	; 0x24
 800dc94:	e000      	b.n	800dc98 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dc96:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800dc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	3728      	adds	r7, #40	; 0x28
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bd80      	pop	{r7, pc}
 800dca2:	bf00      	nop
 800dca4:	20000888 	.word	0x20000888
 800dca8:	e000ed04 	.word	0xe000ed04

0800dcac <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b08a      	sub	sp, #40	; 0x28
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	60f8      	str	r0, [r7, #12]
 800dcb4:	60b9      	str	r1, [r7, #8]
 800dcb6:	607a      	str	r2, [r7, #4]
 800dcb8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dcc2:	f3ef 8305 	mrs	r3, IPSR
 800dcc6:	61fb      	str	r3, [r7, #28]
  return(result);
 800dcc8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d10f      	bne.n	800dcee <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dcce:	f3ef 8310 	mrs	r3, PRIMASK
 800dcd2:	61bb      	str	r3, [r7, #24]
  return(result);
 800dcd4:	69bb      	ldr	r3, [r7, #24]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d105      	bne.n	800dce6 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dcda:	f3ef 8311 	mrs	r3, BASEPRI
 800dcde:	617b      	str	r3, [r7, #20]
  return(result);
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d02c      	beq.n	800dd40 <osMessageQueueGet+0x94>
 800dce6:	4b28      	ldr	r3, [pc, #160]	; (800dd88 <osMessageQueueGet+0xdc>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	2b02      	cmp	r3, #2
 800dcec:	d128      	bne.n	800dd40 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dcee:	6a3b      	ldr	r3, [r7, #32]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d005      	beq.n	800dd00 <osMessageQueueGet+0x54>
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d002      	beq.n	800dd00 <osMessageQueueGet+0x54>
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d003      	beq.n	800dd08 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800dd00:	f06f 0303 	mvn.w	r3, #3
 800dd04:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dd06:	e038      	b.n	800dd7a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800dd0c:	f107 0310 	add.w	r3, r7, #16
 800dd10:	461a      	mov	r2, r3
 800dd12:	68b9      	ldr	r1, [r7, #8]
 800dd14:	6a38      	ldr	r0, [r7, #32]
 800dd16:	f000 ff1d 	bl	800eb54 <xQueueReceiveFromISR>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	2b01      	cmp	r3, #1
 800dd1e:	d003      	beq.n	800dd28 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800dd20:	f06f 0302 	mvn.w	r3, #2
 800dd24:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dd26:	e028      	b.n	800dd7a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d025      	beq.n	800dd7a <osMessageQueueGet+0xce>
 800dd2e:	4b17      	ldr	r3, [pc, #92]	; (800dd8c <osMessageQueueGet+0xe0>)
 800dd30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd34:	601a      	str	r2, [r3, #0]
 800dd36:	f3bf 8f4f 	dsb	sy
 800dd3a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dd3e:	e01c      	b.n	800dd7a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dd40:	6a3b      	ldr	r3, [r7, #32]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d002      	beq.n	800dd4c <osMessageQueueGet+0xa0>
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d103      	bne.n	800dd54 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800dd4c:	f06f 0303 	mvn.w	r3, #3
 800dd50:	627b      	str	r3, [r7, #36]	; 0x24
 800dd52:	e013      	b.n	800dd7c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800dd54:	683a      	ldr	r2, [r7, #0]
 800dd56:	68b9      	ldr	r1, [r7, #8]
 800dd58:	6a38      	ldr	r0, [r7, #32]
 800dd5a:	f000 fd01 	bl	800e760 <xQueueReceive>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	2b01      	cmp	r3, #1
 800dd62:	d00b      	beq.n	800dd7c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d003      	beq.n	800dd72 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800dd6a:	f06f 0301 	mvn.w	r3, #1
 800dd6e:	627b      	str	r3, [r7, #36]	; 0x24
 800dd70:	e004      	b.n	800dd7c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800dd72:	f06f 0302 	mvn.w	r3, #2
 800dd76:	627b      	str	r3, [r7, #36]	; 0x24
 800dd78:	e000      	b.n	800dd7c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dd7a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800dd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	3728      	adds	r7, #40	; 0x28
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}
 800dd86:	bf00      	nop
 800dd88:	20000888 	.word	0x20000888
 800dd8c:	e000ed04 	.word	0xe000ed04

0800dd90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dd90:	b480      	push	{r7}
 800dd92:	b085      	sub	sp, #20
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	60f8      	str	r0, [r7, #12]
 800dd98:	60b9      	str	r1, [r7, #8]
 800dd9a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	4a07      	ldr	r2, [pc, #28]	; (800ddbc <vApplicationGetIdleTaskMemory+0x2c>)
 800dda0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	4a06      	ldr	r2, [pc, #24]	; (800ddc0 <vApplicationGetIdleTaskMemory+0x30>)
 800dda6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ddae:	601a      	str	r2, [r3, #0]
}
 800ddb0:	bf00      	nop
 800ddb2:	3714      	adds	r7, #20
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddba:	4770      	bx	lr
 800ddbc:	2000088c 	.word	0x2000088c
 800ddc0:	20000948 	.word	0x20000948

0800ddc4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ddc4:	b480      	push	{r7}
 800ddc6:	b085      	sub	sp, #20
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	60f8      	str	r0, [r7, #12]
 800ddcc:	60b9      	str	r1, [r7, #8]
 800ddce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	4a07      	ldr	r2, [pc, #28]	; (800ddf0 <vApplicationGetTimerTaskMemory+0x2c>)
 800ddd4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	4a06      	ldr	r2, [pc, #24]	; (800ddf4 <vApplicationGetTimerTaskMemory+0x30>)
 800ddda:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dde2:	601a      	str	r2, [r3, #0]
}
 800dde4:	bf00      	nop
 800dde6:	3714      	adds	r7, #20
 800dde8:	46bd      	mov	sp, r7
 800ddea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddee:	4770      	bx	lr
 800ddf0:	20000d48 	.word	0x20000d48
 800ddf4:	20000e04 	.word	0x20000e04

0800ddf8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ddf8:	b480      	push	{r7}
 800ddfa:	b083      	sub	sp, #12
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f103 0208 	add.w	r2, r3, #8
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	f04f 32ff 	mov.w	r2, #4294967295
 800de10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	f103 0208 	add.w	r2, r3, #8
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f103 0208 	add.w	r2, r3, #8
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2200      	movs	r2, #0
 800de2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800de2c:	bf00      	nop
 800de2e:	370c      	adds	r7, #12
 800de30:	46bd      	mov	sp, r7
 800de32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de36:	4770      	bx	lr

0800de38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800de38:	b480      	push	{r7}
 800de3a:	b083      	sub	sp, #12
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2200      	movs	r2, #0
 800de44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800de46:	bf00      	nop
 800de48:	370c      	adds	r7, #12
 800de4a:	46bd      	mov	sp, r7
 800de4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de50:	4770      	bx	lr

0800de52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800de52:	b480      	push	{r7}
 800de54:	b085      	sub	sp, #20
 800de56:	af00      	add	r7, sp, #0
 800de58:	6078      	str	r0, [r7, #4]
 800de5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	685b      	ldr	r3, [r3, #4]
 800de60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	68fa      	ldr	r2, [r7, #12]
 800de66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	689a      	ldr	r2, [r3, #8]
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	689b      	ldr	r3, [r3, #8]
 800de74:	683a      	ldr	r2, [r7, #0]
 800de76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	683a      	ldr	r2, [r7, #0]
 800de7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	687a      	ldr	r2, [r7, #4]
 800de82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	1c5a      	adds	r2, r3, #1
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	601a      	str	r2, [r3, #0]
}
 800de8e:	bf00      	nop
 800de90:	3714      	adds	r7, #20
 800de92:	46bd      	mov	sp, r7
 800de94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de98:	4770      	bx	lr

0800de9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800de9a:	b480      	push	{r7}
 800de9c:	b085      	sub	sp, #20
 800de9e:	af00      	add	r7, sp, #0
 800dea0:	6078      	str	r0, [r7, #4]
 800dea2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deb0:	d103      	bne.n	800deba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	691b      	ldr	r3, [r3, #16]
 800deb6:	60fb      	str	r3, [r7, #12]
 800deb8:	e00c      	b.n	800ded4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	3308      	adds	r3, #8
 800debe:	60fb      	str	r3, [r7, #12]
 800dec0:	e002      	b.n	800dec8 <vListInsert+0x2e>
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	685b      	ldr	r3, [r3, #4]
 800dec6:	60fb      	str	r3, [r7, #12]
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	685b      	ldr	r3, [r3, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	68ba      	ldr	r2, [r7, #8]
 800ded0:	429a      	cmp	r2, r3
 800ded2:	d2f6      	bcs.n	800dec2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	685a      	ldr	r2, [r3, #4]
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	685b      	ldr	r3, [r3, #4]
 800dee0:	683a      	ldr	r2, [r7, #0]
 800dee2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	68fa      	ldr	r2, [r7, #12]
 800dee8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	683a      	ldr	r2, [r7, #0]
 800deee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	687a      	ldr	r2, [r7, #4]
 800def4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	1c5a      	adds	r2, r3, #1
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	601a      	str	r2, [r3, #0]
}
 800df00:	bf00      	nop
 800df02:	3714      	adds	r7, #20
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr

0800df0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800df0c:	b480      	push	{r7}
 800df0e:	b085      	sub	sp, #20
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	691b      	ldr	r3, [r3, #16]
 800df18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	685b      	ldr	r3, [r3, #4]
 800df1e:	687a      	ldr	r2, [r7, #4]
 800df20:	6892      	ldr	r2, [r2, #8]
 800df22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	689b      	ldr	r3, [r3, #8]
 800df28:	687a      	ldr	r2, [r7, #4]
 800df2a:	6852      	ldr	r2, [r2, #4]
 800df2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	685b      	ldr	r3, [r3, #4]
 800df32:	687a      	ldr	r2, [r7, #4]
 800df34:	429a      	cmp	r2, r3
 800df36:	d103      	bne.n	800df40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	689a      	ldr	r2, [r3, #8]
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2200      	movs	r2, #0
 800df44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	1e5a      	subs	r2, r3, #1
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	681b      	ldr	r3, [r3, #0]
}
 800df54:	4618      	mov	r0, r3
 800df56:	3714      	adds	r7, #20
 800df58:	46bd      	mov	sp, r7
 800df5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5e:	4770      	bx	lr

0800df60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b084      	sub	sp, #16
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
 800df68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d10c      	bne.n	800df8e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800df74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df78:	b672      	cpsid	i
 800df7a:	f383 8811 	msr	BASEPRI, r3
 800df7e:	f3bf 8f6f 	isb	sy
 800df82:	f3bf 8f4f 	dsb	sy
 800df86:	b662      	cpsie	i
 800df88:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800df8a:	bf00      	nop
 800df8c:	e7fe      	b.n	800df8c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800df8e:	f002 fcf5 	bl	801097c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	681a      	ldr	r2, [r3, #0]
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df9a:	68f9      	ldr	r1, [r7, #12]
 800df9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800df9e:	fb01 f303 	mul.w	r3, r1, r3
 800dfa2:	441a      	add	r2, r3
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	2200      	movs	r2, #0
 800dfac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	681a      	ldr	r2, [r3, #0]
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	681a      	ldr	r2, [r3, #0]
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfbe:	3b01      	subs	r3, #1
 800dfc0:	68f9      	ldr	r1, [r7, #12]
 800dfc2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800dfc4:	fb01 f303 	mul.w	r3, r1, r3
 800dfc8:	441a      	add	r2, r3
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	22ff      	movs	r2, #255	; 0xff
 800dfd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	22ff      	movs	r2, #255	; 0xff
 800dfda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d114      	bne.n	800e00e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	691b      	ldr	r3, [r3, #16]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d01a      	beq.n	800e022 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	3310      	adds	r3, #16
 800dff0:	4618      	mov	r0, r3
 800dff2:	f001 fca9 	bl	800f948 <xTaskRemoveFromEventList>
 800dff6:	4603      	mov	r3, r0
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d012      	beq.n	800e022 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800dffc:	4b0c      	ldr	r3, [pc, #48]	; (800e030 <xQueueGenericReset+0xd0>)
 800dffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e002:	601a      	str	r2, [r3, #0]
 800e004:	f3bf 8f4f 	dsb	sy
 800e008:	f3bf 8f6f 	isb	sy
 800e00c:	e009      	b.n	800e022 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	3310      	adds	r3, #16
 800e012:	4618      	mov	r0, r3
 800e014:	f7ff fef0 	bl	800ddf8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	3324      	adds	r3, #36	; 0x24
 800e01c:	4618      	mov	r0, r3
 800e01e:	f7ff feeb 	bl	800ddf8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e022:	f002 fcdf 	bl	80109e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e026:	2301      	movs	r3, #1
}
 800e028:	4618      	mov	r0, r3
 800e02a:	3710      	adds	r7, #16
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}
 800e030:	e000ed04 	.word	0xe000ed04

0800e034 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e034:	b580      	push	{r7, lr}
 800e036:	b08e      	sub	sp, #56	; 0x38
 800e038:	af02      	add	r7, sp, #8
 800e03a:	60f8      	str	r0, [r7, #12]
 800e03c:	60b9      	str	r1, [r7, #8]
 800e03e:	607a      	str	r2, [r7, #4]
 800e040:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d10c      	bne.n	800e062 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800e048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e04c:	b672      	cpsid	i
 800e04e:	f383 8811 	msr	BASEPRI, r3
 800e052:	f3bf 8f6f 	isb	sy
 800e056:	f3bf 8f4f 	dsb	sy
 800e05a:	b662      	cpsie	i
 800e05c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e05e:	bf00      	nop
 800e060:	e7fe      	b.n	800e060 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d10c      	bne.n	800e082 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800e068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e06c:	b672      	cpsid	i
 800e06e:	f383 8811 	msr	BASEPRI, r3
 800e072:	f3bf 8f6f 	isb	sy
 800e076:	f3bf 8f4f 	dsb	sy
 800e07a:	b662      	cpsie	i
 800e07c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e07e:	bf00      	nop
 800e080:	e7fe      	b.n	800e080 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d002      	beq.n	800e08e <xQueueGenericCreateStatic+0x5a>
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d001      	beq.n	800e092 <xQueueGenericCreateStatic+0x5e>
 800e08e:	2301      	movs	r3, #1
 800e090:	e000      	b.n	800e094 <xQueueGenericCreateStatic+0x60>
 800e092:	2300      	movs	r3, #0
 800e094:	2b00      	cmp	r3, #0
 800e096:	d10c      	bne.n	800e0b2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800e098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e09c:	b672      	cpsid	i
 800e09e:	f383 8811 	msr	BASEPRI, r3
 800e0a2:	f3bf 8f6f 	isb	sy
 800e0a6:	f3bf 8f4f 	dsb	sy
 800e0aa:	b662      	cpsie	i
 800e0ac:	623b      	str	r3, [r7, #32]
}
 800e0ae:	bf00      	nop
 800e0b0:	e7fe      	b.n	800e0b0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d102      	bne.n	800e0be <xQueueGenericCreateStatic+0x8a>
 800e0b8:	68bb      	ldr	r3, [r7, #8]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d101      	bne.n	800e0c2 <xQueueGenericCreateStatic+0x8e>
 800e0be:	2301      	movs	r3, #1
 800e0c0:	e000      	b.n	800e0c4 <xQueueGenericCreateStatic+0x90>
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d10c      	bne.n	800e0e2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800e0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0cc:	b672      	cpsid	i
 800e0ce:	f383 8811 	msr	BASEPRI, r3
 800e0d2:	f3bf 8f6f 	isb	sy
 800e0d6:	f3bf 8f4f 	dsb	sy
 800e0da:	b662      	cpsie	i
 800e0dc:	61fb      	str	r3, [r7, #28]
}
 800e0de:	bf00      	nop
 800e0e0:	e7fe      	b.n	800e0e0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e0e2:	2350      	movs	r3, #80	; 0x50
 800e0e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	2b50      	cmp	r3, #80	; 0x50
 800e0ea:	d00c      	beq.n	800e106 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800e0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0f0:	b672      	cpsid	i
 800e0f2:	f383 8811 	msr	BASEPRI, r3
 800e0f6:	f3bf 8f6f 	isb	sy
 800e0fa:	f3bf 8f4f 	dsb	sy
 800e0fe:	b662      	cpsie	i
 800e100:	61bb      	str	r3, [r7, #24]
}
 800e102:	bf00      	nop
 800e104:	e7fe      	b.n	800e104 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e106:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d00d      	beq.n	800e12e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e114:	2201      	movs	r2, #1
 800e116:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e11a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e120:	9300      	str	r3, [sp, #0]
 800e122:	4613      	mov	r3, r2
 800e124:	687a      	ldr	r2, [r7, #4]
 800e126:	68b9      	ldr	r1, [r7, #8]
 800e128:	68f8      	ldr	r0, [r7, #12]
 800e12a:	f000 f847 	bl	800e1bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e130:	4618      	mov	r0, r3
 800e132:	3730      	adds	r7, #48	; 0x30
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}

0800e138 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b08a      	sub	sp, #40	; 0x28
 800e13c:	af02      	add	r7, sp, #8
 800e13e:	60f8      	str	r0, [r7, #12]
 800e140:	60b9      	str	r1, [r7, #8]
 800e142:	4613      	mov	r3, r2
 800e144:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d10c      	bne.n	800e166 <xQueueGenericCreate+0x2e>
	__asm volatile
 800e14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e150:	b672      	cpsid	i
 800e152:	f383 8811 	msr	BASEPRI, r3
 800e156:	f3bf 8f6f 	isb	sy
 800e15a:	f3bf 8f4f 	dsb	sy
 800e15e:	b662      	cpsie	i
 800e160:	613b      	str	r3, [r7, #16]
}
 800e162:	bf00      	nop
 800e164:	e7fe      	b.n	800e164 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d102      	bne.n	800e172 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e16c:	2300      	movs	r3, #0
 800e16e:	61fb      	str	r3, [r7, #28]
 800e170:	e004      	b.n	800e17c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	68ba      	ldr	r2, [r7, #8]
 800e176:	fb02 f303 	mul.w	r3, r2, r3
 800e17a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e17c:	69fb      	ldr	r3, [r7, #28]
 800e17e:	3350      	adds	r3, #80	; 0x50
 800e180:	4618      	mov	r0, r3
 800e182:	f002 fd27 	bl	8010bd4 <pvPortMalloc>
 800e186:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e188:	69bb      	ldr	r3, [r7, #24]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d011      	beq.n	800e1b2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e18e:	69bb      	ldr	r3, [r7, #24]
 800e190:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e192:	697b      	ldr	r3, [r7, #20]
 800e194:	3350      	adds	r3, #80	; 0x50
 800e196:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e198:	69bb      	ldr	r3, [r7, #24]
 800e19a:	2200      	movs	r2, #0
 800e19c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e1a0:	79fa      	ldrb	r2, [r7, #7]
 800e1a2:	69bb      	ldr	r3, [r7, #24]
 800e1a4:	9300      	str	r3, [sp, #0]
 800e1a6:	4613      	mov	r3, r2
 800e1a8:	697a      	ldr	r2, [r7, #20]
 800e1aa:	68b9      	ldr	r1, [r7, #8]
 800e1ac:	68f8      	ldr	r0, [r7, #12]
 800e1ae:	f000 f805 	bl	800e1bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e1b2:	69bb      	ldr	r3, [r7, #24]
	}
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	3720      	adds	r7, #32
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}

0800e1bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b084      	sub	sp, #16
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	60f8      	str	r0, [r7, #12]
 800e1c4:	60b9      	str	r1, [r7, #8]
 800e1c6:	607a      	str	r2, [r7, #4]
 800e1c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d103      	bne.n	800e1d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e1d0:	69bb      	ldr	r3, [r7, #24]
 800e1d2:	69ba      	ldr	r2, [r7, #24]
 800e1d4:	601a      	str	r2, [r3, #0]
 800e1d6:	e002      	b.n	800e1de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e1d8:	69bb      	ldr	r3, [r7, #24]
 800e1da:	687a      	ldr	r2, [r7, #4]
 800e1dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e1de:	69bb      	ldr	r3, [r7, #24]
 800e1e0:	68fa      	ldr	r2, [r7, #12]
 800e1e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e1e4:	69bb      	ldr	r3, [r7, #24]
 800e1e6:	68ba      	ldr	r2, [r7, #8]
 800e1e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e1ea:	2101      	movs	r1, #1
 800e1ec:	69b8      	ldr	r0, [r7, #24]
 800e1ee:	f7ff feb7 	bl	800df60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e1f2:	69bb      	ldr	r3, [r7, #24]
 800e1f4:	78fa      	ldrb	r2, [r7, #3]
 800e1f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e1fa:	bf00      	nop
 800e1fc:	3710      	adds	r7, #16
 800e1fe:	46bd      	mov	sp, r7
 800e200:	bd80      	pop	{r7, pc}

0800e202 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e202:	b580      	push	{r7, lr}
 800e204:	b08a      	sub	sp, #40	; 0x28
 800e206:	af02      	add	r7, sp, #8
 800e208:	60f8      	str	r0, [r7, #12]
 800e20a:	60b9      	str	r1, [r7, #8]
 800e20c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d10c      	bne.n	800e22e <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800e214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e218:	b672      	cpsid	i
 800e21a:	f383 8811 	msr	BASEPRI, r3
 800e21e:	f3bf 8f6f 	isb	sy
 800e222:	f3bf 8f4f 	dsb	sy
 800e226:	b662      	cpsie	i
 800e228:	61bb      	str	r3, [r7, #24]
}
 800e22a:	bf00      	nop
 800e22c:	e7fe      	b.n	800e22c <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e22e:	68ba      	ldr	r2, [r7, #8]
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	429a      	cmp	r2, r3
 800e234:	d90c      	bls.n	800e250 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 800e236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e23a:	b672      	cpsid	i
 800e23c:	f383 8811 	msr	BASEPRI, r3
 800e240:	f3bf 8f6f 	isb	sy
 800e244:	f3bf 8f4f 	dsb	sy
 800e248:	b662      	cpsie	i
 800e24a:	617b      	str	r3, [r7, #20]
}
 800e24c:	bf00      	nop
 800e24e:	e7fe      	b.n	800e24e <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e250:	2302      	movs	r3, #2
 800e252:	9300      	str	r3, [sp, #0]
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2200      	movs	r2, #0
 800e258:	2100      	movs	r1, #0
 800e25a:	68f8      	ldr	r0, [r7, #12]
 800e25c:	f7ff feea 	bl	800e034 <xQueueGenericCreateStatic>
 800e260:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e262:	69fb      	ldr	r3, [r7, #28]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d002      	beq.n	800e26e <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e268:	69fb      	ldr	r3, [r7, #28]
 800e26a:	68ba      	ldr	r2, [r7, #8]
 800e26c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e26e:	69fb      	ldr	r3, [r7, #28]
	}
 800e270:	4618      	mov	r0, r3
 800e272:	3720      	adds	r7, #32
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}

0800e278 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b086      	sub	sp, #24
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d10c      	bne.n	800e2a2 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800e288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e28c:	b672      	cpsid	i
 800e28e:	f383 8811 	msr	BASEPRI, r3
 800e292:	f3bf 8f6f 	isb	sy
 800e296:	f3bf 8f4f 	dsb	sy
 800e29a:	b662      	cpsie	i
 800e29c:	613b      	str	r3, [r7, #16]
}
 800e29e:	bf00      	nop
 800e2a0:	e7fe      	b.n	800e2a0 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e2a2:	683a      	ldr	r2, [r7, #0]
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d90c      	bls.n	800e2c4 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 800e2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ae:	b672      	cpsid	i
 800e2b0:	f383 8811 	msr	BASEPRI, r3
 800e2b4:	f3bf 8f6f 	isb	sy
 800e2b8:	f3bf 8f4f 	dsb	sy
 800e2bc:	b662      	cpsie	i
 800e2be:	60fb      	str	r3, [r7, #12]
}
 800e2c0:	bf00      	nop
 800e2c2:	e7fe      	b.n	800e2c2 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e2c4:	2202      	movs	r2, #2
 800e2c6:	2100      	movs	r1, #0
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f7ff ff35 	bl	800e138 <xQueueGenericCreate>
 800e2ce:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e2d0:	697b      	ldr	r3, [r7, #20]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d002      	beq.n	800e2dc <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e2d6:	697b      	ldr	r3, [r7, #20]
 800e2d8:	683a      	ldr	r2, [r7, #0]
 800e2da:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e2dc:	697b      	ldr	r3, [r7, #20]
	}
 800e2de:	4618      	mov	r0, r3
 800e2e0:	3718      	adds	r7, #24
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}
	...

0800e2e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b08e      	sub	sp, #56	; 0x38
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	60f8      	str	r0, [r7, #12]
 800e2f0:	60b9      	str	r1, [r7, #8]
 800e2f2:	607a      	str	r2, [r7, #4]
 800e2f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e300:	2b00      	cmp	r3, #0
 800e302:	d10c      	bne.n	800e31e <xQueueGenericSend+0x36>
	__asm volatile
 800e304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e308:	b672      	cpsid	i
 800e30a:	f383 8811 	msr	BASEPRI, r3
 800e30e:	f3bf 8f6f 	isb	sy
 800e312:	f3bf 8f4f 	dsb	sy
 800e316:	b662      	cpsie	i
 800e318:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e31a:	bf00      	nop
 800e31c:	e7fe      	b.n	800e31c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d103      	bne.n	800e32c <xQueueGenericSend+0x44>
 800e324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d101      	bne.n	800e330 <xQueueGenericSend+0x48>
 800e32c:	2301      	movs	r3, #1
 800e32e:	e000      	b.n	800e332 <xQueueGenericSend+0x4a>
 800e330:	2300      	movs	r3, #0
 800e332:	2b00      	cmp	r3, #0
 800e334:	d10c      	bne.n	800e350 <xQueueGenericSend+0x68>
	__asm volatile
 800e336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e33a:	b672      	cpsid	i
 800e33c:	f383 8811 	msr	BASEPRI, r3
 800e340:	f3bf 8f6f 	isb	sy
 800e344:	f3bf 8f4f 	dsb	sy
 800e348:	b662      	cpsie	i
 800e34a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e34c:	bf00      	nop
 800e34e:	e7fe      	b.n	800e34e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	2b02      	cmp	r3, #2
 800e354:	d103      	bne.n	800e35e <xQueueGenericSend+0x76>
 800e356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e35a:	2b01      	cmp	r3, #1
 800e35c:	d101      	bne.n	800e362 <xQueueGenericSend+0x7a>
 800e35e:	2301      	movs	r3, #1
 800e360:	e000      	b.n	800e364 <xQueueGenericSend+0x7c>
 800e362:	2300      	movs	r3, #0
 800e364:	2b00      	cmp	r3, #0
 800e366:	d10c      	bne.n	800e382 <xQueueGenericSend+0x9a>
	__asm volatile
 800e368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e36c:	b672      	cpsid	i
 800e36e:	f383 8811 	msr	BASEPRI, r3
 800e372:	f3bf 8f6f 	isb	sy
 800e376:	f3bf 8f4f 	dsb	sy
 800e37a:	b662      	cpsie	i
 800e37c:	623b      	str	r3, [r7, #32]
}
 800e37e:	bf00      	nop
 800e380:	e7fe      	b.n	800e380 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e382:	f001 fcab 	bl	800fcdc <xTaskGetSchedulerState>
 800e386:	4603      	mov	r3, r0
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d102      	bne.n	800e392 <xQueueGenericSend+0xaa>
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d101      	bne.n	800e396 <xQueueGenericSend+0xae>
 800e392:	2301      	movs	r3, #1
 800e394:	e000      	b.n	800e398 <xQueueGenericSend+0xb0>
 800e396:	2300      	movs	r3, #0
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d10c      	bne.n	800e3b6 <xQueueGenericSend+0xce>
	__asm volatile
 800e39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a0:	b672      	cpsid	i
 800e3a2:	f383 8811 	msr	BASEPRI, r3
 800e3a6:	f3bf 8f6f 	isb	sy
 800e3aa:	f3bf 8f4f 	dsb	sy
 800e3ae:	b662      	cpsie	i
 800e3b0:	61fb      	str	r3, [r7, #28]
}
 800e3b2:	bf00      	nop
 800e3b4:	e7fe      	b.n	800e3b4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e3b6:	f002 fae1 	bl	801097c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d302      	bcc.n	800e3cc <xQueueGenericSend+0xe4>
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	2b02      	cmp	r3, #2
 800e3ca:	d129      	bne.n	800e420 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e3cc:	683a      	ldr	r2, [r7, #0]
 800e3ce:	68b9      	ldr	r1, [r7, #8]
 800e3d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e3d2:	f000 fc82 	bl	800ecda <prvCopyDataToQueue>
 800e3d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d010      	beq.n	800e402 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3e2:	3324      	adds	r3, #36	; 0x24
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f001 faaf 	bl	800f948 <xTaskRemoveFromEventList>
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d013      	beq.n	800e418 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e3f0:	4b3f      	ldr	r3, [pc, #252]	; (800e4f0 <xQueueGenericSend+0x208>)
 800e3f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3f6:	601a      	str	r2, [r3, #0]
 800e3f8:	f3bf 8f4f 	dsb	sy
 800e3fc:	f3bf 8f6f 	isb	sy
 800e400:	e00a      	b.n	800e418 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e404:	2b00      	cmp	r3, #0
 800e406:	d007      	beq.n	800e418 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e408:	4b39      	ldr	r3, [pc, #228]	; (800e4f0 <xQueueGenericSend+0x208>)
 800e40a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e40e:	601a      	str	r2, [r3, #0]
 800e410:	f3bf 8f4f 	dsb	sy
 800e414:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e418:	f002 fae4 	bl	80109e4 <vPortExitCritical>
				return pdPASS;
 800e41c:	2301      	movs	r3, #1
 800e41e:	e063      	b.n	800e4e8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d103      	bne.n	800e42e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e426:	f002 fadd 	bl	80109e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e42a:	2300      	movs	r3, #0
 800e42c:	e05c      	b.n	800e4e8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e42e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e430:	2b00      	cmp	r3, #0
 800e432:	d106      	bne.n	800e442 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e434:	f107 0314 	add.w	r3, r7, #20
 800e438:	4618      	mov	r0, r3
 800e43a:	f001 faeb 	bl	800fa14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e43e:	2301      	movs	r3, #1
 800e440:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e442:	f002 facf 	bl	80109e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e446:	f001 f84b 	bl	800f4e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e44a:	f002 fa97 	bl	801097c <vPortEnterCritical>
 800e44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e450:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e454:	b25b      	sxtb	r3, r3
 800e456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e45a:	d103      	bne.n	800e464 <xQueueGenericSend+0x17c>
 800e45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e45e:	2200      	movs	r2, #0
 800e460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e466:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e46a:	b25b      	sxtb	r3, r3
 800e46c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e470:	d103      	bne.n	800e47a <xQueueGenericSend+0x192>
 800e472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e474:	2200      	movs	r2, #0
 800e476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e47a:	f002 fab3 	bl	80109e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e47e:	1d3a      	adds	r2, r7, #4
 800e480:	f107 0314 	add.w	r3, r7, #20
 800e484:	4611      	mov	r1, r2
 800e486:	4618      	mov	r0, r3
 800e488:	f001 fada 	bl	800fa40 <xTaskCheckForTimeOut>
 800e48c:	4603      	mov	r3, r0
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d124      	bne.n	800e4dc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e492:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e494:	f000 fd19 	bl	800eeca <prvIsQueueFull>
 800e498:	4603      	mov	r3, r0
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d018      	beq.n	800e4d0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4a0:	3310      	adds	r3, #16
 800e4a2:	687a      	ldr	r2, [r7, #4]
 800e4a4:	4611      	mov	r1, r2
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f001 f9fa 	bl	800f8a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e4ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e4ae:	f000 fca4 	bl	800edfa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e4b2:	f001 f823 	bl	800f4fc <xTaskResumeAll>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	f47f af7c 	bne.w	800e3b6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800e4be:	4b0c      	ldr	r3, [pc, #48]	; (800e4f0 <xQueueGenericSend+0x208>)
 800e4c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4c4:	601a      	str	r2, [r3, #0]
 800e4c6:	f3bf 8f4f 	dsb	sy
 800e4ca:	f3bf 8f6f 	isb	sy
 800e4ce:	e772      	b.n	800e3b6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e4d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e4d2:	f000 fc92 	bl	800edfa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e4d6:	f001 f811 	bl	800f4fc <xTaskResumeAll>
 800e4da:	e76c      	b.n	800e3b6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e4dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e4de:	f000 fc8c 	bl	800edfa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e4e2:	f001 f80b 	bl	800f4fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e4e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3738      	adds	r7, #56	; 0x38
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}
 800e4f0:	e000ed04 	.word	0xe000ed04

0800e4f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b08e      	sub	sp, #56	; 0x38
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	60f8      	str	r0, [r7, #12]
 800e4fc:	60b9      	str	r1, [r7, #8]
 800e4fe:	607a      	str	r2, [r7, #4]
 800e500:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d10c      	bne.n	800e526 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800e50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e510:	b672      	cpsid	i
 800e512:	f383 8811 	msr	BASEPRI, r3
 800e516:	f3bf 8f6f 	isb	sy
 800e51a:	f3bf 8f4f 	dsb	sy
 800e51e:	b662      	cpsie	i
 800e520:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e522:	bf00      	nop
 800e524:	e7fe      	b.n	800e524 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e526:	68bb      	ldr	r3, [r7, #8]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d103      	bne.n	800e534 <xQueueGenericSendFromISR+0x40>
 800e52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e52e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e530:	2b00      	cmp	r3, #0
 800e532:	d101      	bne.n	800e538 <xQueueGenericSendFromISR+0x44>
 800e534:	2301      	movs	r3, #1
 800e536:	e000      	b.n	800e53a <xQueueGenericSendFromISR+0x46>
 800e538:	2300      	movs	r3, #0
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d10c      	bne.n	800e558 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800e53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e542:	b672      	cpsid	i
 800e544:	f383 8811 	msr	BASEPRI, r3
 800e548:	f3bf 8f6f 	isb	sy
 800e54c:	f3bf 8f4f 	dsb	sy
 800e550:	b662      	cpsie	i
 800e552:	623b      	str	r3, [r7, #32]
}
 800e554:	bf00      	nop
 800e556:	e7fe      	b.n	800e556 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	2b02      	cmp	r3, #2
 800e55c:	d103      	bne.n	800e566 <xQueueGenericSendFromISR+0x72>
 800e55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e562:	2b01      	cmp	r3, #1
 800e564:	d101      	bne.n	800e56a <xQueueGenericSendFromISR+0x76>
 800e566:	2301      	movs	r3, #1
 800e568:	e000      	b.n	800e56c <xQueueGenericSendFromISR+0x78>
 800e56a:	2300      	movs	r3, #0
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d10c      	bne.n	800e58a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800e570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e574:	b672      	cpsid	i
 800e576:	f383 8811 	msr	BASEPRI, r3
 800e57a:	f3bf 8f6f 	isb	sy
 800e57e:	f3bf 8f4f 	dsb	sy
 800e582:	b662      	cpsie	i
 800e584:	61fb      	str	r3, [r7, #28]
}
 800e586:	bf00      	nop
 800e588:	e7fe      	b.n	800e588 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e58a:	f002 fadf 	bl	8010b4c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e58e:	f3ef 8211 	mrs	r2, BASEPRI
 800e592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e596:	b672      	cpsid	i
 800e598:	f383 8811 	msr	BASEPRI, r3
 800e59c:	f3bf 8f6f 	isb	sy
 800e5a0:	f3bf 8f4f 	dsb	sy
 800e5a4:	b662      	cpsie	i
 800e5a6:	61ba      	str	r2, [r7, #24]
 800e5a8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e5aa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e5ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5b6:	429a      	cmp	r2, r3
 800e5b8:	d302      	bcc.n	800e5c0 <xQueueGenericSendFromISR+0xcc>
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	2b02      	cmp	r3, #2
 800e5be:	d12c      	bne.n	800e61a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e5c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e5ca:	683a      	ldr	r2, [r7, #0]
 800e5cc:	68b9      	ldr	r1, [r7, #8]
 800e5ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e5d0:	f000 fb83 	bl	800ecda <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e5d4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e5d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5dc:	d112      	bne.n	800e604 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d016      	beq.n	800e614 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5e8:	3324      	adds	r3, #36	; 0x24
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f001 f9ac 	bl	800f948 <xTaskRemoveFromEventList>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d00e      	beq.n	800e614 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d00b      	beq.n	800e614 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	2201      	movs	r2, #1
 800e600:	601a      	str	r2, [r3, #0]
 800e602:	e007      	b.n	800e614 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e604:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e608:	3301      	adds	r3, #1
 800e60a:	b2db      	uxtb	r3, r3
 800e60c:	b25a      	sxtb	r2, r3
 800e60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e614:	2301      	movs	r3, #1
 800e616:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800e618:	e001      	b.n	800e61e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e61a:	2300      	movs	r3, #0
 800e61c:	637b      	str	r3, [r7, #52]	; 0x34
 800e61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e620:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e622:	693b      	ldr	r3, [r7, #16]
 800e624:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e628:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e62a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e62c:	4618      	mov	r0, r3
 800e62e:	3738      	adds	r7, #56	; 0x38
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}

0800e634 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b08e      	sub	sp, #56	; 0x38
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e644:	2b00      	cmp	r3, #0
 800e646:	d10c      	bne.n	800e662 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800e648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e64c:	b672      	cpsid	i
 800e64e:	f383 8811 	msr	BASEPRI, r3
 800e652:	f3bf 8f6f 	isb	sy
 800e656:	f3bf 8f4f 	dsb	sy
 800e65a:	b662      	cpsie	i
 800e65c:	623b      	str	r3, [r7, #32]
}
 800e65e:	bf00      	nop
 800e660:	e7fe      	b.n	800e660 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e666:	2b00      	cmp	r3, #0
 800e668:	d00c      	beq.n	800e684 <xQueueGiveFromISR+0x50>
	__asm volatile
 800e66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e66e:	b672      	cpsid	i
 800e670:	f383 8811 	msr	BASEPRI, r3
 800e674:	f3bf 8f6f 	isb	sy
 800e678:	f3bf 8f4f 	dsb	sy
 800e67c:	b662      	cpsie	i
 800e67e:	61fb      	str	r3, [r7, #28]
}
 800e680:	bf00      	nop
 800e682:	e7fe      	b.n	800e682 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d103      	bne.n	800e694 <xQueueGiveFromISR+0x60>
 800e68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e68e:	689b      	ldr	r3, [r3, #8]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d101      	bne.n	800e698 <xQueueGiveFromISR+0x64>
 800e694:	2301      	movs	r3, #1
 800e696:	e000      	b.n	800e69a <xQueueGiveFromISR+0x66>
 800e698:	2300      	movs	r3, #0
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d10c      	bne.n	800e6b8 <xQueueGiveFromISR+0x84>
	__asm volatile
 800e69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6a2:	b672      	cpsid	i
 800e6a4:	f383 8811 	msr	BASEPRI, r3
 800e6a8:	f3bf 8f6f 	isb	sy
 800e6ac:	f3bf 8f4f 	dsb	sy
 800e6b0:	b662      	cpsie	i
 800e6b2:	61bb      	str	r3, [r7, #24]
}
 800e6b4:	bf00      	nop
 800e6b6:	e7fe      	b.n	800e6b6 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e6b8:	f002 fa48 	bl	8010b4c <vPortValidateInterruptPriority>
	__asm volatile
 800e6bc:	f3ef 8211 	mrs	r2, BASEPRI
 800e6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c4:	b672      	cpsid	i
 800e6c6:	f383 8811 	msr	BASEPRI, r3
 800e6ca:	f3bf 8f6f 	isb	sy
 800e6ce:	f3bf 8f4f 	dsb	sy
 800e6d2:	b662      	cpsie	i
 800e6d4:	617a      	str	r2, [r7, #20]
 800e6d6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e6d8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e6da:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6e0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6e8:	429a      	cmp	r2, r3
 800e6ea:	d22b      	bcs.n	800e744 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e6f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6f8:	1c5a      	adds	r2, r3, #1
 800e6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6fc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e6fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e702:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e706:	d112      	bne.n	800e72e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d016      	beq.n	800e73e <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e712:	3324      	adds	r3, #36	; 0x24
 800e714:	4618      	mov	r0, r3
 800e716:	f001 f917 	bl	800f948 <xTaskRemoveFromEventList>
 800e71a:	4603      	mov	r3, r0
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d00e      	beq.n	800e73e <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d00b      	beq.n	800e73e <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	2201      	movs	r2, #1
 800e72a:	601a      	str	r2, [r3, #0]
 800e72c:	e007      	b.n	800e73e <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e72e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e732:	3301      	adds	r3, #1
 800e734:	b2db      	uxtb	r3, r3
 800e736:	b25a      	sxtb	r2, r3
 800e738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e73a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e73e:	2301      	movs	r3, #1
 800e740:	637b      	str	r3, [r7, #52]	; 0x34
 800e742:	e001      	b.n	800e748 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e744:	2300      	movs	r3, #0
 800e746:	637b      	str	r3, [r7, #52]	; 0x34
 800e748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e74a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	f383 8811 	msr	BASEPRI, r3
}
 800e752:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e756:	4618      	mov	r0, r3
 800e758:	3738      	adds	r7, #56	; 0x38
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
	...

0800e760 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b08c      	sub	sp, #48	; 0x30
 800e764:	af00      	add	r7, sp, #0
 800e766:	60f8      	str	r0, [r7, #12]
 800e768:	60b9      	str	r1, [r7, #8]
 800e76a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e76c:	2300      	movs	r3, #0
 800e76e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e776:	2b00      	cmp	r3, #0
 800e778:	d10c      	bne.n	800e794 <xQueueReceive+0x34>
	__asm volatile
 800e77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e77e:	b672      	cpsid	i
 800e780:	f383 8811 	msr	BASEPRI, r3
 800e784:	f3bf 8f6f 	isb	sy
 800e788:	f3bf 8f4f 	dsb	sy
 800e78c:	b662      	cpsie	i
 800e78e:	623b      	str	r3, [r7, #32]
}
 800e790:	bf00      	nop
 800e792:	e7fe      	b.n	800e792 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d103      	bne.n	800e7a2 <xQueueReceive+0x42>
 800e79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e79c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d101      	bne.n	800e7a6 <xQueueReceive+0x46>
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	e000      	b.n	800e7a8 <xQueueReceive+0x48>
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d10c      	bne.n	800e7c6 <xQueueReceive+0x66>
	__asm volatile
 800e7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b0:	b672      	cpsid	i
 800e7b2:	f383 8811 	msr	BASEPRI, r3
 800e7b6:	f3bf 8f6f 	isb	sy
 800e7ba:	f3bf 8f4f 	dsb	sy
 800e7be:	b662      	cpsie	i
 800e7c0:	61fb      	str	r3, [r7, #28]
}
 800e7c2:	bf00      	nop
 800e7c4:	e7fe      	b.n	800e7c4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e7c6:	f001 fa89 	bl	800fcdc <xTaskGetSchedulerState>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d102      	bne.n	800e7d6 <xQueueReceive+0x76>
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d101      	bne.n	800e7da <xQueueReceive+0x7a>
 800e7d6:	2301      	movs	r3, #1
 800e7d8:	e000      	b.n	800e7dc <xQueueReceive+0x7c>
 800e7da:	2300      	movs	r3, #0
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d10c      	bne.n	800e7fa <xQueueReceive+0x9a>
	__asm volatile
 800e7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e4:	b672      	cpsid	i
 800e7e6:	f383 8811 	msr	BASEPRI, r3
 800e7ea:	f3bf 8f6f 	isb	sy
 800e7ee:	f3bf 8f4f 	dsb	sy
 800e7f2:	b662      	cpsie	i
 800e7f4:	61bb      	str	r3, [r7, #24]
}
 800e7f6:	bf00      	nop
 800e7f8:	e7fe      	b.n	800e7f8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e7fa:	f002 f8bf 	bl	801097c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e802:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e806:	2b00      	cmp	r3, #0
 800e808:	d01f      	beq.n	800e84a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e80a:	68b9      	ldr	r1, [r7, #8]
 800e80c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e80e:	f000 face 	bl	800edae <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e814:	1e5a      	subs	r2, r3, #1
 800e816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e818:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e81c:	691b      	ldr	r3, [r3, #16]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d00f      	beq.n	800e842 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e824:	3310      	adds	r3, #16
 800e826:	4618      	mov	r0, r3
 800e828:	f001 f88e 	bl	800f948 <xTaskRemoveFromEventList>
 800e82c:	4603      	mov	r3, r0
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d007      	beq.n	800e842 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e832:	4b3d      	ldr	r3, [pc, #244]	; (800e928 <xQueueReceive+0x1c8>)
 800e834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e838:	601a      	str	r2, [r3, #0]
 800e83a:	f3bf 8f4f 	dsb	sy
 800e83e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e842:	f002 f8cf 	bl	80109e4 <vPortExitCritical>
				return pdPASS;
 800e846:	2301      	movs	r3, #1
 800e848:	e069      	b.n	800e91e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d103      	bne.n	800e858 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e850:	f002 f8c8 	bl	80109e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e854:	2300      	movs	r3, #0
 800e856:	e062      	b.n	800e91e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d106      	bne.n	800e86c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e85e:	f107 0310 	add.w	r3, r7, #16
 800e862:	4618      	mov	r0, r3
 800e864:	f001 f8d6 	bl	800fa14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e868:	2301      	movs	r3, #1
 800e86a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e86c:	f002 f8ba 	bl	80109e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e870:	f000 fe36 	bl	800f4e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e874:	f002 f882 	bl	801097c <vPortEnterCritical>
 800e878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e87a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e87e:	b25b      	sxtb	r3, r3
 800e880:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e884:	d103      	bne.n	800e88e <xQueueReceive+0x12e>
 800e886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e888:	2200      	movs	r2, #0
 800e88a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e890:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e894:	b25b      	sxtb	r3, r3
 800e896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e89a:	d103      	bne.n	800e8a4 <xQueueReceive+0x144>
 800e89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e89e:	2200      	movs	r2, #0
 800e8a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e8a4:	f002 f89e 	bl	80109e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e8a8:	1d3a      	adds	r2, r7, #4
 800e8aa:	f107 0310 	add.w	r3, r7, #16
 800e8ae:	4611      	mov	r1, r2
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f001 f8c5 	bl	800fa40 <xTaskCheckForTimeOut>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d123      	bne.n	800e904 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e8bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8be:	f000 faee 	bl	800ee9e <prvIsQueueEmpty>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d017      	beq.n	800e8f8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ca:	3324      	adds	r3, #36	; 0x24
 800e8cc:	687a      	ldr	r2, [r7, #4]
 800e8ce:	4611      	mov	r1, r2
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f000 ffe5 	bl	800f8a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e8d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8d8:	f000 fa8f 	bl	800edfa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e8dc:	f000 fe0e 	bl	800f4fc <xTaskResumeAll>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d189      	bne.n	800e7fa <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800e8e6:	4b10      	ldr	r3, [pc, #64]	; (800e928 <xQueueReceive+0x1c8>)
 800e8e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8ec:	601a      	str	r2, [r3, #0]
 800e8ee:	f3bf 8f4f 	dsb	sy
 800e8f2:	f3bf 8f6f 	isb	sy
 800e8f6:	e780      	b.n	800e7fa <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e8f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8fa:	f000 fa7e 	bl	800edfa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e8fe:	f000 fdfd 	bl	800f4fc <xTaskResumeAll>
 800e902:	e77a      	b.n	800e7fa <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e906:	f000 fa78 	bl	800edfa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e90a:	f000 fdf7 	bl	800f4fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e90e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e910:	f000 fac5 	bl	800ee9e <prvIsQueueEmpty>
 800e914:	4603      	mov	r3, r0
 800e916:	2b00      	cmp	r3, #0
 800e918:	f43f af6f 	beq.w	800e7fa <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e91c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e91e:	4618      	mov	r0, r3
 800e920:	3730      	adds	r7, #48	; 0x30
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}
 800e926:	bf00      	nop
 800e928:	e000ed04 	.word	0xe000ed04

0800e92c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b08e      	sub	sp, #56	; 0x38
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
 800e934:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e936:	2300      	movs	r3, #0
 800e938:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e93e:	2300      	movs	r3, #0
 800e940:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e944:	2b00      	cmp	r3, #0
 800e946:	d10c      	bne.n	800e962 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800e948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e94c:	b672      	cpsid	i
 800e94e:	f383 8811 	msr	BASEPRI, r3
 800e952:	f3bf 8f6f 	isb	sy
 800e956:	f3bf 8f4f 	dsb	sy
 800e95a:	b662      	cpsie	i
 800e95c:	623b      	str	r3, [r7, #32]
}
 800e95e:	bf00      	nop
 800e960:	e7fe      	b.n	800e960 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e966:	2b00      	cmp	r3, #0
 800e968:	d00c      	beq.n	800e984 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800e96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e96e:	b672      	cpsid	i
 800e970:	f383 8811 	msr	BASEPRI, r3
 800e974:	f3bf 8f6f 	isb	sy
 800e978:	f3bf 8f4f 	dsb	sy
 800e97c:	b662      	cpsie	i
 800e97e:	61fb      	str	r3, [r7, #28]
}
 800e980:	bf00      	nop
 800e982:	e7fe      	b.n	800e982 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e984:	f001 f9aa 	bl	800fcdc <xTaskGetSchedulerState>
 800e988:	4603      	mov	r3, r0
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d102      	bne.n	800e994 <xQueueSemaphoreTake+0x68>
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d101      	bne.n	800e998 <xQueueSemaphoreTake+0x6c>
 800e994:	2301      	movs	r3, #1
 800e996:	e000      	b.n	800e99a <xQueueSemaphoreTake+0x6e>
 800e998:	2300      	movs	r3, #0
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d10c      	bne.n	800e9b8 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800e99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9a2:	b672      	cpsid	i
 800e9a4:	f383 8811 	msr	BASEPRI, r3
 800e9a8:	f3bf 8f6f 	isb	sy
 800e9ac:	f3bf 8f4f 	dsb	sy
 800e9b0:	b662      	cpsie	i
 800e9b2:	61bb      	str	r3, [r7, #24]
}
 800e9b4:	bf00      	nop
 800e9b6:	e7fe      	b.n	800e9b6 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e9b8:	f001 ffe0 	bl	801097c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9c0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d024      	beq.n	800ea12 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ca:	1e5a      	subs	r2, r3, #1
 800e9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ce:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d104      	bne.n	800e9e2 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e9d8:	f001 fafe 	bl	800ffd8 <pvTaskIncrementMutexHeldCount>
 800e9dc:	4602      	mov	r2, r0
 800e9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e4:	691b      	ldr	r3, [r3, #16]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d00f      	beq.n	800ea0a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ec:	3310      	adds	r3, #16
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f000 ffaa 	bl	800f948 <xTaskRemoveFromEventList>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d007      	beq.n	800ea0a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e9fa:	4b55      	ldr	r3, [pc, #340]	; (800eb50 <xQueueSemaphoreTake+0x224>)
 800e9fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea00:	601a      	str	r2, [r3, #0]
 800ea02:	f3bf 8f4f 	dsb	sy
 800ea06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ea0a:	f001 ffeb 	bl	80109e4 <vPortExitCritical>
				return pdPASS;
 800ea0e:	2301      	movs	r3, #1
 800ea10:	e099      	b.n	800eb46 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d113      	bne.n	800ea40 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ea18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d00c      	beq.n	800ea38 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800ea1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea22:	b672      	cpsid	i
 800ea24:	f383 8811 	msr	BASEPRI, r3
 800ea28:	f3bf 8f6f 	isb	sy
 800ea2c:	f3bf 8f4f 	dsb	sy
 800ea30:	b662      	cpsie	i
 800ea32:	617b      	str	r3, [r7, #20]
}
 800ea34:	bf00      	nop
 800ea36:	e7fe      	b.n	800ea36 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ea38:	f001 ffd4 	bl	80109e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	e082      	b.n	800eb46 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ea40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d106      	bne.n	800ea54 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ea46:	f107 030c 	add.w	r3, r7, #12
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f000 ffe2 	bl	800fa14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ea50:	2301      	movs	r3, #1
 800ea52:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ea54:	f001 ffc6 	bl	80109e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ea58:	f000 fd42 	bl	800f4e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ea5c:	f001 ff8e 	bl	801097c <vPortEnterCritical>
 800ea60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ea66:	b25b      	sxtb	r3, r3
 800ea68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea6c:	d103      	bne.n	800ea76 <xQueueSemaphoreTake+0x14a>
 800ea6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea70:	2200      	movs	r2, #0
 800ea72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ea76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ea7c:	b25b      	sxtb	r3, r3
 800ea7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea82:	d103      	bne.n	800ea8c <xQueueSemaphoreTake+0x160>
 800ea84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea86:	2200      	movs	r2, #0
 800ea88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ea8c:	f001 ffaa 	bl	80109e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ea90:	463a      	mov	r2, r7
 800ea92:	f107 030c 	add.w	r3, r7, #12
 800ea96:	4611      	mov	r1, r2
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f000 ffd1 	bl	800fa40 <xTaskCheckForTimeOut>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d132      	bne.n	800eb0a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eaa4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eaa6:	f000 f9fa 	bl	800ee9e <prvIsQueueEmpty>
 800eaaa:	4603      	mov	r3, r0
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d026      	beq.n	800eafe <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d109      	bne.n	800eacc <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800eab8:	f001 ff60 	bl	801097c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800eabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eabe:	689b      	ldr	r3, [r3, #8]
 800eac0:	4618      	mov	r0, r3
 800eac2:	f001 f929 	bl	800fd18 <xTaskPriorityInherit>
 800eac6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800eac8:	f001 ff8c 	bl	80109e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eace:	3324      	adds	r3, #36	; 0x24
 800ead0:	683a      	ldr	r2, [r7, #0]
 800ead2:	4611      	mov	r1, r2
 800ead4:	4618      	mov	r0, r3
 800ead6:	f000 fee3 	bl	800f8a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800eada:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eadc:	f000 f98d 	bl	800edfa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800eae0:	f000 fd0c 	bl	800f4fc <xTaskResumeAll>
 800eae4:	4603      	mov	r3, r0
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	f47f af66 	bne.w	800e9b8 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800eaec:	4b18      	ldr	r3, [pc, #96]	; (800eb50 <xQueueSemaphoreTake+0x224>)
 800eaee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eaf2:	601a      	str	r2, [r3, #0]
 800eaf4:	f3bf 8f4f 	dsb	sy
 800eaf8:	f3bf 8f6f 	isb	sy
 800eafc:	e75c      	b.n	800e9b8 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800eafe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb00:	f000 f97b 	bl	800edfa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eb04:	f000 fcfa 	bl	800f4fc <xTaskResumeAll>
 800eb08:	e756      	b.n	800e9b8 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800eb0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb0c:	f000 f975 	bl	800edfa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eb10:	f000 fcf4 	bl	800f4fc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eb14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb16:	f000 f9c2 	bl	800ee9e <prvIsQueueEmpty>
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	f43f af4b 	beq.w	800e9b8 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800eb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d00d      	beq.n	800eb44 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800eb28:	f001 ff28 	bl	801097c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800eb2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb2e:	f000 f8bc 	bl	800ecaa <prvGetDisinheritPriorityAfterTimeout>
 800eb32:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800eb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb36:	689b      	ldr	r3, [r3, #8]
 800eb38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f001 f9c6 	bl	800fecc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800eb40:	f001 ff50 	bl	80109e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800eb44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3738      	adds	r7, #56	; 0x38
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
 800eb4e:	bf00      	nop
 800eb50:	e000ed04 	.word	0xe000ed04

0800eb54 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b08e      	sub	sp, #56	; 0x38
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	60f8      	str	r0, [r7, #12]
 800eb5c:	60b9      	str	r1, [r7, #8]
 800eb5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800eb64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d10c      	bne.n	800eb84 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800eb6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb6e:	b672      	cpsid	i
 800eb70:	f383 8811 	msr	BASEPRI, r3
 800eb74:	f3bf 8f6f 	isb	sy
 800eb78:	f3bf 8f4f 	dsb	sy
 800eb7c:	b662      	cpsie	i
 800eb7e:	623b      	str	r3, [r7, #32]
}
 800eb80:	bf00      	nop
 800eb82:	e7fe      	b.n	800eb82 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eb84:	68bb      	ldr	r3, [r7, #8]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d103      	bne.n	800eb92 <xQueueReceiveFromISR+0x3e>
 800eb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d101      	bne.n	800eb96 <xQueueReceiveFromISR+0x42>
 800eb92:	2301      	movs	r3, #1
 800eb94:	e000      	b.n	800eb98 <xQueueReceiveFromISR+0x44>
 800eb96:	2300      	movs	r3, #0
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d10c      	bne.n	800ebb6 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800eb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eba0:	b672      	cpsid	i
 800eba2:	f383 8811 	msr	BASEPRI, r3
 800eba6:	f3bf 8f6f 	isb	sy
 800ebaa:	f3bf 8f4f 	dsb	sy
 800ebae:	b662      	cpsie	i
 800ebb0:	61fb      	str	r3, [r7, #28]
}
 800ebb2:	bf00      	nop
 800ebb4:	e7fe      	b.n	800ebb4 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ebb6:	f001 ffc9 	bl	8010b4c <vPortValidateInterruptPriority>
	__asm volatile
 800ebba:	f3ef 8211 	mrs	r2, BASEPRI
 800ebbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebc2:	b672      	cpsid	i
 800ebc4:	f383 8811 	msr	BASEPRI, r3
 800ebc8:	f3bf 8f6f 	isb	sy
 800ebcc:	f3bf 8f4f 	dsb	sy
 800ebd0:	b662      	cpsie	i
 800ebd2:	61ba      	str	r2, [r7, #24]
 800ebd4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ebd6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ebd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ebda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebde:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ebe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d02f      	beq.n	800ec46 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ebe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ebec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ebf0:	68b9      	ldr	r1, [r7, #8]
 800ebf2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ebf4:	f000 f8db 	bl	800edae <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ebf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebfa:	1e5a      	subs	r2, r3, #1
 800ebfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebfe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ec00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ec04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec08:	d112      	bne.n	800ec30 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ec0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec0c:	691b      	ldr	r3, [r3, #16]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d016      	beq.n	800ec40 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ec12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec14:	3310      	adds	r3, #16
 800ec16:	4618      	mov	r0, r3
 800ec18:	f000 fe96 	bl	800f948 <xTaskRemoveFromEventList>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d00e      	beq.n	800ec40 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d00b      	beq.n	800ec40 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2201      	movs	r2, #1
 800ec2c:	601a      	str	r2, [r3, #0]
 800ec2e:	e007      	b.n	800ec40 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ec30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec34:	3301      	adds	r3, #1
 800ec36:	b2db      	uxtb	r3, r3
 800ec38:	b25a      	sxtb	r2, r3
 800ec3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ec40:	2301      	movs	r3, #1
 800ec42:	637b      	str	r3, [r7, #52]	; 0x34
 800ec44:	e001      	b.n	800ec4a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800ec46:	2300      	movs	r3, #0
 800ec48:	637b      	str	r3, [r7, #52]	; 0x34
 800ec4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec4c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ec4e:	693b      	ldr	r3, [r7, #16]
 800ec50:	f383 8811 	msr	BASEPRI, r3
}
 800ec54:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ec56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ec58:	4618      	mov	r0, r3
 800ec5a:	3738      	adds	r7, #56	; 0x38
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}

0800ec60 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b084      	sub	sp, #16
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d10c      	bne.n	800ec8c <vQueueDelete+0x2c>
	__asm volatile
 800ec72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec76:	b672      	cpsid	i
 800ec78:	f383 8811 	msr	BASEPRI, r3
 800ec7c:	f3bf 8f6f 	isb	sy
 800ec80:	f3bf 8f4f 	dsb	sy
 800ec84:	b662      	cpsie	i
 800ec86:	60bb      	str	r3, [r7, #8]
}
 800ec88:	bf00      	nop
 800ec8a:	e7fe      	b.n	800ec8a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ec8c:	68f8      	ldr	r0, [r7, #12]
 800ec8e:	f000 f95f 	bl	800ef50 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d102      	bne.n	800eca2 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800ec9c:	68f8      	ldr	r0, [r7, #12]
 800ec9e:	f002 f863 	bl	8010d68 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800eca2:	bf00      	nop
 800eca4:	3710      	adds	r7, #16
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bd80      	pop	{r7, pc}

0800ecaa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ecaa:	b480      	push	{r7}
 800ecac:	b085      	sub	sp, #20
 800ecae:	af00      	add	r7, sp, #0
 800ecb0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d006      	beq.n	800ecc8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ecc4:	60fb      	str	r3, [r7, #12]
 800ecc6:	e001      	b.n	800eccc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ecc8:	2300      	movs	r3, #0
 800ecca:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800eccc:	68fb      	ldr	r3, [r7, #12]
	}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3714      	adds	r7, #20
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd8:	4770      	bx	lr

0800ecda <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ecda:	b580      	push	{r7, lr}
 800ecdc:	b086      	sub	sp, #24
 800ecde:	af00      	add	r7, sp, #0
 800ece0:	60f8      	str	r0, [r7, #12]
 800ece2:	60b9      	str	r1, [r7, #8]
 800ece4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ece6:	2300      	movs	r3, #0
 800ece8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecee:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d10d      	bne.n	800ed14 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d14d      	bne.n	800ed9c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	689b      	ldr	r3, [r3, #8]
 800ed04:	4618      	mov	r0, r3
 800ed06:	f001 f86f 	bl	800fde8 <xTaskPriorityDisinherit>
 800ed0a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	2200      	movs	r2, #0
 800ed10:	609a      	str	r2, [r3, #8]
 800ed12:	e043      	b.n	800ed9c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d119      	bne.n	800ed4e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	6858      	ldr	r0, [r3, #4]
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed22:	461a      	mov	r2, r3
 800ed24:	68b9      	ldr	r1, [r7, #8]
 800ed26:	f002 ff19 	bl	8011b5c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	685a      	ldr	r2, [r3, #4]
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed32:	441a      	add	r2, r3
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	685a      	ldr	r2, [r3, #4]
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	689b      	ldr	r3, [r3, #8]
 800ed40:	429a      	cmp	r2, r3
 800ed42:	d32b      	bcc.n	800ed9c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	681a      	ldr	r2, [r3, #0]
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	605a      	str	r2, [r3, #4]
 800ed4c:	e026      	b.n	800ed9c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	68d8      	ldr	r0, [r3, #12]
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed56:	461a      	mov	r2, r3
 800ed58:	68b9      	ldr	r1, [r7, #8]
 800ed5a:	f002 feff 	bl	8011b5c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	68da      	ldr	r2, [r3, #12]
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed66:	425b      	negs	r3, r3
 800ed68:	441a      	add	r2, r3
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	68da      	ldr	r2, [r3, #12]
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	429a      	cmp	r2, r3
 800ed78:	d207      	bcs.n	800ed8a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	689a      	ldr	r2, [r3, #8]
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed82:	425b      	negs	r3, r3
 800ed84:	441a      	add	r2, r3
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2b02      	cmp	r3, #2
 800ed8e:	d105      	bne.n	800ed9c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d002      	beq.n	800ed9c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	3b01      	subs	r3, #1
 800ed9a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ed9c:	693b      	ldr	r3, [r7, #16]
 800ed9e:	1c5a      	adds	r2, r3, #1
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800eda4:	697b      	ldr	r3, [r7, #20]
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	3718      	adds	r7, #24
 800edaa:	46bd      	mov	sp, r7
 800edac:	bd80      	pop	{r7, pc}

0800edae <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800edae:	b580      	push	{r7, lr}
 800edb0:	b082      	sub	sp, #8
 800edb2:	af00      	add	r7, sp, #0
 800edb4:	6078      	str	r0, [r7, #4]
 800edb6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d018      	beq.n	800edf2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	68da      	ldr	r2, [r3, #12]
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edc8:	441a      	add	r2, r3
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	68da      	ldr	r2, [r3, #12]
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	689b      	ldr	r3, [r3, #8]
 800edd6:	429a      	cmp	r2, r3
 800edd8:	d303      	bcc.n	800ede2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681a      	ldr	r2, [r3, #0]
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	68d9      	ldr	r1, [r3, #12]
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edea:	461a      	mov	r2, r3
 800edec:	6838      	ldr	r0, [r7, #0]
 800edee:	f002 feb5 	bl	8011b5c <memcpy>
	}
}
 800edf2:	bf00      	nop
 800edf4:	3708      	adds	r7, #8
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}

0800edfa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800edfa:	b580      	push	{r7, lr}
 800edfc:	b084      	sub	sp, #16
 800edfe:	af00      	add	r7, sp, #0
 800ee00:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ee02:	f001 fdbb 	bl	801097c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ee0c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ee0e:	e011      	b.n	800ee34 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d012      	beq.n	800ee3e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	3324      	adds	r3, #36	; 0x24
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	f000 fd93 	bl	800f948 <xTaskRemoveFromEventList>
 800ee22:	4603      	mov	r3, r0
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d001      	beq.n	800ee2c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ee28:	f000 fe70 	bl	800fb0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ee2c:	7bfb      	ldrb	r3, [r7, #15]
 800ee2e:	3b01      	subs	r3, #1
 800ee30:	b2db      	uxtb	r3, r3
 800ee32:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ee34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	dce9      	bgt.n	800ee10 <prvUnlockQueue+0x16>
 800ee3c:	e000      	b.n	800ee40 <prvUnlockQueue+0x46>
					break;
 800ee3e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	22ff      	movs	r2, #255	; 0xff
 800ee44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ee48:	f001 fdcc 	bl	80109e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ee4c:	f001 fd96 	bl	801097c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ee56:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ee58:	e011      	b.n	800ee7e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	691b      	ldr	r3, [r3, #16]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d012      	beq.n	800ee88 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	3310      	adds	r3, #16
 800ee66:	4618      	mov	r0, r3
 800ee68:	f000 fd6e 	bl	800f948 <xTaskRemoveFromEventList>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d001      	beq.n	800ee76 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ee72:	f000 fe4b 	bl	800fb0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ee76:	7bbb      	ldrb	r3, [r7, #14]
 800ee78:	3b01      	subs	r3, #1
 800ee7a:	b2db      	uxtb	r3, r3
 800ee7c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ee7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	dce9      	bgt.n	800ee5a <prvUnlockQueue+0x60>
 800ee86:	e000      	b.n	800ee8a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ee88:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	22ff      	movs	r2, #255	; 0xff
 800ee8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ee92:	f001 fda7 	bl	80109e4 <vPortExitCritical>
}
 800ee96:	bf00      	nop
 800ee98:	3710      	adds	r7, #16
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}

0800ee9e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ee9e:	b580      	push	{r7, lr}
 800eea0:	b084      	sub	sp, #16
 800eea2:	af00      	add	r7, sp, #0
 800eea4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eea6:	f001 fd69 	bl	801097c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d102      	bne.n	800eeb8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800eeb2:	2301      	movs	r3, #1
 800eeb4:	60fb      	str	r3, [r7, #12]
 800eeb6:	e001      	b.n	800eebc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800eeb8:	2300      	movs	r3, #0
 800eeba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eebc:	f001 fd92 	bl	80109e4 <vPortExitCritical>

	return xReturn;
 800eec0:	68fb      	ldr	r3, [r7, #12]
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	3710      	adds	r7, #16
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}

0800eeca <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800eeca:	b580      	push	{r7, lr}
 800eecc:	b084      	sub	sp, #16
 800eece:	af00      	add	r7, sp, #0
 800eed0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eed2:	f001 fd53 	bl	801097c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eede:	429a      	cmp	r2, r3
 800eee0:	d102      	bne.n	800eee8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800eee2:	2301      	movs	r3, #1
 800eee4:	60fb      	str	r3, [r7, #12]
 800eee6:	e001      	b.n	800eeec <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800eee8:	2300      	movs	r3, #0
 800eeea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eeec:	f001 fd7a 	bl	80109e4 <vPortExitCritical>

	return xReturn;
 800eef0:	68fb      	ldr	r3, [r7, #12]
}
 800eef2:	4618      	mov	r0, r3
 800eef4:	3710      	adds	r7, #16
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}
	...

0800eefc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800eefc:	b480      	push	{r7}
 800eefe:	b085      	sub	sp, #20
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
 800ef04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ef06:	2300      	movs	r3, #0
 800ef08:	60fb      	str	r3, [r7, #12]
 800ef0a:	e014      	b.n	800ef36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ef0c:	4a0f      	ldr	r2, [pc, #60]	; (800ef4c <vQueueAddToRegistry+0x50>)
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d10b      	bne.n	800ef30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ef18:	490c      	ldr	r1, [pc, #48]	; (800ef4c <vQueueAddToRegistry+0x50>)
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	683a      	ldr	r2, [r7, #0]
 800ef1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ef22:	4a0a      	ldr	r2, [pc, #40]	; (800ef4c <vQueueAddToRegistry+0x50>)
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	00db      	lsls	r3, r3, #3
 800ef28:	4413      	add	r3, r2
 800ef2a:	687a      	ldr	r2, [r7, #4]
 800ef2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ef2e:	e006      	b.n	800ef3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	3301      	adds	r3, #1
 800ef34:	60fb      	str	r3, [r7, #12]
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	2b07      	cmp	r3, #7
 800ef3a:	d9e7      	bls.n	800ef0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ef3c:	bf00      	nop
 800ef3e:	bf00      	nop
 800ef40:	3714      	adds	r7, #20
 800ef42:	46bd      	mov	sp, r7
 800ef44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef48:	4770      	bx	lr
 800ef4a:	bf00      	nop
 800ef4c:	20001604 	.word	0x20001604

0800ef50 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ef50:	b480      	push	{r7}
 800ef52:	b085      	sub	sp, #20
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ef58:	2300      	movs	r3, #0
 800ef5a:	60fb      	str	r3, [r7, #12]
 800ef5c:	e016      	b.n	800ef8c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ef5e:	4a10      	ldr	r2, [pc, #64]	; (800efa0 <vQueueUnregisterQueue+0x50>)
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	00db      	lsls	r3, r3, #3
 800ef64:	4413      	add	r3, r2
 800ef66:	685b      	ldr	r3, [r3, #4]
 800ef68:	687a      	ldr	r2, [r7, #4]
 800ef6a:	429a      	cmp	r2, r3
 800ef6c:	d10b      	bne.n	800ef86 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ef6e:	4a0c      	ldr	r2, [pc, #48]	; (800efa0 <vQueueUnregisterQueue+0x50>)
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	2100      	movs	r1, #0
 800ef74:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ef78:	4a09      	ldr	r2, [pc, #36]	; (800efa0 <vQueueUnregisterQueue+0x50>)
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	00db      	lsls	r3, r3, #3
 800ef7e:	4413      	add	r3, r2
 800ef80:	2200      	movs	r2, #0
 800ef82:	605a      	str	r2, [r3, #4]
				break;
 800ef84:	e006      	b.n	800ef94 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	3301      	adds	r3, #1
 800ef8a:	60fb      	str	r3, [r7, #12]
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	2b07      	cmp	r3, #7
 800ef90:	d9e5      	bls.n	800ef5e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ef92:	bf00      	nop
 800ef94:	bf00      	nop
 800ef96:	3714      	adds	r7, #20
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9e:	4770      	bx	lr
 800efa0:	20001604 	.word	0x20001604

0800efa4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b086      	sub	sp, #24
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	60f8      	str	r0, [r7, #12]
 800efac:	60b9      	str	r1, [r7, #8]
 800efae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800efb4:	f001 fce2 	bl	801097c <vPortEnterCritical>
 800efb8:	697b      	ldr	r3, [r7, #20]
 800efba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800efbe:	b25b      	sxtb	r3, r3
 800efc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efc4:	d103      	bne.n	800efce <vQueueWaitForMessageRestricted+0x2a>
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	2200      	movs	r2, #0
 800efca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800efce:	697b      	ldr	r3, [r7, #20]
 800efd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800efd4:	b25b      	sxtb	r3, r3
 800efd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efda:	d103      	bne.n	800efe4 <vQueueWaitForMessageRestricted+0x40>
 800efdc:	697b      	ldr	r3, [r7, #20]
 800efde:	2200      	movs	r2, #0
 800efe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800efe4:	f001 fcfe 	bl	80109e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800efe8:	697b      	ldr	r3, [r7, #20]
 800efea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efec:	2b00      	cmp	r3, #0
 800efee:	d106      	bne.n	800effe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800eff0:	697b      	ldr	r3, [r7, #20]
 800eff2:	3324      	adds	r3, #36	; 0x24
 800eff4:	687a      	ldr	r2, [r7, #4]
 800eff6:	68b9      	ldr	r1, [r7, #8]
 800eff8:	4618      	mov	r0, r3
 800effa:	f000 fc77 	bl	800f8ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800effe:	6978      	ldr	r0, [r7, #20]
 800f000:	f7ff fefb 	bl	800edfa <prvUnlockQueue>
	}
 800f004:	bf00      	nop
 800f006:	3718      	adds	r7, #24
 800f008:	46bd      	mov	sp, r7
 800f00a:	bd80      	pop	{r7, pc}

0800f00c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b08e      	sub	sp, #56	; 0x38
 800f010:	af04      	add	r7, sp, #16
 800f012:	60f8      	str	r0, [r7, #12]
 800f014:	60b9      	str	r1, [r7, #8]
 800f016:	607a      	str	r2, [r7, #4]
 800f018:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f01a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d10c      	bne.n	800f03a <xTaskCreateStatic+0x2e>
	__asm volatile
 800f020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f024:	b672      	cpsid	i
 800f026:	f383 8811 	msr	BASEPRI, r3
 800f02a:	f3bf 8f6f 	isb	sy
 800f02e:	f3bf 8f4f 	dsb	sy
 800f032:	b662      	cpsie	i
 800f034:	623b      	str	r3, [r7, #32]
}
 800f036:	bf00      	nop
 800f038:	e7fe      	b.n	800f038 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800f03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d10c      	bne.n	800f05a <xTaskCreateStatic+0x4e>
	__asm volatile
 800f040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f044:	b672      	cpsid	i
 800f046:	f383 8811 	msr	BASEPRI, r3
 800f04a:	f3bf 8f6f 	isb	sy
 800f04e:	f3bf 8f4f 	dsb	sy
 800f052:	b662      	cpsie	i
 800f054:	61fb      	str	r3, [r7, #28]
}
 800f056:	bf00      	nop
 800f058:	e7fe      	b.n	800f058 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f05a:	23bc      	movs	r3, #188	; 0xbc
 800f05c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f05e:	693b      	ldr	r3, [r7, #16]
 800f060:	2bbc      	cmp	r3, #188	; 0xbc
 800f062:	d00c      	beq.n	800f07e <xTaskCreateStatic+0x72>
	__asm volatile
 800f064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f068:	b672      	cpsid	i
 800f06a:	f383 8811 	msr	BASEPRI, r3
 800f06e:	f3bf 8f6f 	isb	sy
 800f072:	f3bf 8f4f 	dsb	sy
 800f076:	b662      	cpsie	i
 800f078:	61bb      	str	r3, [r7, #24]
}
 800f07a:	bf00      	nop
 800f07c:	e7fe      	b.n	800f07c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f07e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f082:	2b00      	cmp	r3, #0
 800f084:	d01e      	beq.n	800f0c4 <xTaskCreateStatic+0xb8>
 800f086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d01b      	beq.n	800f0c4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f08e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f092:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f094:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f098:	2202      	movs	r2, #2
 800f09a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f09e:	2300      	movs	r3, #0
 800f0a0:	9303      	str	r3, [sp, #12]
 800f0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a4:	9302      	str	r3, [sp, #8]
 800f0a6:	f107 0314 	add.w	r3, r7, #20
 800f0aa:	9301      	str	r3, [sp, #4]
 800f0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ae:	9300      	str	r3, [sp, #0]
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	687a      	ldr	r2, [r7, #4]
 800f0b4:	68b9      	ldr	r1, [r7, #8]
 800f0b6:	68f8      	ldr	r0, [r7, #12]
 800f0b8:	f000 f850 	bl	800f15c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f0bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0be:	f000 f8f5 	bl	800f2ac <prvAddNewTaskToReadyList>
 800f0c2:	e001      	b.n	800f0c8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f0c8:	697b      	ldr	r3, [r7, #20]
	}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	3728      	adds	r7, #40	; 0x28
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}

0800f0d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f0d2:	b580      	push	{r7, lr}
 800f0d4:	b08c      	sub	sp, #48	; 0x30
 800f0d6:	af04      	add	r7, sp, #16
 800f0d8:	60f8      	str	r0, [r7, #12]
 800f0da:	60b9      	str	r1, [r7, #8]
 800f0dc:	603b      	str	r3, [r7, #0]
 800f0de:	4613      	mov	r3, r2
 800f0e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f0e2:	88fb      	ldrh	r3, [r7, #6]
 800f0e4:	009b      	lsls	r3, r3, #2
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	f001 fd74 	bl	8010bd4 <pvPortMalloc>
 800f0ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f0ee:	697b      	ldr	r3, [r7, #20]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d00e      	beq.n	800f112 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f0f4:	20bc      	movs	r0, #188	; 0xbc
 800f0f6:	f001 fd6d 	bl	8010bd4 <pvPortMalloc>
 800f0fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f0fc:	69fb      	ldr	r3, [r7, #28]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d003      	beq.n	800f10a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f102:	69fb      	ldr	r3, [r7, #28]
 800f104:	697a      	ldr	r2, [r7, #20]
 800f106:	631a      	str	r2, [r3, #48]	; 0x30
 800f108:	e005      	b.n	800f116 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f10a:	6978      	ldr	r0, [r7, #20]
 800f10c:	f001 fe2c 	bl	8010d68 <vPortFree>
 800f110:	e001      	b.n	800f116 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f112:	2300      	movs	r3, #0
 800f114:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f116:	69fb      	ldr	r3, [r7, #28]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d017      	beq.n	800f14c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f11c:	69fb      	ldr	r3, [r7, #28]
 800f11e:	2200      	movs	r2, #0
 800f120:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f124:	88fa      	ldrh	r2, [r7, #6]
 800f126:	2300      	movs	r3, #0
 800f128:	9303      	str	r3, [sp, #12]
 800f12a:	69fb      	ldr	r3, [r7, #28]
 800f12c:	9302      	str	r3, [sp, #8]
 800f12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f130:	9301      	str	r3, [sp, #4]
 800f132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f134:	9300      	str	r3, [sp, #0]
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	68b9      	ldr	r1, [r7, #8]
 800f13a:	68f8      	ldr	r0, [r7, #12]
 800f13c:	f000 f80e 	bl	800f15c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f140:	69f8      	ldr	r0, [r7, #28]
 800f142:	f000 f8b3 	bl	800f2ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f146:	2301      	movs	r3, #1
 800f148:	61bb      	str	r3, [r7, #24]
 800f14a:	e002      	b.n	800f152 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f14c:	f04f 33ff 	mov.w	r3, #4294967295
 800f150:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f152:	69bb      	ldr	r3, [r7, #24]
	}
 800f154:	4618      	mov	r0, r3
 800f156:	3720      	adds	r7, #32
 800f158:	46bd      	mov	sp, r7
 800f15a:	bd80      	pop	{r7, pc}

0800f15c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b088      	sub	sp, #32
 800f160:	af00      	add	r7, sp, #0
 800f162:	60f8      	str	r0, [r7, #12]
 800f164:	60b9      	str	r1, [r7, #8]
 800f166:	607a      	str	r2, [r7, #4]
 800f168:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f16c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	009b      	lsls	r3, r3, #2
 800f172:	461a      	mov	r2, r3
 800f174:	21a5      	movs	r1, #165	; 0xa5
 800f176:	f002 fcff 	bl	8011b78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f17c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f17e:	6879      	ldr	r1, [r7, #4]
 800f180:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f184:	440b      	add	r3, r1
 800f186:	009b      	lsls	r3, r3, #2
 800f188:	4413      	add	r3, r2
 800f18a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f18c:	69bb      	ldr	r3, [r7, #24]
 800f18e:	f023 0307 	bic.w	r3, r3, #7
 800f192:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f194:	69bb      	ldr	r3, [r7, #24]
 800f196:	f003 0307 	and.w	r3, r3, #7
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d00c      	beq.n	800f1b8 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800f19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1a2:	b672      	cpsid	i
 800f1a4:	f383 8811 	msr	BASEPRI, r3
 800f1a8:	f3bf 8f6f 	isb	sy
 800f1ac:	f3bf 8f4f 	dsb	sy
 800f1b0:	b662      	cpsie	i
 800f1b2:	617b      	str	r3, [r7, #20]
}
 800f1b4:	bf00      	nop
 800f1b6:	e7fe      	b.n	800f1b6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f1b8:	68bb      	ldr	r3, [r7, #8]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d01f      	beq.n	800f1fe <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f1be:	2300      	movs	r3, #0
 800f1c0:	61fb      	str	r3, [r7, #28]
 800f1c2:	e012      	b.n	800f1ea <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f1c4:	68ba      	ldr	r2, [r7, #8]
 800f1c6:	69fb      	ldr	r3, [r7, #28]
 800f1c8:	4413      	add	r3, r2
 800f1ca:	7819      	ldrb	r1, [r3, #0]
 800f1cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1ce:	69fb      	ldr	r3, [r7, #28]
 800f1d0:	4413      	add	r3, r2
 800f1d2:	3334      	adds	r3, #52	; 0x34
 800f1d4:	460a      	mov	r2, r1
 800f1d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f1d8:	68ba      	ldr	r2, [r7, #8]
 800f1da:	69fb      	ldr	r3, [r7, #28]
 800f1dc:	4413      	add	r3, r2
 800f1de:	781b      	ldrb	r3, [r3, #0]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d006      	beq.n	800f1f2 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f1e4:	69fb      	ldr	r3, [r7, #28]
 800f1e6:	3301      	adds	r3, #1
 800f1e8:	61fb      	str	r3, [r7, #28]
 800f1ea:	69fb      	ldr	r3, [r7, #28]
 800f1ec:	2b0f      	cmp	r3, #15
 800f1ee:	d9e9      	bls.n	800f1c4 <prvInitialiseNewTask+0x68>
 800f1f0:	e000      	b.n	800f1f4 <prvInitialiseNewTask+0x98>
			{
				break;
 800f1f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f1fc:	e003      	b.n	800f206 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f200:	2200      	movs	r2, #0
 800f202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f208:	2b37      	cmp	r3, #55	; 0x37
 800f20a:	d901      	bls.n	800f210 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f20c:	2337      	movs	r3, #55	; 0x37
 800f20e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f214:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f218:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f21a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f21e:	2200      	movs	r2, #0
 800f220:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f224:	3304      	adds	r3, #4
 800f226:	4618      	mov	r0, r3
 800f228:	f7fe fe06 	bl	800de38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f22e:	3318      	adds	r3, #24
 800f230:	4618      	mov	r0, r3
 800f232:	f7fe fe01 	bl	800de38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f23a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f23e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f244:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f24a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f24e:	2200      	movs	r2, #0
 800f250:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f256:	2200      	movs	r2, #0
 800f258:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f25e:	3354      	adds	r3, #84	; 0x54
 800f260:	2260      	movs	r2, #96	; 0x60
 800f262:	2100      	movs	r1, #0
 800f264:	4618      	mov	r0, r3
 800f266:	f002 fc87 	bl	8011b78 <memset>
 800f26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f26c:	4a0c      	ldr	r2, [pc, #48]	; (800f2a0 <prvInitialiseNewTask+0x144>)
 800f26e:	659a      	str	r2, [r3, #88]	; 0x58
 800f270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f272:	4a0c      	ldr	r2, [pc, #48]	; (800f2a4 <prvInitialiseNewTask+0x148>)
 800f274:	65da      	str	r2, [r3, #92]	; 0x5c
 800f276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f278:	4a0b      	ldr	r2, [pc, #44]	; (800f2a8 <prvInitialiseNewTask+0x14c>)
 800f27a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f27c:	683a      	ldr	r2, [r7, #0]
 800f27e:	68f9      	ldr	r1, [r7, #12]
 800f280:	69b8      	ldr	r0, [r7, #24]
 800f282:	f001 fa6d 	bl	8010760 <pxPortInitialiseStack>
 800f286:	4602      	mov	r2, r0
 800f288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f28a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d002      	beq.n	800f298 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f296:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f298:	bf00      	nop
 800f29a:	3720      	adds	r7, #32
 800f29c:	46bd      	mov	sp, r7
 800f29e:	bd80      	pop	{r7, pc}
 800f2a0:	08012020 	.word	0x08012020
 800f2a4:	08012040 	.word	0x08012040
 800f2a8:	08012000 	.word	0x08012000

0800f2ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b082      	sub	sp, #8
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f2b4:	f001 fb62 	bl	801097c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f2b8:	4b2d      	ldr	r3, [pc, #180]	; (800f370 <prvAddNewTaskToReadyList+0xc4>)
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	3301      	adds	r3, #1
 800f2be:	4a2c      	ldr	r2, [pc, #176]	; (800f370 <prvAddNewTaskToReadyList+0xc4>)
 800f2c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f2c2:	4b2c      	ldr	r3, [pc, #176]	; (800f374 <prvAddNewTaskToReadyList+0xc8>)
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d109      	bne.n	800f2de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f2ca:	4a2a      	ldr	r2, [pc, #168]	; (800f374 <prvAddNewTaskToReadyList+0xc8>)
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f2d0:	4b27      	ldr	r3, [pc, #156]	; (800f370 <prvAddNewTaskToReadyList+0xc4>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	2b01      	cmp	r3, #1
 800f2d6:	d110      	bne.n	800f2fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f2d8:	f000 fc3c 	bl	800fb54 <prvInitialiseTaskLists>
 800f2dc:	e00d      	b.n	800f2fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f2de:	4b26      	ldr	r3, [pc, #152]	; (800f378 <prvAddNewTaskToReadyList+0xcc>)
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d109      	bne.n	800f2fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f2e6:	4b23      	ldr	r3, [pc, #140]	; (800f374 <prvAddNewTaskToReadyList+0xc8>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2f0:	429a      	cmp	r2, r3
 800f2f2:	d802      	bhi.n	800f2fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f2f4:	4a1f      	ldr	r2, [pc, #124]	; (800f374 <prvAddNewTaskToReadyList+0xc8>)
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f2fa:	4b20      	ldr	r3, [pc, #128]	; (800f37c <prvAddNewTaskToReadyList+0xd0>)
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	3301      	adds	r3, #1
 800f300:	4a1e      	ldr	r2, [pc, #120]	; (800f37c <prvAddNewTaskToReadyList+0xd0>)
 800f302:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f304:	4b1d      	ldr	r3, [pc, #116]	; (800f37c <prvAddNewTaskToReadyList+0xd0>)
 800f306:	681a      	ldr	r2, [r3, #0]
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f310:	4b1b      	ldr	r3, [pc, #108]	; (800f380 <prvAddNewTaskToReadyList+0xd4>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	429a      	cmp	r2, r3
 800f316:	d903      	bls.n	800f320 <prvAddNewTaskToReadyList+0x74>
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f31c:	4a18      	ldr	r2, [pc, #96]	; (800f380 <prvAddNewTaskToReadyList+0xd4>)
 800f31e:	6013      	str	r3, [r2, #0]
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f324:	4613      	mov	r3, r2
 800f326:	009b      	lsls	r3, r3, #2
 800f328:	4413      	add	r3, r2
 800f32a:	009b      	lsls	r3, r3, #2
 800f32c:	4a15      	ldr	r2, [pc, #84]	; (800f384 <prvAddNewTaskToReadyList+0xd8>)
 800f32e:	441a      	add	r2, r3
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	3304      	adds	r3, #4
 800f334:	4619      	mov	r1, r3
 800f336:	4610      	mov	r0, r2
 800f338:	f7fe fd8b 	bl	800de52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f33c:	f001 fb52 	bl	80109e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f340:	4b0d      	ldr	r3, [pc, #52]	; (800f378 <prvAddNewTaskToReadyList+0xcc>)
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d00e      	beq.n	800f366 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f348:	4b0a      	ldr	r3, [pc, #40]	; (800f374 <prvAddNewTaskToReadyList+0xc8>)
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f352:	429a      	cmp	r2, r3
 800f354:	d207      	bcs.n	800f366 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f356:	4b0c      	ldr	r3, [pc, #48]	; (800f388 <prvAddNewTaskToReadyList+0xdc>)
 800f358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f35c:	601a      	str	r2, [r3, #0]
 800f35e:	f3bf 8f4f 	dsb	sy
 800f362:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f366:	bf00      	nop
 800f368:	3708      	adds	r7, #8
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bd80      	pop	{r7, pc}
 800f36e:	bf00      	nop
 800f370:	20001b18 	.word	0x20001b18
 800f374:	20001644 	.word	0x20001644
 800f378:	20001b24 	.word	0x20001b24
 800f37c:	20001b34 	.word	0x20001b34
 800f380:	20001b20 	.word	0x20001b20
 800f384:	20001648 	.word	0x20001648
 800f388:	e000ed04 	.word	0xe000ed04

0800f38c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b084      	sub	sp, #16
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f394:	2300      	movs	r3, #0
 800f396:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d019      	beq.n	800f3d2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f39e:	4b14      	ldr	r3, [pc, #80]	; (800f3f0 <vTaskDelay+0x64>)
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d00c      	beq.n	800f3c0 <vTaskDelay+0x34>
	__asm volatile
 800f3a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3aa:	b672      	cpsid	i
 800f3ac:	f383 8811 	msr	BASEPRI, r3
 800f3b0:	f3bf 8f6f 	isb	sy
 800f3b4:	f3bf 8f4f 	dsb	sy
 800f3b8:	b662      	cpsie	i
 800f3ba:	60bb      	str	r3, [r7, #8]
}
 800f3bc:	bf00      	nop
 800f3be:	e7fe      	b.n	800f3be <vTaskDelay+0x32>
			vTaskSuspendAll();
 800f3c0:	f000 f88e 	bl	800f4e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f3c4:	2100      	movs	r1, #0
 800f3c6:	6878      	ldr	r0, [r7, #4]
 800f3c8:	f000 fe1a 	bl	8010000 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f3cc:	f000 f896 	bl	800f4fc <xTaskResumeAll>
 800f3d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d107      	bne.n	800f3e8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800f3d8:	4b06      	ldr	r3, [pc, #24]	; (800f3f4 <vTaskDelay+0x68>)
 800f3da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3de:	601a      	str	r2, [r3, #0]
 800f3e0:	f3bf 8f4f 	dsb	sy
 800f3e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f3e8:	bf00      	nop
 800f3ea:	3710      	adds	r7, #16
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}
 800f3f0:	20001b40 	.word	0x20001b40
 800f3f4:	e000ed04 	.word	0xe000ed04

0800f3f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b08a      	sub	sp, #40	; 0x28
 800f3fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f3fe:	2300      	movs	r3, #0
 800f400:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f402:	2300      	movs	r3, #0
 800f404:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f406:	463a      	mov	r2, r7
 800f408:	1d39      	adds	r1, r7, #4
 800f40a:	f107 0308 	add.w	r3, r7, #8
 800f40e:	4618      	mov	r0, r3
 800f410:	f7fe fcbe 	bl	800dd90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f414:	6839      	ldr	r1, [r7, #0]
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	68ba      	ldr	r2, [r7, #8]
 800f41a:	9202      	str	r2, [sp, #8]
 800f41c:	9301      	str	r3, [sp, #4]
 800f41e:	2300      	movs	r3, #0
 800f420:	9300      	str	r3, [sp, #0]
 800f422:	2300      	movs	r3, #0
 800f424:	460a      	mov	r2, r1
 800f426:	4926      	ldr	r1, [pc, #152]	; (800f4c0 <vTaskStartScheduler+0xc8>)
 800f428:	4826      	ldr	r0, [pc, #152]	; (800f4c4 <vTaskStartScheduler+0xcc>)
 800f42a:	f7ff fdef 	bl	800f00c <xTaskCreateStatic>
 800f42e:	4603      	mov	r3, r0
 800f430:	4a25      	ldr	r2, [pc, #148]	; (800f4c8 <vTaskStartScheduler+0xd0>)
 800f432:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f434:	4b24      	ldr	r3, [pc, #144]	; (800f4c8 <vTaskStartScheduler+0xd0>)
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d002      	beq.n	800f442 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f43c:	2301      	movs	r3, #1
 800f43e:	617b      	str	r3, [r7, #20]
 800f440:	e001      	b.n	800f446 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f442:	2300      	movs	r3, #0
 800f444:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f446:	697b      	ldr	r3, [r7, #20]
 800f448:	2b01      	cmp	r3, #1
 800f44a:	d102      	bne.n	800f452 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f44c:	f000 fe2c 	bl	80100a8 <xTimerCreateTimerTask>
 800f450:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f452:	697b      	ldr	r3, [r7, #20]
 800f454:	2b01      	cmp	r3, #1
 800f456:	d11d      	bne.n	800f494 <vTaskStartScheduler+0x9c>
	__asm volatile
 800f458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f45c:	b672      	cpsid	i
 800f45e:	f383 8811 	msr	BASEPRI, r3
 800f462:	f3bf 8f6f 	isb	sy
 800f466:	f3bf 8f4f 	dsb	sy
 800f46a:	b662      	cpsie	i
 800f46c:	613b      	str	r3, [r7, #16]
}
 800f46e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f470:	4b16      	ldr	r3, [pc, #88]	; (800f4cc <vTaskStartScheduler+0xd4>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	3354      	adds	r3, #84	; 0x54
 800f476:	4a16      	ldr	r2, [pc, #88]	; (800f4d0 <vTaskStartScheduler+0xd8>)
 800f478:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f47a:	4b16      	ldr	r3, [pc, #88]	; (800f4d4 <vTaskStartScheduler+0xdc>)
 800f47c:	f04f 32ff 	mov.w	r2, #4294967295
 800f480:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f482:	4b15      	ldr	r3, [pc, #84]	; (800f4d8 <vTaskStartScheduler+0xe0>)
 800f484:	2201      	movs	r2, #1
 800f486:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f488:	4b14      	ldr	r3, [pc, #80]	; (800f4dc <vTaskStartScheduler+0xe4>)
 800f48a:	2200      	movs	r2, #0
 800f48c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f48e:	f001 f9f7 	bl	8010880 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f492:	e010      	b.n	800f4b6 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f49a:	d10c      	bne.n	800f4b6 <vTaskStartScheduler+0xbe>
	__asm volatile
 800f49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4a0:	b672      	cpsid	i
 800f4a2:	f383 8811 	msr	BASEPRI, r3
 800f4a6:	f3bf 8f6f 	isb	sy
 800f4aa:	f3bf 8f4f 	dsb	sy
 800f4ae:	b662      	cpsie	i
 800f4b0:	60fb      	str	r3, [r7, #12]
}
 800f4b2:	bf00      	nop
 800f4b4:	e7fe      	b.n	800f4b4 <vTaskStartScheduler+0xbc>
}
 800f4b6:	bf00      	nop
 800f4b8:	3718      	adds	r7, #24
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}
 800f4be:	bf00      	nop
 800f4c0:	08011ec0 	.word	0x08011ec0
 800f4c4:	0800fb25 	.word	0x0800fb25
 800f4c8:	20001b3c 	.word	0x20001b3c
 800f4cc:	20001644 	.word	0x20001644
 800f4d0:	20000190 	.word	0x20000190
 800f4d4:	20001b38 	.word	0x20001b38
 800f4d8:	20001b24 	.word	0x20001b24
 800f4dc:	20001b1c 	.word	0x20001b1c

0800f4e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f4e0:	b480      	push	{r7}
 800f4e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f4e4:	4b04      	ldr	r3, [pc, #16]	; (800f4f8 <vTaskSuspendAll+0x18>)
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	3301      	adds	r3, #1
 800f4ea:	4a03      	ldr	r2, [pc, #12]	; (800f4f8 <vTaskSuspendAll+0x18>)
 800f4ec:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f4ee:	bf00      	nop
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f6:	4770      	bx	lr
 800f4f8:	20001b40 	.word	0x20001b40

0800f4fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b084      	sub	sp, #16
 800f500:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f502:	2300      	movs	r3, #0
 800f504:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f506:	2300      	movs	r3, #0
 800f508:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f50a:	4b43      	ldr	r3, [pc, #268]	; (800f618 <xTaskResumeAll+0x11c>)
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d10c      	bne.n	800f52c <xTaskResumeAll+0x30>
	__asm volatile
 800f512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f516:	b672      	cpsid	i
 800f518:	f383 8811 	msr	BASEPRI, r3
 800f51c:	f3bf 8f6f 	isb	sy
 800f520:	f3bf 8f4f 	dsb	sy
 800f524:	b662      	cpsie	i
 800f526:	603b      	str	r3, [r7, #0]
}
 800f528:	bf00      	nop
 800f52a:	e7fe      	b.n	800f52a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f52c:	f001 fa26 	bl	801097c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f530:	4b39      	ldr	r3, [pc, #228]	; (800f618 <xTaskResumeAll+0x11c>)
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	3b01      	subs	r3, #1
 800f536:	4a38      	ldr	r2, [pc, #224]	; (800f618 <xTaskResumeAll+0x11c>)
 800f538:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f53a:	4b37      	ldr	r3, [pc, #220]	; (800f618 <xTaskResumeAll+0x11c>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d162      	bne.n	800f608 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f542:	4b36      	ldr	r3, [pc, #216]	; (800f61c <xTaskResumeAll+0x120>)
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d05e      	beq.n	800f608 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f54a:	e02f      	b.n	800f5ac <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f54c:	4b34      	ldr	r3, [pc, #208]	; (800f620 <xTaskResumeAll+0x124>)
 800f54e:	68db      	ldr	r3, [r3, #12]
 800f550:	68db      	ldr	r3, [r3, #12]
 800f552:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	3318      	adds	r3, #24
 800f558:	4618      	mov	r0, r3
 800f55a:	f7fe fcd7 	bl	800df0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	3304      	adds	r3, #4
 800f562:	4618      	mov	r0, r3
 800f564:	f7fe fcd2 	bl	800df0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f56c:	4b2d      	ldr	r3, [pc, #180]	; (800f624 <xTaskResumeAll+0x128>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	429a      	cmp	r2, r3
 800f572:	d903      	bls.n	800f57c <xTaskResumeAll+0x80>
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f578:	4a2a      	ldr	r2, [pc, #168]	; (800f624 <xTaskResumeAll+0x128>)
 800f57a:	6013      	str	r3, [r2, #0]
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f580:	4613      	mov	r3, r2
 800f582:	009b      	lsls	r3, r3, #2
 800f584:	4413      	add	r3, r2
 800f586:	009b      	lsls	r3, r3, #2
 800f588:	4a27      	ldr	r2, [pc, #156]	; (800f628 <xTaskResumeAll+0x12c>)
 800f58a:	441a      	add	r2, r3
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	3304      	adds	r3, #4
 800f590:	4619      	mov	r1, r3
 800f592:	4610      	mov	r0, r2
 800f594:	f7fe fc5d 	bl	800de52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f59c:	4b23      	ldr	r3, [pc, #140]	; (800f62c <xTaskResumeAll+0x130>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5a2:	429a      	cmp	r2, r3
 800f5a4:	d302      	bcc.n	800f5ac <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800f5a6:	4b22      	ldr	r3, [pc, #136]	; (800f630 <xTaskResumeAll+0x134>)
 800f5a8:	2201      	movs	r2, #1
 800f5aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f5ac:	4b1c      	ldr	r3, [pc, #112]	; (800f620 <xTaskResumeAll+0x124>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d1cb      	bne.n	800f54c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d001      	beq.n	800f5be <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f5ba:	f000 fb6f 	bl	800fc9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f5be:	4b1d      	ldr	r3, [pc, #116]	; (800f634 <xTaskResumeAll+0x138>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d010      	beq.n	800f5ec <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f5ca:	f000 f847 	bl	800f65c <xTaskIncrementTick>
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d002      	beq.n	800f5da <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800f5d4:	4b16      	ldr	r3, [pc, #88]	; (800f630 <xTaskResumeAll+0x134>)
 800f5d6:	2201      	movs	r2, #1
 800f5d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	3b01      	subs	r3, #1
 800f5de:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d1f1      	bne.n	800f5ca <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800f5e6:	4b13      	ldr	r3, [pc, #76]	; (800f634 <xTaskResumeAll+0x138>)
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f5ec:	4b10      	ldr	r3, [pc, #64]	; (800f630 <xTaskResumeAll+0x134>)
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d009      	beq.n	800f608 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f5f4:	2301      	movs	r3, #1
 800f5f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f5f8:	4b0f      	ldr	r3, [pc, #60]	; (800f638 <xTaskResumeAll+0x13c>)
 800f5fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5fe:	601a      	str	r2, [r3, #0]
 800f600:	f3bf 8f4f 	dsb	sy
 800f604:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f608:	f001 f9ec 	bl	80109e4 <vPortExitCritical>

	return xAlreadyYielded;
 800f60c:	68bb      	ldr	r3, [r7, #8]
}
 800f60e:	4618      	mov	r0, r3
 800f610:	3710      	adds	r7, #16
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}
 800f616:	bf00      	nop
 800f618:	20001b40 	.word	0x20001b40
 800f61c:	20001b18 	.word	0x20001b18
 800f620:	20001ad8 	.word	0x20001ad8
 800f624:	20001b20 	.word	0x20001b20
 800f628:	20001648 	.word	0x20001648
 800f62c:	20001644 	.word	0x20001644
 800f630:	20001b2c 	.word	0x20001b2c
 800f634:	20001b28 	.word	0x20001b28
 800f638:	e000ed04 	.word	0xe000ed04

0800f63c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f63c:	b480      	push	{r7}
 800f63e:	b083      	sub	sp, #12
 800f640:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f642:	4b05      	ldr	r3, [pc, #20]	; (800f658 <xTaskGetTickCount+0x1c>)
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f648:	687b      	ldr	r3, [r7, #4]
}
 800f64a:	4618      	mov	r0, r3
 800f64c:	370c      	adds	r7, #12
 800f64e:	46bd      	mov	sp, r7
 800f650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f654:	4770      	bx	lr
 800f656:	bf00      	nop
 800f658:	20001b1c 	.word	0x20001b1c

0800f65c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b086      	sub	sp, #24
 800f660:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f662:	2300      	movs	r3, #0
 800f664:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f666:	4b50      	ldr	r3, [pc, #320]	; (800f7a8 <xTaskIncrementTick+0x14c>)
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	f040 808b 	bne.w	800f786 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f670:	4b4e      	ldr	r3, [pc, #312]	; (800f7ac <xTaskIncrementTick+0x150>)
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	3301      	adds	r3, #1
 800f676:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f678:	4a4c      	ldr	r2, [pc, #304]	; (800f7ac <xTaskIncrementTick+0x150>)
 800f67a:	693b      	ldr	r3, [r7, #16]
 800f67c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f67e:	693b      	ldr	r3, [r7, #16]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d122      	bne.n	800f6ca <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800f684:	4b4a      	ldr	r3, [pc, #296]	; (800f7b0 <xTaskIncrementTick+0x154>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d00c      	beq.n	800f6a8 <xTaskIncrementTick+0x4c>
	__asm volatile
 800f68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f692:	b672      	cpsid	i
 800f694:	f383 8811 	msr	BASEPRI, r3
 800f698:	f3bf 8f6f 	isb	sy
 800f69c:	f3bf 8f4f 	dsb	sy
 800f6a0:	b662      	cpsie	i
 800f6a2:	603b      	str	r3, [r7, #0]
}
 800f6a4:	bf00      	nop
 800f6a6:	e7fe      	b.n	800f6a6 <xTaskIncrementTick+0x4a>
 800f6a8:	4b41      	ldr	r3, [pc, #260]	; (800f7b0 <xTaskIncrementTick+0x154>)
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	60fb      	str	r3, [r7, #12]
 800f6ae:	4b41      	ldr	r3, [pc, #260]	; (800f7b4 <xTaskIncrementTick+0x158>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	4a3f      	ldr	r2, [pc, #252]	; (800f7b0 <xTaskIncrementTick+0x154>)
 800f6b4:	6013      	str	r3, [r2, #0]
 800f6b6:	4a3f      	ldr	r2, [pc, #252]	; (800f7b4 <xTaskIncrementTick+0x158>)
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	6013      	str	r3, [r2, #0]
 800f6bc:	4b3e      	ldr	r3, [pc, #248]	; (800f7b8 <xTaskIncrementTick+0x15c>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	3301      	adds	r3, #1
 800f6c2:	4a3d      	ldr	r2, [pc, #244]	; (800f7b8 <xTaskIncrementTick+0x15c>)
 800f6c4:	6013      	str	r3, [r2, #0]
 800f6c6:	f000 fae9 	bl	800fc9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f6ca:	4b3c      	ldr	r3, [pc, #240]	; (800f7bc <xTaskIncrementTick+0x160>)
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	693a      	ldr	r2, [r7, #16]
 800f6d0:	429a      	cmp	r2, r3
 800f6d2:	d349      	bcc.n	800f768 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f6d4:	4b36      	ldr	r3, [pc, #216]	; (800f7b0 <xTaskIncrementTick+0x154>)
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d104      	bne.n	800f6e8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6de:	4b37      	ldr	r3, [pc, #220]	; (800f7bc <xTaskIncrementTick+0x160>)
 800f6e0:	f04f 32ff 	mov.w	r2, #4294967295
 800f6e4:	601a      	str	r2, [r3, #0]
					break;
 800f6e6:	e03f      	b.n	800f768 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6e8:	4b31      	ldr	r3, [pc, #196]	; (800f7b0 <xTaskIncrementTick+0x154>)
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	68db      	ldr	r3, [r3, #12]
 800f6ee:	68db      	ldr	r3, [r3, #12]
 800f6f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f6f2:	68bb      	ldr	r3, [r7, #8]
 800f6f4:	685b      	ldr	r3, [r3, #4]
 800f6f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f6f8:	693a      	ldr	r2, [r7, #16]
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	429a      	cmp	r2, r3
 800f6fe:	d203      	bcs.n	800f708 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f700:	4a2e      	ldr	r2, [pc, #184]	; (800f7bc <xTaskIncrementTick+0x160>)
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f706:	e02f      	b.n	800f768 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	3304      	adds	r3, #4
 800f70c:	4618      	mov	r0, r3
 800f70e:	f7fe fbfd 	bl	800df0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f716:	2b00      	cmp	r3, #0
 800f718:	d004      	beq.n	800f724 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f71a:	68bb      	ldr	r3, [r7, #8]
 800f71c:	3318      	adds	r3, #24
 800f71e:	4618      	mov	r0, r3
 800f720:	f7fe fbf4 	bl	800df0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f724:	68bb      	ldr	r3, [r7, #8]
 800f726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f728:	4b25      	ldr	r3, [pc, #148]	; (800f7c0 <xTaskIncrementTick+0x164>)
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	429a      	cmp	r2, r3
 800f72e:	d903      	bls.n	800f738 <xTaskIncrementTick+0xdc>
 800f730:	68bb      	ldr	r3, [r7, #8]
 800f732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f734:	4a22      	ldr	r2, [pc, #136]	; (800f7c0 <xTaskIncrementTick+0x164>)
 800f736:	6013      	str	r3, [r2, #0]
 800f738:	68bb      	ldr	r3, [r7, #8]
 800f73a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f73c:	4613      	mov	r3, r2
 800f73e:	009b      	lsls	r3, r3, #2
 800f740:	4413      	add	r3, r2
 800f742:	009b      	lsls	r3, r3, #2
 800f744:	4a1f      	ldr	r2, [pc, #124]	; (800f7c4 <xTaskIncrementTick+0x168>)
 800f746:	441a      	add	r2, r3
 800f748:	68bb      	ldr	r3, [r7, #8]
 800f74a:	3304      	adds	r3, #4
 800f74c:	4619      	mov	r1, r3
 800f74e:	4610      	mov	r0, r2
 800f750:	f7fe fb7f 	bl	800de52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f754:	68bb      	ldr	r3, [r7, #8]
 800f756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f758:	4b1b      	ldr	r3, [pc, #108]	; (800f7c8 <xTaskIncrementTick+0x16c>)
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f75e:	429a      	cmp	r2, r3
 800f760:	d3b8      	bcc.n	800f6d4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800f762:	2301      	movs	r3, #1
 800f764:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f766:	e7b5      	b.n	800f6d4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f768:	4b17      	ldr	r3, [pc, #92]	; (800f7c8 <xTaskIncrementTick+0x16c>)
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f76e:	4915      	ldr	r1, [pc, #84]	; (800f7c4 <xTaskIncrementTick+0x168>)
 800f770:	4613      	mov	r3, r2
 800f772:	009b      	lsls	r3, r3, #2
 800f774:	4413      	add	r3, r2
 800f776:	009b      	lsls	r3, r3, #2
 800f778:	440b      	add	r3, r1
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	2b01      	cmp	r3, #1
 800f77e:	d907      	bls.n	800f790 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800f780:	2301      	movs	r3, #1
 800f782:	617b      	str	r3, [r7, #20]
 800f784:	e004      	b.n	800f790 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f786:	4b11      	ldr	r3, [pc, #68]	; (800f7cc <xTaskIncrementTick+0x170>)
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	3301      	adds	r3, #1
 800f78c:	4a0f      	ldr	r2, [pc, #60]	; (800f7cc <xTaskIncrementTick+0x170>)
 800f78e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f790:	4b0f      	ldr	r3, [pc, #60]	; (800f7d0 <xTaskIncrementTick+0x174>)
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d001      	beq.n	800f79c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800f798:	2301      	movs	r3, #1
 800f79a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f79c:	697b      	ldr	r3, [r7, #20]
}
 800f79e:	4618      	mov	r0, r3
 800f7a0:	3718      	adds	r7, #24
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bd80      	pop	{r7, pc}
 800f7a6:	bf00      	nop
 800f7a8:	20001b40 	.word	0x20001b40
 800f7ac:	20001b1c 	.word	0x20001b1c
 800f7b0:	20001ad0 	.word	0x20001ad0
 800f7b4:	20001ad4 	.word	0x20001ad4
 800f7b8:	20001b30 	.word	0x20001b30
 800f7bc:	20001b38 	.word	0x20001b38
 800f7c0:	20001b20 	.word	0x20001b20
 800f7c4:	20001648 	.word	0x20001648
 800f7c8:	20001644 	.word	0x20001644
 800f7cc:	20001b28 	.word	0x20001b28
 800f7d0:	20001b2c 	.word	0x20001b2c

0800f7d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f7d4:	b480      	push	{r7}
 800f7d6:	b085      	sub	sp, #20
 800f7d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f7da:	4b2b      	ldr	r3, [pc, #172]	; (800f888 <vTaskSwitchContext+0xb4>)
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d003      	beq.n	800f7ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f7e2:	4b2a      	ldr	r3, [pc, #168]	; (800f88c <vTaskSwitchContext+0xb8>)
 800f7e4:	2201      	movs	r2, #1
 800f7e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f7e8:	e048      	b.n	800f87c <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800f7ea:	4b28      	ldr	r3, [pc, #160]	; (800f88c <vTaskSwitchContext+0xb8>)
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7f0:	4b27      	ldr	r3, [pc, #156]	; (800f890 <vTaskSwitchContext+0xbc>)
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	60fb      	str	r3, [r7, #12]
 800f7f6:	e012      	b.n	800f81e <vTaskSwitchContext+0x4a>
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d10c      	bne.n	800f818 <vTaskSwitchContext+0x44>
	__asm volatile
 800f7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f802:	b672      	cpsid	i
 800f804:	f383 8811 	msr	BASEPRI, r3
 800f808:	f3bf 8f6f 	isb	sy
 800f80c:	f3bf 8f4f 	dsb	sy
 800f810:	b662      	cpsie	i
 800f812:	607b      	str	r3, [r7, #4]
}
 800f814:	bf00      	nop
 800f816:	e7fe      	b.n	800f816 <vTaskSwitchContext+0x42>
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	3b01      	subs	r3, #1
 800f81c:	60fb      	str	r3, [r7, #12]
 800f81e:	491d      	ldr	r1, [pc, #116]	; (800f894 <vTaskSwitchContext+0xc0>)
 800f820:	68fa      	ldr	r2, [r7, #12]
 800f822:	4613      	mov	r3, r2
 800f824:	009b      	lsls	r3, r3, #2
 800f826:	4413      	add	r3, r2
 800f828:	009b      	lsls	r3, r3, #2
 800f82a:	440b      	add	r3, r1
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d0e2      	beq.n	800f7f8 <vTaskSwitchContext+0x24>
 800f832:	68fa      	ldr	r2, [r7, #12]
 800f834:	4613      	mov	r3, r2
 800f836:	009b      	lsls	r3, r3, #2
 800f838:	4413      	add	r3, r2
 800f83a:	009b      	lsls	r3, r3, #2
 800f83c:	4a15      	ldr	r2, [pc, #84]	; (800f894 <vTaskSwitchContext+0xc0>)
 800f83e:	4413      	add	r3, r2
 800f840:	60bb      	str	r3, [r7, #8]
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	685b      	ldr	r3, [r3, #4]
 800f846:	685a      	ldr	r2, [r3, #4]
 800f848:	68bb      	ldr	r3, [r7, #8]
 800f84a:	605a      	str	r2, [r3, #4]
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	685a      	ldr	r2, [r3, #4]
 800f850:	68bb      	ldr	r3, [r7, #8]
 800f852:	3308      	adds	r3, #8
 800f854:	429a      	cmp	r2, r3
 800f856:	d104      	bne.n	800f862 <vTaskSwitchContext+0x8e>
 800f858:	68bb      	ldr	r3, [r7, #8]
 800f85a:	685b      	ldr	r3, [r3, #4]
 800f85c:	685a      	ldr	r2, [r3, #4]
 800f85e:	68bb      	ldr	r3, [r7, #8]
 800f860:	605a      	str	r2, [r3, #4]
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	685b      	ldr	r3, [r3, #4]
 800f866:	68db      	ldr	r3, [r3, #12]
 800f868:	4a0b      	ldr	r2, [pc, #44]	; (800f898 <vTaskSwitchContext+0xc4>)
 800f86a:	6013      	str	r3, [r2, #0]
 800f86c:	4a08      	ldr	r2, [pc, #32]	; (800f890 <vTaskSwitchContext+0xbc>)
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f872:	4b09      	ldr	r3, [pc, #36]	; (800f898 <vTaskSwitchContext+0xc4>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	3354      	adds	r3, #84	; 0x54
 800f878:	4a08      	ldr	r2, [pc, #32]	; (800f89c <vTaskSwitchContext+0xc8>)
 800f87a:	6013      	str	r3, [r2, #0]
}
 800f87c:	bf00      	nop
 800f87e:	3714      	adds	r7, #20
 800f880:	46bd      	mov	sp, r7
 800f882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f886:	4770      	bx	lr
 800f888:	20001b40 	.word	0x20001b40
 800f88c:	20001b2c 	.word	0x20001b2c
 800f890:	20001b20 	.word	0x20001b20
 800f894:	20001648 	.word	0x20001648
 800f898:	20001644 	.word	0x20001644
 800f89c:	20000190 	.word	0x20000190

0800f8a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b084      	sub	sp, #16
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
 800f8a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d10c      	bne.n	800f8ca <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800f8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8b4:	b672      	cpsid	i
 800f8b6:	f383 8811 	msr	BASEPRI, r3
 800f8ba:	f3bf 8f6f 	isb	sy
 800f8be:	f3bf 8f4f 	dsb	sy
 800f8c2:	b662      	cpsie	i
 800f8c4:	60fb      	str	r3, [r7, #12]
}
 800f8c6:	bf00      	nop
 800f8c8:	e7fe      	b.n	800f8c8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f8ca:	4b07      	ldr	r3, [pc, #28]	; (800f8e8 <vTaskPlaceOnEventList+0x48>)
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	3318      	adds	r3, #24
 800f8d0:	4619      	mov	r1, r3
 800f8d2:	6878      	ldr	r0, [r7, #4]
 800f8d4:	f7fe fae1 	bl	800de9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f8d8:	2101      	movs	r1, #1
 800f8da:	6838      	ldr	r0, [r7, #0]
 800f8dc:	f000 fb90 	bl	8010000 <prvAddCurrentTaskToDelayedList>
}
 800f8e0:	bf00      	nop
 800f8e2:	3710      	adds	r7, #16
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bd80      	pop	{r7, pc}
 800f8e8:	20001644 	.word	0x20001644

0800f8ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b086      	sub	sp, #24
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	60f8      	str	r0, [r7, #12]
 800f8f4:	60b9      	str	r1, [r7, #8]
 800f8f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d10c      	bne.n	800f918 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800f8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f902:	b672      	cpsid	i
 800f904:	f383 8811 	msr	BASEPRI, r3
 800f908:	f3bf 8f6f 	isb	sy
 800f90c:	f3bf 8f4f 	dsb	sy
 800f910:	b662      	cpsie	i
 800f912:	617b      	str	r3, [r7, #20]
}
 800f914:	bf00      	nop
 800f916:	e7fe      	b.n	800f916 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f918:	4b0a      	ldr	r3, [pc, #40]	; (800f944 <vTaskPlaceOnEventListRestricted+0x58>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	3318      	adds	r3, #24
 800f91e:	4619      	mov	r1, r3
 800f920:	68f8      	ldr	r0, [r7, #12]
 800f922:	f7fe fa96 	bl	800de52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d002      	beq.n	800f932 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800f92c:	f04f 33ff 	mov.w	r3, #4294967295
 800f930:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f932:	6879      	ldr	r1, [r7, #4]
 800f934:	68b8      	ldr	r0, [r7, #8]
 800f936:	f000 fb63 	bl	8010000 <prvAddCurrentTaskToDelayedList>
	}
 800f93a:	bf00      	nop
 800f93c:	3718      	adds	r7, #24
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd80      	pop	{r7, pc}
 800f942:	bf00      	nop
 800f944:	20001644 	.word	0x20001644

0800f948 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b086      	sub	sp, #24
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	68db      	ldr	r3, [r3, #12]
 800f954:	68db      	ldr	r3, [r3, #12]
 800f956:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f958:	693b      	ldr	r3, [r7, #16]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d10c      	bne.n	800f978 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800f95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f962:	b672      	cpsid	i
 800f964:	f383 8811 	msr	BASEPRI, r3
 800f968:	f3bf 8f6f 	isb	sy
 800f96c:	f3bf 8f4f 	dsb	sy
 800f970:	b662      	cpsie	i
 800f972:	60fb      	str	r3, [r7, #12]
}
 800f974:	bf00      	nop
 800f976:	e7fe      	b.n	800f976 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f978:	693b      	ldr	r3, [r7, #16]
 800f97a:	3318      	adds	r3, #24
 800f97c:	4618      	mov	r0, r3
 800f97e:	f7fe fac5 	bl	800df0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f982:	4b1e      	ldr	r3, [pc, #120]	; (800f9fc <xTaskRemoveFromEventList+0xb4>)
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d11d      	bne.n	800f9c6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f98a:	693b      	ldr	r3, [r7, #16]
 800f98c:	3304      	adds	r3, #4
 800f98e:	4618      	mov	r0, r3
 800f990:	f7fe fabc 	bl	800df0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f994:	693b      	ldr	r3, [r7, #16]
 800f996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f998:	4b19      	ldr	r3, [pc, #100]	; (800fa00 <xTaskRemoveFromEventList+0xb8>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	429a      	cmp	r2, r3
 800f99e:	d903      	bls.n	800f9a8 <xTaskRemoveFromEventList+0x60>
 800f9a0:	693b      	ldr	r3, [r7, #16]
 800f9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9a4:	4a16      	ldr	r2, [pc, #88]	; (800fa00 <xTaskRemoveFromEventList+0xb8>)
 800f9a6:	6013      	str	r3, [r2, #0]
 800f9a8:	693b      	ldr	r3, [r7, #16]
 800f9aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9ac:	4613      	mov	r3, r2
 800f9ae:	009b      	lsls	r3, r3, #2
 800f9b0:	4413      	add	r3, r2
 800f9b2:	009b      	lsls	r3, r3, #2
 800f9b4:	4a13      	ldr	r2, [pc, #76]	; (800fa04 <xTaskRemoveFromEventList+0xbc>)
 800f9b6:	441a      	add	r2, r3
 800f9b8:	693b      	ldr	r3, [r7, #16]
 800f9ba:	3304      	adds	r3, #4
 800f9bc:	4619      	mov	r1, r3
 800f9be:	4610      	mov	r0, r2
 800f9c0:	f7fe fa47 	bl	800de52 <vListInsertEnd>
 800f9c4:	e005      	b.n	800f9d2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f9c6:	693b      	ldr	r3, [r7, #16]
 800f9c8:	3318      	adds	r3, #24
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	480e      	ldr	r0, [pc, #56]	; (800fa08 <xTaskRemoveFromEventList+0xc0>)
 800f9ce:	f7fe fa40 	bl	800de52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f9d2:	693b      	ldr	r3, [r7, #16]
 800f9d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9d6:	4b0d      	ldr	r3, [pc, #52]	; (800fa0c <xTaskRemoveFromEventList+0xc4>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9dc:	429a      	cmp	r2, r3
 800f9de:	d905      	bls.n	800f9ec <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f9e0:	2301      	movs	r3, #1
 800f9e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f9e4:	4b0a      	ldr	r3, [pc, #40]	; (800fa10 <xTaskRemoveFromEventList+0xc8>)
 800f9e6:	2201      	movs	r2, #1
 800f9e8:	601a      	str	r2, [r3, #0]
 800f9ea:	e001      	b.n	800f9f0 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f9f0:	697b      	ldr	r3, [r7, #20]
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	3718      	adds	r7, #24
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd80      	pop	{r7, pc}
 800f9fa:	bf00      	nop
 800f9fc:	20001b40 	.word	0x20001b40
 800fa00:	20001b20 	.word	0x20001b20
 800fa04:	20001648 	.word	0x20001648
 800fa08:	20001ad8 	.word	0x20001ad8
 800fa0c:	20001644 	.word	0x20001644
 800fa10:	20001b2c 	.word	0x20001b2c

0800fa14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fa14:	b480      	push	{r7}
 800fa16:	b083      	sub	sp, #12
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fa1c:	4b06      	ldr	r3, [pc, #24]	; (800fa38 <vTaskInternalSetTimeOutState+0x24>)
 800fa1e:	681a      	ldr	r2, [r3, #0]
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fa24:	4b05      	ldr	r3, [pc, #20]	; (800fa3c <vTaskInternalSetTimeOutState+0x28>)
 800fa26:	681a      	ldr	r2, [r3, #0]
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	605a      	str	r2, [r3, #4]
}
 800fa2c:	bf00      	nop
 800fa2e:	370c      	adds	r7, #12
 800fa30:	46bd      	mov	sp, r7
 800fa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa36:	4770      	bx	lr
 800fa38:	20001b30 	.word	0x20001b30
 800fa3c:	20001b1c 	.word	0x20001b1c

0800fa40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b088      	sub	sp, #32
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
 800fa48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d10c      	bne.n	800fa6a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800fa50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa54:	b672      	cpsid	i
 800fa56:	f383 8811 	msr	BASEPRI, r3
 800fa5a:	f3bf 8f6f 	isb	sy
 800fa5e:	f3bf 8f4f 	dsb	sy
 800fa62:	b662      	cpsie	i
 800fa64:	613b      	str	r3, [r7, #16]
}
 800fa66:	bf00      	nop
 800fa68:	e7fe      	b.n	800fa68 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800fa6a:	683b      	ldr	r3, [r7, #0]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d10c      	bne.n	800fa8a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800fa70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa74:	b672      	cpsid	i
 800fa76:	f383 8811 	msr	BASEPRI, r3
 800fa7a:	f3bf 8f6f 	isb	sy
 800fa7e:	f3bf 8f4f 	dsb	sy
 800fa82:	b662      	cpsie	i
 800fa84:	60fb      	str	r3, [r7, #12]
}
 800fa86:	bf00      	nop
 800fa88:	e7fe      	b.n	800fa88 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800fa8a:	f000 ff77 	bl	801097c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fa8e:	4b1d      	ldr	r3, [pc, #116]	; (800fb04 <xTaskCheckForTimeOut+0xc4>)
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	685b      	ldr	r3, [r3, #4]
 800fa98:	69ba      	ldr	r2, [r7, #24]
 800fa9a:	1ad3      	subs	r3, r2, r3
 800fa9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fa9e:	683b      	ldr	r3, [r7, #0]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faa6:	d102      	bne.n	800faae <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800faa8:	2300      	movs	r3, #0
 800faaa:	61fb      	str	r3, [r7, #28]
 800faac:	e023      	b.n	800faf6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	681a      	ldr	r2, [r3, #0]
 800fab2:	4b15      	ldr	r3, [pc, #84]	; (800fb08 <xTaskCheckForTimeOut+0xc8>)
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	429a      	cmp	r2, r3
 800fab8:	d007      	beq.n	800faca <xTaskCheckForTimeOut+0x8a>
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	685b      	ldr	r3, [r3, #4]
 800fabe:	69ba      	ldr	r2, [r7, #24]
 800fac0:	429a      	cmp	r2, r3
 800fac2:	d302      	bcc.n	800faca <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fac4:	2301      	movs	r3, #1
 800fac6:	61fb      	str	r3, [r7, #28]
 800fac8:	e015      	b.n	800faf6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	697a      	ldr	r2, [r7, #20]
 800fad0:	429a      	cmp	r2, r3
 800fad2:	d20b      	bcs.n	800faec <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fad4:	683b      	ldr	r3, [r7, #0]
 800fad6:	681a      	ldr	r2, [r3, #0]
 800fad8:	697b      	ldr	r3, [r7, #20]
 800fada:	1ad2      	subs	r2, r2, r3
 800fadc:	683b      	ldr	r3, [r7, #0]
 800fade:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	f7ff ff97 	bl	800fa14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fae6:	2300      	movs	r3, #0
 800fae8:	61fb      	str	r3, [r7, #28]
 800faea:	e004      	b.n	800faf6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800faec:	683b      	ldr	r3, [r7, #0]
 800faee:	2200      	movs	r2, #0
 800faf0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800faf2:	2301      	movs	r3, #1
 800faf4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800faf6:	f000 ff75 	bl	80109e4 <vPortExitCritical>

	return xReturn;
 800fafa:	69fb      	ldr	r3, [r7, #28]
}
 800fafc:	4618      	mov	r0, r3
 800fafe:	3720      	adds	r7, #32
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd80      	pop	{r7, pc}
 800fb04:	20001b1c 	.word	0x20001b1c
 800fb08:	20001b30 	.word	0x20001b30

0800fb0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fb0c:	b480      	push	{r7}
 800fb0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fb10:	4b03      	ldr	r3, [pc, #12]	; (800fb20 <vTaskMissedYield+0x14>)
 800fb12:	2201      	movs	r2, #1
 800fb14:	601a      	str	r2, [r3, #0]
}
 800fb16:	bf00      	nop
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1e:	4770      	bx	lr
 800fb20:	20001b2c 	.word	0x20001b2c

0800fb24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b082      	sub	sp, #8
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fb2c:	f000 f852 	bl	800fbd4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fb30:	4b06      	ldr	r3, [pc, #24]	; (800fb4c <prvIdleTask+0x28>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	2b01      	cmp	r3, #1
 800fb36:	d9f9      	bls.n	800fb2c <prvIdleTask+0x8>
			{
				taskYIELD();
 800fb38:	4b05      	ldr	r3, [pc, #20]	; (800fb50 <prvIdleTask+0x2c>)
 800fb3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb3e:	601a      	str	r2, [r3, #0]
 800fb40:	f3bf 8f4f 	dsb	sy
 800fb44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fb48:	e7f0      	b.n	800fb2c <prvIdleTask+0x8>
 800fb4a:	bf00      	nop
 800fb4c:	20001648 	.word	0x20001648
 800fb50:	e000ed04 	.word	0xe000ed04

0800fb54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b082      	sub	sp, #8
 800fb58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	607b      	str	r3, [r7, #4]
 800fb5e:	e00c      	b.n	800fb7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fb60:	687a      	ldr	r2, [r7, #4]
 800fb62:	4613      	mov	r3, r2
 800fb64:	009b      	lsls	r3, r3, #2
 800fb66:	4413      	add	r3, r2
 800fb68:	009b      	lsls	r3, r3, #2
 800fb6a:	4a12      	ldr	r2, [pc, #72]	; (800fbb4 <prvInitialiseTaskLists+0x60>)
 800fb6c:	4413      	add	r3, r2
 800fb6e:	4618      	mov	r0, r3
 800fb70:	f7fe f942 	bl	800ddf8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	3301      	adds	r3, #1
 800fb78:	607b      	str	r3, [r7, #4]
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	2b37      	cmp	r3, #55	; 0x37
 800fb7e:	d9ef      	bls.n	800fb60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fb80:	480d      	ldr	r0, [pc, #52]	; (800fbb8 <prvInitialiseTaskLists+0x64>)
 800fb82:	f7fe f939 	bl	800ddf8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fb86:	480d      	ldr	r0, [pc, #52]	; (800fbbc <prvInitialiseTaskLists+0x68>)
 800fb88:	f7fe f936 	bl	800ddf8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fb8c:	480c      	ldr	r0, [pc, #48]	; (800fbc0 <prvInitialiseTaskLists+0x6c>)
 800fb8e:	f7fe f933 	bl	800ddf8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fb92:	480c      	ldr	r0, [pc, #48]	; (800fbc4 <prvInitialiseTaskLists+0x70>)
 800fb94:	f7fe f930 	bl	800ddf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fb98:	480b      	ldr	r0, [pc, #44]	; (800fbc8 <prvInitialiseTaskLists+0x74>)
 800fb9a:	f7fe f92d 	bl	800ddf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fb9e:	4b0b      	ldr	r3, [pc, #44]	; (800fbcc <prvInitialiseTaskLists+0x78>)
 800fba0:	4a05      	ldr	r2, [pc, #20]	; (800fbb8 <prvInitialiseTaskLists+0x64>)
 800fba2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fba4:	4b0a      	ldr	r3, [pc, #40]	; (800fbd0 <prvInitialiseTaskLists+0x7c>)
 800fba6:	4a05      	ldr	r2, [pc, #20]	; (800fbbc <prvInitialiseTaskLists+0x68>)
 800fba8:	601a      	str	r2, [r3, #0]
}
 800fbaa:	bf00      	nop
 800fbac:	3708      	adds	r7, #8
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	bd80      	pop	{r7, pc}
 800fbb2:	bf00      	nop
 800fbb4:	20001648 	.word	0x20001648
 800fbb8:	20001aa8 	.word	0x20001aa8
 800fbbc:	20001abc 	.word	0x20001abc
 800fbc0:	20001ad8 	.word	0x20001ad8
 800fbc4:	20001aec 	.word	0x20001aec
 800fbc8:	20001b04 	.word	0x20001b04
 800fbcc:	20001ad0 	.word	0x20001ad0
 800fbd0:	20001ad4 	.word	0x20001ad4

0800fbd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b082      	sub	sp, #8
 800fbd8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fbda:	e019      	b.n	800fc10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fbdc:	f000 fece 	bl	801097c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fbe0:	4b10      	ldr	r3, [pc, #64]	; (800fc24 <prvCheckTasksWaitingTermination+0x50>)
 800fbe2:	68db      	ldr	r3, [r3, #12]
 800fbe4:	68db      	ldr	r3, [r3, #12]
 800fbe6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	3304      	adds	r3, #4
 800fbec:	4618      	mov	r0, r3
 800fbee:	f7fe f98d 	bl	800df0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fbf2:	4b0d      	ldr	r3, [pc, #52]	; (800fc28 <prvCheckTasksWaitingTermination+0x54>)
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	3b01      	subs	r3, #1
 800fbf8:	4a0b      	ldr	r2, [pc, #44]	; (800fc28 <prvCheckTasksWaitingTermination+0x54>)
 800fbfa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fbfc:	4b0b      	ldr	r3, [pc, #44]	; (800fc2c <prvCheckTasksWaitingTermination+0x58>)
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	3b01      	subs	r3, #1
 800fc02:	4a0a      	ldr	r2, [pc, #40]	; (800fc2c <prvCheckTasksWaitingTermination+0x58>)
 800fc04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fc06:	f000 feed 	bl	80109e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fc0a:	6878      	ldr	r0, [r7, #4]
 800fc0c:	f000 f810 	bl	800fc30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fc10:	4b06      	ldr	r3, [pc, #24]	; (800fc2c <prvCheckTasksWaitingTermination+0x58>)
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d1e1      	bne.n	800fbdc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fc18:	bf00      	nop
 800fc1a:	bf00      	nop
 800fc1c:	3708      	adds	r7, #8
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}
 800fc22:	bf00      	nop
 800fc24:	20001aec 	.word	0x20001aec
 800fc28:	20001b18 	.word	0x20001b18
 800fc2c:	20001b00 	.word	0x20001b00

0800fc30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b084      	sub	sp, #16
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	3354      	adds	r3, #84	; 0x54
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	f002 f891 	bl	8011d64 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d108      	bne.n	800fc5e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc50:	4618      	mov	r0, r3
 800fc52:	f001 f889 	bl	8010d68 <vPortFree>
				vPortFree( pxTCB );
 800fc56:	6878      	ldr	r0, [r7, #4]
 800fc58:	f001 f886 	bl	8010d68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fc5c:	e01a      	b.n	800fc94 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800fc64:	2b01      	cmp	r3, #1
 800fc66:	d103      	bne.n	800fc70 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f001 f87d 	bl	8010d68 <vPortFree>
	}
 800fc6e:	e011      	b.n	800fc94 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800fc76:	2b02      	cmp	r3, #2
 800fc78:	d00c      	beq.n	800fc94 <prvDeleteTCB+0x64>
	__asm volatile
 800fc7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc7e:	b672      	cpsid	i
 800fc80:	f383 8811 	msr	BASEPRI, r3
 800fc84:	f3bf 8f6f 	isb	sy
 800fc88:	f3bf 8f4f 	dsb	sy
 800fc8c:	b662      	cpsie	i
 800fc8e:	60fb      	str	r3, [r7, #12]
}
 800fc90:	bf00      	nop
 800fc92:	e7fe      	b.n	800fc92 <prvDeleteTCB+0x62>
	}
 800fc94:	bf00      	nop
 800fc96:	3710      	adds	r7, #16
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}

0800fc9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fc9c:	b480      	push	{r7}
 800fc9e:	b083      	sub	sp, #12
 800fca0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fca2:	4b0c      	ldr	r3, [pc, #48]	; (800fcd4 <prvResetNextTaskUnblockTime+0x38>)
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d104      	bne.n	800fcb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fcac:	4b0a      	ldr	r3, [pc, #40]	; (800fcd8 <prvResetNextTaskUnblockTime+0x3c>)
 800fcae:	f04f 32ff 	mov.w	r2, #4294967295
 800fcb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fcb4:	e008      	b.n	800fcc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fcb6:	4b07      	ldr	r3, [pc, #28]	; (800fcd4 <prvResetNextTaskUnblockTime+0x38>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	68db      	ldr	r3, [r3, #12]
 800fcbc:	68db      	ldr	r3, [r3, #12]
 800fcbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	685b      	ldr	r3, [r3, #4]
 800fcc4:	4a04      	ldr	r2, [pc, #16]	; (800fcd8 <prvResetNextTaskUnblockTime+0x3c>)
 800fcc6:	6013      	str	r3, [r2, #0]
}
 800fcc8:	bf00      	nop
 800fcca:	370c      	adds	r7, #12
 800fccc:	46bd      	mov	sp, r7
 800fcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd2:	4770      	bx	lr
 800fcd4:	20001ad0 	.word	0x20001ad0
 800fcd8:	20001b38 	.word	0x20001b38

0800fcdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fcdc:	b480      	push	{r7}
 800fcde:	b083      	sub	sp, #12
 800fce0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fce2:	4b0b      	ldr	r3, [pc, #44]	; (800fd10 <xTaskGetSchedulerState+0x34>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d102      	bne.n	800fcf0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fcea:	2301      	movs	r3, #1
 800fcec:	607b      	str	r3, [r7, #4]
 800fcee:	e008      	b.n	800fd02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fcf0:	4b08      	ldr	r3, [pc, #32]	; (800fd14 <xTaskGetSchedulerState+0x38>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d102      	bne.n	800fcfe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fcf8:	2302      	movs	r3, #2
 800fcfa:	607b      	str	r3, [r7, #4]
 800fcfc:	e001      	b.n	800fd02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fcfe:	2300      	movs	r3, #0
 800fd00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fd02:	687b      	ldr	r3, [r7, #4]
	}
 800fd04:	4618      	mov	r0, r3
 800fd06:	370c      	adds	r7, #12
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0e:	4770      	bx	lr
 800fd10:	20001b24 	.word	0x20001b24
 800fd14:	20001b40 	.word	0x20001b40

0800fd18 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b084      	sub	sp, #16
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fd24:	2300      	movs	r3, #0
 800fd26:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d051      	beq.n	800fdd2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fd2e:	68bb      	ldr	r3, [r7, #8]
 800fd30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd32:	4b2a      	ldr	r3, [pc, #168]	; (800fddc <xTaskPriorityInherit+0xc4>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd38:	429a      	cmp	r2, r3
 800fd3a:	d241      	bcs.n	800fdc0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fd3c:	68bb      	ldr	r3, [r7, #8]
 800fd3e:	699b      	ldr	r3, [r3, #24]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	db06      	blt.n	800fd52 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd44:	4b25      	ldr	r3, [pc, #148]	; (800fddc <xTaskPriorityInherit+0xc4>)
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd4a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fd4e:	68bb      	ldr	r3, [r7, #8]
 800fd50:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fd52:	68bb      	ldr	r3, [r7, #8]
 800fd54:	6959      	ldr	r1, [r3, #20]
 800fd56:	68bb      	ldr	r3, [r7, #8]
 800fd58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd5a:	4613      	mov	r3, r2
 800fd5c:	009b      	lsls	r3, r3, #2
 800fd5e:	4413      	add	r3, r2
 800fd60:	009b      	lsls	r3, r3, #2
 800fd62:	4a1f      	ldr	r2, [pc, #124]	; (800fde0 <xTaskPriorityInherit+0xc8>)
 800fd64:	4413      	add	r3, r2
 800fd66:	4299      	cmp	r1, r3
 800fd68:	d122      	bne.n	800fdb0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	3304      	adds	r3, #4
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f7fe f8cc 	bl	800df0c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fd74:	4b19      	ldr	r3, [pc, #100]	; (800fddc <xTaskPriorityInherit+0xc4>)
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd7a:	68bb      	ldr	r3, [r7, #8]
 800fd7c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fd7e:	68bb      	ldr	r3, [r7, #8]
 800fd80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd82:	4b18      	ldr	r3, [pc, #96]	; (800fde4 <xTaskPriorityInherit+0xcc>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	429a      	cmp	r2, r3
 800fd88:	d903      	bls.n	800fd92 <xTaskPriorityInherit+0x7a>
 800fd8a:	68bb      	ldr	r3, [r7, #8]
 800fd8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd8e:	4a15      	ldr	r2, [pc, #84]	; (800fde4 <xTaskPriorityInherit+0xcc>)
 800fd90:	6013      	str	r3, [r2, #0]
 800fd92:	68bb      	ldr	r3, [r7, #8]
 800fd94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd96:	4613      	mov	r3, r2
 800fd98:	009b      	lsls	r3, r3, #2
 800fd9a:	4413      	add	r3, r2
 800fd9c:	009b      	lsls	r3, r3, #2
 800fd9e:	4a10      	ldr	r2, [pc, #64]	; (800fde0 <xTaskPriorityInherit+0xc8>)
 800fda0:	441a      	add	r2, r3
 800fda2:	68bb      	ldr	r3, [r7, #8]
 800fda4:	3304      	adds	r3, #4
 800fda6:	4619      	mov	r1, r3
 800fda8:	4610      	mov	r0, r2
 800fdaa:	f7fe f852 	bl	800de52 <vListInsertEnd>
 800fdae:	e004      	b.n	800fdba <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fdb0:	4b0a      	ldr	r3, [pc, #40]	; (800fddc <xTaskPriorityInherit+0xc4>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdb6:	68bb      	ldr	r3, [r7, #8]
 800fdb8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800fdba:	2301      	movs	r3, #1
 800fdbc:	60fb      	str	r3, [r7, #12]
 800fdbe:	e008      	b.n	800fdd2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fdc0:	68bb      	ldr	r3, [r7, #8]
 800fdc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fdc4:	4b05      	ldr	r3, [pc, #20]	; (800fddc <xTaskPriorityInherit+0xc4>)
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdca:	429a      	cmp	r2, r3
 800fdcc:	d201      	bcs.n	800fdd2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800fdce:	2301      	movs	r3, #1
 800fdd0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fdd2:	68fb      	ldr	r3, [r7, #12]
	}
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	3710      	adds	r7, #16
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd80      	pop	{r7, pc}
 800fddc:	20001644 	.word	0x20001644
 800fde0:	20001648 	.word	0x20001648
 800fde4:	20001b20 	.word	0x20001b20

0800fde8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b086      	sub	sp, #24
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d05a      	beq.n	800feb4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fdfe:	4b30      	ldr	r3, [pc, #192]	; (800fec0 <xTaskPriorityDisinherit+0xd8>)
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	693a      	ldr	r2, [r7, #16]
 800fe04:	429a      	cmp	r2, r3
 800fe06:	d00c      	beq.n	800fe22 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800fe08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe0c:	b672      	cpsid	i
 800fe0e:	f383 8811 	msr	BASEPRI, r3
 800fe12:	f3bf 8f6f 	isb	sy
 800fe16:	f3bf 8f4f 	dsb	sy
 800fe1a:	b662      	cpsie	i
 800fe1c:	60fb      	str	r3, [r7, #12]
}
 800fe1e:	bf00      	nop
 800fe20:	e7fe      	b.n	800fe20 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800fe22:	693b      	ldr	r3, [r7, #16]
 800fe24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d10c      	bne.n	800fe44 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800fe2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe2e:	b672      	cpsid	i
 800fe30:	f383 8811 	msr	BASEPRI, r3
 800fe34:	f3bf 8f6f 	isb	sy
 800fe38:	f3bf 8f4f 	dsb	sy
 800fe3c:	b662      	cpsie	i
 800fe3e:	60bb      	str	r3, [r7, #8]
}
 800fe40:	bf00      	nop
 800fe42:	e7fe      	b.n	800fe42 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800fe44:	693b      	ldr	r3, [r7, #16]
 800fe46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe48:	1e5a      	subs	r2, r3, #1
 800fe4a:	693b      	ldr	r3, [r7, #16]
 800fe4c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fe4e:	693b      	ldr	r3, [r7, #16]
 800fe50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe52:	693b      	ldr	r3, [r7, #16]
 800fe54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe56:	429a      	cmp	r2, r3
 800fe58:	d02c      	beq.n	800feb4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fe5a:	693b      	ldr	r3, [r7, #16]
 800fe5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d128      	bne.n	800feb4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fe62:	693b      	ldr	r3, [r7, #16]
 800fe64:	3304      	adds	r3, #4
 800fe66:	4618      	mov	r0, r3
 800fe68:	f7fe f850 	bl	800df0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fe6c:	693b      	ldr	r3, [r7, #16]
 800fe6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fe70:	693b      	ldr	r3, [r7, #16]
 800fe72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe74:	693b      	ldr	r3, [r7, #16]
 800fe76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe78:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fe7c:	693b      	ldr	r3, [r7, #16]
 800fe7e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fe80:	693b      	ldr	r3, [r7, #16]
 800fe82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe84:	4b0f      	ldr	r3, [pc, #60]	; (800fec4 <xTaskPriorityDisinherit+0xdc>)
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	429a      	cmp	r2, r3
 800fe8a:	d903      	bls.n	800fe94 <xTaskPriorityDisinherit+0xac>
 800fe8c:	693b      	ldr	r3, [r7, #16]
 800fe8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe90:	4a0c      	ldr	r2, [pc, #48]	; (800fec4 <xTaskPriorityDisinherit+0xdc>)
 800fe92:	6013      	str	r3, [r2, #0]
 800fe94:	693b      	ldr	r3, [r7, #16]
 800fe96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe98:	4613      	mov	r3, r2
 800fe9a:	009b      	lsls	r3, r3, #2
 800fe9c:	4413      	add	r3, r2
 800fe9e:	009b      	lsls	r3, r3, #2
 800fea0:	4a09      	ldr	r2, [pc, #36]	; (800fec8 <xTaskPriorityDisinherit+0xe0>)
 800fea2:	441a      	add	r2, r3
 800fea4:	693b      	ldr	r3, [r7, #16]
 800fea6:	3304      	adds	r3, #4
 800fea8:	4619      	mov	r1, r3
 800feaa:	4610      	mov	r0, r2
 800feac:	f7fd ffd1 	bl	800de52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800feb0:	2301      	movs	r3, #1
 800feb2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800feb4:	697b      	ldr	r3, [r7, #20]
	}
 800feb6:	4618      	mov	r0, r3
 800feb8:	3718      	adds	r7, #24
 800feba:	46bd      	mov	sp, r7
 800febc:	bd80      	pop	{r7, pc}
 800febe:	bf00      	nop
 800fec0:	20001644 	.word	0x20001644
 800fec4:	20001b20 	.word	0x20001b20
 800fec8:	20001648 	.word	0x20001648

0800fecc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b088      	sub	sp, #32
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
 800fed4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800feda:	2301      	movs	r3, #1
 800fedc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d06e      	beq.n	800ffc2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800fee4:	69bb      	ldr	r3, [r7, #24]
 800fee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d10c      	bne.n	800ff06 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800feec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fef0:	b672      	cpsid	i
 800fef2:	f383 8811 	msr	BASEPRI, r3
 800fef6:	f3bf 8f6f 	isb	sy
 800fefa:	f3bf 8f4f 	dsb	sy
 800fefe:	b662      	cpsie	i
 800ff00:	60fb      	str	r3, [r7, #12]
}
 800ff02:	bf00      	nop
 800ff04:	e7fe      	b.n	800ff04 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ff06:	69bb      	ldr	r3, [r7, #24]
 800ff08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ff0a:	683a      	ldr	r2, [r7, #0]
 800ff0c:	429a      	cmp	r2, r3
 800ff0e:	d902      	bls.n	800ff16 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	61fb      	str	r3, [r7, #28]
 800ff14:	e002      	b.n	800ff1c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ff16:	69bb      	ldr	r3, [r7, #24]
 800ff18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ff1a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ff1c:	69bb      	ldr	r3, [r7, #24]
 800ff1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff20:	69fa      	ldr	r2, [r7, #28]
 800ff22:	429a      	cmp	r2, r3
 800ff24:	d04d      	beq.n	800ffc2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ff26:	69bb      	ldr	r3, [r7, #24]
 800ff28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff2a:	697a      	ldr	r2, [r7, #20]
 800ff2c:	429a      	cmp	r2, r3
 800ff2e:	d148      	bne.n	800ffc2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ff30:	4b26      	ldr	r3, [pc, #152]	; (800ffcc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	69ba      	ldr	r2, [r7, #24]
 800ff36:	429a      	cmp	r2, r3
 800ff38:	d10c      	bne.n	800ff54 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800ff3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff3e:	b672      	cpsid	i
 800ff40:	f383 8811 	msr	BASEPRI, r3
 800ff44:	f3bf 8f6f 	isb	sy
 800ff48:	f3bf 8f4f 	dsb	sy
 800ff4c:	b662      	cpsie	i
 800ff4e:	60bb      	str	r3, [r7, #8]
}
 800ff50:	bf00      	nop
 800ff52:	e7fe      	b.n	800ff52 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ff54:	69bb      	ldr	r3, [r7, #24]
 800ff56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff58:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ff5a:	69bb      	ldr	r3, [r7, #24]
 800ff5c:	69fa      	ldr	r2, [r7, #28]
 800ff5e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ff60:	69bb      	ldr	r3, [r7, #24]
 800ff62:	699b      	ldr	r3, [r3, #24]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	db04      	blt.n	800ff72 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff68:	69fb      	ldr	r3, [r7, #28]
 800ff6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ff6e:	69bb      	ldr	r3, [r7, #24]
 800ff70:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ff72:	69bb      	ldr	r3, [r7, #24]
 800ff74:	6959      	ldr	r1, [r3, #20]
 800ff76:	693a      	ldr	r2, [r7, #16]
 800ff78:	4613      	mov	r3, r2
 800ff7a:	009b      	lsls	r3, r3, #2
 800ff7c:	4413      	add	r3, r2
 800ff7e:	009b      	lsls	r3, r3, #2
 800ff80:	4a13      	ldr	r2, [pc, #76]	; (800ffd0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ff82:	4413      	add	r3, r2
 800ff84:	4299      	cmp	r1, r3
 800ff86:	d11c      	bne.n	800ffc2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff88:	69bb      	ldr	r3, [r7, #24]
 800ff8a:	3304      	adds	r3, #4
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	f7fd ffbd 	bl	800df0c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ff92:	69bb      	ldr	r3, [r7, #24]
 800ff94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff96:	4b0f      	ldr	r3, [pc, #60]	; (800ffd4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d903      	bls.n	800ffa6 <vTaskPriorityDisinheritAfterTimeout+0xda>
 800ff9e:	69bb      	ldr	r3, [r7, #24]
 800ffa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffa2:	4a0c      	ldr	r2, [pc, #48]	; (800ffd4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800ffa4:	6013      	str	r3, [r2, #0]
 800ffa6:	69bb      	ldr	r3, [r7, #24]
 800ffa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffaa:	4613      	mov	r3, r2
 800ffac:	009b      	lsls	r3, r3, #2
 800ffae:	4413      	add	r3, r2
 800ffb0:	009b      	lsls	r3, r3, #2
 800ffb2:	4a07      	ldr	r2, [pc, #28]	; (800ffd0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ffb4:	441a      	add	r2, r3
 800ffb6:	69bb      	ldr	r3, [r7, #24]
 800ffb8:	3304      	adds	r3, #4
 800ffba:	4619      	mov	r1, r3
 800ffbc:	4610      	mov	r0, r2
 800ffbe:	f7fd ff48 	bl	800de52 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ffc2:	bf00      	nop
 800ffc4:	3720      	adds	r7, #32
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}
 800ffca:	bf00      	nop
 800ffcc:	20001644 	.word	0x20001644
 800ffd0:	20001648 	.word	0x20001648
 800ffd4:	20001b20 	.word	0x20001b20

0800ffd8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ffd8:	b480      	push	{r7}
 800ffda:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ffdc:	4b07      	ldr	r3, [pc, #28]	; (800fffc <pvTaskIncrementMutexHeldCount+0x24>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d004      	beq.n	800ffee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ffe4:	4b05      	ldr	r3, [pc, #20]	; (800fffc <pvTaskIncrementMutexHeldCount+0x24>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ffea:	3201      	adds	r2, #1
 800ffec:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ffee:	4b03      	ldr	r3, [pc, #12]	; (800fffc <pvTaskIncrementMutexHeldCount+0x24>)
 800fff0:	681b      	ldr	r3, [r3, #0]
	}
 800fff2:	4618      	mov	r0, r3
 800fff4:	46bd      	mov	sp, r7
 800fff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffa:	4770      	bx	lr
 800fffc:	20001644 	.word	0x20001644

08010000 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b084      	sub	sp, #16
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
 8010008:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801000a:	4b21      	ldr	r3, [pc, #132]	; (8010090 <prvAddCurrentTaskToDelayedList+0x90>)
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010010:	4b20      	ldr	r3, [pc, #128]	; (8010094 <prvAddCurrentTaskToDelayedList+0x94>)
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	3304      	adds	r3, #4
 8010016:	4618      	mov	r0, r3
 8010018:	f7fd ff78 	bl	800df0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010022:	d10a      	bne.n	801003a <prvAddCurrentTaskToDelayedList+0x3a>
 8010024:	683b      	ldr	r3, [r7, #0]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d007      	beq.n	801003a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801002a:	4b1a      	ldr	r3, [pc, #104]	; (8010094 <prvAddCurrentTaskToDelayedList+0x94>)
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	3304      	adds	r3, #4
 8010030:	4619      	mov	r1, r3
 8010032:	4819      	ldr	r0, [pc, #100]	; (8010098 <prvAddCurrentTaskToDelayedList+0x98>)
 8010034:	f7fd ff0d 	bl	800de52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010038:	e026      	b.n	8010088 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801003a:	68fa      	ldr	r2, [r7, #12]
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	4413      	add	r3, r2
 8010040:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010042:	4b14      	ldr	r3, [pc, #80]	; (8010094 <prvAddCurrentTaskToDelayedList+0x94>)
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	68ba      	ldr	r2, [r7, #8]
 8010048:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801004a:	68ba      	ldr	r2, [r7, #8]
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	429a      	cmp	r2, r3
 8010050:	d209      	bcs.n	8010066 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010052:	4b12      	ldr	r3, [pc, #72]	; (801009c <prvAddCurrentTaskToDelayedList+0x9c>)
 8010054:	681a      	ldr	r2, [r3, #0]
 8010056:	4b0f      	ldr	r3, [pc, #60]	; (8010094 <prvAddCurrentTaskToDelayedList+0x94>)
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	3304      	adds	r3, #4
 801005c:	4619      	mov	r1, r3
 801005e:	4610      	mov	r0, r2
 8010060:	f7fd ff1b 	bl	800de9a <vListInsert>
}
 8010064:	e010      	b.n	8010088 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010066:	4b0e      	ldr	r3, [pc, #56]	; (80100a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010068:	681a      	ldr	r2, [r3, #0]
 801006a:	4b0a      	ldr	r3, [pc, #40]	; (8010094 <prvAddCurrentTaskToDelayedList+0x94>)
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	3304      	adds	r3, #4
 8010070:	4619      	mov	r1, r3
 8010072:	4610      	mov	r0, r2
 8010074:	f7fd ff11 	bl	800de9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010078:	4b0a      	ldr	r3, [pc, #40]	; (80100a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	68ba      	ldr	r2, [r7, #8]
 801007e:	429a      	cmp	r2, r3
 8010080:	d202      	bcs.n	8010088 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010082:	4a08      	ldr	r2, [pc, #32]	; (80100a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010084:	68bb      	ldr	r3, [r7, #8]
 8010086:	6013      	str	r3, [r2, #0]
}
 8010088:	bf00      	nop
 801008a:	3710      	adds	r7, #16
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}
 8010090:	20001b1c 	.word	0x20001b1c
 8010094:	20001644 	.word	0x20001644
 8010098:	20001b04 	.word	0x20001b04
 801009c:	20001ad4 	.word	0x20001ad4
 80100a0:	20001ad0 	.word	0x20001ad0
 80100a4:	20001b38 	.word	0x20001b38

080100a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b08a      	sub	sp, #40	; 0x28
 80100ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80100ae:	2300      	movs	r3, #0
 80100b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80100b2:	f000 fb15 	bl	80106e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80100b6:	4b1d      	ldr	r3, [pc, #116]	; (801012c <xTimerCreateTimerTask+0x84>)
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d021      	beq.n	8010102 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80100be:	2300      	movs	r3, #0
 80100c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80100c2:	2300      	movs	r3, #0
 80100c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80100c6:	1d3a      	adds	r2, r7, #4
 80100c8:	f107 0108 	add.w	r1, r7, #8
 80100cc:	f107 030c 	add.w	r3, r7, #12
 80100d0:	4618      	mov	r0, r3
 80100d2:	f7fd fe77 	bl	800ddc4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80100d6:	6879      	ldr	r1, [r7, #4]
 80100d8:	68bb      	ldr	r3, [r7, #8]
 80100da:	68fa      	ldr	r2, [r7, #12]
 80100dc:	9202      	str	r2, [sp, #8]
 80100de:	9301      	str	r3, [sp, #4]
 80100e0:	2302      	movs	r3, #2
 80100e2:	9300      	str	r3, [sp, #0]
 80100e4:	2300      	movs	r3, #0
 80100e6:	460a      	mov	r2, r1
 80100e8:	4911      	ldr	r1, [pc, #68]	; (8010130 <xTimerCreateTimerTask+0x88>)
 80100ea:	4812      	ldr	r0, [pc, #72]	; (8010134 <xTimerCreateTimerTask+0x8c>)
 80100ec:	f7fe ff8e 	bl	800f00c <xTaskCreateStatic>
 80100f0:	4603      	mov	r3, r0
 80100f2:	4a11      	ldr	r2, [pc, #68]	; (8010138 <xTimerCreateTimerTask+0x90>)
 80100f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80100f6:	4b10      	ldr	r3, [pc, #64]	; (8010138 <xTimerCreateTimerTask+0x90>)
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d001      	beq.n	8010102 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80100fe:	2301      	movs	r3, #1
 8010100:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010102:	697b      	ldr	r3, [r7, #20]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d10c      	bne.n	8010122 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8010108:	f04f 0350 	mov.w	r3, #80	; 0x50
 801010c:	b672      	cpsid	i
 801010e:	f383 8811 	msr	BASEPRI, r3
 8010112:	f3bf 8f6f 	isb	sy
 8010116:	f3bf 8f4f 	dsb	sy
 801011a:	b662      	cpsie	i
 801011c:	613b      	str	r3, [r7, #16]
}
 801011e:	bf00      	nop
 8010120:	e7fe      	b.n	8010120 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8010122:	697b      	ldr	r3, [r7, #20]
}
 8010124:	4618      	mov	r0, r3
 8010126:	3718      	adds	r7, #24
 8010128:	46bd      	mov	sp, r7
 801012a:	bd80      	pop	{r7, pc}
 801012c:	20001b74 	.word	0x20001b74
 8010130:	08011ec8 	.word	0x08011ec8
 8010134:	08010279 	.word	0x08010279
 8010138:	20001b78 	.word	0x20001b78

0801013c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b08a      	sub	sp, #40	; 0x28
 8010140:	af00      	add	r7, sp, #0
 8010142:	60f8      	str	r0, [r7, #12]
 8010144:	60b9      	str	r1, [r7, #8]
 8010146:	607a      	str	r2, [r7, #4]
 8010148:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801014a:	2300      	movs	r3, #0
 801014c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d10c      	bne.n	801016e <xTimerGenericCommand+0x32>
	__asm volatile
 8010154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010158:	b672      	cpsid	i
 801015a:	f383 8811 	msr	BASEPRI, r3
 801015e:	f3bf 8f6f 	isb	sy
 8010162:	f3bf 8f4f 	dsb	sy
 8010166:	b662      	cpsie	i
 8010168:	623b      	str	r3, [r7, #32]
}
 801016a:	bf00      	nop
 801016c:	e7fe      	b.n	801016c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801016e:	4b1a      	ldr	r3, [pc, #104]	; (80101d8 <xTimerGenericCommand+0x9c>)
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d02a      	beq.n	80101cc <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010176:	68bb      	ldr	r3, [r7, #8]
 8010178:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010182:	68bb      	ldr	r3, [r7, #8]
 8010184:	2b05      	cmp	r3, #5
 8010186:	dc18      	bgt.n	80101ba <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010188:	f7ff fda8 	bl	800fcdc <xTaskGetSchedulerState>
 801018c:	4603      	mov	r3, r0
 801018e:	2b02      	cmp	r3, #2
 8010190:	d109      	bne.n	80101a6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010192:	4b11      	ldr	r3, [pc, #68]	; (80101d8 <xTimerGenericCommand+0x9c>)
 8010194:	6818      	ldr	r0, [r3, #0]
 8010196:	f107 0110 	add.w	r1, r7, #16
 801019a:	2300      	movs	r3, #0
 801019c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801019e:	f7fe f8a3 	bl	800e2e8 <xQueueGenericSend>
 80101a2:	6278      	str	r0, [r7, #36]	; 0x24
 80101a4:	e012      	b.n	80101cc <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80101a6:	4b0c      	ldr	r3, [pc, #48]	; (80101d8 <xTimerGenericCommand+0x9c>)
 80101a8:	6818      	ldr	r0, [r3, #0]
 80101aa:	f107 0110 	add.w	r1, r7, #16
 80101ae:	2300      	movs	r3, #0
 80101b0:	2200      	movs	r2, #0
 80101b2:	f7fe f899 	bl	800e2e8 <xQueueGenericSend>
 80101b6:	6278      	str	r0, [r7, #36]	; 0x24
 80101b8:	e008      	b.n	80101cc <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80101ba:	4b07      	ldr	r3, [pc, #28]	; (80101d8 <xTimerGenericCommand+0x9c>)
 80101bc:	6818      	ldr	r0, [r3, #0]
 80101be:	f107 0110 	add.w	r1, r7, #16
 80101c2:	2300      	movs	r3, #0
 80101c4:	683a      	ldr	r2, [r7, #0]
 80101c6:	f7fe f995 	bl	800e4f4 <xQueueGenericSendFromISR>
 80101ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80101cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80101ce:	4618      	mov	r0, r3
 80101d0:	3728      	adds	r7, #40	; 0x28
 80101d2:	46bd      	mov	sp, r7
 80101d4:	bd80      	pop	{r7, pc}
 80101d6:	bf00      	nop
 80101d8:	20001b74 	.word	0x20001b74

080101dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	b088      	sub	sp, #32
 80101e0:	af02      	add	r7, sp, #8
 80101e2:	6078      	str	r0, [r7, #4]
 80101e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101e6:	4b23      	ldr	r3, [pc, #140]	; (8010274 <prvProcessExpiredTimer+0x98>)
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	68db      	ldr	r3, [r3, #12]
 80101ec:	68db      	ldr	r3, [r3, #12]
 80101ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80101f0:	697b      	ldr	r3, [r7, #20]
 80101f2:	3304      	adds	r3, #4
 80101f4:	4618      	mov	r0, r3
 80101f6:	f7fd fe89 	bl	800df0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80101fa:	697b      	ldr	r3, [r7, #20]
 80101fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010200:	f003 0304 	and.w	r3, r3, #4
 8010204:	2b00      	cmp	r3, #0
 8010206:	d024      	beq.n	8010252 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010208:	697b      	ldr	r3, [r7, #20]
 801020a:	699a      	ldr	r2, [r3, #24]
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	18d1      	adds	r1, r2, r3
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	683a      	ldr	r2, [r7, #0]
 8010214:	6978      	ldr	r0, [r7, #20]
 8010216:	f000 f8d3 	bl	80103c0 <prvInsertTimerInActiveList>
 801021a:	4603      	mov	r3, r0
 801021c:	2b00      	cmp	r3, #0
 801021e:	d021      	beq.n	8010264 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010220:	2300      	movs	r3, #0
 8010222:	9300      	str	r3, [sp, #0]
 8010224:	2300      	movs	r3, #0
 8010226:	687a      	ldr	r2, [r7, #4]
 8010228:	2100      	movs	r1, #0
 801022a:	6978      	ldr	r0, [r7, #20]
 801022c:	f7ff ff86 	bl	801013c <xTimerGenericCommand>
 8010230:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010232:	693b      	ldr	r3, [r7, #16]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d115      	bne.n	8010264 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8010238:	f04f 0350 	mov.w	r3, #80	; 0x50
 801023c:	b672      	cpsid	i
 801023e:	f383 8811 	msr	BASEPRI, r3
 8010242:	f3bf 8f6f 	isb	sy
 8010246:	f3bf 8f4f 	dsb	sy
 801024a:	b662      	cpsie	i
 801024c:	60fb      	str	r3, [r7, #12]
}
 801024e:	bf00      	nop
 8010250:	e7fe      	b.n	8010250 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010252:	697b      	ldr	r3, [r7, #20]
 8010254:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010258:	f023 0301 	bic.w	r3, r3, #1
 801025c:	b2da      	uxtb	r2, r3
 801025e:	697b      	ldr	r3, [r7, #20]
 8010260:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010264:	697b      	ldr	r3, [r7, #20]
 8010266:	6a1b      	ldr	r3, [r3, #32]
 8010268:	6978      	ldr	r0, [r7, #20]
 801026a:	4798      	blx	r3
}
 801026c:	bf00      	nop
 801026e:	3718      	adds	r7, #24
 8010270:	46bd      	mov	sp, r7
 8010272:	bd80      	pop	{r7, pc}
 8010274:	20001b6c 	.word	0x20001b6c

08010278 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b084      	sub	sp, #16
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010280:	f107 0308 	add.w	r3, r7, #8
 8010284:	4618      	mov	r0, r3
 8010286:	f000 f857 	bl	8010338 <prvGetNextExpireTime>
 801028a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801028c:	68bb      	ldr	r3, [r7, #8]
 801028e:	4619      	mov	r1, r3
 8010290:	68f8      	ldr	r0, [r7, #12]
 8010292:	f000 f803 	bl	801029c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010296:	f000 f8d5 	bl	8010444 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801029a:	e7f1      	b.n	8010280 <prvTimerTask+0x8>

0801029c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b084      	sub	sp, #16
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
 80102a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80102a6:	f7ff f91b 	bl	800f4e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80102aa:	f107 0308 	add.w	r3, r7, #8
 80102ae:	4618      	mov	r0, r3
 80102b0:	f000 f866 	bl	8010380 <prvSampleTimeNow>
 80102b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80102b6:	68bb      	ldr	r3, [r7, #8]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d130      	bne.n	801031e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80102bc:	683b      	ldr	r3, [r7, #0]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d10a      	bne.n	80102d8 <prvProcessTimerOrBlockTask+0x3c>
 80102c2:	687a      	ldr	r2, [r7, #4]
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	429a      	cmp	r2, r3
 80102c8:	d806      	bhi.n	80102d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80102ca:	f7ff f917 	bl	800f4fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80102ce:	68f9      	ldr	r1, [r7, #12]
 80102d0:	6878      	ldr	r0, [r7, #4]
 80102d2:	f7ff ff83 	bl	80101dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80102d6:	e024      	b.n	8010322 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d008      	beq.n	80102f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80102de:	4b13      	ldr	r3, [pc, #76]	; (801032c <prvProcessTimerOrBlockTask+0x90>)
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d101      	bne.n	80102ec <prvProcessTimerOrBlockTask+0x50>
 80102e8:	2301      	movs	r3, #1
 80102ea:	e000      	b.n	80102ee <prvProcessTimerOrBlockTask+0x52>
 80102ec:	2300      	movs	r3, #0
 80102ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80102f0:	4b0f      	ldr	r3, [pc, #60]	; (8010330 <prvProcessTimerOrBlockTask+0x94>)
 80102f2:	6818      	ldr	r0, [r3, #0]
 80102f4:	687a      	ldr	r2, [r7, #4]
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	1ad3      	subs	r3, r2, r3
 80102fa:	683a      	ldr	r2, [r7, #0]
 80102fc:	4619      	mov	r1, r3
 80102fe:	f7fe fe51 	bl	800efa4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010302:	f7ff f8fb 	bl	800f4fc <xTaskResumeAll>
 8010306:	4603      	mov	r3, r0
 8010308:	2b00      	cmp	r3, #0
 801030a:	d10a      	bne.n	8010322 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801030c:	4b09      	ldr	r3, [pc, #36]	; (8010334 <prvProcessTimerOrBlockTask+0x98>)
 801030e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010312:	601a      	str	r2, [r3, #0]
 8010314:	f3bf 8f4f 	dsb	sy
 8010318:	f3bf 8f6f 	isb	sy
}
 801031c:	e001      	b.n	8010322 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801031e:	f7ff f8ed 	bl	800f4fc <xTaskResumeAll>
}
 8010322:	bf00      	nop
 8010324:	3710      	adds	r7, #16
 8010326:	46bd      	mov	sp, r7
 8010328:	bd80      	pop	{r7, pc}
 801032a:	bf00      	nop
 801032c:	20001b70 	.word	0x20001b70
 8010330:	20001b74 	.word	0x20001b74
 8010334:	e000ed04 	.word	0xe000ed04

08010338 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010338:	b480      	push	{r7}
 801033a:	b085      	sub	sp, #20
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010340:	4b0e      	ldr	r3, [pc, #56]	; (801037c <prvGetNextExpireTime+0x44>)
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d101      	bne.n	801034e <prvGetNextExpireTime+0x16>
 801034a:	2201      	movs	r2, #1
 801034c:	e000      	b.n	8010350 <prvGetNextExpireTime+0x18>
 801034e:	2200      	movs	r2, #0
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d105      	bne.n	8010368 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801035c:	4b07      	ldr	r3, [pc, #28]	; (801037c <prvGetNextExpireTime+0x44>)
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	68db      	ldr	r3, [r3, #12]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	60fb      	str	r3, [r7, #12]
 8010366:	e001      	b.n	801036c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010368:	2300      	movs	r3, #0
 801036a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801036c:	68fb      	ldr	r3, [r7, #12]
}
 801036e:	4618      	mov	r0, r3
 8010370:	3714      	adds	r7, #20
 8010372:	46bd      	mov	sp, r7
 8010374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010378:	4770      	bx	lr
 801037a:	bf00      	nop
 801037c:	20001b6c 	.word	0x20001b6c

08010380 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b084      	sub	sp, #16
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010388:	f7ff f958 	bl	800f63c <xTaskGetTickCount>
 801038c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801038e:	4b0b      	ldr	r3, [pc, #44]	; (80103bc <prvSampleTimeNow+0x3c>)
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	68fa      	ldr	r2, [r7, #12]
 8010394:	429a      	cmp	r2, r3
 8010396:	d205      	bcs.n	80103a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010398:	f000 f93c 	bl	8010614 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	2201      	movs	r2, #1
 80103a0:	601a      	str	r2, [r3, #0]
 80103a2:	e002      	b.n	80103aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	2200      	movs	r2, #0
 80103a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80103aa:	4a04      	ldr	r2, [pc, #16]	; (80103bc <prvSampleTimeNow+0x3c>)
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80103b0:	68fb      	ldr	r3, [r7, #12]
}
 80103b2:	4618      	mov	r0, r3
 80103b4:	3710      	adds	r7, #16
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd80      	pop	{r7, pc}
 80103ba:	bf00      	nop
 80103bc:	20001b7c 	.word	0x20001b7c

080103c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b086      	sub	sp, #24
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	60f8      	str	r0, [r7, #12]
 80103c8:	60b9      	str	r1, [r7, #8]
 80103ca:	607a      	str	r2, [r7, #4]
 80103cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80103ce:	2300      	movs	r3, #0
 80103d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	68ba      	ldr	r2, [r7, #8]
 80103d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	68fa      	ldr	r2, [r7, #12]
 80103dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80103de:	68ba      	ldr	r2, [r7, #8]
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	429a      	cmp	r2, r3
 80103e4:	d812      	bhi.n	801040c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80103e6:	687a      	ldr	r2, [r7, #4]
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	1ad2      	subs	r2, r2, r3
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	699b      	ldr	r3, [r3, #24]
 80103f0:	429a      	cmp	r2, r3
 80103f2:	d302      	bcc.n	80103fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80103f4:	2301      	movs	r3, #1
 80103f6:	617b      	str	r3, [r7, #20]
 80103f8:	e01b      	b.n	8010432 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80103fa:	4b10      	ldr	r3, [pc, #64]	; (801043c <prvInsertTimerInActiveList+0x7c>)
 80103fc:	681a      	ldr	r2, [r3, #0]
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	3304      	adds	r3, #4
 8010402:	4619      	mov	r1, r3
 8010404:	4610      	mov	r0, r2
 8010406:	f7fd fd48 	bl	800de9a <vListInsert>
 801040a:	e012      	b.n	8010432 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801040c:	687a      	ldr	r2, [r7, #4]
 801040e:	683b      	ldr	r3, [r7, #0]
 8010410:	429a      	cmp	r2, r3
 8010412:	d206      	bcs.n	8010422 <prvInsertTimerInActiveList+0x62>
 8010414:	68ba      	ldr	r2, [r7, #8]
 8010416:	683b      	ldr	r3, [r7, #0]
 8010418:	429a      	cmp	r2, r3
 801041a:	d302      	bcc.n	8010422 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801041c:	2301      	movs	r3, #1
 801041e:	617b      	str	r3, [r7, #20]
 8010420:	e007      	b.n	8010432 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010422:	4b07      	ldr	r3, [pc, #28]	; (8010440 <prvInsertTimerInActiveList+0x80>)
 8010424:	681a      	ldr	r2, [r3, #0]
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	3304      	adds	r3, #4
 801042a:	4619      	mov	r1, r3
 801042c:	4610      	mov	r0, r2
 801042e:	f7fd fd34 	bl	800de9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010432:	697b      	ldr	r3, [r7, #20]
}
 8010434:	4618      	mov	r0, r3
 8010436:	3718      	adds	r7, #24
 8010438:	46bd      	mov	sp, r7
 801043a:	bd80      	pop	{r7, pc}
 801043c:	20001b70 	.word	0x20001b70
 8010440:	20001b6c 	.word	0x20001b6c

08010444 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b08e      	sub	sp, #56	; 0x38
 8010448:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801044a:	e0d0      	b.n	80105ee <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	2b00      	cmp	r3, #0
 8010450:	da1a      	bge.n	8010488 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010452:	1d3b      	adds	r3, r7, #4
 8010454:	3304      	adds	r3, #4
 8010456:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801045a:	2b00      	cmp	r3, #0
 801045c:	d10c      	bne.n	8010478 <prvProcessReceivedCommands+0x34>
	__asm volatile
 801045e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010462:	b672      	cpsid	i
 8010464:	f383 8811 	msr	BASEPRI, r3
 8010468:	f3bf 8f6f 	isb	sy
 801046c:	f3bf 8f4f 	dsb	sy
 8010470:	b662      	cpsie	i
 8010472:	61fb      	str	r3, [r7, #28]
}
 8010474:	bf00      	nop
 8010476:	e7fe      	b.n	8010476 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801047e:	6850      	ldr	r0, [r2, #4]
 8010480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010482:	6892      	ldr	r2, [r2, #8]
 8010484:	4611      	mov	r1, r2
 8010486:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	2b00      	cmp	r3, #0
 801048c:	f2c0 80ae 	blt.w	80105ec <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010496:	695b      	ldr	r3, [r3, #20]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d004      	beq.n	80104a6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801049c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801049e:	3304      	adds	r3, #4
 80104a0:	4618      	mov	r0, r3
 80104a2:	f7fd fd33 	bl	800df0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80104a6:	463b      	mov	r3, r7
 80104a8:	4618      	mov	r0, r3
 80104aa:	f7ff ff69 	bl	8010380 <prvSampleTimeNow>
 80104ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	2b09      	cmp	r3, #9
 80104b4:	f200 809b 	bhi.w	80105ee <prvProcessReceivedCommands+0x1aa>
 80104b8:	a201      	add	r2, pc, #4	; (adr r2, 80104c0 <prvProcessReceivedCommands+0x7c>)
 80104ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104be:	bf00      	nop
 80104c0:	080104e9 	.word	0x080104e9
 80104c4:	080104e9 	.word	0x080104e9
 80104c8:	080104e9 	.word	0x080104e9
 80104cc:	08010561 	.word	0x08010561
 80104d0:	08010575 	.word	0x08010575
 80104d4:	080105c3 	.word	0x080105c3
 80104d8:	080104e9 	.word	0x080104e9
 80104dc:	080104e9 	.word	0x080104e9
 80104e0:	08010561 	.word	0x08010561
 80104e4:	08010575 	.word	0x08010575
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80104e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80104ee:	f043 0301 	orr.w	r3, r3, #1
 80104f2:	b2da      	uxtb	r2, r3
 80104f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80104fa:	68ba      	ldr	r2, [r7, #8]
 80104fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104fe:	699b      	ldr	r3, [r3, #24]
 8010500:	18d1      	adds	r1, r2, r3
 8010502:	68bb      	ldr	r3, [r7, #8]
 8010504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010506:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010508:	f7ff ff5a 	bl	80103c0 <prvInsertTimerInActiveList>
 801050c:	4603      	mov	r3, r0
 801050e:	2b00      	cmp	r3, #0
 8010510:	d06d      	beq.n	80105ee <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010514:	6a1b      	ldr	r3, [r3, #32]
 8010516:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010518:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801051a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801051c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010520:	f003 0304 	and.w	r3, r3, #4
 8010524:	2b00      	cmp	r3, #0
 8010526:	d062      	beq.n	80105ee <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010528:	68ba      	ldr	r2, [r7, #8]
 801052a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801052c:	699b      	ldr	r3, [r3, #24]
 801052e:	441a      	add	r2, r3
 8010530:	2300      	movs	r3, #0
 8010532:	9300      	str	r3, [sp, #0]
 8010534:	2300      	movs	r3, #0
 8010536:	2100      	movs	r1, #0
 8010538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801053a:	f7ff fdff 	bl	801013c <xTimerGenericCommand>
 801053e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010540:	6a3b      	ldr	r3, [r7, #32]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d153      	bne.n	80105ee <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8010546:	f04f 0350 	mov.w	r3, #80	; 0x50
 801054a:	b672      	cpsid	i
 801054c:	f383 8811 	msr	BASEPRI, r3
 8010550:	f3bf 8f6f 	isb	sy
 8010554:	f3bf 8f4f 	dsb	sy
 8010558:	b662      	cpsie	i
 801055a:	61bb      	str	r3, [r7, #24]
}
 801055c:	bf00      	nop
 801055e:	e7fe      	b.n	801055e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010562:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010566:	f023 0301 	bic.w	r3, r3, #1
 801056a:	b2da      	uxtb	r2, r3
 801056c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801056e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010572:	e03c      	b.n	80105ee <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010576:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801057a:	f043 0301 	orr.w	r3, r3, #1
 801057e:	b2da      	uxtb	r2, r3
 8010580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010582:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010586:	68ba      	ldr	r2, [r7, #8]
 8010588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801058a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801058c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801058e:	699b      	ldr	r3, [r3, #24]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d10c      	bne.n	80105ae <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8010594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010598:	b672      	cpsid	i
 801059a:	f383 8811 	msr	BASEPRI, r3
 801059e:	f3bf 8f6f 	isb	sy
 80105a2:	f3bf 8f4f 	dsb	sy
 80105a6:	b662      	cpsie	i
 80105a8:	617b      	str	r3, [r7, #20]
}
 80105aa:	bf00      	nop
 80105ac:	e7fe      	b.n	80105ac <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80105ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105b0:	699a      	ldr	r2, [r3, #24]
 80105b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105b4:	18d1      	adds	r1, r2, r3
 80105b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80105bc:	f7ff ff00 	bl	80103c0 <prvInsertTimerInActiveList>
					break;
 80105c0:	e015      	b.n	80105ee <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80105c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80105c8:	f003 0302 	and.w	r3, r3, #2
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d103      	bne.n	80105d8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80105d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80105d2:	f000 fbc9 	bl	8010d68 <vPortFree>
 80105d6:	e00a      	b.n	80105ee <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80105d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80105de:	f023 0301 	bic.w	r3, r3, #1
 80105e2:	b2da      	uxtb	r2, r3
 80105e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80105ea:	e000      	b.n	80105ee <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80105ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80105ee:	4b08      	ldr	r3, [pc, #32]	; (8010610 <prvProcessReceivedCommands+0x1cc>)
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	1d39      	adds	r1, r7, #4
 80105f4:	2200      	movs	r2, #0
 80105f6:	4618      	mov	r0, r3
 80105f8:	f7fe f8b2 	bl	800e760 <xQueueReceive>
 80105fc:	4603      	mov	r3, r0
 80105fe:	2b00      	cmp	r3, #0
 8010600:	f47f af24 	bne.w	801044c <prvProcessReceivedCommands+0x8>
	}
}
 8010604:	bf00      	nop
 8010606:	bf00      	nop
 8010608:	3730      	adds	r7, #48	; 0x30
 801060a:	46bd      	mov	sp, r7
 801060c:	bd80      	pop	{r7, pc}
 801060e:	bf00      	nop
 8010610:	20001b74 	.word	0x20001b74

08010614 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b088      	sub	sp, #32
 8010618:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801061a:	e04a      	b.n	80106b2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801061c:	4b2e      	ldr	r3, [pc, #184]	; (80106d8 <prvSwitchTimerLists+0xc4>)
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	68db      	ldr	r3, [r3, #12]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010626:	4b2c      	ldr	r3, [pc, #176]	; (80106d8 <prvSwitchTimerLists+0xc4>)
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	68db      	ldr	r3, [r3, #12]
 801062c:	68db      	ldr	r3, [r3, #12]
 801062e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	3304      	adds	r3, #4
 8010634:	4618      	mov	r0, r3
 8010636:	f7fd fc69 	bl	800df0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	6a1b      	ldr	r3, [r3, #32]
 801063e:	68f8      	ldr	r0, [r7, #12]
 8010640:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010648:	f003 0304 	and.w	r3, r3, #4
 801064c:	2b00      	cmp	r3, #0
 801064e:	d030      	beq.n	80106b2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	699b      	ldr	r3, [r3, #24]
 8010654:	693a      	ldr	r2, [r7, #16]
 8010656:	4413      	add	r3, r2
 8010658:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801065a:	68ba      	ldr	r2, [r7, #8]
 801065c:	693b      	ldr	r3, [r7, #16]
 801065e:	429a      	cmp	r2, r3
 8010660:	d90e      	bls.n	8010680 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	68ba      	ldr	r2, [r7, #8]
 8010666:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	68fa      	ldr	r2, [r7, #12]
 801066c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801066e:	4b1a      	ldr	r3, [pc, #104]	; (80106d8 <prvSwitchTimerLists+0xc4>)
 8010670:	681a      	ldr	r2, [r3, #0]
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	3304      	adds	r3, #4
 8010676:	4619      	mov	r1, r3
 8010678:	4610      	mov	r0, r2
 801067a:	f7fd fc0e 	bl	800de9a <vListInsert>
 801067e:	e018      	b.n	80106b2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010680:	2300      	movs	r3, #0
 8010682:	9300      	str	r3, [sp, #0]
 8010684:	2300      	movs	r3, #0
 8010686:	693a      	ldr	r2, [r7, #16]
 8010688:	2100      	movs	r1, #0
 801068a:	68f8      	ldr	r0, [r7, #12]
 801068c:	f7ff fd56 	bl	801013c <xTimerGenericCommand>
 8010690:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d10c      	bne.n	80106b2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8010698:	f04f 0350 	mov.w	r3, #80	; 0x50
 801069c:	b672      	cpsid	i
 801069e:	f383 8811 	msr	BASEPRI, r3
 80106a2:	f3bf 8f6f 	isb	sy
 80106a6:	f3bf 8f4f 	dsb	sy
 80106aa:	b662      	cpsie	i
 80106ac:	603b      	str	r3, [r7, #0]
}
 80106ae:	bf00      	nop
 80106b0:	e7fe      	b.n	80106b0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80106b2:	4b09      	ldr	r3, [pc, #36]	; (80106d8 <prvSwitchTimerLists+0xc4>)
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d1af      	bne.n	801061c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80106bc:	4b06      	ldr	r3, [pc, #24]	; (80106d8 <prvSwitchTimerLists+0xc4>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80106c2:	4b06      	ldr	r3, [pc, #24]	; (80106dc <prvSwitchTimerLists+0xc8>)
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	4a04      	ldr	r2, [pc, #16]	; (80106d8 <prvSwitchTimerLists+0xc4>)
 80106c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80106ca:	4a04      	ldr	r2, [pc, #16]	; (80106dc <prvSwitchTimerLists+0xc8>)
 80106cc:	697b      	ldr	r3, [r7, #20]
 80106ce:	6013      	str	r3, [r2, #0]
}
 80106d0:	bf00      	nop
 80106d2:	3718      	adds	r7, #24
 80106d4:	46bd      	mov	sp, r7
 80106d6:	bd80      	pop	{r7, pc}
 80106d8:	20001b6c 	.word	0x20001b6c
 80106dc:	20001b70 	.word	0x20001b70

080106e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b082      	sub	sp, #8
 80106e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80106e6:	f000 f949 	bl	801097c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80106ea:	4b15      	ldr	r3, [pc, #84]	; (8010740 <prvCheckForValidListAndQueue+0x60>)
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d120      	bne.n	8010734 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80106f2:	4814      	ldr	r0, [pc, #80]	; (8010744 <prvCheckForValidListAndQueue+0x64>)
 80106f4:	f7fd fb80 	bl	800ddf8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80106f8:	4813      	ldr	r0, [pc, #76]	; (8010748 <prvCheckForValidListAndQueue+0x68>)
 80106fa:	f7fd fb7d 	bl	800ddf8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80106fe:	4b13      	ldr	r3, [pc, #76]	; (801074c <prvCheckForValidListAndQueue+0x6c>)
 8010700:	4a10      	ldr	r2, [pc, #64]	; (8010744 <prvCheckForValidListAndQueue+0x64>)
 8010702:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010704:	4b12      	ldr	r3, [pc, #72]	; (8010750 <prvCheckForValidListAndQueue+0x70>)
 8010706:	4a10      	ldr	r2, [pc, #64]	; (8010748 <prvCheckForValidListAndQueue+0x68>)
 8010708:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801070a:	2300      	movs	r3, #0
 801070c:	9300      	str	r3, [sp, #0]
 801070e:	4b11      	ldr	r3, [pc, #68]	; (8010754 <prvCheckForValidListAndQueue+0x74>)
 8010710:	4a11      	ldr	r2, [pc, #68]	; (8010758 <prvCheckForValidListAndQueue+0x78>)
 8010712:	2110      	movs	r1, #16
 8010714:	200a      	movs	r0, #10
 8010716:	f7fd fc8d 	bl	800e034 <xQueueGenericCreateStatic>
 801071a:	4603      	mov	r3, r0
 801071c:	4a08      	ldr	r2, [pc, #32]	; (8010740 <prvCheckForValidListAndQueue+0x60>)
 801071e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010720:	4b07      	ldr	r3, [pc, #28]	; (8010740 <prvCheckForValidListAndQueue+0x60>)
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d005      	beq.n	8010734 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010728:	4b05      	ldr	r3, [pc, #20]	; (8010740 <prvCheckForValidListAndQueue+0x60>)
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	490b      	ldr	r1, [pc, #44]	; (801075c <prvCheckForValidListAndQueue+0x7c>)
 801072e:	4618      	mov	r0, r3
 8010730:	f7fe fbe4 	bl	800eefc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010734:	f000 f956 	bl	80109e4 <vPortExitCritical>
}
 8010738:	bf00      	nop
 801073a:	46bd      	mov	sp, r7
 801073c:	bd80      	pop	{r7, pc}
 801073e:	bf00      	nop
 8010740:	20001b74 	.word	0x20001b74
 8010744:	20001b44 	.word	0x20001b44
 8010748:	20001b58 	.word	0x20001b58
 801074c:	20001b6c 	.word	0x20001b6c
 8010750:	20001b70 	.word	0x20001b70
 8010754:	20001c20 	.word	0x20001c20
 8010758:	20001b80 	.word	0x20001b80
 801075c:	08011ed0 	.word	0x08011ed0

08010760 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010760:	b480      	push	{r7}
 8010762:	b085      	sub	sp, #20
 8010764:	af00      	add	r7, sp, #0
 8010766:	60f8      	str	r0, [r7, #12]
 8010768:	60b9      	str	r1, [r7, #8]
 801076a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	3b04      	subs	r3, #4
 8010770:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010778:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	3b04      	subs	r3, #4
 801077e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010780:	68bb      	ldr	r3, [r7, #8]
 8010782:	f023 0201 	bic.w	r2, r3, #1
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	3b04      	subs	r3, #4
 801078e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010790:	4a0c      	ldr	r2, [pc, #48]	; (80107c4 <pxPortInitialiseStack+0x64>)
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	3b14      	subs	r3, #20
 801079a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801079c:	687a      	ldr	r2, [r7, #4]
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	3b04      	subs	r3, #4
 80107a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	f06f 0202 	mvn.w	r2, #2
 80107ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	3b20      	subs	r3, #32
 80107b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80107b6:	68fb      	ldr	r3, [r7, #12]
}
 80107b8:	4618      	mov	r0, r3
 80107ba:	3714      	adds	r7, #20
 80107bc:	46bd      	mov	sp, r7
 80107be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c2:	4770      	bx	lr
 80107c4:	080107c9 	.word	0x080107c9

080107c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80107c8:	b480      	push	{r7}
 80107ca:	b085      	sub	sp, #20
 80107cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80107ce:	2300      	movs	r3, #0
 80107d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80107d2:	4b14      	ldr	r3, [pc, #80]	; (8010824 <prvTaskExitError+0x5c>)
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107da:	d00c      	beq.n	80107f6 <prvTaskExitError+0x2e>
	__asm volatile
 80107dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107e0:	b672      	cpsid	i
 80107e2:	f383 8811 	msr	BASEPRI, r3
 80107e6:	f3bf 8f6f 	isb	sy
 80107ea:	f3bf 8f4f 	dsb	sy
 80107ee:	b662      	cpsie	i
 80107f0:	60fb      	str	r3, [r7, #12]
}
 80107f2:	bf00      	nop
 80107f4:	e7fe      	b.n	80107f4 <prvTaskExitError+0x2c>
	__asm volatile
 80107f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107fa:	b672      	cpsid	i
 80107fc:	f383 8811 	msr	BASEPRI, r3
 8010800:	f3bf 8f6f 	isb	sy
 8010804:	f3bf 8f4f 	dsb	sy
 8010808:	b662      	cpsie	i
 801080a:	60bb      	str	r3, [r7, #8]
}
 801080c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801080e:	bf00      	nop
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d0fc      	beq.n	8010810 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010816:	bf00      	nop
 8010818:	bf00      	nop
 801081a:	3714      	adds	r7, #20
 801081c:	46bd      	mov	sp, r7
 801081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010822:	4770      	bx	lr
 8010824:	20000118 	.word	0x20000118
	...

08010830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010830:	4b07      	ldr	r3, [pc, #28]	; (8010850 <pxCurrentTCBConst2>)
 8010832:	6819      	ldr	r1, [r3, #0]
 8010834:	6808      	ldr	r0, [r1, #0]
 8010836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801083a:	f380 8809 	msr	PSP, r0
 801083e:	f3bf 8f6f 	isb	sy
 8010842:	f04f 0000 	mov.w	r0, #0
 8010846:	f380 8811 	msr	BASEPRI, r0
 801084a:	4770      	bx	lr
 801084c:	f3af 8000 	nop.w

08010850 <pxCurrentTCBConst2>:
 8010850:	20001644 	.word	0x20001644
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010854:	bf00      	nop
 8010856:	bf00      	nop

08010858 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010858:	4808      	ldr	r0, [pc, #32]	; (801087c <prvPortStartFirstTask+0x24>)
 801085a:	6800      	ldr	r0, [r0, #0]
 801085c:	6800      	ldr	r0, [r0, #0]
 801085e:	f380 8808 	msr	MSP, r0
 8010862:	f04f 0000 	mov.w	r0, #0
 8010866:	f380 8814 	msr	CONTROL, r0
 801086a:	b662      	cpsie	i
 801086c:	b661      	cpsie	f
 801086e:	f3bf 8f4f 	dsb	sy
 8010872:	f3bf 8f6f 	isb	sy
 8010876:	df00      	svc	0
 8010878:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801087a:	bf00      	nop
 801087c:	e000ed08 	.word	0xe000ed08

08010880 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010880:	b580      	push	{r7, lr}
 8010882:	b084      	sub	sp, #16
 8010884:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010886:	4b37      	ldr	r3, [pc, #220]	; (8010964 <xPortStartScheduler+0xe4>)
 8010888:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	781b      	ldrb	r3, [r3, #0]
 801088e:	b2db      	uxtb	r3, r3
 8010890:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	22ff      	movs	r2, #255	; 0xff
 8010896:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	781b      	ldrb	r3, [r3, #0]
 801089c:	b2db      	uxtb	r3, r3
 801089e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80108a0:	78fb      	ldrb	r3, [r7, #3]
 80108a2:	b2db      	uxtb	r3, r3
 80108a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80108a8:	b2da      	uxtb	r2, r3
 80108aa:	4b2f      	ldr	r3, [pc, #188]	; (8010968 <xPortStartScheduler+0xe8>)
 80108ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80108ae:	4b2f      	ldr	r3, [pc, #188]	; (801096c <xPortStartScheduler+0xec>)
 80108b0:	2207      	movs	r2, #7
 80108b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80108b4:	e009      	b.n	80108ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80108b6:	4b2d      	ldr	r3, [pc, #180]	; (801096c <xPortStartScheduler+0xec>)
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	3b01      	subs	r3, #1
 80108bc:	4a2b      	ldr	r2, [pc, #172]	; (801096c <xPortStartScheduler+0xec>)
 80108be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80108c0:	78fb      	ldrb	r3, [r7, #3]
 80108c2:	b2db      	uxtb	r3, r3
 80108c4:	005b      	lsls	r3, r3, #1
 80108c6:	b2db      	uxtb	r3, r3
 80108c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80108ca:	78fb      	ldrb	r3, [r7, #3]
 80108cc:	b2db      	uxtb	r3, r3
 80108ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80108d2:	2b80      	cmp	r3, #128	; 0x80
 80108d4:	d0ef      	beq.n	80108b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80108d6:	4b25      	ldr	r3, [pc, #148]	; (801096c <xPortStartScheduler+0xec>)
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	f1c3 0307 	rsb	r3, r3, #7
 80108de:	2b04      	cmp	r3, #4
 80108e0:	d00c      	beq.n	80108fc <xPortStartScheduler+0x7c>
	__asm volatile
 80108e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108e6:	b672      	cpsid	i
 80108e8:	f383 8811 	msr	BASEPRI, r3
 80108ec:	f3bf 8f6f 	isb	sy
 80108f0:	f3bf 8f4f 	dsb	sy
 80108f4:	b662      	cpsie	i
 80108f6:	60bb      	str	r3, [r7, #8]
}
 80108f8:	bf00      	nop
 80108fa:	e7fe      	b.n	80108fa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80108fc:	4b1b      	ldr	r3, [pc, #108]	; (801096c <xPortStartScheduler+0xec>)
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	021b      	lsls	r3, r3, #8
 8010902:	4a1a      	ldr	r2, [pc, #104]	; (801096c <xPortStartScheduler+0xec>)
 8010904:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010906:	4b19      	ldr	r3, [pc, #100]	; (801096c <xPortStartScheduler+0xec>)
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801090e:	4a17      	ldr	r2, [pc, #92]	; (801096c <xPortStartScheduler+0xec>)
 8010910:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	b2da      	uxtb	r2, r3
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801091a:	4b15      	ldr	r3, [pc, #84]	; (8010970 <xPortStartScheduler+0xf0>)
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	4a14      	ldr	r2, [pc, #80]	; (8010970 <xPortStartScheduler+0xf0>)
 8010920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010924:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010926:	4b12      	ldr	r3, [pc, #72]	; (8010970 <xPortStartScheduler+0xf0>)
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	4a11      	ldr	r2, [pc, #68]	; (8010970 <xPortStartScheduler+0xf0>)
 801092c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010930:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010932:	f000 f8dd 	bl	8010af0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010936:	4b0f      	ldr	r3, [pc, #60]	; (8010974 <xPortStartScheduler+0xf4>)
 8010938:	2200      	movs	r2, #0
 801093a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801093c:	f000 f8fc 	bl	8010b38 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010940:	4b0d      	ldr	r3, [pc, #52]	; (8010978 <xPortStartScheduler+0xf8>)
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	4a0c      	ldr	r2, [pc, #48]	; (8010978 <xPortStartScheduler+0xf8>)
 8010946:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801094a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801094c:	f7ff ff84 	bl	8010858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010950:	f7fe ff40 	bl	800f7d4 <vTaskSwitchContext>
	prvTaskExitError();
 8010954:	f7ff ff38 	bl	80107c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010958:	2300      	movs	r3, #0
}
 801095a:	4618      	mov	r0, r3
 801095c:	3710      	adds	r7, #16
 801095e:	46bd      	mov	sp, r7
 8010960:	bd80      	pop	{r7, pc}
 8010962:	bf00      	nop
 8010964:	e000e400 	.word	0xe000e400
 8010968:	20001c70 	.word	0x20001c70
 801096c:	20001c74 	.word	0x20001c74
 8010970:	e000ed20 	.word	0xe000ed20
 8010974:	20000118 	.word	0x20000118
 8010978:	e000ef34 	.word	0xe000ef34

0801097c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801097c:	b480      	push	{r7}
 801097e:	b083      	sub	sp, #12
 8010980:	af00      	add	r7, sp, #0
	__asm volatile
 8010982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010986:	b672      	cpsid	i
 8010988:	f383 8811 	msr	BASEPRI, r3
 801098c:	f3bf 8f6f 	isb	sy
 8010990:	f3bf 8f4f 	dsb	sy
 8010994:	b662      	cpsie	i
 8010996:	607b      	str	r3, [r7, #4]
}
 8010998:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801099a:	4b10      	ldr	r3, [pc, #64]	; (80109dc <vPortEnterCritical+0x60>)
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	3301      	adds	r3, #1
 80109a0:	4a0e      	ldr	r2, [pc, #56]	; (80109dc <vPortEnterCritical+0x60>)
 80109a2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80109a4:	4b0d      	ldr	r3, [pc, #52]	; (80109dc <vPortEnterCritical+0x60>)
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	2b01      	cmp	r3, #1
 80109aa:	d111      	bne.n	80109d0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80109ac:	4b0c      	ldr	r3, [pc, #48]	; (80109e0 <vPortEnterCritical+0x64>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	b2db      	uxtb	r3, r3
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d00c      	beq.n	80109d0 <vPortEnterCritical+0x54>
	__asm volatile
 80109b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109ba:	b672      	cpsid	i
 80109bc:	f383 8811 	msr	BASEPRI, r3
 80109c0:	f3bf 8f6f 	isb	sy
 80109c4:	f3bf 8f4f 	dsb	sy
 80109c8:	b662      	cpsie	i
 80109ca:	603b      	str	r3, [r7, #0]
}
 80109cc:	bf00      	nop
 80109ce:	e7fe      	b.n	80109ce <vPortEnterCritical+0x52>
	}
}
 80109d0:	bf00      	nop
 80109d2:	370c      	adds	r7, #12
 80109d4:	46bd      	mov	sp, r7
 80109d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109da:	4770      	bx	lr
 80109dc:	20000118 	.word	0x20000118
 80109e0:	e000ed04 	.word	0xe000ed04

080109e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80109e4:	b480      	push	{r7}
 80109e6:	b083      	sub	sp, #12
 80109e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80109ea:	4b13      	ldr	r3, [pc, #76]	; (8010a38 <vPortExitCritical+0x54>)
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d10c      	bne.n	8010a0c <vPortExitCritical+0x28>
	__asm volatile
 80109f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109f6:	b672      	cpsid	i
 80109f8:	f383 8811 	msr	BASEPRI, r3
 80109fc:	f3bf 8f6f 	isb	sy
 8010a00:	f3bf 8f4f 	dsb	sy
 8010a04:	b662      	cpsie	i
 8010a06:	607b      	str	r3, [r7, #4]
}
 8010a08:	bf00      	nop
 8010a0a:	e7fe      	b.n	8010a0a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8010a0c:	4b0a      	ldr	r3, [pc, #40]	; (8010a38 <vPortExitCritical+0x54>)
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	3b01      	subs	r3, #1
 8010a12:	4a09      	ldr	r2, [pc, #36]	; (8010a38 <vPortExitCritical+0x54>)
 8010a14:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010a16:	4b08      	ldr	r3, [pc, #32]	; (8010a38 <vPortExitCritical+0x54>)
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d105      	bne.n	8010a2a <vPortExitCritical+0x46>
 8010a1e:	2300      	movs	r3, #0
 8010a20:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010a22:	683b      	ldr	r3, [r7, #0]
 8010a24:	f383 8811 	msr	BASEPRI, r3
}
 8010a28:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010a2a:	bf00      	nop
 8010a2c:	370c      	adds	r7, #12
 8010a2e:	46bd      	mov	sp, r7
 8010a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a34:	4770      	bx	lr
 8010a36:	bf00      	nop
 8010a38:	20000118 	.word	0x20000118
 8010a3c:	00000000 	.word	0x00000000

08010a40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010a40:	f3ef 8009 	mrs	r0, PSP
 8010a44:	f3bf 8f6f 	isb	sy
 8010a48:	4b15      	ldr	r3, [pc, #84]	; (8010aa0 <pxCurrentTCBConst>)
 8010a4a:	681a      	ldr	r2, [r3, #0]
 8010a4c:	f01e 0f10 	tst.w	lr, #16
 8010a50:	bf08      	it	eq
 8010a52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010a56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a5a:	6010      	str	r0, [r2, #0]
 8010a5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010a60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010a64:	b672      	cpsid	i
 8010a66:	f380 8811 	msr	BASEPRI, r0
 8010a6a:	f3bf 8f4f 	dsb	sy
 8010a6e:	f3bf 8f6f 	isb	sy
 8010a72:	b662      	cpsie	i
 8010a74:	f7fe feae 	bl	800f7d4 <vTaskSwitchContext>
 8010a78:	f04f 0000 	mov.w	r0, #0
 8010a7c:	f380 8811 	msr	BASEPRI, r0
 8010a80:	bc09      	pop	{r0, r3}
 8010a82:	6819      	ldr	r1, [r3, #0]
 8010a84:	6808      	ldr	r0, [r1, #0]
 8010a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a8a:	f01e 0f10 	tst.w	lr, #16
 8010a8e:	bf08      	it	eq
 8010a90:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010a94:	f380 8809 	msr	PSP, r0
 8010a98:	f3bf 8f6f 	isb	sy
 8010a9c:	4770      	bx	lr
 8010a9e:	bf00      	nop

08010aa0 <pxCurrentTCBConst>:
 8010aa0:	20001644 	.word	0x20001644
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010aa4:	bf00      	nop
 8010aa6:	bf00      	nop

08010aa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b082      	sub	sp, #8
 8010aac:	af00      	add	r7, sp, #0
	__asm volatile
 8010aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ab2:	b672      	cpsid	i
 8010ab4:	f383 8811 	msr	BASEPRI, r3
 8010ab8:	f3bf 8f6f 	isb	sy
 8010abc:	f3bf 8f4f 	dsb	sy
 8010ac0:	b662      	cpsie	i
 8010ac2:	607b      	str	r3, [r7, #4]
}
 8010ac4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010ac6:	f7fe fdc9 	bl	800f65c <xTaskIncrementTick>
 8010aca:	4603      	mov	r3, r0
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d003      	beq.n	8010ad8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010ad0:	4b06      	ldr	r3, [pc, #24]	; (8010aec <SysTick_Handler+0x44>)
 8010ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ad6:	601a      	str	r2, [r3, #0]
 8010ad8:	2300      	movs	r3, #0
 8010ada:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010adc:	683b      	ldr	r3, [r7, #0]
 8010ade:	f383 8811 	msr	BASEPRI, r3
}
 8010ae2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010ae4:	bf00      	nop
 8010ae6:	3708      	adds	r7, #8
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	bd80      	pop	{r7, pc}
 8010aec:	e000ed04 	.word	0xe000ed04

08010af0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010af0:	b480      	push	{r7}
 8010af2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010af4:	4b0b      	ldr	r3, [pc, #44]	; (8010b24 <vPortSetupTimerInterrupt+0x34>)
 8010af6:	2200      	movs	r2, #0
 8010af8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010afa:	4b0b      	ldr	r3, [pc, #44]	; (8010b28 <vPortSetupTimerInterrupt+0x38>)
 8010afc:	2200      	movs	r2, #0
 8010afe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010b00:	4b0a      	ldr	r3, [pc, #40]	; (8010b2c <vPortSetupTimerInterrupt+0x3c>)
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	4a0a      	ldr	r2, [pc, #40]	; (8010b30 <vPortSetupTimerInterrupt+0x40>)
 8010b06:	fba2 2303 	umull	r2, r3, r2, r3
 8010b0a:	099b      	lsrs	r3, r3, #6
 8010b0c:	4a09      	ldr	r2, [pc, #36]	; (8010b34 <vPortSetupTimerInterrupt+0x44>)
 8010b0e:	3b01      	subs	r3, #1
 8010b10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010b12:	4b04      	ldr	r3, [pc, #16]	; (8010b24 <vPortSetupTimerInterrupt+0x34>)
 8010b14:	2207      	movs	r2, #7
 8010b16:	601a      	str	r2, [r3, #0]
}
 8010b18:	bf00      	nop
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b20:	4770      	bx	lr
 8010b22:	bf00      	nop
 8010b24:	e000e010 	.word	0xe000e010
 8010b28:	e000e018 	.word	0xe000e018
 8010b2c:	20000000 	.word	0x20000000
 8010b30:	10624dd3 	.word	0x10624dd3
 8010b34:	e000e014 	.word	0xe000e014

08010b38 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010b38:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010b48 <vPortEnableVFP+0x10>
 8010b3c:	6801      	ldr	r1, [r0, #0]
 8010b3e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010b42:	6001      	str	r1, [r0, #0]
 8010b44:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010b46:	bf00      	nop
 8010b48:	e000ed88 	.word	0xe000ed88

08010b4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010b4c:	b480      	push	{r7}
 8010b4e:	b085      	sub	sp, #20
 8010b50:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010b52:	f3ef 8305 	mrs	r3, IPSR
 8010b56:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	2b0f      	cmp	r3, #15
 8010b5c:	d916      	bls.n	8010b8c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010b5e:	4a19      	ldr	r2, [pc, #100]	; (8010bc4 <vPortValidateInterruptPriority+0x78>)
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	4413      	add	r3, r2
 8010b64:	781b      	ldrb	r3, [r3, #0]
 8010b66:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010b68:	4b17      	ldr	r3, [pc, #92]	; (8010bc8 <vPortValidateInterruptPriority+0x7c>)
 8010b6a:	781b      	ldrb	r3, [r3, #0]
 8010b6c:	7afa      	ldrb	r2, [r7, #11]
 8010b6e:	429a      	cmp	r2, r3
 8010b70:	d20c      	bcs.n	8010b8c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8010b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b76:	b672      	cpsid	i
 8010b78:	f383 8811 	msr	BASEPRI, r3
 8010b7c:	f3bf 8f6f 	isb	sy
 8010b80:	f3bf 8f4f 	dsb	sy
 8010b84:	b662      	cpsie	i
 8010b86:	607b      	str	r3, [r7, #4]
}
 8010b88:	bf00      	nop
 8010b8a:	e7fe      	b.n	8010b8a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010b8c:	4b0f      	ldr	r3, [pc, #60]	; (8010bcc <vPortValidateInterruptPriority+0x80>)
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010b94:	4b0e      	ldr	r3, [pc, #56]	; (8010bd0 <vPortValidateInterruptPriority+0x84>)
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	429a      	cmp	r2, r3
 8010b9a:	d90c      	bls.n	8010bb6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8010b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ba0:	b672      	cpsid	i
 8010ba2:	f383 8811 	msr	BASEPRI, r3
 8010ba6:	f3bf 8f6f 	isb	sy
 8010baa:	f3bf 8f4f 	dsb	sy
 8010bae:	b662      	cpsie	i
 8010bb0:	603b      	str	r3, [r7, #0]
}
 8010bb2:	bf00      	nop
 8010bb4:	e7fe      	b.n	8010bb4 <vPortValidateInterruptPriority+0x68>
	}
 8010bb6:	bf00      	nop
 8010bb8:	3714      	adds	r7, #20
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc0:	4770      	bx	lr
 8010bc2:	bf00      	nop
 8010bc4:	e000e3f0 	.word	0xe000e3f0
 8010bc8:	20001c70 	.word	0x20001c70
 8010bcc:	e000ed0c 	.word	0xe000ed0c
 8010bd0:	20001c74 	.word	0x20001c74

08010bd4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b08a      	sub	sp, #40	; 0x28
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010bdc:	2300      	movs	r3, #0
 8010bde:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010be0:	f7fe fc7e 	bl	800f4e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010be4:	4b5b      	ldr	r3, [pc, #364]	; (8010d54 <pvPortMalloc+0x180>)
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d101      	bne.n	8010bf0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010bec:	f000 f91a 	bl	8010e24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010bf0:	4b59      	ldr	r3, [pc, #356]	; (8010d58 <pvPortMalloc+0x184>)
 8010bf2:	681a      	ldr	r2, [r3, #0]
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	4013      	ands	r3, r2
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	f040 8092 	bne.w	8010d22 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d01f      	beq.n	8010c44 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8010c04:	2208      	movs	r2, #8
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	4413      	add	r3, r2
 8010c0a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	f003 0307 	and.w	r3, r3, #7
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d016      	beq.n	8010c44 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	f023 0307 	bic.w	r3, r3, #7
 8010c1c:	3308      	adds	r3, #8
 8010c1e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	f003 0307 	and.w	r3, r3, #7
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d00c      	beq.n	8010c44 <pvPortMalloc+0x70>
	__asm volatile
 8010c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c2e:	b672      	cpsid	i
 8010c30:	f383 8811 	msr	BASEPRI, r3
 8010c34:	f3bf 8f6f 	isb	sy
 8010c38:	f3bf 8f4f 	dsb	sy
 8010c3c:	b662      	cpsie	i
 8010c3e:	617b      	str	r3, [r7, #20]
}
 8010c40:	bf00      	nop
 8010c42:	e7fe      	b.n	8010c42 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d06b      	beq.n	8010d22 <pvPortMalloc+0x14e>
 8010c4a:	4b44      	ldr	r3, [pc, #272]	; (8010d5c <pvPortMalloc+0x188>)
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	687a      	ldr	r2, [r7, #4]
 8010c50:	429a      	cmp	r2, r3
 8010c52:	d866      	bhi.n	8010d22 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010c54:	4b42      	ldr	r3, [pc, #264]	; (8010d60 <pvPortMalloc+0x18c>)
 8010c56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010c58:	4b41      	ldr	r3, [pc, #260]	; (8010d60 <pvPortMalloc+0x18c>)
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010c5e:	e004      	b.n	8010c6a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8010c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c6c:	685b      	ldr	r3, [r3, #4]
 8010c6e:	687a      	ldr	r2, [r7, #4]
 8010c70:	429a      	cmp	r2, r3
 8010c72:	d903      	bls.n	8010c7c <pvPortMalloc+0xa8>
 8010c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d1f1      	bne.n	8010c60 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010c7c:	4b35      	ldr	r3, [pc, #212]	; (8010d54 <pvPortMalloc+0x180>)
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c82:	429a      	cmp	r2, r3
 8010c84:	d04d      	beq.n	8010d22 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010c86:	6a3b      	ldr	r3, [r7, #32]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	2208      	movs	r2, #8
 8010c8c:	4413      	add	r3, r2
 8010c8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c92:	681a      	ldr	r2, [r3, #0]
 8010c94:	6a3b      	ldr	r3, [r7, #32]
 8010c96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c9a:	685a      	ldr	r2, [r3, #4]
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	1ad2      	subs	r2, r2, r3
 8010ca0:	2308      	movs	r3, #8
 8010ca2:	005b      	lsls	r3, r3, #1
 8010ca4:	429a      	cmp	r2, r3
 8010ca6:	d921      	bls.n	8010cec <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	4413      	add	r3, r2
 8010cae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010cb0:	69bb      	ldr	r3, [r7, #24]
 8010cb2:	f003 0307 	and.w	r3, r3, #7
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d00c      	beq.n	8010cd4 <pvPortMalloc+0x100>
	__asm volatile
 8010cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cbe:	b672      	cpsid	i
 8010cc0:	f383 8811 	msr	BASEPRI, r3
 8010cc4:	f3bf 8f6f 	isb	sy
 8010cc8:	f3bf 8f4f 	dsb	sy
 8010ccc:	b662      	cpsie	i
 8010cce:	613b      	str	r3, [r7, #16]
}
 8010cd0:	bf00      	nop
 8010cd2:	e7fe      	b.n	8010cd2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cd6:	685a      	ldr	r2, [r3, #4]
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	1ad2      	subs	r2, r2, r3
 8010cdc:	69bb      	ldr	r3, [r7, #24]
 8010cde:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ce2:	687a      	ldr	r2, [r7, #4]
 8010ce4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010ce6:	69b8      	ldr	r0, [r7, #24]
 8010ce8:	f000 f8fe 	bl	8010ee8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010cec:	4b1b      	ldr	r3, [pc, #108]	; (8010d5c <pvPortMalloc+0x188>)
 8010cee:	681a      	ldr	r2, [r3, #0]
 8010cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cf2:	685b      	ldr	r3, [r3, #4]
 8010cf4:	1ad3      	subs	r3, r2, r3
 8010cf6:	4a19      	ldr	r2, [pc, #100]	; (8010d5c <pvPortMalloc+0x188>)
 8010cf8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010cfa:	4b18      	ldr	r3, [pc, #96]	; (8010d5c <pvPortMalloc+0x188>)
 8010cfc:	681a      	ldr	r2, [r3, #0]
 8010cfe:	4b19      	ldr	r3, [pc, #100]	; (8010d64 <pvPortMalloc+0x190>)
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	429a      	cmp	r2, r3
 8010d04:	d203      	bcs.n	8010d0e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010d06:	4b15      	ldr	r3, [pc, #84]	; (8010d5c <pvPortMalloc+0x188>)
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	4a16      	ldr	r2, [pc, #88]	; (8010d64 <pvPortMalloc+0x190>)
 8010d0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d10:	685a      	ldr	r2, [r3, #4]
 8010d12:	4b11      	ldr	r3, [pc, #68]	; (8010d58 <pvPortMalloc+0x184>)
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	431a      	orrs	r2, r3
 8010d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d1e:	2200      	movs	r2, #0
 8010d20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010d22:	f7fe fbeb 	bl	800f4fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010d26:	69fb      	ldr	r3, [r7, #28]
 8010d28:	f003 0307 	and.w	r3, r3, #7
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d00c      	beq.n	8010d4a <pvPortMalloc+0x176>
	__asm volatile
 8010d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d34:	b672      	cpsid	i
 8010d36:	f383 8811 	msr	BASEPRI, r3
 8010d3a:	f3bf 8f6f 	isb	sy
 8010d3e:	f3bf 8f4f 	dsb	sy
 8010d42:	b662      	cpsie	i
 8010d44:	60fb      	str	r3, [r7, #12]
}
 8010d46:	bf00      	nop
 8010d48:	e7fe      	b.n	8010d48 <pvPortMalloc+0x174>
	return pvReturn;
 8010d4a:	69fb      	ldr	r3, [r7, #28]
}
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	3728      	adds	r7, #40	; 0x28
 8010d50:	46bd      	mov	sp, r7
 8010d52:	bd80      	pop	{r7, pc}
 8010d54:	20005880 	.word	0x20005880
 8010d58:	2000588c 	.word	0x2000588c
 8010d5c:	20005884 	.word	0x20005884
 8010d60:	20005878 	.word	0x20005878
 8010d64:	20005888 	.word	0x20005888

08010d68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b086      	sub	sp, #24
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d04c      	beq.n	8010e14 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010d7a:	2308      	movs	r3, #8
 8010d7c:	425b      	negs	r3, r3
 8010d7e:	697a      	ldr	r2, [r7, #20]
 8010d80:	4413      	add	r3, r2
 8010d82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010d84:	697b      	ldr	r3, [r7, #20]
 8010d86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010d88:	693b      	ldr	r3, [r7, #16]
 8010d8a:	685a      	ldr	r2, [r3, #4]
 8010d8c:	4b23      	ldr	r3, [pc, #140]	; (8010e1c <vPortFree+0xb4>)
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	4013      	ands	r3, r2
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d10c      	bne.n	8010db0 <vPortFree+0x48>
	__asm volatile
 8010d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d9a:	b672      	cpsid	i
 8010d9c:	f383 8811 	msr	BASEPRI, r3
 8010da0:	f3bf 8f6f 	isb	sy
 8010da4:	f3bf 8f4f 	dsb	sy
 8010da8:	b662      	cpsie	i
 8010daa:	60fb      	str	r3, [r7, #12]
}
 8010dac:	bf00      	nop
 8010dae:	e7fe      	b.n	8010dae <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010db0:	693b      	ldr	r3, [r7, #16]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d00c      	beq.n	8010dd2 <vPortFree+0x6a>
	__asm volatile
 8010db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dbc:	b672      	cpsid	i
 8010dbe:	f383 8811 	msr	BASEPRI, r3
 8010dc2:	f3bf 8f6f 	isb	sy
 8010dc6:	f3bf 8f4f 	dsb	sy
 8010dca:	b662      	cpsie	i
 8010dcc:	60bb      	str	r3, [r7, #8]
}
 8010dce:	bf00      	nop
 8010dd0:	e7fe      	b.n	8010dd0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010dd2:	693b      	ldr	r3, [r7, #16]
 8010dd4:	685a      	ldr	r2, [r3, #4]
 8010dd6:	4b11      	ldr	r3, [pc, #68]	; (8010e1c <vPortFree+0xb4>)
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	4013      	ands	r3, r2
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d019      	beq.n	8010e14 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010de0:	693b      	ldr	r3, [r7, #16]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d115      	bne.n	8010e14 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010de8:	693b      	ldr	r3, [r7, #16]
 8010dea:	685a      	ldr	r2, [r3, #4]
 8010dec:	4b0b      	ldr	r3, [pc, #44]	; (8010e1c <vPortFree+0xb4>)
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	43db      	mvns	r3, r3
 8010df2:	401a      	ands	r2, r3
 8010df4:	693b      	ldr	r3, [r7, #16]
 8010df6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010df8:	f7fe fb72 	bl	800f4e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010dfc:	693b      	ldr	r3, [r7, #16]
 8010dfe:	685a      	ldr	r2, [r3, #4]
 8010e00:	4b07      	ldr	r3, [pc, #28]	; (8010e20 <vPortFree+0xb8>)
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	4413      	add	r3, r2
 8010e06:	4a06      	ldr	r2, [pc, #24]	; (8010e20 <vPortFree+0xb8>)
 8010e08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010e0a:	6938      	ldr	r0, [r7, #16]
 8010e0c:	f000 f86c 	bl	8010ee8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010e10:	f7fe fb74 	bl	800f4fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010e14:	bf00      	nop
 8010e16:	3718      	adds	r7, #24
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	bd80      	pop	{r7, pc}
 8010e1c:	2000588c 	.word	0x2000588c
 8010e20:	20005884 	.word	0x20005884

08010e24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010e24:	b480      	push	{r7}
 8010e26:	b085      	sub	sp, #20
 8010e28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010e2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8010e2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010e30:	4b27      	ldr	r3, [pc, #156]	; (8010ed0 <prvHeapInit+0xac>)
 8010e32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	f003 0307 	and.w	r3, r3, #7
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d00c      	beq.n	8010e58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	3307      	adds	r3, #7
 8010e42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	f023 0307 	bic.w	r3, r3, #7
 8010e4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010e4c:	68ba      	ldr	r2, [r7, #8]
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	1ad3      	subs	r3, r2, r3
 8010e52:	4a1f      	ldr	r2, [pc, #124]	; (8010ed0 <prvHeapInit+0xac>)
 8010e54:	4413      	add	r3, r2
 8010e56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010e5c:	4a1d      	ldr	r2, [pc, #116]	; (8010ed4 <prvHeapInit+0xb0>)
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010e62:	4b1c      	ldr	r3, [pc, #112]	; (8010ed4 <prvHeapInit+0xb0>)
 8010e64:	2200      	movs	r2, #0
 8010e66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	68ba      	ldr	r2, [r7, #8]
 8010e6c:	4413      	add	r3, r2
 8010e6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010e70:	2208      	movs	r2, #8
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	1a9b      	subs	r3, r3, r2
 8010e76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	f023 0307 	bic.w	r3, r3, #7
 8010e7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	4a15      	ldr	r2, [pc, #84]	; (8010ed8 <prvHeapInit+0xb4>)
 8010e84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010e86:	4b14      	ldr	r3, [pc, #80]	; (8010ed8 <prvHeapInit+0xb4>)
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010e8e:	4b12      	ldr	r3, [pc, #72]	; (8010ed8 <prvHeapInit+0xb4>)
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	2200      	movs	r2, #0
 8010e94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010e9a:	683b      	ldr	r3, [r7, #0]
 8010e9c:	68fa      	ldr	r2, [r7, #12]
 8010e9e:	1ad2      	subs	r2, r2, r3
 8010ea0:	683b      	ldr	r3, [r7, #0]
 8010ea2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010ea4:	4b0c      	ldr	r3, [pc, #48]	; (8010ed8 <prvHeapInit+0xb4>)
 8010ea6:	681a      	ldr	r2, [r3, #0]
 8010ea8:	683b      	ldr	r3, [r7, #0]
 8010eaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010eac:	683b      	ldr	r3, [r7, #0]
 8010eae:	685b      	ldr	r3, [r3, #4]
 8010eb0:	4a0a      	ldr	r2, [pc, #40]	; (8010edc <prvHeapInit+0xb8>)
 8010eb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010eb4:	683b      	ldr	r3, [r7, #0]
 8010eb6:	685b      	ldr	r3, [r3, #4]
 8010eb8:	4a09      	ldr	r2, [pc, #36]	; (8010ee0 <prvHeapInit+0xbc>)
 8010eba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010ebc:	4b09      	ldr	r3, [pc, #36]	; (8010ee4 <prvHeapInit+0xc0>)
 8010ebe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010ec2:	601a      	str	r2, [r3, #0]
}
 8010ec4:	bf00      	nop
 8010ec6:	3714      	adds	r7, #20
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ece:	4770      	bx	lr
 8010ed0:	20001c78 	.word	0x20001c78
 8010ed4:	20005878 	.word	0x20005878
 8010ed8:	20005880 	.word	0x20005880
 8010edc:	20005888 	.word	0x20005888
 8010ee0:	20005884 	.word	0x20005884
 8010ee4:	2000588c 	.word	0x2000588c

08010ee8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010ee8:	b480      	push	{r7}
 8010eea:	b085      	sub	sp, #20
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010ef0:	4b28      	ldr	r3, [pc, #160]	; (8010f94 <prvInsertBlockIntoFreeList+0xac>)
 8010ef2:	60fb      	str	r3, [r7, #12]
 8010ef4:	e002      	b.n	8010efc <prvInsertBlockIntoFreeList+0x14>
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	60fb      	str	r3, [r7, #12]
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	687a      	ldr	r2, [r7, #4]
 8010f02:	429a      	cmp	r2, r3
 8010f04:	d8f7      	bhi.n	8010ef6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	685b      	ldr	r3, [r3, #4]
 8010f0e:	68ba      	ldr	r2, [r7, #8]
 8010f10:	4413      	add	r3, r2
 8010f12:	687a      	ldr	r2, [r7, #4]
 8010f14:	429a      	cmp	r2, r3
 8010f16:	d108      	bne.n	8010f2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	685a      	ldr	r2, [r3, #4]
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	685b      	ldr	r3, [r3, #4]
 8010f20:	441a      	add	r2, r3
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	685b      	ldr	r3, [r3, #4]
 8010f32:	68ba      	ldr	r2, [r7, #8]
 8010f34:	441a      	add	r2, r3
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	429a      	cmp	r2, r3
 8010f3c:	d118      	bne.n	8010f70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	681a      	ldr	r2, [r3, #0]
 8010f42:	4b15      	ldr	r3, [pc, #84]	; (8010f98 <prvInsertBlockIntoFreeList+0xb0>)
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	429a      	cmp	r2, r3
 8010f48:	d00d      	beq.n	8010f66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	685a      	ldr	r2, [r3, #4]
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	685b      	ldr	r3, [r3, #4]
 8010f54:	441a      	add	r2, r3
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	681a      	ldr	r2, [r3, #0]
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	601a      	str	r2, [r3, #0]
 8010f64:	e008      	b.n	8010f78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010f66:	4b0c      	ldr	r3, [pc, #48]	; (8010f98 <prvInsertBlockIntoFreeList+0xb0>)
 8010f68:	681a      	ldr	r2, [r3, #0]
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	601a      	str	r2, [r3, #0]
 8010f6e:	e003      	b.n	8010f78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	681a      	ldr	r2, [r3, #0]
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010f78:	68fa      	ldr	r2, [r7, #12]
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	429a      	cmp	r2, r3
 8010f7e:	d002      	beq.n	8010f86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	687a      	ldr	r2, [r7, #4]
 8010f84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010f86:	bf00      	nop
 8010f88:	3714      	adds	r7, #20
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f90:	4770      	bx	lr
 8010f92:	bf00      	nop
 8010f94:	20005878 	.word	0x20005878
 8010f98:	20005880 	.word	0x20005880

08010f9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	4912      	ldr	r1, [pc, #72]	; (8010fec <MX_USB_DEVICE_Init+0x50>)
 8010fa4:	4812      	ldr	r0, [pc, #72]	; (8010ff0 <MX_USB_DEVICE_Init+0x54>)
 8010fa6:	f7fa ffcb 	bl	800bf40 <USBD_Init>
 8010faa:	4603      	mov	r3, r0
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d001      	beq.n	8010fb4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010fb0:	f7f0 f87e 	bl	80010b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010fb4:	490f      	ldr	r1, [pc, #60]	; (8010ff4 <MX_USB_DEVICE_Init+0x58>)
 8010fb6:	480e      	ldr	r0, [pc, #56]	; (8010ff0 <MX_USB_DEVICE_Init+0x54>)
 8010fb8:	f7fa fff2 	bl	800bfa0 <USBD_RegisterClass>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d001      	beq.n	8010fc6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010fc2:	f7f0 f875 	bl	80010b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010fc6:	490c      	ldr	r1, [pc, #48]	; (8010ff8 <MX_USB_DEVICE_Init+0x5c>)
 8010fc8:	4809      	ldr	r0, [pc, #36]	; (8010ff0 <MX_USB_DEVICE_Init+0x54>)
 8010fca:	f7fa fee9 	bl	800bda0 <USBD_CDC_RegisterInterface>
 8010fce:	4603      	mov	r3, r0
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d001      	beq.n	8010fd8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010fd4:	f7f0 f86c 	bl	80010b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010fd8:	4805      	ldr	r0, [pc, #20]	; (8010ff0 <MX_USB_DEVICE_Init+0x54>)
 8010fda:	f7fb f817 	bl	800c00c <USBD_Start>
 8010fde:	4603      	mov	r3, r0
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d001      	beq.n	8010fe8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010fe4:	f7f0 f864 	bl	80010b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010fe8:	bf00      	nop
 8010fea:	bd80      	pop	{r7, pc}
 8010fec:	20000130 	.word	0x20000130
 8010ff0:	20005890 	.word	0x20005890
 8010ff4:	20000098 	.word	0x20000098
 8010ff8:	2000011c 	.word	0x2000011c

08010ffc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011000:	2200      	movs	r2, #0
 8011002:	4905      	ldr	r1, [pc, #20]	; (8011018 <CDC_Init_FS+0x1c>)
 8011004:	4805      	ldr	r0, [pc, #20]	; (801101c <CDC_Init_FS+0x20>)
 8011006:	f7fa fee5 	bl	800bdd4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801100a:	4905      	ldr	r1, [pc, #20]	; (8011020 <CDC_Init_FS+0x24>)
 801100c:	4803      	ldr	r0, [pc, #12]	; (801101c <CDC_Init_FS+0x20>)
 801100e:	f7fa ff03 	bl	800be18 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011012:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011014:	4618      	mov	r0, r3
 8011016:	bd80      	pop	{r7, pc}
 8011018:	2000636c 	.word	0x2000636c
 801101c:	20005890 	.word	0x20005890
 8011020:	20005b6c 	.word	0x20005b6c

08011024 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011024:	b480      	push	{r7}
 8011026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011028:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801102a:	4618      	mov	r0, r3
 801102c:	46bd      	mov	sp, r7
 801102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011032:	4770      	bx	lr

08011034 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011034:	b480      	push	{r7}
 8011036:	b083      	sub	sp, #12
 8011038:	af00      	add	r7, sp, #0
 801103a:	4603      	mov	r3, r0
 801103c:	6039      	str	r1, [r7, #0]
 801103e:	71fb      	strb	r3, [r7, #7]
 8011040:	4613      	mov	r3, r2
 8011042:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011044:	79fb      	ldrb	r3, [r7, #7]
 8011046:	2b23      	cmp	r3, #35	; 0x23
 8011048:	d84a      	bhi.n	80110e0 <CDC_Control_FS+0xac>
 801104a:	a201      	add	r2, pc, #4	; (adr r2, 8011050 <CDC_Control_FS+0x1c>)
 801104c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011050:	080110e1 	.word	0x080110e1
 8011054:	080110e1 	.word	0x080110e1
 8011058:	080110e1 	.word	0x080110e1
 801105c:	080110e1 	.word	0x080110e1
 8011060:	080110e1 	.word	0x080110e1
 8011064:	080110e1 	.word	0x080110e1
 8011068:	080110e1 	.word	0x080110e1
 801106c:	080110e1 	.word	0x080110e1
 8011070:	080110e1 	.word	0x080110e1
 8011074:	080110e1 	.word	0x080110e1
 8011078:	080110e1 	.word	0x080110e1
 801107c:	080110e1 	.word	0x080110e1
 8011080:	080110e1 	.word	0x080110e1
 8011084:	080110e1 	.word	0x080110e1
 8011088:	080110e1 	.word	0x080110e1
 801108c:	080110e1 	.word	0x080110e1
 8011090:	080110e1 	.word	0x080110e1
 8011094:	080110e1 	.word	0x080110e1
 8011098:	080110e1 	.word	0x080110e1
 801109c:	080110e1 	.word	0x080110e1
 80110a0:	080110e1 	.word	0x080110e1
 80110a4:	080110e1 	.word	0x080110e1
 80110a8:	080110e1 	.word	0x080110e1
 80110ac:	080110e1 	.word	0x080110e1
 80110b0:	080110e1 	.word	0x080110e1
 80110b4:	080110e1 	.word	0x080110e1
 80110b8:	080110e1 	.word	0x080110e1
 80110bc:	080110e1 	.word	0x080110e1
 80110c0:	080110e1 	.word	0x080110e1
 80110c4:	080110e1 	.word	0x080110e1
 80110c8:	080110e1 	.word	0x080110e1
 80110cc:	080110e1 	.word	0x080110e1
 80110d0:	080110e1 	.word	0x080110e1
 80110d4:	080110e1 	.word	0x080110e1
 80110d8:	080110e1 	.word	0x080110e1
 80110dc:	080110e1 	.word	0x080110e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80110e0:	bf00      	nop
  }

  return (USBD_OK);
 80110e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80110e4:	4618      	mov	r0, r3
 80110e6:	370c      	adds	r7, #12
 80110e8:	46bd      	mov	sp, r7
 80110ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ee:	4770      	bx	lr

080110f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b084      	sub	sp, #16
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
 80110f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	MSGQ_obj msg;										//Local message object

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);			//Default two lines of receive code.
 80110fa:	6879      	ldr	r1, [r7, #4]
 80110fc:	4813      	ldr	r0, [pc, #76]	; (801114c <CDC_Receive_FS+0x5c>)
 80110fe:	f7fa fe8b 	bl	800be18 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011102:	4812      	ldr	r0, [pc, #72]	; (801114c <CDC_Receive_FS+0x5c>)
 8011104:	f7fa fee6 	bl	800bed4 <USBD_CDC_ReceivePacket>

  uint8_t len = (uint8_t) *Len;
 8011108:	683b      	ldr	r3, [r7, #0]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	73fb      	strb	r3, [r7, #15]

  if( USB_MSGQ_Rx != NULL )
 801110e:	4b10      	ldr	r3, [pc, #64]	; (8011150 <CDC_Receive_FS+0x60>)
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d015      	beq.n	8011142 <CDC_Receive_FS+0x52>
  	{
	  	memset (msg.Buf, '\0', HiL_MSGQ_Buf_arr_len);	//Clear msg-obj
 8011116:	f107 0308 	add.w	r3, r7, #8
 801111a:	2204      	movs	r2, #4
 801111c:	2100      	movs	r1, #0
 801111e:	4618      	mov	r0, r3
 8011120:	f000 fd2a 	bl	8011b78 <memset>
  		memcpy (msg.Buf, Buf, len);						//Copy usb buffer to msg-obj
 8011124:	7bfa      	ldrb	r2, [r7, #15]
 8011126:	f107 0308 	add.w	r3, r7, #8
 801112a:	6879      	ldr	r1, [r7, #4]
 801112c:	4618      	mov	r0, r3
 801112e:	f000 fd15 	bl	8011b5c <memcpy>
  		osMessageQueuePut(USB_MSGQ_Rx, &msg, 0U, 0U);	//Put object in queue, no timeout.
 8011132:	4b07      	ldr	r3, [pc, #28]	; (8011150 <CDC_Receive_FS+0x60>)
 8011134:	6818      	ldr	r0, [r3, #0]
 8011136:	f107 0108 	add.w	r1, r7, #8
 801113a:	2300      	movs	r3, #0
 801113c:	2200      	movs	r2, #0
 801113e:	f7fc fd41 	bl	800dbc4 <osMessageQueuePut>
  	}

  return (USBD_OK);
 8011142:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011144:	4618      	mov	r0, r3
 8011146:	3710      	adds	r7, #16
 8011148:	46bd      	mov	sp, r7
 801114a:	bd80      	pop	{r7, pc}
 801114c:	20005890 	.word	0x20005890
 8011150:	2000078c 	.word	0x2000078c

08011154 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011154:	b580      	push	{r7, lr}
 8011156:	b084      	sub	sp, #16
 8011158:	af00      	add	r7, sp, #0
 801115a:	6078      	str	r0, [r7, #4]
 801115c:	460b      	mov	r3, r1
 801115e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011160:	2300      	movs	r3, #0
 8011162:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011164:	4b0d      	ldr	r3, [pc, #52]	; (801119c <CDC_Transmit_FS+0x48>)
 8011166:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801116a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801116c:	68bb      	ldr	r3, [r7, #8]
 801116e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011172:	2b00      	cmp	r3, #0
 8011174:	d001      	beq.n	801117a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011176:	2301      	movs	r3, #1
 8011178:	e00b      	b.n	8011192 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801117a:	887b      	ldrh	r3, [r7, #2]
 801117c:	461a      	mov	r2, r3
 801117e:	6879      	ldr	r1, [r7, #4]
 8011180:	4806      	ldr	r0, [pc, #24]	; (801119c <CDC_Transmit_FS+0x48>)
 8011182:	f7fa fe27 	bl	800bdd4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011186:	4805      	ldr	r0, [pc, #20]	; (801119c <CDC_Transmit_FS+0x48>)
 8011188:	f7fa fe64 	bl	800be54 <USBD_CDC_TransmitPacket>
 801118c:	4603      	mov	r3, r0
 801118e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011190:	7bfb      	ldrb	r3, [r7, #15]
}
 8011192:	4618      	mov	r0, r3
 8011194:	3710      	adds	r7, #16
 8011196:	46bd      	mov	sp, r7
 8011198:	bd80      	pop	{r7, pc}
 801119a:	bf00      	nop
 801119c:	20005890 	.word	0x20005890

080111a0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80111a0:	b480      	push	{r7}
 80111a2:	b087      	sub	sp, #28
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	60f8      	str	r0, [r7, #12]
 80111a8:	60b9      	str	r1, [r7, #8]
 80111aa:	4613      	mov	r3, r2
 80111ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80111ae:	2300      	movs	r3, #0
 80111b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80111b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80111b6:	4618      	mov	r0, r3
 80111b8:	371c      	adds	r7, #28
 80111ba:	46bd      	mov	sp, r7
 80111bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c0:	4770      	bx	lr
	...

080111c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80111c4:	b480      	push	{r7}
 80111c6:	b083      	sub	sp, #12
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	4603      	mov	r3, r0
 80111cc:	6039      	str	r1, [r7, #0]
 80111ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80111d0:	683b      	ldr	r3, [r7, #0]
 80111d2:	2212      	movs	r2, #18
 80111d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80111d6:	4b03      	ldr	r3, [pc, #12]	; (80111e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80111d8:	4618      	mov	r0, r3
 80111da:	370c      	adds	r7, #12
 80111dc:	46bd      	mov	sp, r7
 80111de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e2:	4770      	bx	lr
 80111e4:	20000150 	.word	0x20000150

080111e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80111e8:	b480      	push	{r7}
 80111ea:	b083      	sub	sp, #12
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	4603      	mov	r3, r0
 80111f0:	6039      	str	r1, [r7, #0]
 80111f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80111f4:	683b      	ldr	r3, [r7, #0]
 80111f6:	2204      	movs	r2, #4
 80111f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80111fa:	4b03      	ldr	r3, [pc, #12]	; (8011208 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80111fc:	4618      	mov	r0, r3
 80111fe:	370c      	adds	r7, #12
 8011200:	46bd      	mov	sp, r7
 8011202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011206:	4770      	bx	lr
 8011208:	20000170 	.word	0x20000170

0801120c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801120c:	b580      	push	{r7, lr}
 801120e:	b082      	sub	sp, #8
 8011210:	af00      	add	r7, sp, #0
 8011212:	4603      	mov	r3, r0
 8011214:	6039      	str	r1, [r7, #0]
 8011216:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011218:	79fb      	ldrb	r3, [r7, #7]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d105      	bne.n	801122a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801121e:	683a      	ldr	r2, [r7, #0]
 8011220:	4907      	ldr	r1, [pc, #28]	; (8011240 <USBD_FS_ProductStrDescriptor+0x34>)
 8011222:	4808      	ldr	r0, [pc, #32]	; (8011244 <USBD_FS_ProductStrDescriptor+0x38>)
 8011224:	f7fc f8c8 	bl	800d3b8 <USBD_GetString>
 8011228:	e004      	b.n	8011234 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801122a:	683a      	ldr	r2, [r7, #0]
 801122c:	4904      	ldr	r1, [pc, #16]	; (8011240 <USBD_FS_ProductStrDescriptor+0x34>)
 801122e:	4805      	ldr	r0, [pc, #20]	; (8011244 <USBD_FS_ProductStrDescriptor+0x38>)
 8011230:	f7fc f8c2 	bl	800d3b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011234:	4b02      	ldr	r3, [pc, #8]	; (8011240 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011236:	4618      	mov	r0, r3
 8011238:	3708      	adds	r7, #8
 801123a:	46bd      	mov	sp, r7
 801123c:	bd80      	pop	{r7, pc}
 801123e:	bf00      	nop
 8011240:	20006b6c 	.word	0x20006b6c
 8011244:	08011ed8 	.word	0x08011ed8

08011248 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011248:	b580      	push	{r7, lr}
 801124a:	b082      	sub	sp, #8
 801124c:	af00      	add	r7, sp, #0
 801124e:	4603      	mov	r3, r0
 8011250:	6039      	str	r1, [r7, #0]
 8011252:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011254:	683a      	ldr	r2, [r7, #0]
 8011256:	4904      	ldr	r1, [pc, #16]	; (8011268 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011258:	4804      	ldr	r0, [pc, #16]	; (801126c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801125a:	f7fc f8ad 	bl	800d3b8 <USBD_GetString>
  return USBD_StrDesc;
 801125e:	4b02      	ldr	r3, [pc, #8]	; (8011268 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011260:	4618      	mov	r0, r3
 8011262:	3708      	adds	r7, #8
 8011264:	46bd      	mov	sp, r7
 8011266:	bd80      	pop	{r7, pc}
 8011268:	20006b6c 	.word	0x20006b6c
 801126c:	08011eec 	.word	0x08011eec

08011270 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b082      	sub	sp, #8
 8011274:	af00      	add	r7, sp, #0
 8011276:	4603      	mov	r3, r0
 8011278:	6039      	str	r1, [r7, #0]
 801127a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801127c:	683b      	ldr	r3, [r7, #0]
 801127e:	221a      	movs	r2, #26
 8011280:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011282:	f000 f855 	bl	8011330 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011286:	4b02      	ldr	r3, [pc, #8]	; (8011290 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011288:	4618      	mov	r0, r3
 801128a:	3708      	adds	r7, #8
 801128c:	46bd      	mov	sp, r7
 801128e:	bd80      	pop	{r7, pc}
 8011290:	20000174 	.word	0x20000174

08011294 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011294:	b580      	push	{r7, lr}
 8011296:	b082      	sub	sp, #8
 8011298:	af00      	add	r7, sp, #0
 801129a:	4603      	mov	r3, r0
 801129c:	6039      	str	r1, [r7, #0]
 801129e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80112a0:	79fb      	ldrb	r3, [r7, #7]
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d105      	bne.n	80112b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80112a6:	683a      	ldr	r2, [r7, #0]
 80112a8:	4907      	ldr	r1, [pc, #28]	; (80112c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80112aa:	4808      	ldr	r0, [pc, #32]	; (80112cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80112ac:	f7fc f884 	bl	800d3b8 <USBD_GetString>
 80112b0:	e004      	b.n	80112bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80112b2:	683a      	ldr	r2, [r7, #0]
 80112b4:	4904      	ldr	r1, [pc, #16]	; (80112c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80112b6:	4805      	ldr	r0, [pc, #20]	; (80112cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80112b8:	f7fc f87e 	bl	800d3b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80112bc:	4b02      	ldr	r3, [pc, #8]	; (80112c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80112be:	4618      	mov	r0, r3
 80112c0:	3708      	adds	r7, #8
 80112c2:	46bd      	mov	sp, r7
 80112c4:	bd80      	pop	{r7, pc}
 80112c6:	bf00      	nop
 80112c8:	20006b6c 	.word	0x20006b6c
 80112cc:	08011f00 	.word	0x08011f00

080112d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b082      	sub	sp, #8
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	4603      	mov	r3, r0
 80112d8:	6039      	str	r1, [r7, #0]
 80112da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80112dc:	79fb      	ldrb	r3, [r7, #7]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d105      	bne.n	80112ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80112e2:	683a      	ldr	r2, [r7, #0]
 80112e4:	4907      	ldr	r1, [pc, #28]	; (8011304 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80112e6:	4808      	ldr	r0, [pc, #32]	; (8011308 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80112e8:	f7fc f866 	bl	800d3b8 <USBD_GetString>
 80112ec:	e004      	b.n	80112f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80112ee:	683a      	ldr	r2, [r7, #0]
 80112f0:	4904      	ldr	r1, [pc, #16]	; (8011304 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80112f2:	4805      	ldr	r0, [pc, #20]	; (8011308 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80112f4:	f7fc f860 	bl	800d3b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80112f8:	4b02      	ldr	r3, [pc, #8]	; (8011304 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80112fa:	4618      	mov	r0, r3
 80112fc:	3708      	adds	r7, #8
 80112fe:	46bd      	mov	sp, r7
 8011300:	bd80      	pop	{r7, pc}
 8011302:	bf00      	nop
 8011304:	20006b6c 	.word	0x20006b6c
 8011308:	08011f0c 	.word	0x08011f0c

0801130c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801130c:	b480      	push	{r7}
 801130e:	b083      	sub	sp, #12
 8011310:	af00      	add	r7, sp, #0
 8011312:	4603      	mov	r3, r0
 8011314:	6039      	str	r1, [r7, #0]
 8011316:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8011318:	683b      	ldr	r3, [r7, #0]
 801131a:	220c      	movs	r2, #12
 801131c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801131e:	4b03      	ldr	r3, [pc, #12]	; (801132c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8011320:	4618      	mov	r0, r3
 8011322:	370c      	adds	r7, #12
 8011324:	46bd      	mov	sp, r7
 8011326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132a:	4770      	bx	lr
 801132c:	20000164 	.word	0x20000164

08011330 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011330:	b580      	push	{r7, lr}
 8011332:	b084      	sub	sp, #16
 8011334:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011336:	4b0f      	ldr	r3, [pc, #60]	; (8011374 <Get_SerialNum+0x44>)
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801133c:	4b0e      	ldr	r3, [pc, #56]	; (8011378 <Get_SerialNum+0x48>)
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011342:	4b0e      	ldr	r3, [pc, #56]	; (801137c <Get_SerialNum+0x4c>)
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011348:	68fa      	ldr	r2, [r7, #12]
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	4413      	add	r3, r2
 801134e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d009      	beq.n	801136a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011356:	2208      	movs	r2, #8
 8011358:	4909      	ldr	r1, [pc, #36]	; (8011380 <Get_SerialNum+0x50>)
 801135a:	68f8      	ldr	r0, [r7, #12]
 801135c:	f000 f814 	bl	8011388 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011360:	2204      	movs	r2, #4
 8011362:	4908      	ldr	r1, [pc, #32]	; (8011384 <Get_SerialNum+0x54>)
 8011364:	68b8      	ldr	r0, [r7, #8]
 8011366:	f000 f80f 	bl	8011388 <IntToUnicode>
  }
}
 801136a:	bf00      	nop
 801136c:	3710      	adds	r7, #16
 801136e:	46bd      	mov	sp, r7
 8011370:	bd80      	pop	{r7, pc}
 8011372:	bf00      	nop
 8011374:	1ff0f420 	.word	0x1ff0f420
 8011378:	1ff0f424 	.word	0x1ff0f424
 801137c:	1ff0f428 	.word	0x1ff0f428
 8011380:	20000176 	.word	0x20000176
 8011384:	20000186 	.word	0x20000186

08011388 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011388:	b480      	push	{r7}
 801138a:	b087      	sub	sp, #28
 801138c:	af00      	add	r7, sp, #0
 801138e:	60f8      	str	r0, [r7, #12]
 8011390:	60b9      	str	r1, [r7, #8]
 8011392:	4613      	mov	r3, r2
 8011394:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011396:	2300      	movs	r3, #0
 8011398:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801139a:	2300      	movs	r3, #0
 801139c:	75fb      	strb	r3, [r7, #23]
 801139e:	e027      	b.n	80113f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	0f1b      	lsrs	r3, r3, #28
 80113a4:	2b09      	cmp	r3, #9
 80113a6:	d80b      	bhi.n	80113c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	0f1b      	lsrs	r3, r3, #28
 80113ac:	b2da      	uxtb	r2, r3
 80113ae:	7dfb      	ldrb	r3, [r7, #23]
 80113b0:	005b      	lsls	r3, r3, #1
 80113b2:	4619      	mov	r1, r3
 80113b4:	68bb      	ldr	r3, [r7, #8]
 80113b6:	440b      	add	r3, r1
 80113b8:	3230      	adds	r2, #48	; 0x30
 80113ba:	b2d2      	uxtb	r2, r2
 80113bc:	701a      	strb	r2, [r3, #0]
 80113be:	e00a      	b.n	80113d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	0f1b      	lsrs	r3, r3, #28
 80113c4:	b2da      	uxtb	r2, r3
 80113c6:	7dfb      	ldrb	r3, [r7, #23]
 80113c8:	005b      	lsls	r3, r3, #1
 80113ca:	4619      	mov	r1, r3
 80113cc:	68bb      	ldr	r3, [r7, #8]
 80113ce:	440b      	add	r3, r1
 80113d0:	3237      	adds	r2, #55	; 0x37
 80113d2:	b2d2      	uxtb	r2, r2
 80113d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	011b      	lsls	r3, r3, #4
 80113da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80113dc:	7dfb      	ldrb	r3, [r7, #23]
 80113de:	005b      	lsls	r3, r3, #1
 80113e0:	3301      	adds	r3, #1
 80113e2:	68ba      	ldr	r2, [r7, #8]
 80113e4:	4413      	add	r3, r2
 80113e6:	2200      	movs	r2, #0
 80113e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80113ea:	7dfb      	ldrb	r3, [r7, #23]
 80113ec:	3301      	adds	r3, #1
 80113ee:	75fb      	strb	r3, [r7, #23]
 80113f0:	7dfa      	ldrb	r2, [r7, #23]
 80113f2:	79fb      	ldrb	r3, [r7, #7]
 80113f4:	429a      	cmp	r2, r3
 80113f6:	d3d3      	bcc.n	80113a0 <IntToUnicode+0x18>
  }
}
 80113f8:	bf00      	nop
 80113fa:	bf00      	nop
 80113fc:	371c      	adds	r7, #28
 80113fe:	46bd      	mov	sp, r7
 8011400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011404:	4770      	bx	lr
	...

08011408 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011408:	b580      	push	{r7, lr}
 801140a:	b0ae      	sub	sp, #184	; 0xb8
 801140c:	af00      	add	r7, sp, #0
 801140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011410:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011414:	2200      	movs	r2, #0
 8011416:	601a      	str	r2, [r3, #0]
 8011418:	605a      	str	r2, [r3, #4]
 801141a:	609a      	str	r2, [r3, #8]
 801141c:	60da      	str	r2, [r3, #12]
 801141e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011420:	f107 0314 	add.w	r3, r7, #20
 8011424:	2290      	movs	r2, #144	; 0x90
 8011426:	2100      	movs	r1, #0
 8011428:	4618      	mov	r0, r3
 801142a:	f000 fba5 	bl	8011b78 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011436:	d151      	bne.n	80114dc <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8011438:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801143c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 801143e:	2300      	movs	r3, #0
 8011440:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011444:	f107 0314 	add.w	r3, r7, #20
 8011448:	4618      	mov	r0, r3
 801144a:	f7f4 f8ed 	bl	8005628 <HAL_RCCEx_PeriphCLKConfig>
 801144e:	4603      	mov	r3, r0
 8011450:	2b00      	cmp	r3, #0
 8011452:	d001      	beq.n	8011458 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8011454:	f7ef fe2c 	bl	80010b0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011458:	4b22      	ldr	r3, [pc, #136]	; (80114e4 <HAL_PCD_MspInit+0xdc>)
 801145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801145c:	4a21      	ldr	r2, [pc, #132]	; (80114e4 <HAL_PCD_MspInit+0xdc>)
 801145e:	f043 0301 	orr.w	r3, r3, #1
 8011462:	6313      	str	r3, [r2, #48]	; 0x30
 8011464:	4b1f      	ldr	r3, [pc, #124]	; (80114e4 <HAL_PCD_MspInit+0xdc>)
 8011466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011468:	f003 0301 	and.w	r3, r3, #1
 801146c:	613b      	str	r3, [r7, #16]
 801146e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011470:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8011474:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011478:	2302      	movs	r3, #2
 801147a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801147e:	2300      	movs	r3, #0
 8011480:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011484:	2303      	movs	r3, #3
 8011486:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801148a:	230a      	movs	r3, #10
 801148c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011490:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011494:	4619      	mov	r1, r3
 8011496:	4814      	ldr	r0, [pc, #80]	; (80114e8 <HAL_PCD_MspInit+0xe0>)
 8011498:	f7f1 fdb2 	bl	8003000 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801149c:	4b11      	ldr	r3, [pc, #68]	; (80114e4 <HAL_PCD_MspInit+0xdc>)
 801149e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114a0:	4a10      	ldr	r2, [pc, #64]	; (80114e4 <HAL_PCD_MspInit+0xdc>)
 80114a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114a6:	6353      	str	r3, [r2, #52]	; 0x34
 80114a8:	4b0e      	ldr	r3, [pc, #56]	; (80114e4 <HAL_PCD_MspInit+0xdc>)
 80114aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80114b0:	60fb      	str	r3, [r7, #12]
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	4b0b      	ldr	r3, [pc, #44]	; (80114e4 <HAL_PCD_MspInit+0xdc>)
 80114b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114b8:	4a0a      	ldr	r2, [pc, #40]	; (80114e4 <HAL_PCD_MspInit+0xdc>)
 80114ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80114be:	6453      	str	r3, [r2, #68]	; 0x44
 80114c0:	4b08      	ldr	r3, [pc, #32]	; (80114e4 <HAL_PCD_MspInit+0xdc>)
 80114c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80114c8:	60bb      	str	r3, [r7, #8]
 80114ca:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80114cc:	2200      	movs	r2, #0
 80114ce:	2105      	movs	r1, #5
 80114d0:	2043      	movs	r0, #67	; 0x43
 80114d2:	f7f0 fce5 	bl	8001ea0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80114d6:	2043      	movs	r0, #67	; 0x43
 80114d8:	f7f0 fcfe 	bl	8001ed8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80114dc:	bf00      	nop
 80114de:	37b8      	adds	r7, #184	; 0xb8
 80114e0:	46bd      	mov	sp, r7
 80114e2:	bd80      	pop	{r7, pc}
 80114e4:	40023800 	.word	0x40023800
 80114e8:	40020000 	.word	0x40020000

080114ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b082      	sub	sp, #8
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011500:	4619      	mov	r1, r3
 8011502:	4610      	mov	r0, r2
 8011504:	f7fa fdcf 	bl	800c0a6 <USBD_LL_SetupStage>
}
 8011508:	bf00      	nop
 801150a:	3708      	adds	r7, #8
 801150c:	46bd      	mov	sp, r7
 801150e:	bd80      	pop	{r7, pc}

08011510 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b082      	sub	sp, #8
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
 8011518:	460b      	mov	r3, r1
 801151a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8011522:	78fa      	ldrb	r2, [r7, #3]
 8011524:	6879      	ldr	r1, [r7, #4]
 8011526:	4613      	mov	r3, r2
 8011528:	00db      	lsls	r3, r3, #3
 801152a:	4413      	add	r3, r2
 801152c:	009b      	lsls	r3, r3, #2
 801152e:	440b      	add	r3, r1
 8011530:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8011534:	681a      	ldr	r2, [r3, #0]
 8011536:	78fb      	ldrb	r3, [r7, #3]
 8011538:	4619      	mov	r1, r3
 801153a:	f7fa fe09 	bl	800c150 <USBD_LL_DataOutStage>
}
 801153e:	bf00      	nop
 8011540:	3708      	adds	r7, #8
 8011542:	46bd      	mov	sp, r7
 8011544:	bd80      	pop	{r7, pc}

08011546 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011546:	b580      	push	{r7, lr}
 8011548:	b082      	sub	sp, #8
 801154a:	af00      	add	r7, sp, #0
 801154c:	6078      	str	r0, [r7, #4]
 801154e:	460b      	mov	r3, r1
 8011550:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8011558:	78fa      	ldrb	r2, [r7, #3]
 801155a:	6879      	ldr	r1, [r7, #4]
 801155c:	4613      	mov	r3, r2
 801155e:	00db      	lsls	r3, r3, #3
 8011560:	4413      	add	r3, r2
 8011562:	009b      	lsls	r3, r3, #2
 8011564:	440b      	add	r3, r1
 8011566:	334c      	adds	r3, #76	; 0x4c
 8011568:	681a      	ldr	r2, [r3, #0]
 801156a:	78fb      	ldrb	r3, [r7, #3]
 801156c:	4619      	mov	r1, r3
 801156e:	f7fa fea2 	bl	800c2b6 <USBD_LL_DataInStage>
}
 8011572:	bf00      	nop
 8011574:	3708      	adds	r7, #8
 8011576:	46bd      	mov	sp, r7
 8011578:	bd80      	pop	{r7, pc}

0801157a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801157a:	b580      	push	{r7, lr}
 801157c:	b082      	sub	sp, #8
 801157e:	af00      	add	r7, sp, #0
 8011580:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011588:	4618      	mov	r0, r3
 801158a:	f7fa ffd6 	bl	800c53a <USBD_LL_SOF>
}
 801158e:	bf00      	nop
 8011590:	3708      	adds	r7, #8
 8011592:	46bd      	mov	sp, r7
 8011594:	bd80      	pop	{r7, pc}

08011596 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011596:	b580      	push	{r7, lr}
 8011598:	b084      	sub	sp, #16
 801159a:	af00      	add	r7, sp, #0
 801159c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801159e:	2301      	movs	r3, #1
 80115a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	68db      	ldr	r3, [r3, #12]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d102      	bne.n	80115b0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80115aa:	2300      	movs	r3, #0
 80115ac:	73fb      	strb	r3, [r7, #15]
 80115ae:	e008      	b.n	80115c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	68db      	ldr	r3, [r3, #12]
 80115b4:	2b02      	cmp	r3, #2
 80115b6:	d102      	bne.n	80115be <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80115b8:	2301      	movs	r3, #1
 80115ba:	73fb      	strb	r3, [r7, #15]
 80115bc:	e001      	b.n	80115c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80115be:	f7ef fd77 	bl	80010b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80115c8:	7bfa      	ldrb	r2, [r7, #15]
 80115ca:	4611      	mov	r1, r2
 80115cc:	4618      	mov	r0, r3
 80115ce:	f7fa ff76 	bl	800c4be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80115d8:	4618      	mov	r0, r3
 80115da:	f7fa ff1e 	bl	800c41a <USBD_LL_Reset>
}
 80115de:	bf00      	nop
 80115e0:	3710      	adds	r7, #16
 80115e2:	46bd      	mov	sp, r7
 80115e4:	bd80      	pop	{r7, pc}
	...

080115e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b082      	sub	sp, #8
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80115f6:	4618      	mov	r0, r3
 80115f8:	f7fa ff71 	bl	800c4de <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	687a      	ldr	r2, [r7, #4]
 8011608:	6812      	ldr	r2, [r2, #0]
 801160a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801160e:	f043 0301 	orr.w	r3, r3, #1
 8011612:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	6a1b      	ldr	r3, [r3, #32]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d005      	beq.n	8011628 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801161c:	4b04      	ldr	r3, [pc, #16]	; (8011630 <HAL_PCD_SuspendCallback+0x48>)
 801161e:	691b      	ldr	r3, [r3, #16]
 8011620:	4a03      	ldr	r2, [pc, #12]	; (8011630 <HAL_PCD_SuspendCallback+0x48>)
 8011622:	f043 0306 	orr.w	r3, r3, #6
 8011626:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011628:	bf00      	nop
 801162a:	3708      	adds	r7, #8
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}
 8011630:	e000ed00 	.word	0xe000ed00

08011634 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011634:	b580      	push	{r7, lr}
 8011636:	b082      	sub	sp, #8
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011642:	4618      	mov	r0, r3
 8011644:	f7fa ff61 	bl	800c50a <USBD_LL_Resume>
}
 8011648:	bf00      	nop
 801164a:	3708      	adds	r7, #8
 801164c:	46bd      	mov	sp, r7
 801164e:	bd80      	pop	{r7, pc}

08011650 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b082      	sub	sp, #8
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
 8011658:	460b      	mov	r3, r1
 801165a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011662:	78fa      	ldrb	r2, [r7, #3]
 8011664:	4611      	mov	r1, r2
 8011666:	4618      	mov	r0, r3
 8011668:	f7fa ffb9 	bl	800c5de <USBD_LL_IsoOUTIncomplete>
}
 801166c:	bf00      	nop
 801166e:	3708      	adds	r7, #8
 8011670:	46bd      	mov	sp, r7
 8011672:	bd80      	pop	{r7, pc}

08011674 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011674:	b580      	push	{r7, lr}
 8011676:	b082      	sub	sp, #8
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
 801167c:	460b      	mov	r3, r1
 801167e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011686:	78fa      	ldrb	r2, [r7, #3]
 8011688:	4611      	mov	r1, r2
 801168a:	4618      	mov	r0, r3
 801168c:	f7fa ff75 	bl	800c57a <USBD_LL_IsoINIncomplete>
}
 8011690:	bf00      	nop
 8011692:	3708      	adds	r7, #8
 8011694:	46bd      	mov	sp, r7
 8011696:	bd80      	pop	{r7, pc}

08011698 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011698:	b580      	push	{r7, lr}
 801169a:	b082      	sub	sp, #8
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80116a6:	4618      	mov	r0, r3
 80116a8:	f7fa ffcb 	bl	800c642 <USBD_LL_DevConnected>
}
 80116ac:	bf00      	nop
 80116ae:	3708      	adds	r7, #8
 80116b0:	46bd      	mov	sp, r7
 80116b2:	bd80      	pop	{r7, pc}

080116b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80116b4:	b580      	push	{r7, lr}
 80116b6:	b082      	sub	sp, #8
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80116c2:	4618      	mov	r0, r3
 80116c4:	f7fa ffc8 	bl	800c658 <USBD_LL_DevDisconnected>
}
 80116c8:	bf00      	nop
 80116ca:	3708      	adds	r7, #8
 80116cc:	46bd      	mov	sp, r7
 80116ce:	bd80      	pop	{r7, pc}

080116d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b082      	sub	sp, #8
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	781b      	ldrb	r3, [r3, #0]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d13c      	bne.n	801175a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80116e0:	4a20      	ldr	r2, [pc, #128]	; (8011764 <USBD_LL_Init+0x94>)
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	4a1e      	ldr	r2, [pc, #120]	; (8011764 <USBD_LL_Init+0x94>)
 80116ec:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80116f0:	4b1c      	ldr	r3, [pc, #112]	; (8011764 <USBD_LL_Init+0x94>)
 80116f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80116f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80116f8:	4b1a      	ldr	r3, [pc, #104]	; (8011764 <USBD_LL_Init+0x94>)
 80116fa:	2206      	movs	r2, #6
 80116fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80116fe:	4b19      	ldr	r3, [pc, #100]	; (8011764 <USBD_LL_Init+0x94>)
 8011700:	2202      	movs	r2, #2
 8011702:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011704:	4b17      	ldr	r3, [pc, #92]	; (8011764 <USBD_LL_Init+0x94>)
 8011706:	2200      	movs	r2, #0
 8011708:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801170a:	4b16      	ldr	r3, [pc, #88]	; (8011764 <USBD_LL_Init+0x94>)
 801170c:	2202      	movs	r2, #2
 801170e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011710:	4b14      	ldr	r3, [pc, #80]	; (8011764 <USBD_LL_Init+0x94>)
 8011712:	2200      	movs	r2, #0
 8011714:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011716:	4b13      	ldr	r3, [pc, #76]	; (8011764 <USBD_LL_Init+0x94>)
 8011718:	2200      	movs	r2, #0
 801171a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801171c:	4b11      	ldr	r3, [pc, #68]	; (8011764 <USBD_LL_Init+0x94>)
 801171e:	2200      	movs	r2, #0
 8011720:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011722:	4b10      	ldr	r3, [pc, #64]	; (8011764 <USBD_LL_Init+0x94>)
 8011724:	2200      	movs	r2, #0
 8011726:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011728:	4b0e      	ldr	r3, [pc, #56]	; (8011764 <USBD_LL_Init+0x94>)
 801172a:	2200      	movs	r2, #0
 801172c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801172e:	480d      	ldr	r0, [pc, #52]	; (8011764 <USBD_LL_Init+0x94>)
 8011730:	f7f1 ff6b 	bl	800360a <HAL_PCD_Init>
 8011734:	4603      	mov	r3, r0
 8011736:	2b00      	cmp	r3, #0
 8011738:	d001      	beq.n	801173e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801173a:	f7ef fcb9 	bl	80010b0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801173e:	2180      	movs	r1, #128	; 0x80
 8011740:	4808      	ldr	r0, [pc, #32]	; (8011764 <USBD_LL_Init+0x94>)
 8011742:	f7f3 f9e6 	bl	8004b12 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011746:	2240      	movs	r2, #64	; 0x40
 8011748:	2100      	movs	r1, #0
 801174a:	4806      	ldr	r0, [pc, #24]	; (8011764 <USBD_LL_Init+0x94>)
 801174c:	f7f3 f99a 	bl	8004a84 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011750:	2280      	movs	r2, #128	; 0x80
 8011752:	2101      	movs	r1, #1
 8011754:	4803      	ldr	r0, [pc, #12]	; (8011764 <USBD_LL_Init+0x94>)
 8011756:	f7f3 f995 	bl	8004a84 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801175a:	2300      	movs	r3, #0
}
 801175c:	4618      	mov	r0, r3
 801175e:	3708      	adds	r7, #8
 8011760:	46bd      	mov	sp, r7
 8011762:	bd80      	pop	{r7, pc}
 8011764:	20006d6c 	.word	0x20006d6c

08011768 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b084      	sub	sp, #16
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011770:	2300      	movs	r3, #0
 8011772:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011774:	2300      	movs	r3, #0
 8011776:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801177e:	4618      	mov	r0, r3
 8011780:	f7f2 f867 	bl	8003852 <HAL_PCD_Start>
 8011784:	4603      	mov	r3, r0
 8011786:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011788:	7bfb      	ldrb	r3, [r7, #15]
 801178a:	4618      	mov	r0, r3
 801178c:	f000 f97e 	bl	8011a8c <USBD_Get_USB_Status>
 8011790:	4603      	mov	r3, r0
 8011792:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011794:	7bbb      	ldrb	r3, [r7, #14]
}
 8011796:	4618      	mov	r0, r3
 8011798:	3710      	adds	r7, #16
 801179a:	46bd      	mov	sp, r7
 801179c:	bd80      	pop	{r7, pc}

0801179e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801179e:	b580      	push	{r7, lr}
 80117a0:	b084      	sub	sp, #16
 80117a2:	af00      	add	r7, sp, #0
 80117a4:	6078      	str	r0, [r7, #4]
 80117a6:	4608      	mov	r0, r1
 80117a8:	4611      	mov	r1, r2
 80117aa:	461a      	mov	r2, r3
 80117ac:	4603      	mov	r3, r0
 80117ae:	70fb      	strb	r3, [r7, #3]
 80117b0:	460b      	mov	r3, r1
 80117b2:	70bb      	strb	r3, [r7, #2]
 80117b4:	4613      	mov	r3, r2
 80117b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80117b8:	2300      	movs	r3, #0
 80117ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80117bc:	2300      	movs	r3, #0
 80117be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80117c6:	78bb      	ldrb	r3, [r7, #2]
 80117c8:	883a      	ldrh	r2, [r7, #0]
 80117ca:	78f9      	ldrb	r1, [r7, #3]
 80117cc:	f7f2 fd54 	bl	8004278 <HAL_PCD_EP_Open>
 80117d0:	4603      	mov	r3, r0
 80117d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80117d4:	7bfb      	ldrb	r3, [r7, #15]
 80117d6:	4618      	mov	r0, r3
 80117d8:	f000 f958 	bl	8011a8c <USBD_Get_USB_Status>
 80117dc:	4603      	mov	r3, r0
 80117de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80117e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80117e2:	4618      	mov	r0, r3
 80117e4:	3710      	adds	r7, #16
 80117e6:	46bd      	mov	sp, r7
 80117e8:	bd80      	pop	{r7, pc}

080117ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80117ea:	b580      	push	{r7, lr}
 80117ec:	b084      	sub	sp, #16
 80117ee:	af00      	add	r7, sp, #0
 80117f0:	6078      	str	r0, [r7, #4]
 80117f2:	460b      	mov	r3, r1
 80117f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80117f6:	2300      	movs	r3, #0
 80117f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80117fa:	2300      	movs	r3, #0
 80117fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011804:	78fa      	ldrb	r2, [r7, #3]
 8011806:	4611      	mov	r1, r2
 8011808:	4618      	mov	r0, r3
 801180a:	f7f2 fd9d 	bl	8004348 <HAL_PCD_EP_Close>
 801180e:	4603      	mov	r3, r0
 8011810:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011812:	7bfb      	ldrb	r3, [r7, #15]
 8011814:	4618      	mov	r0, r3
 8011816:	f000 f939 	bl	8011a8c <USBD_Get_USB_Status>
 801181a:	4603      	mov	r3, r0
 801181c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801181e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011820:	4618      	mov	r0, r3
 8011822:	3710      	adds	r7, #16
 8011824:	46bd      	mov	sp, r7
 8011826:	bd80      	pop	{r7, pc}

08011828 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b084      	sub	sp, #16
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
 8011830:	460b      	mov	r3, r1
 8011832:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011834:	2300      	movs	r3, #0
 8011836:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011838:	2300      	movs	r3, #0
 801183a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011842:	78fa      	ldrb	r2, [r7, #3]
 8011844:	4611      	mov	r1, r2
 8011846:	4618      	mov	r0, r3
 8011848:	f7f2 fe75 	bl	8004536 <HAL_PCD_EP_SetStall>
 801184c:	4603      	mov	r3, r0
 801184e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011850:	7bfb      	ldrb	r3, [r7, #15]
 8011852:	4618      	mov	r0, r3
 8011854:	f000 f91a 	bl	8011a8c <USBD_Get_USB_Status>
 8011858:	4603      	mov	r3, r0
 801185a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801185c:	7bbb      	ldrb	r3, [r7, #14]
}
 801185e:	4618      	mov	r0, r3
 8011860:	3710      	adds	r7, #16
 8011862:	46bd      	mov	sp, r7
 8011864:	bd80      	pop	{r7, pc}

08011866 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011866:	b580      	push	{r7, lr}
 8011868:	b084      	sub	sp, #16
 801186a:	af00      	add	r7, sp, #0
 801186c:	6078      	str	r0, [r7, #4]
 801186e:	460b      	mov	r3, r1
 8011870:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011872:	2300      	movs	r3, #0
 8011874:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011876:	2300      	movs	r3, #0
 8011878:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011880:	78fa      	ldrb	r2, [r7, #3]
 8011882:	4611      	mov	r1, r2
 8011884:	4618      	mov	r0, r3
 8011886:	f7f2 feba 	bl	80045fe <HAL_PCD_EP_ClrStall>
 801188a:	4603      	mov	r3, r0
 801188c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801188e:	7bfb      	ldrb	r3, [r7, #15]
 8011890:	4618      	mov	r0, r3
 8011892:	f000 f8fb 	bl	8011a8c <USBD_Get_USB_Status>
 8011896:	4603      	mov	r3, r0
 8011898:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801189a:	7bbb      	ldrb	r3, [r7, #14]
}
 801189c:	4618      	mov	r0, r3
 801189e:	3710      	adds	r7, #16
 80118a0:	46bd      	mov	sp, r7
 80118a2:	bd80      	pop	{r7, pc}

080118a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80118a4:	b480      	push	{r7}
 80118a6:	b085      	sub	sp, #20
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
 80118ac:	460b      	mov	r3, r1
 80118ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80118b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80118b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	da0b      	bge.n	80118d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80118c0:	78fb      	ldrb	r3, [r7, #3]
 80118c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80118c6:	68f9      	ldr	r1, [r7, #12]
 80118c8:	4613      	mov	r3, r2
 80118ca:	00db      	lsls	r3, r3, #3
 80118cc:	4413      	add	r3, r2
 80118ce:	009b      	lsls	r3, r3, #2
 80118d0:	440b      	add	r3, r1
 80118d2:	333e      	adds	r3, #62	; 0x3e
 80118d4:	781b      	ldrb	r3, [r3, #0]
 80118d6:	e00b      	b.n	80118f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80118d8:	78fb      	ldrb	r3, [r7, #3]
 80118da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80118de:	68f9      	ldr	r1, [r7, #12]
 80118e0:	4613      	mov	r3, r2
 80118e2:	00db      	lsls	r3, r3, #3
 80118e4:	4413      	add	r3, r2
 80118e6:	009b      	lsls	r3, r3, #2
 80118e8:	440b      	add	r3, r1
 80118ea:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80118ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 80118f0:	4618      	mov	r0, r3
 80118f2:	3714      	adds	r7, #20
 80118f4:	46bd      	mov	sp, r7
 80118f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fa:	4770      	bx	lr

080118fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b084      	sub	sp, #16
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
 8011904:	460b      	mov	r3, r1
 8011906:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011908:	2300      	movs	r3, #0
 801190a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801190c:	2300      	movs	r3, #0
 801190e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011916:	78fa      	ldrb	r2, [r7, #3]
 8011918:	4611      	mov	r1, r2
 801191a:	4618      	mov	r0, r3
 801191c:	f7f2 fc87 	bl	800422e <HAL_PCD_SetAddress>
 8011920:	4603      	mov	r3, r0
 8011922:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011924:	7bfb      	ldrb	r3, [r7, #15]
 8011926:	4618      	mov	r0, r3
 8011928:	f000 f8b0 	bl	8011a8c <USBD_Get_USB_Status>
 801192c:	4603      	mov	r3, r0
 801192e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011930:	7bbb      	ldrb	r3, [r7, #14]
}
 8011932:	4618      	mov	r0, r3
 8011934:	3710      	adds	r7, #16
 8011936:	46bd      	mov	sp, r7
 8011938:	bd80      	pop	{r7, pc}

0801193a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801193a:	b580      	push	{r7, lr}
 801193c:	b086      	sub	sp, #24
 801193e:	af00      	add	r7, sp, #0
 8011940:	60f8      	str	r0, [r7, #12]
 8011942:	607a      	str	r2, [r7, #4]
 8011944:	603b      	str	r3, [r7, #0]
 8011946:	460b      	mov	r3, r1
 8011948:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801194a:	2300      	movs	r3, #0
 801194c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801194e:	2300      	movs	r3, #0
 8011950:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011958:	7af9      	ldrb	r1, [r7, #11]
 801195a:	683b      	ldr	r3, [r7, #0]
 801195c:	687a      	ldr	r2, [r7, #4]
 801195e:	f7f2 fda0 	bl	80044a2 <HAL_PCD_EP_Transmit>
 8011962:	4603      	mov	r3, r0
 8011964:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011966:	7dfb      	ldrb	r3, [r7, #23]
 8011968:	4618      	mov	r0, r3
 801196a:	f000 f88f 	bl	8011a8c <USBD_Get_USB_Status>
 801196e:	4603      	mov	r3, r0
 8011970:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011972:	7dbb      	ldrb	r3, [r7, #22]
}
 8011974:	4618      	mov	r0, r3
 8011976:	3718      	adds	r7, #24
 8011978:	46bd      	mov	sp, r7
 801197a:	bd80      	pop	{r7, pc}

0801197c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801197c:	b580      	push	{r7, lr}
 801197e:	b086      	sub	sp, #24
 8011980:	af00      	add	r7, sp, #0
 8011982:	60f8      	str	r0, [r7, #12]
 8011984:	607a      	str	r2, [r7, #4]
 8011986:	603b      	str	r3, [r7, #0]
 8011988:	460b      	mov	r3, r1
 801198a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801198c:	2300      	movs	r3, #0
 801198e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011990:	2300      	movs	r3, #0
 8011992:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801199a:	7af9      	ldrb	r1, [r7, #11]
 801199c:	683b      	ldr	r3, [r7, #0]
 801199e:	687a      	ldr	r2, [r7, #4]
 80119a0:	f7f2 fd1c 	bl	80043dc <HAL_PCD_EP_Receive>
 80119a4:	4603      	mov	r3, r0
 80119a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80119a8:	7dfb      	ldrb	r3, [r7, #23]
 80119aa:	4618      	mov	r0, r3
 80119ac:	f000 f86e 	bl	8011a8c <USBD_Get_USB_Status>
 80119b0:	4603      	mov	r3, r0
 80119b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80119b4:	7dbb      	ldrb	r3, [r7, #22]
}
 80119b6:	4618      	mov	r0, r3
 80119b8:	3718      	adds	r7, #24
 80119ba:	46bd      	mov	sp, r7
 80119bc:	bd80      	pop	{r7, pc}

080119be <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80119be:	b580      	push	{r7, lr}
 80119c0:	b082      	sub	sp, #8
 80119c2:	af00      	add	r7, sp, #0
 80119c4:	6078      	str	r0, [r7, #4]
 80119c6:	460b      	mov	r3, r1
 80119c8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80119d0:	78fa      	ldrb	r2, [r7, #3]
 80119d2:	4611      	mov	r1, r2
 80119d4:	4618      	mov	r0, r3
 80119d6:	f7f2 fd4c 	bl	8004472 <HAL_PCD_EP_GetRxCount>
 80119da:	4603      	mov	r3, r0
}
 80119dc:	4618      	mov	r0, r3
 80119de:	3708      	adds	r7, #8
 80119e0:	46bd      	mov	sp, r7
 80119e2:	bd80      	pop	{r7, pc}

080119e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b082      	sub	sp, #8
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	6078      	str	r0, [r7, #4]
 80119ec:	460b      	mov	r3, r1
 80119ee:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80119f0:	78fb      	ldrb	r3, [r7, #3]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d002      	beq.n	80119fc <HAL_PCDEx_LPM_Callback+0x18>
 80119f6:	2b01      	cmp	r3, #1
 80119f8:	d01f      	beq.n	8011a3a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80119fa:	e03b      	b.n	8011a74 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	6a1b      	ldr	r3, [r3, #32]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d007      	beq.n	8011a14 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011a04:	f000 f83c 	bl	8011a80 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011a08:	4b1c      	ldr	r3, [pc, #112]	; (8011a7c <HAL_PCDEx_LPM_Callback+0x98>)
 8011a0a:	691b      	ldr	r3, [r3, #16]
 8011a0c:	4a1b      	ldr	r2, [pc, #108]	; (8011a7c <HAL_PCDEx_LPM_Callback+0x98>)
 8011a0e:	f023 0306 	bic.w	r3, r3, #6
 8011a12:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	687a      	ldr	r2, [r7, #4]
 8011a20:	6812      	ldr	r2, [r2, #0]
 8011a22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011a26:	f023 0301 	bic.w	r3, r3, #1
 8011a2a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011a32:	4618      	mov	r0, r3
 8011a34:	f7fa fd69 	bl	800c50a <USBD_LL_Resume>
    break;
 8011a38:	e01c      	b.n	8011a74 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	687a      	ldr	r2, [r7, #4]
 8011a46:	6812      	ldr	r2, [r2, #0]
 8011a48:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011a4c:	f043 0301 	orr.w	r3, r3, #1
 8011a50:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011a58:	4618      	mov	r0, r3
 8011a5a:	f7fa fd40 	bl	800c4de <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	6a1b      	ldr	r3, [r3, #32]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d005      	beq.n	8011a72 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011a66:	4b05      	ldr	r3, [pc, #20]	; (8011a7c <HAL_PCDEx_LPM_Callback+0x98>)
 8011a68:	691b      	ldr	r3, [r3, #16]
 8011a6a:	4a04      	ldr	r2, [pc, #16]	; (8011a7c <HAL_PCDEx_LPM_Callback+0x98>)
 8011a6c:	f043 0306 	orr.w	r3, r3, #6
 8011a70:	6113      	str	r3, [r2, #16]
    break;
 8011a72:	bf00      	nop
}
 8011a74:	bf00      	nop
 8011a76:	3708      	adds	r7, #8
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}
 8011a7c:	e000ed00 	.word	0xe000ed00

08011a80 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8011a84:	f7ee fe68 	bl	8000758 <SystemClock_Config>
}
 8011a88:	bf00      	nop
 8011a8a:	bd80      	pop	{r7, pc}

08011a8c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011a8c:	b480      	push	{r7}
 8011a8e:	b085      	sub	sp, #20
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	4603      	mov	r3, r0
 8011a94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a96:	2300      	movs	r3, #0
 8011a98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011a9a:	79fb      	ldrb	r3, [r7, #7]
 8011a9c:	2b03      	cmp	r3, #3
 8011a9e:	d817      	bhi.n	8011ad0 <USBD_Get_USB_Status+0x44>
 8011aa0:	a201      	add	r2, pc, #4	; (adr r2, 8011aa8 <USBD_Get_USB_Status+0x1c>)
 8011aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011aa6:	bf00      	nop
 8011aa8:	08011ab9 	.word	0x08011ab9
 8011aac:	08011abf 	.word	0x08011abf
 8011ab0:	08011ac5 	.word	0x08011ac5
 8011ab4:	08011acb 	.word	0x08011acb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011ab8:	2300      	movs	r3, #0
 8011aba:	73fb      	strb	r3, [r7, #15]
    break;
 8011abc:	e00b      	b.n	8011ad6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011abe:	2303      	movs	r3, #3
 8011ac0:	73fb      	strb	r3, [r7, #15]
    break;
 8011ac2:	e008      	b.n	8011ad6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011ac4:	2301      	movs	r3, #1
 8011ac6:	73fb      	strb	r3, [r7, #15]
    break;
 8011ac8:	e005      	b.n	8011ad6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011aca:	2303      	movs	r3, #3
 8011acc:	73fb      	strb	r3, [r7, #15]
    break;
 8011ace:	e002      	b.n	8011ad6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011ad0:	2303      	movs	r3, #3
 8011ad2:	73fb      	strb	r3, [r7, #15]
    break;
 8011ad4:	bf00      	nop
  }
  return usb_status;
 8011ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ad8:	4618      	mov	r0, r3
 8011ada:	3714      	adds	r7, #20
 8011adc:	46bd      	mov	sp, r7
 8011ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae2:	4770      	bx	lr

08011ae4 <__errno>:
 8011ae4:	4b01      	ldr	r3, [pc, #4]	; (8011aec <__errno+0x8>)
 8011ae6:	6818      	ldr	r0, [r3, #0]
 8011ae8:	4770      	bx	lr
 8011aea:	bf00      	nop
 8011aec:	20000190 	.word	0x20000190

08011af0 <__libc_init_array>:
 8011af0:	b570      	push	{r4, r5, r6, lr}
 8011af2:	4d0d      	ldr	r5, [pc, #52]	; (8011b28 <__libc_init_array+0x38>)
 8011af4:	4c0d      	ldr	r4, [pc, #52]	; (8011b2c <__libc_init_array+0x3c>)
 8011af6:	1b64      	subs	r4, r4, r5
 8011af8:	10a4      	asrs	r4, r4, #2
 8011afa:	2600      	movs	r6, #0
 8011afc:	42a6      	cmp	r6, r4
 8011afe:	d109      	bne.n	8011b14 <__libc_init_array+0x24>
 8011b00:	4d0b      	ldr	r5, [pc, #44]	; (8011b30 <__libc_init_array+0x40>)
 8011b02:	4c0c      	ldr	r4, [pc, #48]	; (8011b34 <__libc_init_array+0x44>)
 8011b04:	f000 f9a6 	bl	8011e54 <_init>
 8011b08:	1b64      	subs	r4, r4, r5
 8011b0a:	10a4      	asrs	r4, r4, #2
 8011b0c:	2600      	movs	r6, #0
 8011b0e:	42a6      	cmp	r6, r4
 8011b10:	d105      	bne.n	8011b1e <__libc_init_array+0x2e>
 8011b12:	bd70      	pop	{r4, r5, r6, pc}
 8011b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b18:	4798      	blx	r3
 8011b1a:	3601      	adds	r6, #1
 8011b1c:	e7ee      	b.n	8011afc <__libc_init_array+0xc>
 8011b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b22:	4798      	blx	r3
 8011b24:	3601      	adds	r6, #1
 8011b26:	e7f2      	b.n	8011b0e <__libc_init_array+0x1e>
 8011b28:	08012068 	.word	0x08012068
 8011b2c:	08012068 	.word	0x08012068
 8011b30:	08012068 	.word	0x08012068
 8011b34:	0801206c 	.word	0x0801206c

08011b38 <__retarget_lock_acquire_recursive>:
 8011b38:	4770      	bx	lr

08011b3a <__retarget_lock_release_recursive>:
 8011b3a:	4770      	bx	lr

08011b3c <malloc>:
 8011b3c:	4b02      	ldr	r3, [pc, #8]	; (8011b48 <malloc+0xc>)
 8011b3e:	4601      	mov	r1, r0
 8011b40:	6818      	ldr	r0, [r3, #0]
 8011b42:	f000 b88d 	b.w	8011c60 <_malloc_r>
 8011b46:	bf00      	nop
 8011b48:	20000190 	.word	0x20000190

08011b4c <free>:
 8011b4c:	4b02      	ldr	r3, [pc, #8]	; (8011b58 <free+0xc>)
 8011b4e:	4601      	mov	r1, r0
 8011b50:	6818      	ldr	r0, [r3, #0]
 8011b52:	f000 b819 	b.w	8011b88 <_free_r>
 8011b56:	bf00      	nop
 8011b58:	20000190 	.word	0x20000190

08011b5c <memcpy>:
 8011b5c:	440a      	add	r2, r1
 8011b5e:	4291      	cmp	r1, r2
 8011b60:	f100 33ff 	add.w	r3, r0, #4294967295
 8011b64:	d100      	bne.n	8011b68 <memcpy+0xc>
 8011b66:	4770      	bx	lr
 8011b68:	b510      	push	{r4, lr}
 8011b6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011b6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011b72:	4291      	cmp	r1, r2
 8011b74:	d1f9      	bne.n	8011b6a <memcpy+0xe>
 8011b76:	bd10      	pop	{r4, pc}

08011b78 <memset>:
 8011b78:	4402      	add	r2, r0
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	4293      	cmp	r3, r2
 8011b7e:	d100      	bne.n	8011b82 <memset+0xa>
 8011b80:	4770      	bx	lr
 8011b82:	f803 1b01 	strb.w	r1, [r3], #1
 8011b86:	e7f9      	b.n	8011b7c <memset+0x4>

08011b88 <_free_r>:
 8011b88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011b8a:	2900      	cmp	r1, #0
 8011b8c:	d044      	beq.n	8011c18 <_free_r+0x90>
 8011b8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b92:	9001      	str	r0, [sp, #4]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	f1a1 0404 	sub.w	r4, r1, #4
 8011b9a:	bfb8      	it	lt
 8011b9c:	18e4      	addlt	r4, r4, r3
 8011b9e:	f000 f94d 	bl	8011e3c <__malloc_lock>
 8011ba2:	4a1e      	ldr	r2, [pc, #120]	; (8011c1c <_free_r+0x94>)
 8011ba4:	9801      	ldr	r0, [sp, #4]
 8011ba6:	6813      	ldr	r3, [r2, #0]
 8011ba8:	b933      	cbnz	r3, 8011bb8 <_free_r+0x30>
 8011baa:	6063      	str	r3, [r4, #4]
 8011bac:	6014      	str	r4, [r2, #0]
 8011bae:	b003      	add	sp, #12
 8011bb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011bb4:	f000 b948 	b.w	8011e48 <__malloc_unlock>
 8011bb8:	42a3      	cmp	r3, r4
 8011bba:	d908      	bls.n	8011bce <_free_r+0x46>
 8011bbc:	6825      	ldr	r5, [r4, #0]
 8011bbe:	1961      	adds	r1, r4, r5
 8011bc0:	428b      	cmp	r3, r1
 8011bc2:	bf01      	itttt	eq
 8011bc4:	6819      	ldreq	r1, [r3, #0]
 8011bc6:	685b      	ldreq	r3, [r3, #4]
 8011bc8:	1949      	addeq	r1, r1, r5
 8011bca:	6021      	streq	r1, [r4, #0]
 8011bcc:	e7ed      	b.n	8011baa <_free_r+0x22>
 8011bce:	461a      	mov	r2, r3
 8011bd0:	685b      	ldr	r3, [r3, #4]
 8011bd2:	b10b      	cbz	r3, 8011bd8 <_free_r+0x50>
 8011bd4:	42a3      	cmp	r3, r4
 8011bd6:	d9fa      	bls.n	8011bce <_free_r+0x46>
 8011bd8:	6811      	ldr	r1, [r2, #0]
 8011bda:	1855      	adds	r5, r2, r1
 8011bdc:	42a5      	cmp	r5, r4
 8011bde:	d10b      	bne.n	8011bf8 <_free_r+0x70>
 8011be0:	6824      	ldr	r4, [r4, #0]
 8011be2:	4421      	add	r1, r4
 8011be4:	1854      	adds	r4, r2, r1
 8011be6:	42a3      	cmp	r3, r4
 8011be8:	6011      	str	r1, [r2, #0]
 8011bea:	d1e0      	bne.n	8011bae <_free_r+0x26>
 8011bec:	681c      	ldr	r4, [r3, #0]
 8011bee:	685b      	ldr	r3, [r3, #4]
 8011bf0:	6053      	str	r3, [r2, #4]
 8011bf2:	4421      	add	r1, r4
 8011bf4:	6011      	str	r1, [r2, #0]
 8011bf6:	e7da      	b.n	8011bae <_free_r+0x26>
 8011bf8:	d902      	bls.n	8011c00 <_free_r+0x78>
 8011bfa:	230c      	movs	r3, #12
 8011bfc:	6003      	str	r3, [r0, #0]
 8011bfe:	e7d6      	b.n	8011bae <_free_r+0x26>
 8011c00:	6825      	ldr	r5, [r4, #0]
 8011c02:	1961      	adds	r1, r4, r5
 8011c04:	428b      	cmp	r3, r1
 8011c06:	bf04      	itt	eq
 8011c08:	6819      	ldreq	r1, [r3, #0]
 8011c0a:	685b      	ldreq	r3, [r3, #4]
 8011c0c:	6063      	str	r3, [r4, #4]
 8011c0e:	bf04      	itt	eq
 8011c10:	1949      	addeq	r1, r1, r5
 8011c12:	6021      	streq	r1, [r4, #0]
 8011c14:	6054      	str	r4, [r2, #4]
 8011c16:	e7ca      	b.n	8011bae <_free_r+0x26>
 8011c18:	b003      	add	sp, #12
 8011c1a:	bd30      	pop	{r4, r5, pc}
 8011c1c:	20007278 	.word	0x20007278

08011c20 <sbrk_aligned>:
 8011c20:	b570      	push	{r4, r5, r6, lr}
 8011c22:	4e0e      	ldr	r6, [pc, #56]	; (8011c5c <sbrk_aligned+0x3c>)
 8011c24:	460c      	mov	r4, r1
 8011c26:	6831      	ldr	r1, [r6, #0]
 8011c28:	4605      	mov	r5, r0
 8011c2a:	b911      	cbnz	r1, 8011c32 <sbrk_aligned+0x12>
 8011c2c:	f000 f8f6 	bl	8011e1c <_sbrk_r>
 8011c30:	6030      	str	r0, [r6, #0]
 8011c32:	4621      	mov	r1, r4
 8011c34:	4628      	mov	r0, r5
 8011c36:	f000 f8f1 	bl	8011e1c <_sbrk_r>
 8011c3a:	1c43      	adds	r3, r0, #1
 8011c3c:	d00a      	beq.n	8011c54 <sbrk_aligned+0x34>
 8011c3e:	1cc4      	adds	r4, r0, #3
 8011c40:	f024 0403 	bic.w	r4, r4, #3
 8011c44:	42a0      	cmp	r0, r4
 8011c46:	d007      	beq.n	8011c58 <sbrk_aligned+0x38>
 8011c48:	1a21      	subs	r1, r4, r0
 8011c4a:	4628      	mov	r0, r5
 8011c4c:	f000 f8e6 	bl	8011e1c <_sbrk_r>
 8011c50:	3001      	adds	r0, #1
 8011c52:	d101      	bne.n	8011c58 <sbrk_aligned+0x38>
 8011c54:	f04f 34ff 	mov.w	r4, #4294967295
 8011c58:	4620      	mov	r0, r4
 8011c5a:	bd70      	pop	{r4, r5, r6, pc}
 8011c5c:	2000727c 	.word	0x2000727c

08011c60 <_malloc_r>:
 8011c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c64:	1ccd      	adds	r5, r1, #3
 8011c66:	f025 0503 	bic.w	r5, r5, #3
 8011c6a:	3508      	adds	r5, #8
 8011c6c:	2d0c      	cmp	r5, #12
 8011c6e:	bf38      	it	cc
 8011c70:	250c      	movcc	r5, #12
 8011c72:	2d00      	cmp	r5, #0
 8011c74:	4607      	mov	r7, r0
 8011c76:	db01      	blt.n	8011c7c <_malloc_r+0x1c>
 8011c78:	42a9      	cmp	r1, r5
 8011c7a:	d905      	bls.n	8011c88 <_malloc_r+0x28>
 8011c7c:	230c      	movs	r3, #12
 8011c7e:	603b      	str	r3, [r7, #0]
 8011c80:	2600      	movs	r6, #0
 8011c82:	4630      	mov	r0, r6
 8011c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c88:	4e2e      	ldr	r6, [pc, #184]	; (8011d44 <_malloc_r+0xe4>)
 8011c8a:	f000 f8d7 	bl	8011e3c <__malloc_lock>
 8011c8e:	6833      	ldr	r3, [r6, #0]
 8011c90:	461c      	mov	r4, r3
 8011c92:	bb34      	cbnz	r4, 8011ce2 <_malloc_r+0x82>
 8011c94:	4629      	mov	r1, r5
 8011c96:	4638      	mov	r0, r7
 8011c98:	f7ff ffc2 	bl	8011c20 <sbrk_aligned>
 8011c9c:	1c43      	adds	r3, r0, #1
 8011c9e:	4604      	mov	r4, r0
 8011ca0:	d14d      	bne.n	8011d3e <_malloc_r+0xde>
 8011ca2:	6834      	ldr	r4, [r6, #0]
 8011ca4:	4626      	mov	r6, r4
 8011ca6:	2e00      	cmp	r6, #0
 8011ca8:	d140      	bne.n	8011d2c <_malloc_r+0xcc>
 8011caa:	6823      	ldr	r3, [r4, #0]
 8011cac:	4631      	mov	r1, r6
 8011cae:	4638      	mov	r0, r7
 8011cb0:	eb04 0803 	add.w	r8, r4, r3
 8011cb4:	f000 f8b2 	bl	8011e1c <_sbrk_r>
 8011cb8:	4580      	cmp	r8, r0
 8011cba:	d13a      	bne.n	8011d32 <_malloc_r+0xd2>
 8011cbc:	6821      	ldr	r1, [r4, #0]
 8011cbe:	3503      	adds	r5, #3
 8011cc0:	1a6d      	subs	r5, r5, r1
 8011cc2:	f025 0503 	bic.w	r5, r5, #3
 8011cc6:	3508      	adds	r5, #8
 8011cc8:	2d0c      	cmp	r5, #12
 8011cca:	bf38      	it	cc
 8011ccc:	250c      	movcc	r5, #12
 8011cce:	4629      	mov	r1, r5
 8011cd0:	4638      	mov	r0, r7
 8011cd2:	f7ff ffa5 	bl	8011c20 <sbrk_aligned>
 8011cd6:	3001      	adds	r0, #1
 8011cd8:	d02b      	beq.n	8011d32 <_malloc_r+0xd2>
 8011cda:	6823      	ldr	r3, [r4, #0]
 8011cdc:	442b      	add	r3, r5
 8011cde:	6023      	str	r3, [r4, #0]
 8011ce0:	e00e      	b.n	8011d00 <_malloc_r+0xa0>
 8011ce2:	6822      	ldr	r2, [r4, #0]
 8011ce4:	1b52      	subs	r2, r2, r5
 8011ce6:	d41e      	bmi.n	8011d26 <_malloc_r+0xc6>
 8011ce8:	2a0b      	cmp	r2, #11
 8011cea:	d916      	bls.n	8011d1a <_malloc_r+0xba>
 8011cec:	1961      	adds	r1, r4, r5
 8011cee:	42a3      	cmp	r3, r4
 8011cf0:	6025      	str	r5, [r4, #0]
 8011cf2:	bf18      	it	ne
 8011cf4:	6059      	strne	r1, [r3, #4]
 8011cf6:	6863      	ldr	r3, [r4, #4]
 8011cf8:	bf08      	it	eq
 8011cfa:	6031      	streq	r1, [r6, #0]
 8011cfc:	5162      	str	r2, [r4, r5]
 8011cfe:	604b      	str	r3, [r1, #4]
 8011d00:	4638      	mov	r0, r7
 8011d02:	f104 060b 	add.w	r6, r4, #11
 8011d06:	f000 f89f 	bl	8011e48 <__malloc_unlock>
 8011d0a:	f026 0607 	bic.w	r6, r6, #7
 8011d0e:	1d23      	adds	r3, r4, #4
 8011d10:	1af2      	subs	r2, r6, r3
 8011d12:	d0b6      	beq.n	8011c82 <_malloc_r+0x22>
 8011d14:	1b9b      	subs	r3, r3, r6
 8011d16:	50a3      	str	r3, [r4, r2]
 8011d18:	e7b3      	b.n	8011c82 <_malloc_r+0x22>
 8011d1a:	6862      	ldr	r2, [r4, #4]
 8011d1c:	42a3      	cmp	r3, r4
 8011d1e:	bf0c      	ite	eq
 8011d20:	6032      	streq	r2, [r6, #0]
 8011d22:	605a      	strne	r2, [r3, #4]
 8011d24:	e7ec      	b.n	8011d00 <_malloc_r+0xa0>
 8011d26:	4623      	mov	r3, r4
 8011d28:	6864      	ldr	r4, [r4, #4]
 8011d2a:	e7b2      	b.n	8011c92 <_malloc_r+0x32>
 8011d2c:	4634      	mov	r4, r6
 8011d2e:	6876      	ldr	r6, [r6, #4]
 8011d30:	e7b9      	b.n	8011ca6 <_malloc_r+0x46>
 8011d32:	230c      	movs	r3, #12
 8011d34:	603b      	str	r3, [r7, #0]
 8011d36:	4638      	mov	r0, r7
 8011d38:	f000 f886 	bl	8011e48 <__malloc_unlock>
 8011d3c:	e7a1      	b.n	8011c82 <_malloc_r+0x22>
 8011d3e:	6025      	str	r5, [r4, #0]
 8011d40:	e7de      	b.n	8011d00 <_malloc_r+0xa0>
 8011d42:	bf00      	nop
 8011d44:	20007278 	.word	0x20007278

08011d48 <cleanup_glue>:
 8011d48:	b538      	push	{r3, r4, r5, lr}
 8011d4a:	460c      	mov	r4, r1
 8011d4c:	6809      	ldr	r1, [r1, #0]
 8011d4e:	4605      	mov	r5, r0
 8011d50:	b109      	cbz	r1, 8011d56 <cleanup_glue+0xe>
 8011d52:	f7ff fff9 	bl	8011d48 <cleanup_glue>
 8011d56:	4621      	mov	r1, r4
 8011d58:	4628      	mov	r0, r5
 8011d5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d5e:	f7ff bf13 	b.w	8011b88 <_free_r>
	...

08011d64 <_reclaim_reent>:
 8011d64:	4b2c      	ldr	r3, [pc, #176]	; (8011e18 <_reclaim_reent+0xb4>)
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	4283      	cmp	r3, r0
 8011d6a:	b570      	push	{r4, r5, r6, lr}
 8011d6c:	4604      	mov	r4, r0
 8011d6e:	d051      	beq.n	8011e14 <_reclaim_reent+0xb0>
 8011d70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011d72:	b143      	cbz	r3, 8011d86 <_reclaim_reent+0x22>
 8011d74:	68db      	ldr	r3, [r3, #12]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d14a      	bne.n	8011e10 <_reclaim_reent+0xac>
 8011d7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011d7c:	6819      	ldr	r1, [r3, #0]
 8011d7e:	b111      	cbz	r1, 8011d86 <_reclaim_reent+0x22>
 8011d80:	4620      	mov	r0, r4
 8011d82:	f7ff ff01 	bl	8011b88 <_free_r>
 8011d86:	6961      	ldr	r1, [r4, #20]
 8011d88:	b111      	cbz	r1, 8011d90 <_reclaim_reent+0x2c>
 8011d8a:	4620      	mov	r0, r4
 8011d8c:	f7ff fefc 	bl	8011b88 <_free_r>
 8011d90:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011d92:	b111      	cbz	r1, 8011d9a <_reclaim_reent+0x36>
 8011d94:	4620      	mov	r0, r4
 8011d96:	f7ff fef7 	bl	8011b88 <_free_r>
 8011d9a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011d9c:	b111      	cbz	r1, 8011da4 <_reclaim_reent+0x40>
 8011d9e:	4620      	mov	r0, r4
 8011da0:	f7ff fef2 	bl	8011b88 <_free_r>
 8011da4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011da6:	b111      	cbz	r1, 8011dae <_reclaim_reent+0x4a>
 8011da8:	4620      	mov	r0, r4
 8011daa:	f7ff feed 	bl	8011b88 <_free_r>
 8011dae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011db0:	b111      	cbz	r1, 8011db8 <_reclaim_reent+0x54>
 8011db2:	4620      	mov	r0, r4
 8011db4:	f7ff fee8 	bl	8011b88 <_free_r>
 8011db8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011dba:	b111      	cbz	r1, 8011dc2 <_reclaim_reent+0x5e>
 8011dbc:	4620      	mov	r0, r4
 8011dbe:	f7ff fee3 	bl	8011b88 <_free_r>
 8011dc2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011dc4:	b111      	cbz	r1, 8011dcc <_reclaim_reent+0x68>
 8011dc6:	4620      	mov	r0, r4
 8011dc8:	f7ff fede 	bl	8011b88 <_free_r>
 8011dcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011dce:	b111      	cbz	r1, 8011dd6 <_reclaim_reent+0x72>
 8011dd0:	4620      	mov	r0, r4
 8011dd2:	f7ff fed9 	bl	8011b88 <_free_r>
 8011dd6:	69a3      	ldr	r3, [r4, #24]
 8011dd8:	b1e3      	cbz	r3, 8011e14 <_reclaim_reent+0xb0>
 8011dda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011ddc:	4620      	mov	r0, r4
 8011dde:	4798      	blx	r3
 8011de0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011de2:	b1b9      	cbz	r1, 8011e14 <_reclaim_reent+0xb0>
 8011de4:	4620      	mov	r0, r4
 8011de6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011dea:	f7ff bfad 	b.w	8011d48 <cleanup_glue>
 8011dee:	5949      	ldr	r1, [r1, r5]
 8011df0:	b941      	cbnz	r1, 8011e04 <_reclaim_reent+0xa0>
 8011df2:	3504      	adds	r5, #4
 8011df4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011df6:	2d80      	cmp	r5, #128	; 0x80
 8011df8:	68d9      	ldr	r1, [r3, #12]
 8011dfa:	d1f8      	bne.n	8011dee <_reclaim_reent+0x8a>
 8011dfc:	4620      	mov	r0, r4
 8011dfe:	f7ff fec3 	bl	8011b88 <_free_r>
 8011e02:	e7ba      	b.n	8011d7a <_reclaim_reent+0x16>
 8011e04:	680e      	ldr	r6, [r1, #0]
 8011e06:	4620      	mov	r0, r4
 8011e08:	f7ff febe 	bl	8011b88 <_free_r>
 8011e0c:	4631      	mov	r1, r6
 8011e0e:	e7ef      	b.n	8011df0 <_reclaim_reent+0x8c>
 8011e10:	2500      	movs	r5, #0
 8011e12:	e7ef      	b.n	8011df4 <_reclaim_reent+0x90>
 8011e14:	bd70      	pop	{r4, r5, r6, pc}
 8011e16:	bf00      	nop
 8011e18:	20000190 	.word	0x20000190

08011e1c <_sbrk_r>:
 8011e1c:	b538      	push	{r3, r4, r5, lr}
 8011e1e:	4d06      	ldr	r5, [pc, #24]	; (8011e38 <_sbrk_r+0x1c>)
 8011e20:	2300      	movs	r3, #0
 8011e22:	4604      	mov	r4, r0
 8011e24:	4608      	mov	r0, r1
 8011e26:	602b      	str	r3, [r5, #0]
 8011e28:	f7ef fdba 	bl	80019a0 <_sbrk>
 8011e2c:	1c43      	adds	r3, r0, #1
 8011e2e:	d102      	bne.n	8011e36 <_sbrk_r+0x1a>
 8011e30:	682b      	ldr	r3, [r5, #0]
 8011e32:	b103      	cbz	r3, 8011e36 <_sbrk_r+0x1a>
 8011e34:	6023      	str	r3, [r4, #0]
 8011e36:	bd38      	pop	{r3, r4, r5, pc}
 8011e38:	20007280 	.word	0x20007280

08011e3c <__malloc_lock>:
 8011e3c:	4801      	ldr	r0, [pc, #4]	; (8011e44 <__malloc_lock+0x8>)
 8011e3e:	f7ff be7b 	b.w	8011b38 <__retarget_lock_acquire_recursive>
 8011e42:	bf00      	nop
 8011e44:	20007274 	.word	0x20007274

08011e48 <__malloc_unlock>:
 8011e48:	4801      	ldr	r0, [pc, #4]	; (8011e50 <__malloc_unlock+0x8>)
 8011e4a:	f7ff be76 	b.w	8011b3a <__retarget_lock_release_recursive>
 8011e4e:	bf00      	nop
 8011e50:	20007274 	.word	0x20007274

08011e54 <_init>:
 8011e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e56:	bf00      	nop
 8011e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e5a:	bc08      	pop	{r3}
 8011e5c:	469e      	mov	lr, r3
 8011e5e:	4770      	bx	lr

08011e60 <_fini>:
 8011e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e62:	bf00      	nop
 8011e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e66:	bc08      	pop	{r3}
 8011e68:	469e      	mov	lr, r3
 8011e6a:	4770      	bx	lr
